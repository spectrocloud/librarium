{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Hubble APIs",
    "version": "v1"
  },
  "paths": {
    "/cluster/{uid}/manifest": {
      "get": {
        "description": "Deprecated",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's installer manifest file",
        "operationId": "v1SpectroClustersUidInstallerManifest",
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/apiKeys": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of api keys",
        "operationId": "v1ApiKeysList",
        "responses": {
          "200": {
            "description": "An array of api keys",
            "schema": {
              "$ref": "#/definitions/v1ApiKeys"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create the api key",
        "operationId": "v1ApiKeysCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ApiKeyEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/apiKeys/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified api keys",
        "operationId": "v1ApiKeysUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ApiKey"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified api keys",
        "operationId": "v1ApiKeysUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ApiKeyUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified api key",
        "operationId": "v1ApiKeysUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Activate or deactive the api key",
        "operationId": "v1ApiKeysUidActiveState",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ApiKeyActiveState"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/apiKeys/{uid}/state": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Revoke or re-activate the api key access",
        "operationId": "v1ApiKeysUidState",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ApiKeyActiveState"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/async/ops/{opsId}/status": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Retrieves the status of the async operation",
        "operationId": "V1AsyncOpsStatus",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AsyncStatus"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "opsId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/audits": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of audit logs",
        "operationId": "v1AuditsList",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "string",
            "name": "userUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "projectUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "tenantUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "resourceKind",
            "in": "query"
          },
          {
            "type": "string",
            "name": "resourceUid",
            "in": "query"
          },
          {
            "enum": [
              "create",
              "update",
              "delete",
              "publish",
              "deploy"
            ],
            "type": "string",
            "name": "actionType",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Audits"
            }
          }
        }
      }
    },
    "/v1/audits/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified audit log",
        "operationId": "v1AuditsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Audit"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/audits/{uid}/sysMsg": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the system message of the specified audit",
        "operationId": "v1AuditsUidGetSysMsg",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AuditSysMsg"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/audits/{uid}/userMsg": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified user message for the specified audit",
        "operationId": "v1AuditsUidMsgUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AuditMsgUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/auth/authenticate": {
      "post": {
        "description": "Authenticates the user",
        "tags": [
          "v1"
        ],
        "summary": "Authenticates the user for the specified crendentials",
        "operationId": "v1Authenticate",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "name": "setCookie",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AuthLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        }
      }
    },
    "/v1/auth/cookie/refresh": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Refreshes authentication token using the cookie data",
        "operationId": "v1AuthRefreshCookie",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        }
      }
    },
    "/v1/auth/login": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the authentication type for the specified user email id",
        "operationId": "v1AuthLogin",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AuthLogins"
            }
          }
        }
      }
    },
    "/v1/auth/logout": {
      "post": {
        "description": "Logs out the user",
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Logs out the user",
        "operationId": "v1AuthLogout",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1LogoutResponse"
            }
          },
          "500": {
            "description": "(empty)"
          }
        }
      }
    },
    "/v1/auth/org": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the user organization details",
        "operationId": "v1AuthOrg",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1LoginResponse"
            }
          }
        }
      }
    },
    "/v1/auth/org/{org}/oidc/callback": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Idp authorization code callback",
        "operationId": "V1OidcCallback",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "org",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "code",
          "in": "query"
        },
        {
          "type": "string",
          "name": "state",
          "in": "query"
        },
        {
          "type": "string",
          "name": "error",
          "in": "query"
        },
        {
          "type": "string",
          "name": "error_description",
          "in": "query"
        }
      ]
    },
    "/v1/auth/org/{org}/oidc/logout": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Identity provider logout url for the Oidc",
        "operationId": "V1OidcLogout",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "org",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "state",
          "in": "query"
        }
      ]
    },
    "/v1/auth/org/{org}/saml/callback": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Identity provider callback url for the SMAL authentication",
        "operationId": "V1SamlCallback",
        "parameters": [
          {
            "type": "string",
            "name": "SAMLResponse",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "org",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "authToken",
          "in": "query"
        }
      ]
    },
    "/v1/auth/org/{org}/saml/logout": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Identity provider logout url for the SMAL",
        "operationId": "V1SamlLogout",
        "parameters": [
          {
            "type": "string",
            "name": "SAMLResponse",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "org",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "authToken",
          "in": "query"
        }
      ]
    },
    "/v1/auth/org/{org}/state": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Checks the org state",
        "operationId": "v1OrgState",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1OrgState"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "org",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/auth/password/{passwordToken}/activate": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Activates the specified user password using the password token",
        "operationId": "v1PasswordActivate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "password"
              ],
              "properties": {
                "password": {
                  "type": "string",
                  "format": "password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "passwordToken",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/auth/password/{passwordToken}/reset": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Resets the user password using the password token",
        "operationId": "v1PasswordReset",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "password"
              ],
              "properties": {
                "password": {
                  "type": "string",
                  "format": "password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "passwordToken",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/auth/refresh/{token}": {
      "get": {
        "description": "Issues a new token within refresh timeout and same session id is maintained",
        "tags": [
          "v1"
        ],
        "summary": "Refreshes authentication token",
        "operationId": "v1AuthRefresh",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "boolean",
          "default": true,
          "name": "setCookie",
          "in": "query"
        },
        {
          "type": "string",
          "name": "token",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/auth/services/edge/login": {
      "post": {
        "description": "Edge service like edge, lodge can login to get the JWT for the application interactions",
        "tags": [
          "v1"
        ],
        "summary": "Edge service authentication",
        "operationId": "v1EdgeServicesLogin",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EdgeServiceLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        }
      }
    },
    "/v1/auth/services/login": {
      "post": {
        "description": "System service like ally, jet can login to get the JWT for the application interactions",
        "tags": [
          "v1"
        ],
        "summary": "System service authentication",
        "operationId": "v1SystemServicesLogin",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemServiceLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        }
      }
    },
    "/v1/auth/sso/idps": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the list of supported identity providers",
        "operationId": "V1SsoIdps",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1IdentityProviders"
            }
          }
        }
      }
    },
    "/v1/auth/syslogin": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "System admin login",
        "operationId": "V1SysLogin",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "name": "setCookie",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SysLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SysUserToken"
            }
          }
        }
      }
    },
    "/v1/auth/user/password/reset": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Resets the user password via email. Password reset email will be sent to the user",
        "operationId": "v1PasswordResetRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "emailId"
              ],
              "properties": {
                "emailId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/cache/internal/evict/kinds/{kind}/uids/{uid}": {
      "delete": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Remove by kind and uid from cache",
        "operationId": "v1CacheKindUidDelete",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "kind",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cache/internal/evict/stores/{storeName}": {
      "delete": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Remove by store name from cache",
        "operationId": "v1CacheStoreDelete",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "storeName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/aws": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS cloud accounts",
        "operationId": "v1CloudAccountsAwsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1AwsAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an AWS cloud account",
        "operationId": "v1CloudAccountsAwsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/aws/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified AWS account",
        "operationId": "v1CloudAccountsAwsGet",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "assumeCredentials",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AwsAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified AWS account",
        "operationId": "v1CloudAccountsAwsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified AWS account",
        "operationId": "v1CloudAccountsAwsDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/azure": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of azure cloud accounts",
        "operationId": "v1CloudAccountsAzureList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of azure cloud account items",
            "schema": {
              "$ref": "#/definitions/v1AzureAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create azure cloud account",
        "operationId": "v1CloudAccountsAzureCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/azure/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified azure cloud account",
        "operationId": "v1CloudAccountsAzureGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AzureAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified azure account",
        "operationId": "v1CloudAccountsAzureUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified azure account",
        "operationId": "v1CloudAccountsAzureDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/gcp": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of gcp cloud accounts",
        "operationId": "v1CloudAccountsGcpList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of gcp cloud account items",
            "schema": {
              "$ref": "#/definitions/v1GcpAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a GCP cloud account",
        "operationId": "v1CloudAccountsGcpCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpAccountEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/gcp/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified GCP cloud account",
        "operationId": "v1CloudAccountsGcpGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GcpAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified GCP account",
        "operationId": "v1CloudAccountsGcpUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpAccountEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified GCP account",
        "operationId": "v1CloudAccountsGcpDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/maas": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Maas cloud accounts",
        "operationId": "v1CloudAccountsMaasList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1MaasAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an Maas cloud account",
        "operationId": "v1CloudAccountsMaasCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/maas/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Maas account",
        "operationId": "v1CloudAccountsMaasGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1MaasAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified Maas account",
        "operationId": "v1CloudAccountsMaasUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified Maas account",
        "operationId": "v1CloudAccountsMaasDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Patches the specified CloudAccount Maas",
        "operationId": "v1CloudAccountsMaasPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CloudAccountsPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/maas/{uid}/properties/azs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the maas azs for a given account",
        "operationId": "v1MaasAccountsUidAzs",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasZones"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/maas/{uid}/properties/domains": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the maas domains for a given account",
        "operationId": "v1MaasAccountsUidDomains",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasDomains"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/maas/{uid}/properties/resourcePools": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the maas pools for a given account",
        "operationId": "v1MaasAccountsUidPools",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasPools"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/maas/{uid}/properties/subnets": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the maas subnets for a given account",
        "operationId": "v1MaasAccountsUidSubnets",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasSubnets"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/openstack": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of OpenStack cloud accounts",
        "operationId": "v1CloudAccountsOpenStackList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a OpenStack cloud account",
        "operationId": "v1CloudAccountsOpenStackCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/openstack/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified OpenStack account",
        "operationId": "v1CloudAccountsOpenStackGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified OpenStack account",
        "operationId": "v1CloudAccountsOpenStackUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified OpenStack account",
        "operationId": "v1CloudAccountsOpenStackDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/azs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the openstack azs for a given account and region",
        "operationId": "v1OpenstackAccountsUidAzs",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "query"
          },
          {
            "type": "string",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAzs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/flavors": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the openstack keypairs for a given account and scope",
        "operationId": "v1OpenstackAccountsUidFlavors",
        "parameters": [
          {
            "type": "string",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "name": "region",
            "in": "query"
          },
          {
            "type": "string",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackFlavors"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/keypairs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the openstack keypairs for a given account and scope",
        "operationId": "v1OpenstackAccountsUidKeypairs",
        "parameters": [
          {
            "type": "string",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "name": "region",
            "in": "query"
          },
          {
            "type": "string",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackKeypairs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/networks": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the openstack networks for a given account and scope",
        "operationId": "v1OpenstackAccountsUidNetworks",
        "parameters": [
          {
            "type": "string",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "name": "region",
            "in": "query"
          },
          {
            "type": "string",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackNetworks"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/projects": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the openstack projects for a given account",
        "operationId": "v1OpenstackAccountsUidProjects",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackProjects"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/regions": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the openstack regions for a given account",
        "operationId": "v1OpenstackAccountsUidRegions",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackRegions"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/summary": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cloud accounts summary",
        "operationId": "v1CloudAccountsListSummary",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account summary items",
            "schema": {
              "$ref": "#/definitions/v1CloudAccountsSummary"
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/tencent": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Tencent cloud accounts",
        "operationId": "v1CloudAccountsTencentList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1TencentAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an Tencent cloud account",
        "operationId": "v1CloudAccountsTencentCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TencentAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/tencent/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Tencent account",
        "operationId": "v1CloudAccountsTencentGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TencentAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified Tencent account",
        "operationId": "v1CloudAccountsTencentUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TencentAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified AWS account",
        "operationId": "v1CloudAccountsTencentDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/vsphere": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of vSphere cloud accounts",
        "operationId": "v1CloudAccountsVsphereList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1VsphereAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a vSphere cloud account",
        "operationId": "v1CloudAccountsVsphereCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/cloudaccounts/vsphere/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified vSphere account",
        "operationId": "v1CloudAccountsVsphereGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VsphereAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified VSphere account",
        "operationId": "v1CloudAccountsVsphereUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified vSphere account",
        "operationId": "v1CloudAccountsVsphereDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/vsphere/{uid}/properties/computecluster/resources": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the vSphere computecluster resources for the given overlord account",
        "operationId": "v1VsphereAccountsUidClusterRes",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereComputeClusterResources"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "datacenter",
          "in": "query",
          "required": true
        },
        {
          "type": "string",
          "name": "computecluster",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/cloudaccounts/vsphere/{uid}/properties/datacenters": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the vSphere datacenters \u0026 datacluster for the given overlord account",
        "operationId": "v1VsphereAccountsUidDatacenters",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereDatacenters"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aks/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified AKS cloud config",
        "operationId": "v1CloudConfigsAksGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AzureCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aks/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsAksUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aks/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an AKS cloud config's machine pool",
        "operationId": "v1CloudConfigsAksMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aks/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified AKS cloud config's machine pool",
        "operationId": "v1CloudConfigsAksMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsAksMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aks/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AKS machines",
        "operationId": "v1CloudConfigsAksPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of AKS machine items",
            "schema": {
              "$ref": "#/definitions/v1AzureMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsAksPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aks/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified AKS machine",
        "operationId": "v1CloudConfigsAksPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1CloudConfigsAksPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified Azure machine",
        "operationId": "v1CloudConfigsAksPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aws/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified AWS cloud config",
        "operationId": "v1CloudConfigsAwsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AwsCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aws/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsAwsUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aws/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an AWS cloud config's machine pool",
        "operationId": "v1CloudConfigsAwsMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified AWS cloud config's machine pool",
        "operationId": "v1CloudConfigsAwsMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsAwsMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS machines",
        "operationId": "v1CloudConfigsAwsPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of AWS machine items",
            "schema": {
              "$ref": "#/definitions/v1AwsMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsAwsPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified AWS machine",
        "operationId": "v1CloudConfigsAwsPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1CloudConfigsAwsPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified AWS machine",
        "operationId": "v1CloudConfigsAwsPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/azure/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Azure cloud config",
        "operationId": "v1CloudConfigsAzureGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AzureCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/azure/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsAzureUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/azure/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an Azure cloud config's machine pool",
        "operationId": "v1CloudConfigsAzureMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified Azure cloud config's machine pool",
        "operationId": "v1CloudConfigsAzureMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsAzureMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "description": "Returns all the Azure machines restricted to the user role and filters.",
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure machines",
        "operationId": "v1CloudConfigsAzurePoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of AWS machine items",
            "schema": {
              "$ref": "#/definitions/v1AzureMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsAzurePoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "description": "Returns a Azure machine for the specified uid.",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Azure machine",
        "operationId": "v1CloudConfigsAzurePoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsAzurePoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified Azure machine",
        "operationId": "v1CloudConfigsAzurePoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/edge/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified edge cloud config",
        "operationId": "v1CloudConfigsEdgeGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EdgeCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/edge/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsEdgeUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/edge/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a edge cloud config's machine pool",
        "operationId": "v1CloudConfigsEdgeMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/edge/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified Edge cloud config's machine pool",
        "operationId": "v1CloudConfigsEdgeMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsEdgeMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/edge/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Edge machines",
        "operationId": "v1CloudConfigsEdgePoolMachinesList",
        "responses": {
          "200": {
            "description": "An array of Edge machine items",
            "schema": {
              "$ref": "#/definitions/v1EdgeMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the Edge machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsEdgePoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/edge/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Edge machine",
        "operationId": "v1CloudConfigsEdgePoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EdgeMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsEdgePoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified Edge machine",
        "operationId": "v1CloudConfigsEdgePoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/eks/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified EKS cloud config",
        "operationId": "v1CloudConfigsEksGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EksCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/eks/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsEksUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EksCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/eks/{configUid}/fargateProfiles": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates EKS cloud config's fargate profiles",
        "operationId": "v1CloudConfigsEksUidFargateProfilesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EksFargateProfiles"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/eks/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an EKS cloud config's machine pool",
        "operationId": "v1CloudConfigsEksMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EksMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/eks/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified EKS cloud config's machine pool",
        "operationId": "v1CloudConfigsEksMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EksMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsEksMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/eks/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of EKS machines",
        "operationId": "v1CloudConfigsEksPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of EKS machine items",
            "schema": {
              "$ref": "#/definitions/v1AwsMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsEksPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/eks/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified EKS machine",
        "operationId": "v1CloudConfigsEksPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1CloudConfigsEksPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified EKS machine",
        "operationId": "v1CloudConfigsEksPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gcp/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified GCP cloud config",
        "operationId": "v1CloudConfigsGcpGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GcpCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gcp/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsGcpUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gcp/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a Gcp cloud config's machine pool",
        "operationId": "v1CloudConfigsGcpMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified GCP cloud config's machine pool",
        "operationId": "v1CloudConfigsGcpMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsGcpMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of GCP machines",
        "operationId": "v1CloudConfigsGcpPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of GCP machine items",
            "schema": {
              "$ref": "#/definitions/v1GcpMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsGcpPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified GCP machine",
        "operationId": "v1CloudConfigsGcpPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GcpMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1CloudConfigsGcpPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified GCP machine",
        "operationId": "v1CloudConfigsGcpPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/generic/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Generic cloud config",
        "operationId": "v1CloudConfigsGenericGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GenericCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/generic/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsGenericUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GenericCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/generic/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a generic cloud config's machine pool",
        "operationId": "v1CloudConfigsGenericMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GenericMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/generic/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified generic cloud config's machine pool",
        "operationId": "v1CloudConfigsGenericMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GenericMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsGenericMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/generic/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Generic machines",
        "operationId": "v1CloudConfigsGenericPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Generic machine items",
            "schema": {
              "$ref": "#/definitions/v1GenericMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsGenericPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GenericMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/generic/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified generic machine",
        "operationId": "v1CloudConfigsGenericPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GenericMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1CloudConfigsGenericPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1GenericMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine",
        "operationId": "v1CloudConfigsGenericPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/libvirt/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified libvirt cloud config",
        "operationId": "v1CloudConfigsLibvirtGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1LibvirtCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/libvirt/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsLibvirtUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1LibvirtCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/libvirt/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a libvirt cloud config's machine pool",
        "operationId": "v1CloudConfigsLibvirtMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1LibvirtMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/libvirt/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified Libvirt cloud config's machine pool",
        "operationId": "v1CloudConfigsLibvirtMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1LibvirtMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsLibvirtMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/libvirt/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Libvirt machines",
        "operationId": "v1CloudConfigsLibvirtPoolMachinesList",
        "responses": {
          "200": {
            "description": "An array of Libvirt machine items",
            "schema": {
              "$ref": "#/definitions/v1LibvirtMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the Libvirt machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsLibvirtPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1LibvirtMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/libvirt/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Libvirt machine",
        "operationId": "v1CloudConfigsLibvirtPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1LibvirtMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsLibvirtPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1LibvirtMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified Libvirt machine",
        "operationId": "v1CloudConfigsLibvirtPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/maas/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Maas cloud config",
        "operationId": "v1CloudConfigsMaasGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1MaasCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/maas/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsMaasUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/maas/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an Maas cloud config's machine pool",
        "operationId": "v1CloudConfigsMaasMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/maas/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified Maas cloud config's machine pool",
        "operationId": "v1CloudConfigsMaasMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsMaasMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/maas/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Maas machines",
        "operationId": "v1CloudConfigsMaasPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Maas machine items",
            "schema": {
              "$ref": "#/definitions/v1MaasMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsMaasPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/maas/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Maas machine",
        "operationId": "v1CloudConfigsMaasPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1MaasMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1CloudConfigsMaasPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified Maas machine",
        "operationId": "v1CloudConfigsMaasPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/openstack/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified OpenStack cloud config",
        "operationId": "v1CloudConfigsOpenStackGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1OpenStackCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/openstack/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsOpenStackUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/openstack/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a OpenStack cloud config's machine pool",
        "operationId": "v1CloudConfigsOpenStackMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/openstack/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified OpenStack cloud config's machine pool",
        "operationId": "v1CloudConfigsOpenStackMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsOpenStackMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/openstack/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of OpenStack machines",
        "operationId": "v1CloudConfigsOpenStackPoolMachinesList",
        "responses": {
          "200": {
            "description": "An array of OpenStack machine items",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the OpenStack machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsOpenStackPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/openstack/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified OpenStack machine",
        "operationId": "v1CloudConfigsOpenStackPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsOpenStackPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified OpenStack machine",
        "operationId": "v1CloudConfigsOpenStackPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/tke/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified TKE cloud config",
        "operationId": "v1CloudConfigsTkeGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TencentCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/tke/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsTkeUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TencentCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/tke/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an TKE cloud config's machine pool",
        "operationId": "v1CloudConfigsTkeMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TencentMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/tke/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified TKE cloud config's machine pool",
        "operationId": "v1CloudConfigsTkeMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TencentMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsTkeMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/tke/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of TKE machines",
        "operationId": "v1CloudConfigsTkePoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of TKE machine items",
            "schema": {
              "$ref": "#/definitions/v1TencentMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsTkePoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TencentMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/tke/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Tke machine",
        "operationId": "v1CloudConfigsTkePoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TencentMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1CloudConfigsTkePoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TencentMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified Tencent machine",
        "operationId": "v1CloudConfigsTkePoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/vsphere/{configUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified vSphere cloud config",
        "operationId": "v1CloudConfigsVsphereGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VsphereCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/vsphere/{configUid}/clusterConfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster configuration information",
        "operationId": "v1CloudConfigsVsphereUidClusterConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereCloudClusterConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/vsphere/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a vSphere cloud config's machine pool",
        "operationId": "v1CloudConfigsVsphereMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified vSphere cloud config's machine pool",
        "operationId": "v1CloudConfigsVsphereMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1CloudConfigsVsphereMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of vSphere machines",
        "operationId": "v1CloudConfigsVspherePoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of vSphere machine items",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds the vSphere machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsVspherePoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified vSphere machine",
        "operationId": "v1CloudConfigsVspherePoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified machine to cloud config's machine pool",
        "operationId": "v1CloudConfigsVspherePoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified vSphere machine",
        "operationId": "v1CloudConfigsVspherePoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clouds/aws/account/sts": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a aws external id",
        "operationId": "V1AwsAccountStsGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/V1AwsAccountSts"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/account/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate the specified AWS account credentials",
        "operationId": "V1AwsAccountValidate",
        "parameters": [
          {
            "name": "awsCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AwsCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/aws/cloudwatch/validate": {
      "post": {
        "description": "Validates aws cloud watch credentials",
        "tags": [
          "v1"
        ],
        "summary": "validates aws cloud watch credentials",
        "operationId": "V1CloudsAwsCloudWatchValidate",
        "parameters": [
          {
            "name": "cloudWatchConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.CloudWatchConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/aws/cost": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves AWS cloud account usage cost from cost explorer.",
        "operationId": "v1AwsCloudCost",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AwsCloudCostSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsCloudCostSummary"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/ecr/authToken": {
      "post": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Get aws ecr authorization token",
        "operationId": "V1EcrAuthorizationToken",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EcrAuthorizationRequestEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OciRegistryAuth"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/ecr/image/validate": {
      "post": {
        "description": "Validates aws ecr registry image",
        "tags": [
          "v1",
          "private"
        ],
        "summary": "validates ecr registry image",
        "operationId": "V1EcrRegistryImageValidate",
        "parameters": [
          {
            "name": "ecrImageEntity",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EcrImageValidateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/aws/ecr/validate": {
      "post": {
        "description": "Validates aws ecr registry credentials",
        "tags": [
          "v1",
          "private"
        ],
        "summary": "validates ecr registry credentials",
        "operationId": "V1EcrRegistryValidate",
        "parameters": [
          {
            "name": "ecrRegistryCredentials",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EcrAuthorizationRequestEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS regions for the sepcified account",
        "operationId": "V1AwsRegions",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsRegions"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/availabilityzones": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS availability zones for the specified region",
        "operationId": "V1AwsZones",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsAvailabilityZones"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/copydefaultimages": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Copies the specified image from one region to another region",
        "operationId": "V1AwsCopyImageFromDefaultRegion",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "name": "spectroClusterAwsImageTag",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsFindImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AsyncOperationIdEntity"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/eksClusters/name/validate": {
      "get": {
        "description": "Returns no contents if aws cluster name is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if Aws cluster name is valid",
        "operationId": "V1AwsClusterNameValidate",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/images": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Returns AWS image for the specified AMI name",
        "operationId": "V1AwsFindImage",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "name": "awsImageRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsFindImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsImage"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/instancetypes": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS instance types",
        "operationId": "V1AwsInstanceTypes",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "double",
            "name": "cpuGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "name": "memoryGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "name": "gpuGtEq",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsInstanceTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/keypairs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS keypairs",
        "operationId": "V1AwsKeyPairs",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsKeyPairs"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/storagetypes": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of AWS storage types",
        "operationId": "V1AwsStorageTypes",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsStorageTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/regions/{region}/vpcs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of vpcs for the specified account",
        "operationId": "V1AwsVpcs",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsVpcs"
            }
          }
        }
      }
    },
    "/v1/clouds/aws/s3/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate the aws S3 bucket",
        "operationId": "V1AwsS3Validate",
        "parameters": [
          {
            "name": "awsS3Credential",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AwsS3BucketCredentials"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/azure/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if Azure account is valid",
        "operationId": "V1AzureAccountValidate",
        "parameters": [
          {
            "name": "azureCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AzureCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/azure/groups": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure groups",
        "operationId": "V1AzureGroups",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureGroups"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/regions": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure regions",
        "operationId": "V1AzureRegions",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureRegions"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/regions/{region}/instancetypes": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure instance types",
        "operationId": "V1AzureInstanceTypes",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "double",
            "name": "cpuGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "name": "memoryGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "name": "gpuGtEq",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureInstanceTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/regions/{region}/storagetypes": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure storage types",
        "operationId": "V1AzureStorageTypes",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureStorageTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/regions/{region}/subscriptions/{subscriptionId}/aksClusters/name/validate": {
      "get": {
        "description": "Returns no contents if azure cluster name is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if Azure cluster name is valid",
        "operationId": "V1AzureClusterNameValidate",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "resourceGroup",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/azure/regions/{region}/subscriptions/{subscriptionId}/networks": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure virtual network list for the sepcified account",
        "operationId": "V1AzureVirtualNetworkList",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureVirtualNetworkList"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/regions/{region}/subscriptions/{subscriptionId}/resourceGroups": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure resource group for the sepcified account",
        "operationId": "V1AzureResourceGroupList",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureResourceGroupList"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/regions/{region}/zones": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure zones for the specified region",
        "operationId": "V1AzureZones",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureZoneEntity"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/storageaccounttypes": {
      "get": {
        "description": "Returns Azure storage account types.",
        "tags": [
          "v1"
        ],
        "summary": "Get Azure storage account types",
        "operationId": "V1AzureStorageAccountTypes",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureStorageAccountEntity"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/subscriptions": {
      "get": {
        "description": "Returns list of Azure subscription list.",
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Azure subscription list for the sepcified account",
        "operationId": "V1AzureSubscriptionList",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureSubscriptionList"
            }
          }
        }
      }
    },
    "/v1/clouds/azure/vhds/{vhd}/url": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the Azure vhd url for the specified vhd location",
        "operationId": "V1AzureVhdUrl",
        "parameters": [
          {
            "type": "string",
            "name": "vhd",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureVhdUrlEntity"
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/account/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate the specified GCP account credentials",
        "operationId": "V1GcpAccountValidate",
        "parameters": [
          {
            "name": "gcpCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GcpCloudAccountValidateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/image/container/validate": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Validates the image with tag",
        "operationId": "V1GcpContainerImageValidate",
        "parameters": [
          {
            "type": "string",
            "name": "imagePath",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "tag",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/images/{imageName}/url": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the Gcp image url for the specified image location",
        "operationId": "V1GcpImageUrl",
        "parameters": [
          {
            "type": "string",
            "name": "imageName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpImageUrlEntity"
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/projects": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of GCP projects for the sepcified account",
        "operationId": "V1GcpProjects",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpProjects"
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/projects/{project}/regions": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of GCP regions",
        "operationId": "V1GcpRegions",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpRegions"
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/projects/{project}/regions/{region}/networks": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of GCP networks for the sepcified account",
        "operationId": "V1GcpNetworks",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpNetworks"
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/projects/{project}/regions/{region}/zones": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of GCP zones for the sepcified account",
        "operationId": "V1GcpZones",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpZones"
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/regions/{region}/instancetypes": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of GCP instance types",
        "operationId": "V1GcpInstanceTypes",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "double",
            "name": "cpuGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "name": "memoryGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "name": "gpuGtEq",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpInstanceTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/gcp/regions/{region}/storagetypes": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Gcp storage types",
        "operationId": "V1GcpStorageTypes",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpStorageTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/maas/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if Maas account is valid",
        "operationId": "V1MaasAccountValidate",
        "parameters": [
          {
            "name": "account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MaasCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/maas/azs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the maas zones",
        "operationId": "V1MaasZonesGet",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasZones"
            }
          }
        }
      }
    },
    "/v1/clouds/maas/domains": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the maas domains",
        "operationId": "V1MaasDomainsGet",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasDomains"
            }
          }
        }
      }
    },
    "/v1/clouds/maas/resourcePools": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the maas pools",
        "operationId": "V1MaasPoolsGet",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasPools"
            }
          }
        }
      }
    },
    "/v1/clouds/maas/subnets": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the maas subnets",
        "operationId": "V1MaasSubnetsGet",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasSubnets"
            }
          }
        }
      }
    },
    "/v1/clouds/openstack/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if OpenStack account is valid",
        "operationId": "V1OpenStackAccountValidate",
        "parameters": [
          {
            "name": "openstackCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1OpenStackCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/openstack/azs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the openstack azs",
        "operationId": "V1OpenStackAzsGet",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "name": "region",
            "in": "query"
          },
          {
            "type": "string",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAzs"
            }
          }
        }
      }
    },
    "/v1/clouds/openstack/flavors": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the openstack flavors",
        "operationId": "V1OpenStackFlavorsGet",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "name": "region",
            "in": "query"
          },
          {
            "type": "string",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackFlavors"
            }
          }
        }
      }
    },
    "/v1/clouds/openstack/keypairs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the openstack keypair",
        "operationId": "V1OpenStackKeypairsGet",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "name": "region",
            "in": "query"
          },
          {
            "type": "string",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackKeypairs"
            }
          }
        }
      }
    },
    "/v1/clouds/openstack/networks": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the openstack networks",
        "operationId": "V1OpenStackNetworksGet",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "name": "region",
            "in": "query"
          },
          {
            "type": "string",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackNetworks"
            }
          }
        }
      }
    },
    "/v1/clouds/openstack/projects": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the openstack projects",
        "operationId": "V1OpenStackProjectsGet",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackProjects"
            }
          }
        }
      }
    },
    "/v1/clouds/openstack/regions": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the openstack regions",
        "operationId": "V1OpenStackRegionsGet",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackRegions"
            }
          }
        }
      }
    },
    "/v1/clouds/tencent/account/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate the specified Tencent account credentials",
        "operationId": "V1TencentAccountValidate",
        "parameters": [
          {
            "name": "account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TencentCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/tencent/regions": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Tencent regions for the sepcified account",
        "operationId": "V1TencentRegions",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TencentRegions"
            }
          }
        }
      }
    },
    "/v1/clouds/tencent/regions/{region}/instancetypes": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Tencent instance types",
        "operationId": "V1TencentInstanceTypes",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "double",
            "name": "cpuGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "name": "memoryGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "name": "gpuGtEq",
            "in": "query"
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TencentInstanceTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/tencent/regions/{region}/keypairs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of keypairs for the specified account",
        "operationId": "V1TencentKeypairs",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TencentKeypairs"
            }
          }
        }
      }
    },
    "/v1/clouds/tencent/regions/{region}/securitygroups": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of secutity groups for the specified account",
        "operationId": "V1TencentSecurityGroups",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TencentSecurityGroups"
            }
          }
        }
      }
    },
    "/v1/clouds/tencent/regions/{region}/storagetypes": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Tencent storage types",
        "operationId": "V1TencentStorageTypes",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "zone",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TencentStorageTypes"
            }
          }
        }
      }
    },
    "/v1/clouds/tencent/regions/{region}/vpcs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of vpcs for the specified account",
        "operationId": "V1TencentVpcs",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TencentVpcs"
            }
          }
        }
      }
    },
    "/v1/clouds/tencent/regions/{region}/zones": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Tencent availability zones for the specified region",
        "operationId": "V1TencentZones",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TencentAvailabilityZones"
            }
          }
        }
      }
    },
    "/v1/clouds/vsphere/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if Vsphere account is valid",
        "operationId": "V1VsphereAccountValidate",
        "parameters": [
          {
            "name": "vsphereCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VsphereCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clouds/vsphere/datacenters": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the vsphere data centers",
        "operationId": "V1VsphereDatacenters",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereDatacenters"
            }
          }
        }
      }
    },
    "/v1/clouds/vsphere/datacenters/{uid}/computeclusters/{computecluster}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the resources for vsphere compute cluster",
        "operationId": "V1VsphereComputeClusterResources",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "computecluster",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereComputeClusterResources"
            }
          }
        }
      }
    },
    "/v1/clouds/vsphere/env": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves vsphere env",
        "operationId": "V1VsphereEnv",
        "parameters": [
          {
            "name": "vsphereCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VsphereCloudAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereEnv"
            }
          }
        }
      }
    },
    "/v1/clouds/{cloudType}/instance/spotprice": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves the cloud instance price based on zone",
        "operationId": "V1CloudInstanceSpotPriceGet",
        "parameters": [
          {
            "type": "string",
            "name": "cloudType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "instanceType",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "zone",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "timestamp",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudSpotPrice"
            }
          }
        }
      }
    },
    "/v1/clouds/{cloud}/compute/{type}/rate": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the cloud compute rate",
        "operationId": "V1CloudComputeRate",
        "parameters": [
          {
            "type": "string",
            "name": "cloud",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "region",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudCost"
            }
          }
        }
      }
    },
    "/v1/clouds/{cloud}/storage/{type}/rate": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the cloud storage rate",
        "operationId": "V1CloudStorageRate",
        "parameters": [
          {
            "type": "string",
            "name": "cloud",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "region",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "name": "maxDiskType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudCost"
            }
          }
        }
      }
    },
    "/v1/clusterprofiles": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cluster profiles",
        "operationId": "v1ClusterProfilesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster profile items",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfiles"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a cluster profile",
        "operationId": "v1ClusterProfilesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clusterprofiles/macros": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "List all macros",
        "operationId": "v1MacrosList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        }
      }
    },
    "/v1/clusterprofiles/validate/name": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Validates the clusterprofiles name",
        "operationId": "v1ClusterProfilesValidateName",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/clusterprofiles/validate/packs": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate cluster profile packs",
        "operationId": "v1ClusterProfilesValidatePacks",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileTemplateDraft"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster profile packs validation response",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/clusterprofiles/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster profile",
        "operationId": "v1ClusterProfilesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfile"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster profile",
        "operationId": "v1ClusterProfilesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified cluster profile",
        "operationId": "v1ClusterProfilesDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "includes pack meta such as schema, presets",
          "name": "includePackMeta",
          "in": "query"
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/clone": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Clone the specified cluster profile",
        "operationId": "v1ClusterProfilesUidClone",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileCloneEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/metadata": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster profile metadata",
        "operationId": "v1ClusterProfilesUidMetadataUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMetaInputEntitySchema"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/packRefs": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update cluster profile packs ref",
        "operationId": "v1ClusterProfilesPacksRefUpdate",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "notify",
          "in": "query"
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/v1ClusterProfileNotificationUpdateEntity"
          }
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/packs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster profile's packs information",
        "operationId": "v1ClusterProfilesUidPacksGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilePacksEntities"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds a new packs to the profile and returns the created pack uid",
        "operationId": "v1ClusterProfilesUidPacksAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PackInputEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "includes pack meta such as schema, presets",
          "name": "includePackMeta",
          "in": "query"
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/packs/manifests": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster profile's packs manifests information",
        "operationId": "v1ClusterProfilesUidPacksManifestsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilePacksManifests"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "includes pack meta such as schema, presets",
          "name": "includePackMeta",
          "in": "query"
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/packs/resolvedValues": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster profile's packs resolved values",
        "operationId": "v1ClusterProfilesUidPacksResolvedValuesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PackResolvedValues"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/v1PackParamsEntity"
          }
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/packs/{packName}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified pack information in the cluster profile",
        "operationId": "v1ClusterProfilesUidPacksNameUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PackUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified pack information in the cluster profile",
        "operationId": "v1ClusterProfilesUidPacksNameDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "packName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/packs/{packName}/config": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster profile's pack configuration",
        "operationId": "v1ClusterProfilesUidPacksConfigGet",
        "parameters": [
          {
            "type": "string",
            "description": "cluster profile uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack name",
            "name": "packName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack uid",
            "name": "packUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster profile pack configurations",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilePackConfigList"
            }
          }
        }
      }
    },
    "/v1/clusterprofiles/{uid}/packs/{packName}/manifests": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the associated manifests for the specified profile's pack",
        "operationId": "v1ClusterProfilesUidPacksUidManifests",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ManifestEntities"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Adds manifest to the profiles packs and returns the added manifests uid",
        "operationId": "v1ClusterProfilesUidPacksNameManifestsAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ManifestInputEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "packName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/packs/{packName}/manifests/{manifestUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified manifest of the profile's pack",
        "operationId": "v1ClusterProfilesUidPacksNameManifestsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ManifestEntity"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified manifest of the profile's pack",
        "operationId": "v1ClusterProfilesUidPacksNameManifestsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ManifestInputEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified manifest of the profile's pack",
        "operationId": "v1ClusterProfilesUidPacksNameManifestsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "packName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "manifestUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/publish": {
      "patch": {
        "description": "Publish the draft cluster profile with next revision, the current draft cluster profile will be marked to published\nand the draft cluster profile will be set to null in the cluster profile template.\n",
        "tags": [
          "v1"
        ],
        "summary": "Publish the cluster profile",
        "operationId": "v1ClusterProfilesPublish",
        "responses": {
          "204": {
            "description": "Cluster profile published successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/spc/download": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Download the specified cluster profile",
        "operationId": "v1ClusterProfilesUidSpcDownload",
        "responses": {
          "200": {
            "description": "download profile archive file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/validate/packs": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate packs for a specified cluster profile",
        "operationId": "v1ClusterProfilesUidValidatePacks",
        "parameters": [
          {
            "type": "string",
            "description": "cluster profile uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileTemplateDraft"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster profile packs validation response",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/crypto/decrypt/key/{key}/data/{data}": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Returns the decrypted data",
        "operationId": "V1DecryptGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1CrypticResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "key",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "data",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "name": "base64",
          "in": "query"
        }
      ]
    },
    "/v1/crypto/encrypt/key/{key}/data/{data}": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Returns the encrypted data",
        "operationId": "V1EncryptGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1CrypticResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "key",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "data",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "name": "base64",
          "in": "query"
        }
      ]
    },
    "/v1/crypto/hash": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Returns the hashed data",
        "operationId": "V1CryptoHashGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Hash"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "data",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/dashboard/clusterprofiles": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cluster profiles filter summary Supported filter fields - [\"profileName\", \"tags\", \"profileType\", \"environment\"] Supported sort fields - [\"profileName\", \"environment\", \"profileType\", \"creationTimestamp\", \"lastModifiedTimestamp\"]",
        "operationId": "v1ClusterProfilesFilterSummary",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilesFilterSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster profiles summary items",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilesSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/internal/tenants/{tenantUid}/cleanup": {
      "delete": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Clean up the metrics associated with the deleted tenant",
        "operationId": "v1MetricsTenantCleanUp",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/projects": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of project summary",
        "operationId": "v1ProjectsSummary",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 60,
            "description": "Metric period in minutes defines latest metrics by period",
            "name": "metricPeriod",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of project summary items",
            "schema": {
              "$ref": "#/definitions/v1ProjectsSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cluster summary with provided filter spec Supported filter fields - [\"cpuUsage\", \"memoryUsage\", \"clusterName\", \"tags\", \"healthState\", \"clusterStates\", \"isDeleted\", \"environments\", \"metricPeriod\"] Supported sort fields - [\"environment\", \"clusterName\", \"memoryUsage\", \"healthState\", \"creationTimestamp\", \"lastModifiedTimestamp\"]",
        "operationId": "v1SpectroClustersFilterSummary",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/cost": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves spectro clusters cloud cost summary information",
        "operationId": "v1DashboardSpectroClustersCostSummary",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterCloudCostSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of resources cloud cost summary items",
            "schema": {
              "$ref": "#/definitions/v1ResourcesCloudCostSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/filters/workspace": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of running, non rbac configured clusters in a workspace",
        "operationId": "v1SpectroClustersFiltersWorkspace",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/metadata": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of cluster summary",
        "operationId": "v1SpectroClustersMetadata",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterMetadataSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersMetadata"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/resources/consumption": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves spectro clusters resource consumption",
        "operationId": "v1SpectroClustersResourcesConsumption",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ResourceConsumptionSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of resource consumption data items",
            "schema": {
              "$ref": "#/definitions/v1ResourcesConsumption"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/resources/cost": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves spectro clusters resources cost summary information",
        "operationId": "v1SpectroClustersResourcesCostSummary",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ResourceCostSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of resources cost summary items",
            "schema": {
              "$ref": "#/definitions/v1ResourcesCostSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/resources/usage": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves spectro clusters resources usage summary information",
        "operationId": "v1SpectroClustersResourcesUsageSummary",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ResourceUsageSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of resources usage summary items",
            "schema": {
              "$ref": "#/definitions/v1ResourcesUsageSummary"
            }
          }
        }
      }
    },
    "/v1/dashboard/spectroclusters/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster summary",
        "operationId": "v1SpectroClustersSummaryUid",
        "responses": {
          "200": {
            "description": "An spectro cluster summary",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterUidSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/cost": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves the specified cluster cost summary",
        "operationId": "v1SpectroClustersUidCostSummary",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "endTime",
            "in": "query"
          },
          {
            "minimum": 60,
            "type": "integer",
            "format": "int32",
            "description": "period in minutes, group the data point by the specified period",
            "name": "period",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An spectro cluster cost summary",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterCostSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/resources/consumption": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified spectro cluster resource consumption",
        "operationId": "v1SpectroClustersUidResourcesConsumption",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ResourceConsumptionSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of resource consumption data items",
            "schema": {
              "$ref": "#/definitions/v1ResourcesConsumption"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workloads",
        "operationId": "v1DashboardSpectroClustersUidWorkloads",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workloads",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkload"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/cronjob": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workload cronjobs",
        "operationId": "v1DashboardSpectroClustersUidWorkloadsCronJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload cronjobs",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadCronJobs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/daemonset": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workload daemonsets",
        "operationId": "v1DashboardSpectroClustersUidWorkloadsDaemonSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload daemonsets",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadDaemonSets"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/deployment": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workload deployments",
        "operationId": "v1DashboardSpectroClustersUidWorkloadsDeployment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload deployments",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadDeployments"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/job": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workload jobs",
        "operationId": "v1DashboardSpectroClustersUidWorkloadsJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload jobs",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadJobs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/namespace": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workload namespaces",
        "operationId": "v1DashboardSpectroClustersUidWorkloadsNamespace",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload namespaces",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadNamespaces"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/pod": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workload pods",
        "operationId": "v1DashboardSpectroClustersUidWorkloadsPod",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload pods",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadPods"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/statefulset": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified cluster workload statefulsets",
        "operationId": "v1DashboardSpectroClustersUidWorkloadsStatefulSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload statefulsets",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadStatefulSets"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/workspaces": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of workspace",
        "operationId": "v1DashboardWorkspacesList",
        "responses": {
          "200": {
            "description": "An array of workspace",
            "schema": {
              "$ref": "#/definitions/v1DashboardWorkspaces"
            }
          }
        }
      }
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/cronjob": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified workspace clusters workload cronjobs",
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsCronJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload jobs",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadCronJobs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/daemonset": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified workspace clusters workload daemonsets",
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload daemonsets",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadDaemonSets"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/deployment": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified workspace clusters workload deployments",
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsDeployment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload deployments",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadDeployments"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/job": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified workspace clusters workload jobs",
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload jobs",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadJobs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/namespace": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified workspace clusters workload namespaces",
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsNamespace",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload namespaces",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadNamespaces"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/pod": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified workspace clusters workload pods",
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsPod",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload pods",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadPods"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/statefulset": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves specified workspace clusters workload statefulsets",
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload statefulsets",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadStatefulSets"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/datasinks/cloudwatch": {
      "post": {
        "description": "Sync data to cloud watch",
        "tags": [
          "v1"
        ],
        "summary": "sync data to cloud watch",
        "operationId": "V1DataSinksCloudWatchSink",
        "parameters": [
          {
            "name": "dataSinkCloudWatchConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DataSinkCloudWatchConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/edgehosts": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of registered edge host devices",
        "operationId": "v1EdgeHostDevicesList",
        "parameters": [
          {
            "enum": [
              "libvirt",
              "edge",
              "vsphere"
            ],
            "type": "string",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of edge host device items",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevices"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create the edge host device",
        "operationId": "v1EdgeHostDevicesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDeviceEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/edgehosts/register": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Registers the edge host device",
        "operationId": "v1EdgeHostDevicesRegister",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevice"
            }
          }
        }
      }
    },
    "/v1/edgehosts/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified edge host device",
        "operationId": "v1EdgeHostDevicesUidGet",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "resolvePackValues",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevice"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified edge host device",
        "operationId": "v1EdgeHostDevicesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevice"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified edge host device",
        "operationId": "v1EdgeHostDevicesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/health": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the edge host health",
        "operationId": "v1EdgeHostDevicesHealthUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostHealth"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/meta": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified edge host device meta",
        "operationId": "v1EdgeHostDevicesUidMetaUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDeviceEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/pack/manifests/{manifestUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified edge host's manifest",
        "operationId": "v1EdgeHostDevicesUidPackManifestsUidGet",
        "parameters": [
          {
            "type": "string",
            "description": "edge host uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "manifest uid which is part of the pack ref",
            "name": "manifestUid",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "name": "resolveManifestValues",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Pack manifest content",
            "schema": {
              "$ref": "#/definitions/v1PackManifest"
            }
          }
        }
      }
    },
    "/v1/edgehosts/{uid}/profiles": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the associated profiles of a specified edge host device",
        "operationId": "v1EdgeHostDevicesUidProfilesGet",
        "parameters": [
          {
            "type": "string",
            "description": "includes pack meta such as schema, presets",
            "name": "includePackMeta",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfileList"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Associate cluster profiles to the specified edge host device",
        "operationId": "v1EdgeHostDevicesUidProfilesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfiles"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/spc/download": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Download the specified edge host device spc",
        "operationId": "v1EdgeHostDevicesUidSpcDownload",
        "responses": {
          "200": {
            "description": "download spc archive file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/edgehosts/{uid}/vsphere/properties": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified edge host device vsphere properties",
        "operationId": "v1EdgeHostDevicesUidVspherePropertiesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostVsphereCloudProperties"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/events/components": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of component events",
        "operationId": "v1EventsComponentsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of component events items",
            "schema": {
              "$ref": "#/definitions/v1Events"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a commponent event",
        "operationId": "v1EventsComponentsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Event"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/events/components/bulk": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates the component events in bulk",
        "operationId": "v1EventsComponentsCreateBulk",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1BulkEvents"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uids"
            }
          }
        }
      }
    },
    "/v1/events/components/{objectKind}/{objectUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of components events for the specified related object",
        "operationId": "v1EventsComponentsObjTypeUidList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1Events"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete all the components events for the specified related object",
        "operationId": "v1EventsComponentsObjTypeUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "objectKind",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "objectUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/events/internal/subscribe": {
      "put": {
        "description": "Subscribe components events with the message broker",
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Subscribe components events with the message broker",
        "operationId": "v1EventsComponentsSubscriberUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MsgSubscriber"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1/events/{eventUid}/components/{objectKind}/{objectUid}/context": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Retrieves a list of components events for the given related object for given window period",
        "operationId": "v1EventsUidComponentsObjTypeUidContextList",
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1Events"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "eventUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "objectKind",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "objectUid",
          "in": "path",
          "required": true
        },
        {
          "maximum": 30,
          "minimum": 1,
          "type": "integer",
          "format": "int32",
          "default": 3,
          "description": "window period in minutes, will provide before \u0026 after events of window period duration",
          "name": "windowPeriod",
          "in": "query"
        }
      ]
    },
    "/v1/files": {
      "post": {
        "description": "Returned uid can be used to associate as file uid",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Stores an file in the repository",
        "operationId": "v1Files",
        "parameters": [
          {
            "type": "file",
            "name": "fileName",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1FileUploadResponse"
            }
          }
        }
      }
    },
    "/v1/files/{uid}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified file as octet-stream",
        "operationId": "v1FilesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Type": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/health/internal/cluster/{clusterUid}": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Returns the spectrocluster health",
        "operationId": "V1SpectroClusterHealthCheck",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterHealthCheck"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        },
        {
          "type": "string",
          "name": "clusterUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/health/internal/db": {
      "get": {
        "description": "Ping Service",
        "tags": [
          "v1"
        ],
        "summary": "Database Ping Service",
        "operationId": "V1DatabaseHealthPing",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1HealthPing"
            }
          }
        }
      }
    },
    "/v1/health/internal/jobs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "List the scheduler jobs",
        "operationId": "V1SchedulerJobHealthList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SchedulerJobsHealth"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        }
      ]
    },
    "/v1/health/internal/locks": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "List the locks",
        "operationId": "V1LocksHealthList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1HealthLocks"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        }
      ]
    },
    "/v1/health/internal/msgbroker": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Returns the message broker health",
        "operationId": "V1MsgBrokerHealth",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MsgBrokerHealth"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        },
        {
          "type": "string",
          "name": "tenantUid",
          "in": "query"
        },
        {
          "type": "string",
          "name": "clusterUid",
          "in": "query"
        }
      ]
    },
    "/v1/health/muse": {
      "get": {
        "description": "Muse Ping Service",
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Muse Ping Service",
        "operationId": "V1HealthMuse",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1HealthPing"
            }
          }
        }
      }
    },
    "/v1/health/ping": {
      "get": {
        "description": "Ping Service",
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Ping Service",
        "operationId": "V1HealthPing",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1HealthPing"
            }
          }
        }
      }
    },
    "/v1/installers/spectro": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Lists spectro installers",
        "operationId": "V1SpectroInstallers",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroInstallers"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Creates the spectro installer",
        "operationId": "v1SpectrospectroInstallerCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroInstallerInputEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/installers/spectro/clusterprofile": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the vsphere installer cluster profile",
        "operationId": "v1VsphereInstallerClusterProfilesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfile"
            }
          }
        }
      }
    },
    "/v1/installers/spectro/openstack/{uid}/cloudaccount": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get a OpenStack cloud account for spectrocluster uid",
        "operationId": "V1SpectroInstallerOpenStackCloudAccountGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update a OpenStack cloud account for spectrocluster uid",
        "operationId": "V1SpectroInstallerOpenStackCloudAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create a OpenStack cloud account for spectroinstaller uid",
        "operationId": "V1SpectroInstallerOpenStackCloudAccountCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete a OpenStack cloud account for specified installer uid",
        "operationId": "V1SpectroInstallerOpenStackCloudAccountDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/installers/spectro/openstack/{uid}/spectrocluster": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get a OpenStack spectro cluster for spectrocluster uid",
        "operationId": "V1SpectroInstallerOpenStackSpectroClusterGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SpectroCluster"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create a OpenStack spectro cluster for spectroinstaller uid",
        "operationId": "V1SpectroInstallerOpenStackSpectroClusterCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroOpenStackClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete a OpenStack spectro cluster for spectrocluster uid",
        "operationId": "V1SpectroInstallerOpenStackSpectroClusterDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/installers/spectro/status": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the spectro installer status",
        "operationId": "V1SpectroInstallerStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroInstallerStatus"
            }
          }
        }
      }
    },
    "/v1/installers/spectro/vsphere": {
      "post": {
        "description": "Deprecated: please use the generic api",
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Creates the spectro installer",
        "operationId": "v1SpectrospectroInstallerCreateDeprecated",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroInstallerInputEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/installers/spectro/vsphere/{uid}": {
      "get": {
        "description": "Deprecated: please use the generic api",
        "tags": [
          "v1"
        ],
        "summary": "Returns the spectro installer",
        "operationId": "v1SpectroInstallerGetDeprecated",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SpectroInstallerEntity"
            }
          }
        }
      },
      "delete": {
        "description": "Deprecated: please use the generic api",
        "tags": [
          "v1"
        ],
        "summary": "Deletes the spectroinstaller entity",
        "operationId": "v1SpectroInstallerDeleteDeprecated",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/installers/spectro/vsphere/{uid}/cloudaccount": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get a vSphere cloud account for spectrocluster uid",
        "operationId": "V1SpectroInstallerCloudAccountGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update a vSphere cloud account for spectrocluster uid",
        "operationId": "V1SpectroInstallerCloudAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create a vSphere cloud account for spectroinstaller uid",
        "operationId": "V1SpectroInstallerCloudAccountCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete a vSphere cloud account for specified installer uid",
        "operationId": "V1SpectroInstallerCloudAccountDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/installers/spectro/vsphere/{uid}/spectrocluster": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get a vSphere spectro cluster for spectrocluster uid",
        "operationId": "V1SpectroInstallerSpectroClusterGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SpectroCluster"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create a vSphere spectro cluster for spectroinstaller uid",
        "operationId": "V1SpectroInstallerSpectroClusterCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVsphereClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete a vSphere spectro cluster for spectrocluster uid",
        "operationId": "V1SpectroInstallerSpectroClusterDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/installers/spectro/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the spectro installer",
        "operationId": "v1SpectroInstallerGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SpectroInstallerEntity"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the spectroinstaller entity",
        "operationId": "v1SpectroInstallerDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/installers/spectro/{uid}/clusterprofile": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get a vSphere spectro installer cluster profile",
        "operationId": "v1SpectroInstallerClusterProfileGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfile"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/jobs/internal": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Retrieves the list of the scheduler jobs",
        "operationId": "V1SchedulerJobList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SchedulerJobs"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Updates the specified scheduler job",
        "operationId": "V1SchedulerJobUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SchedulerJob"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        }
      ]
    },
    "/v1/jobs/internal/{job}": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Returns the specified scheduler job",
        "operationId": "V1SchedulerJobName",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SchedulerJob"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        },
        {
          "type": "string",
          "name": "job",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/jobs/internal/{job}/disable": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Disables the specified scheduler job",
        "operationId": "V1SchedulerJobNameDisable",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        },
        {
          "type": "string",
          "name": "job",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/jobs/internal/{job}/run": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Executes the specified scheduler job on demand",
        "operationId": "V1SchedulerJobNameRun",
        "responses": {
          "200": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        },
        {
          "type": "string",
          "name": "job",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/locks/internal": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "List the locks",
        "operationId": "V1LocksList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Locks"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        }
      ]
    },
    "/v1/locks/internal/{lock}/unlock": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Unlock the lock",
        "operationId": "V1LocksName",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        },
        {
          "type": "string",
          "name": "lock",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/metrics/{resourceKind}/values": {
      "get": {
        "description": "Returns all the metrics for a given resource kind",
        "tags": [
          "v1"
        ],
        "summary": "Retrieves the list of metrics for a specified resource kind",
        "operationId": "v1MetricsList",
        "parameters": [
          {
            "enum": [
              "pod",
              "namespace",
              "spectrocluster",
              "machine",
              "project"
            ],
            "type": "string",
            "name": "resourceKind",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "all",
            "name": "metricKind",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "name": "period",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "includeMasterMachines in boolean, group the data point by including master nodes if set to true",
            "name": "includeMasterMachines",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "if true then api returns only aggregation values, else api returns all data points by default",
            "name": "discrete",
            "in": "query"
          },
          {
            "type": "string",
            "name": "spectroClusterUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of metric items",
            "schema": {
              "$ref": "#/definitions/v1MetricTimeSeriesList"
            }
          }
        }
      }
    },
    "/v1/metrics/{resourceKind}/{resourceUid}/values": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the metrics for a specified resource uid",
        "operationId": "v1MetricsUidList",
        "parameters": [
          {
            "enum": [
              "pod",
              "namespace",
              "spectrocluster",
              "machine",
              "project"
            ],
            "type": "string",
            "name": "resourceKind",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "resourceUid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "all",
            "description": "multiple metric kinds can be provided with comma separated",
            "name": "metricKind",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "description": "period in minutes, group the data point by the specified period",
            "name": "period",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "includeMasterMachines in boolean, group the data point by including master nodes if set to true",
            "name": "includeMasterMachines",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "if true then api returns only aggregation values, else api returns all data points by default",
            "name": "discrete",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of metric items",
            "schema": {
              "$ref": "#/definitions/v1MetricTimeSeries"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the metrics of the specified resource",
        "operationId": "v1MetricsUidDelete",
        "parameters": [
          {
            "enum": [
              "pod",
              "namespace",
              "spectrocluster",
              "machine",
              "project"
            ],
            "type": "string",
            "name": "resourceKind",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "resourceUid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      }
    },
    "/v1/mgmt/app": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "get the spectro application management information",
        "operationId": "v1MgmtAppGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MgmtApp"
            }
          }
        }
      }
    },
    "/v1/mgmt/app/errlogs": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Retrieves the list of error logs",
        "operationId": "v1MgmtErrLogsList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MgmtErrLogs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        },
        {
          "type": "string",
          "name": "hash",
          "in": "query"
        }
      ]
    },
    "/v1/mgmt/app/errlogs/hash": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Returns the hash for the error reference",
        "operationId": "v1ErrLogsHashGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MgmtHash"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "data",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/mgmt/app/errlogs/{ref}": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Returns the specified err log for the given reference",
        "operationId": "v1MgmtErrLogsRefGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MgmtErrLog"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "ref",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "token",
          "in": "query"
        },
        {
          "type": "string",
          "name": "hash",
          "in": "query"
        }
      ]
    },
    "/v1/mgmt/app/health": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "mgmt app health",
        "operationId": "V1MgmtAppHealth",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MgmtAppEnvHealthStatus"
            }
          }
        }
      }
    },
    "/v1/mgmt/app/healthz": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "mgmt app health",
        "operationId": "v1MgmtAppHealthz",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MgmtAppHealth"
            }
          }
        }
      }
    },
    "/v1/mgmt/app/migrate": {
      "post": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "migrate the database and nats from current to target",
        "operationId": "v1MgmtMigrate",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MgmtMigrateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/mgmt/app/migrate/status": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "get migration status",
        "operationId": "v1MgmtMigrateStatus",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MgmtMigrationStatuses"
            }
          }
        }
      }
    },
    "/v1/mgmt/app/upgrade/status": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "mgmt upgrade status",
        "operationId": "v1MgmtAppUpgradeStatus",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MgmtAppUpgrade"
            }
          }
        }
      }
    },
    "/v1/mgmt/app/version": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "get the spectro application management information",
        "operationId": "v1MgmtAppVersionGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MgmtAppVersion"
            }
          }
        }
      }
    },
    "/v1/mgmt/database/backup/ftp": {
      "post": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "backup the database",
        "operationId": "v1MgmtDbBackupFtp",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MgmtFileTransferFtpEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/mgmt/database/backup/s3": {
      "post": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "backup the database with s3",
        "operationId": "v1MgmtDbBackupS3",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MgmtFileTransferS3Entity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/mgmt/database/backups/ftp": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "get the database status",
        "operationId": "v1MgmtBackups",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MgmtListBackupFtpEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1DatabaseTransferStatus"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "delete the database status",
        "operationId": "v1MgmtBackupsDeleteFtp",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MgmtDeleteBackupFtpEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      }
    },
    "/v1/mgmt/database/backups/s3": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "get the database status for s3",
        "operationId": "v1MgmtBackupsS3",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MgmtListBackupS3Entity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1DatabaseTransferStatus"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "delete the database status",
        "operationId": "v1MgmtBackupsDeleteS3",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MgmtDeleteBackupS3Entity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      }
    },
    "/v1/mgmt/database/backups/{backupUid}/ftp": {
      "delete": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "delete the database backup",
        "operationId": "v1MgmtDbBackupsBackupUidFtpDelete",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "backupUid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MgmtFileTransferFtpEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      }
    },
    "/v1/mgmt/database/backups/{backupUid}/s3": {
      "delete": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "delete the database backup from s3",
        "operationId": "v1MgmtDbBackupsBackupUidS3Delete",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "backupUid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MgmtFileTransferS3Entity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      }
    },
    "/v1/mgmt/database/recovery/ftp": {
      "post": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "recover the database via ftp",
        "operationId": "v1MgmtDbRecoverFtp",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MgmtFileTransferFtpEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/mgmt/database/recovery/s3": {
      "post": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "recover the database via s3",
        "operationId": "v1MgmtDbRecoverS3",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MgmtFileTransferS3Entity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/mgmt/database/restore/ftp": {
      "post": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "restore the database via ftp",
        "operationId": "v1MgmtDbRestoreFtp",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MgmtFileTransferFtpEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/mgmt/database/restore/s3": {
      "post": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "restore the database via s3",
        "operationId": "v1MgmtDbRestoreS3",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MgmtFileTransferS3Entity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/mgmt/msgbroker/reinit": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "reinit the msg broker for the nats",
        "operationId": "v1MgmtMsgBrokerReinit",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MgmtMsgBrokerReinitStatus"
            }
          }
        }
      }
    },
    "/v1/mgmt/profiler/api/{requestUid}": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "Api profiler response",
        "operationId": "v1MgmtApiProfiler",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ApiProfiler"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "requestUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/nats/config": {
      "get": {
        "description": "Returns Nats Configuration",
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Get Nats Configuration",
        "operationId": "V1NatsConfiguration",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1NatsConfiguration"
            }
          }
        }
      }
    },
    "/v1/nats/credentials": {
      "post": {
        "description": "Returns Nats Credentials",
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Get Nats Credentials",
        "operationId": "V1NatsCredentials",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1NatsCredentialRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1NatsCredentials"
            }
          }
        }
      }
    },
    "/v1/notifications/": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of notifications",
        "operationId": "v1NotificationsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of notification items",
            "schema": {
              "$ref": "#/definitions/v1Notifications"
            }
          }
        }
      }
    },
    "/v1/notifications/events": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a notification event",
        "operationId": "v1NotificationsEventCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1NotificationEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/notifications/{objectKind}/{objectUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of notifications for the specified related object",
        "operationId": "v1NotificationsObjTypeUidList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1Notifications"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "objectKind",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "objectUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "isDone",
          "in": "query"
        }
      ]
    },
    "/v1/notifications/{uid}/ack": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Acknowledges the specified notification",
        "operationId": "v1NotificationsUidAck",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/notifications/{uid}/done": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Marks the specified notification's action as done",
        "operationId": "v1NotificationsUidDone",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of overlords owned by the tenant",
        "operationId": "v1OverlordsList",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Overlords"
            }
          }
        }
      }
    },
    "/v1/overlords/maas/manifest": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the manifests required for the private gateway installation",
        "operationId": "V1OverlordsMaasManifest",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OverlordManifest"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "pairingCode",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/overlords/maas/{uid}/account": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update the maas cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidMaasAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordMaasAccountEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create the maas cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidMaasAccountCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordMaasAccountCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/maas/{uid}/account/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "validate the maas cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidMaasAccountValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "account": {
                  "$ref": "#/definitions/v1MaasCloudAccount"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/maas/{uid}/cloudconfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update the maas cloud config for the private gateway",
        "operationId": "V1OverlordsUidMaasCloudConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordMaasCloudConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create the maas cloud config for the private gateway",
        "operationId": "V1OverlordsUidMaasCloudConfigCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordMaasCloudConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/openstack/manifest": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the manifests required for the private gateway installation",
        "operationId": "v1OverlordsOpenStackManifest",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OverlordManifest"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "pairingCode",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/overlords/openstack/{uid}/account": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update the OpenStack cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidOpenStackAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordOpenStackAccountEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create the OpenStack cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidOpenStackAccountCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordOpenStackAccountCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/openstack/{uid}/account/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "validate the OpenStack cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidOpenStackAccountValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "account": {
                  "$ref": "#/definitions/v1OpenStackCloudAccount"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/openstack/{uid}/cloudconfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update the OpenStack cloud config for the private gateway",
        "operationId": "v1OverlordsUidOpenStackCloudConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordOpenStackCloudConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create the OpenStack cloud config for the private gateway",
        "operationId": "v1OverlordsUidOpenStackCloudConfigCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordOpenStackCloudConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/pairing/code": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the pairing code for the private gateway",
        "operationId": "v1OverlordsPairingCode",
        "parameters": [
          {
            "enum": [
              "vsphere",
              "openstack",
              "maas"
            ],
            "type": "string",
            "name": "cloudType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1PairingCode"
            }
          }
        }
      }
    },
    "/v1/overlords/vsphere/manifest": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the manifests required for the private gateway installation",
        "operationId": "v1OverlordsVsphereManifest",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OverlordManifest"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "pairingCode",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/overlords/vsphere/ova": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns overlord's ova information",
        "operationId": "v1OverlordsVsphereOvaGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OverloadVsphereOva"
            }
          }
        }
      }
    },
    "/v1/overlords/vsphere/tenants/{tenantUid}/system": {
      "post": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Creates the system private gateway for the specified tenant",
        "operationId": "v1OverlordsSystem",
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/vsphere/{uid}/account": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update the vSphere cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidVsphereAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordVsphereAccountEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create the vSphere cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidVsphereAccountCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordVsphereAccountCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/vsphere/{uid}/account/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "validate the vSphere cloudaccount for the private gateway",
        "operationId": "v1OverlordsUidVsphereAccountValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "account": {
                  "$ref": "#/definitions/v1VsphereCloudAccount"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/vsphere/{uid}/cloudconfig": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update the vSphere cloud config for the private gateway",
        "operationId": "v1OverlordsUidVsphereCloudConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordVsphereCloudConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create the vSphere cloud config for the private gateway",
        "operationId": "v1OverlordsUidVsphereCloudConfigCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordVsphereCloudConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/vsphere/{uid}/pools": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of IP Pools for the specified private gateway",
        "operationId": "v1OverlordsUidPoolsList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1IpPools"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an IP pool defintion for the sepcified private gateway",
        "operationId": "v1OverlordsUidPoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1IpPoolInputEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/vsphere/{uid}/pools/{poolUid}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the private gateways's specified IP Pool data",
        "operationId": "v1OverlordsUidPoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1IpPoolInputEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the private gateways's specified IP Pool data",
        "operationId": "v1OverlordsUidPoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "poolUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/vsphere/{uid}/properties/computecluster/resources": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves the vSphere computecluster resources for the specified private gateway's account",
        "operationId": "v1OverlordsUidVsphereComputeclusterRes",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereComputeClusterResources"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "datacenter",
          "in": "query",
          "required": true
        },
        {
          "type": "string",
          "name": "computecluster",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/overlords/vsphere/{uid}/properties/datacenters": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves the vSphere datacenters \u0026 datacluster for the specified private gateway's account",
        "operationId": "v1OverlordsUidVsphereDatacenters",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereDatacenters"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified private gateway's for the given uid",
        "operationId": "v1OverlordsUidGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Overlord"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "delete the private gateway",
        "operationId": "v1OverlordsUidDelete",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1DeletedMsg"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/{uid}/metadata": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "update the private gateway's metadata",
        "operationId": "v1OverlordsUidMetadataUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMetaInputEntitySchema"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/overlords/{uid}/reset": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "reset the private gateway by disaaociating the private gateway's resources",
        "operationId": "v1OverlordsUidReset",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1UpdatedMsg"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/packs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of pack summaries",
        "operationId": "v1PacksSummaryList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of pack summary items",
            "schema": {
              "$ref": "#/definitions/v1PackSummaries"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete all the pack summaries",
        "operationId": "v1PacksSummaryDelete",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1DeleteMeta"
            }
          }
        }
      }
    },
    "/v1/packs/search": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of packs based on filter",
        "operationId": "v1PacksSearch",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PacksFilterSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of pack summary items",
            "schema": {
              "$ref": "#/definitions/v1PackMetadataList"
            }
          }
        }
      }
    },
    "/v1/packs/{packName}/registries/{registryUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of packs by tags",
        "operationId": "v1PacksNameRegistryUidList",
        "responses": {
          "200": {
            "description": "Pack items organized by tags",
            "schema": {
              "$ref": "#/definitions/v1PackTagEntity"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "registryUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "pack name",
          "name": "packName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "default": "all",
          "name": "cloudType",
          "in": "query"
        },
        {
          "type": "string",
          "name": "layer",
          "in": "query"
        }
      ]
    },
    "/v1/packs/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified pack for uid",
        "operationId": "v1PacksUid",
        "responses": {
          "200": {
            "description": "A pack for the specified uid",
            "schema": {
              "$ref": "#/definitions/v1PackTagEntity"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/payments/stripe/config": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Get stripe publishable key",
        "operationId": "v1PaymentStripePublishKeyGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1StripeKey"
            }
          }
        }
      }
    },
    "/v1/payments/stripe/customer": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Get Customer",
        "operationId": "v1CustomerGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/v1/payments/stripe/invoice/status": {
      "post": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Webhook endpoint to receive invoice status",
        "operationId": "v1PaymentStripeInvoiceStatusPost",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "description": "invoice status payload",
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1/payments/stripe/paymentMethods": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a payment method list",
        "operationId": "v1PaymentMethodsList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PaymentMethods"
            }
          }
        }
      }
    },
    "/v1/payments/stripe/paymentMethods/default/{paymentMethodUid}": {
      "put": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Set default payment method",
        "operationId": "v1DefaultPaymentMethodPut",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "paymentMethodUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/payments/stripe/paymentMethods/{paymentMethodUid}": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Retrieves a payment method by id",
        "operationId": "v1PaymentMethodGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PaymentMethod"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Save new payment method",
        "operationId": "v1PaymentMethodPost",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Remove the payment method",
        "operationId": "v1PaymentMethodDelete",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "paymentMethodUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/payments/stripe/plans": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Retrieves payment plans",
        "operationId": "v1PaymentPlansGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PaymentPlans"
            }
          }
        }
      }
    },
    "/v1/payments/stripe/subscription/status": {
      "post": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Webhook endpoint to receive subscription status",
        "operationId": "v1PaymentStripeSubscriptionStatusPost",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "description": "subscription status payload",
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1/payments/stripe/subscriptions": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Returns the subscription for the tenant",
        "operationId": "v1PaymentSubscriptionGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PaymentSubscription"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Create Payment Subscription",
        "operationId": "v1PaymentSubscriptionCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PaymentSubscription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1PaymentSubscription"
            }
          }
        }
      }
    },
    "/v1/payments/stripe/subscriptions/{subscriptionUid}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update Payment Subscription",
        "operationId": "v1PaymentSubscriptionUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PaymentSubscription"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Cancel the payment subscription",
        "operationId": "v1PaymentSubscriptionDelete",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "subscriptionUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/payments/stripe/subscriptions/{subscriptionUid}/activate": {
      "post": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Reactivate Payment Subscription",
        "operationId": "v1PaymentSubscriptionActivate",
        "parameters": [
          {
            "type": "string",
            "name": "subscriptionUid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1/permissions": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of permissions",
        "operationId": "v1PermissionsList",
        "parameters": [
          {
            "enum": [
              "system",
              "tenant",
              "project"
            ],
            "type": "string",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of permissions",
            "schema": {
              "$ref": "#/definitions/v1Permissions"
            }
          }
        }
      }
    },
    "/v1/plans": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Retrieves a list of plans",
        "operationId": "v1PlansList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Plans"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Creates a user plan",
        "operationId": "v1PlansCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Plan"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/plans/system/usage": {
      "get": {
        "tags": [
          "v1",
          "private",
          "system"
        ],
        "summary": "Retrieves system usage",
        "operationId": "V1SystemUsageGet",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "startDate",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "endDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SystemUsage"
            }
          }
        }
      }
    },
    "/v1/plans/system/usage/report/pdf": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Downloads the system usage report",
        "operationId": "V1SystemUsageReportPdf",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "startDate",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "endDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/v1/plans/usage/compute": {
      "post": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "Compute the usage of the plans",
        "operationId": "v1PlansUsageCompute",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PlansUsageComputeSpec"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/plans/{uid}": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Returns the specified plan",
        "operationId": "v1PlansUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Plan"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/plans/{uid}/credits/{creditUid}": {
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Updates the specified Plan's credit data",
        "operationId": "v1PlansUidCreditsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PlanCreditUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Deletes the specified Plan's credit data",
        "operationId": "v1PlansUidCreditsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "creditUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/plans/{uid}/expiry": {
      "patch": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Updates the specified plan's expiry",
        "operationId": "v1PlansUidExpiryPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PlanExpiry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/plans/{uid}/freeCredit": {
      "post": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Adds free credit to the specified plan",
        "operationId": "v1PlansUidFreeCreditAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PlanAddFreeCreditUpdate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/plans/{uid}/planLimit": {
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Updates the specified plan's limit",
        "operationId": "v1PlansUidPlanLimitUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PlanLimitUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/plans/{uid}/planType": {
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Changes the plan type for the specified plan",
        "operationId": "v1PlansUidPlanTypeUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PlanChangeUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/plans/{uid}/renewal": {
      "patch": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Adds renewal data to the existing plan",
        "operationId": "v1PlansUidRenewal",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PlanRenewalUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/plans/{uid}/slaCredit": {
      "post": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Adds sla breach credit to the specified plan",
        "operationId": "v1PlansUidSlaCreditAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PlanAddSlaCreditUpdate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/projects": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of projects",
        "operationId": "v1ProjectsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of projects",
            "schema": {
              "$ref": "#/definitions/v1Projects"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a project",
        "operationId": "v1ProjectsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ProjectEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/projects/alerts": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of supported alerts for a project",
        "operationId": "v1ProjectsAlerts",
        "responses": {
          "200": {
            "description": "An array of alert components",
            "schema": {
              "$ref": "#/definitions/v1ProjectAlertComponents"
            }
          }
        }
      }
    },
    "/v1/projects/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified project",
        "operationId": "v1ProjectsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Project"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified project",
        "operationId": "v1ProjectsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ProjectEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified project",
        "operationId": "v1ProjectsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Patches the specified project",
        "operationId": "v1ProjectsUidPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ProjectPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/projects/{uid}/alerts/{component}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Upsert the specified alert to the specified project",
        "operationId": "v1ProjectsUidAlertUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AlertEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified alert to the specified project",
        "operationId": "v1ProjectsUidAlertDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "component",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/projects/{uid}/macros": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "List the macros of the specified project",
        "operationId": "v1ProjectsUidMacrosList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the macros of the specified project",
        "operationId": "v1ProjectsUidMacrosUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/projects/{uid}/meta": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the metadata of the specified project",
        "operationId": "v1ProjectsUidMetaUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMeta"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/projects/{uid}/teams": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the teams association to the specified project",
        "operationId": "v1ProjectsUidTeamsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ProjectTeamsEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/projects/{uid}/users": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the users association to the specified project",
        "operationId": "v1ProjectsUidUsersUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ProjectUsersEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/helm": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Helm registries",
        "operationId": "v1RegistriesHelmList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1HelmRegistries"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a helm registry",
        "operationId": "v1RegistriesHelmCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1HelmRegistryEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1/registries/helm/summary": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of helm registries as summary",
        "operationId": "v1RegistriesHelmSummaryList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1HelmRegistriesSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1/registries/helm/validate": {
      "post": {
        "description": "Returns no contents if helm registry is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if helm registry is valid",
        "operationId": "V1RegistriesHelmValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1HelmRegistrySpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/registries/helm/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Helm registry",
        "operationId": "v1RegistriesHelmUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1HelmRegistry"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified helm registry",
        "operationId": "v1RegistriesHelmUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1HelmRegistry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified helm registry",
        "operationId": "v1RegistriesHelmUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/helm/{uid}/sync": {
      "post": {
        "description": "Sync all the helm charts from the registry",
        "tags": [
          "v1"
        ],
        "summary": "Sync Helm registry",
        "operationId": "v1RegistriesHelmUidSync",
        "responses": {
          "202": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/helm/{uid}/sync/status": {
      "get": {
        "description": "Get the sync status for the specified helm registry",
        "tags": [
          "v1"
        ],
        "summary": "Get helm registry sync status",
        "operationId": "v1RegistriesHelmUidSyncStatus",
        "responses": {
          "200": {
            "description": "Helm registry sync status",
            "schema": {
              "$ref": "#/definitions/v1RegistrySyncStatus"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/metadata": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of registries metadata",
        "operationId": "v1RegistriesMetadata",
        "responses": {
          "200": {
            "description": "An array of registry metadata items",
            "schema": {
              "$ref": "#/definitions/v1RegistriesMetadata"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1/registries/oci/basic": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a basic oci registry",
        "operationId": "v1BasicOciRegistriesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1BasicOciRegistry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/registries/oci/ecr": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a ecr registry",
        "operationId": "v1EcrRegistriesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EcrRegistry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/registries/oci/summary": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a oci registries summary",
        "operationId": "v1OciRegistriesSummary",
        "responses": {
          "200": {
            "description": "An array of oci registry items",
            "schema": {
              "$ref": "#/definitions/v1OciRegistries"
            }
          }
        }
      }
    },
    "/v1/registries/oci/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the information of specified oci registry",
        "operationId": "v1OciRegistriesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1OciRegistryEntity"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "clusterUid",
          "in": "query"
        }
      ]
    },
    "/v1/registries/oci/{uid}/basic": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the basic oci registry",
        "operationId": "v1BasicOciRegistriesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1BasicOciRegistry"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified basic oci registry",
        "operationId": "v1BasicOciRegistriesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1BasicOciRegistry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified basic oci registry",
        "operationId": "v1BasicOciRegistriesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/oci/{uid}/ecr": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified ecr registry",
        "operationId": "v1EcrRegistriesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EcrRegistry"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified ecr registry",
        "operationId": "v1EcrRegistriesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1EcrRegistry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified ecr registry",
        "operationId": "v1EcrRegistriesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/pack": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of Pack registries",
        "operationId": "v1RegistriesPackList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1PackRegistries"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a pack registry",
        "operationId": "v1RegistriesPackCreate",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "skipPackSync",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PackRegistry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1/registries/pack/summary": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of pack registries as summary",
        "operationId": "v1RegistriesPackSummaryList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1PackRegistriesSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1/registries/pack/validate": {
      "post": {
        "description": "Returns no contents if pack registry is valid else error.",
        "tags": [
          "v1"
        ],
        "summary": "Check if pack registry is valid",
        "operationId": "V1RegistriesPackValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PackRegistrySpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/registries/pack/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Pack registry",
        "operationId": "v1RegistriesPackUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PackRegistry"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified pack registry",
        "operationId": "v1RegistriesPackUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PackRegistry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified pack registry",
        "operationId": "v1RegistriesPackUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/pack/{uid}/sync": {
      "post": {
        "description": "Sync all the packs from the registry",
        "tags": [
          "v1"
        ],
        "summary": "Sync Pack registry",
        "operationId": "v1RegistriesPackUidSync",
        "responses": {
          "202": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/pack/{uid}/sync/status": {
      "get": {
        "description": "Get sync status for the pack specified registry",
        "tags": [
          "v1"
        ],
        "summary": "Get pack registry sync status",
        "operationId": "v1RegistriesPackUidSyncStatus",
        "responses": {
          "200": {
            "description": "Pack registry sync status",
            "schema": {
              "$ref": "#/definitions/v1RegistrySyncStatus"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/registries/{registryName}/config": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified system scope registry configuration",
        "operationId": "v1RegistriesNameConfigGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RegistryConfigEntity"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "registryName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/resources/internal/clusters/{clusterUid}": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Returns the cluster and it's dependent resources",
        "operationId": "V1ResorucesClusterGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Resources"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "clusterUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "entities",
          "in": "query"
        },
        {
          "type": "string",
          "name": "token",
          "in": "query"
        }
      ]
    },
    "/v1/roles": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of roles",
        "operationId": "v1RolesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Roles"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a role with specified permissions",
        "operationId": "v1RolesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Role"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/roles/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified role",
        "operationId": "v1RolesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Role"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified role",
        "operationId": "v1RolesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Role"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified role",
        "operationId": "v1RolesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Patches the specified role",
        "operationId": "v1RolesUidpatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RolePatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/services/images": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Returns the services images",
        "operationId": "v1ServicesImagesGet",
        "parameters": [
          {
            "type": "string",
            "description": "app version",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ServicesImages"
            }
          }
        }
      }
    },
    "/v1/services/{serviceName}/version": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns a latest version for a given service name",
        "operationId": "v1ServiceVersionGet",
        "parameters": [
          {
            "enum": [
              "ally",
              "jet",
              "palette",
              "ambit",
              "ally-lite",
              "palette-lite",
              "crony",
              "tick",
              "edge",
              "lodge",
              "level",
              "edge-config",
              "firth"
            ],
            "type": "string",
            "description": "service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ServiceVersion"
            }
          }
        }
      }
    },
    "/v1/services/{serviceName}/versions/{version}/manifest": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns a service manifest for a given service name and version",
        "operationId": "v1ServiceManifestGet",
        "parameters": [
          {
            "enum": [
              "ally",
              "jet",
              "palette",
              "ambit",
              "ally-lite",
              "palette-lite",
              "crony",
              "tick",
              "edge",
              "lodge",
              "level",
              "edge-config",
              "firth"
            ],
            "type": "string",
            "description": "service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "service version",
            "name": "version",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "apply",
              "delete",
              "resources"
            ],
            "type": "string",
            "description": "action type",
            "name": "action",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "resource file name",
            "name": "resourceFilename",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ServiceManifest"
            }
          }
        }
      }
    },
    "/v1/spectroclusters": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of clusters",
        "operationId": "v1SpectroClustersList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusters"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/acquire/create": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Returns the spectro cluster for creation with lock",
        "operationId": "v1SpectroClusterAcquireCreate",
        "parameters": [
          {
            "type": "string",
            "name": "overlordUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "edgeHostUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "overlordMode",
            "in": "query"
          },
          {
            "type": "string",
            "name": "jetUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "authKey",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroCluster"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/acquire/delete": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Returns the spectro cluster for deletion with lock",
        "operationId": "v1SpectroClusterAcquireDelete",
        "parameters": [
          {
            "type": "string",
            "name": "overlordUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "edgeHostUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "overlordMode",
            "in": "query"
          },
          {
            "type": "string",
            "name": "jetUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "authKey",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroCluster"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/aks": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an AKS cluster",
        "operationId": "v1SpectroClustersAksCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/aks/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get aks spectro cluster estimated rate information",
        "operationId": "v1SpectroClustersAksRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aks Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/aks/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate aks spectro cluster create",
        "operationId": "v1SpectroClustersAksValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aks Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/aws": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an AWS cluster",
        "operationId": "v1SpectroClustersAwsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAwsClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/aws/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Import a AWS cluster",
        "operationId": "v1SpectroClustersAwsImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAwsClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/aws/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get aws spectro cluster estimated rate information",
        "operationId": "v1SpectroClustersAwsRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAwsClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aws Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/aws/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate aws spectro cluster create",
        "operationId": "v1SpectroClustersAwsValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAwsClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aws Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/azure": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an Azure cluster",
        "operationId": "v1SpectroClustersAzureCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/azure/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Import a Azure cluster",
        "operationId": "v1SpectroClustersAzureImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/azure/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get azure spectro cluster estimated rate information",
        "operationId": "v1SpectroClustersAzureRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/azure/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate azure spectro cluster create",
        "operationId": "v1SpectroClustersAzureValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/cost/compute": {
      "post": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "Compute the spectro clusters cost",
        "operationId": "v1SpectroClustersCostCompute",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersCostComputeSpec"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/edge": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Createa a Edge cluster",
        "operationId": "v1SpectroClustersEdgeCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEdgeClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/edge/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Import a Edge cluster",
        "operationId": "v1SpectroClustersEdgeImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEdgeClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/edge/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get edge spectro cluster estimated rate information",
        "operationId": "v1SpectroClustersEdgeRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEdgeClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Edge Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/edge/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate edge spectro cluster create",
        "operationId": "v1SpectroClustersEdgeValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEdgeClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "edge Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/eks": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an EKS cluster",
        "operationId": "v1SpectroClustersEksCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEksClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/eks/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get eks spectro cluster estimated rate information",
        "operationId": "v1SpectroClustersEksRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEksClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Eks Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/eks/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate eks spectro cluster create",
        "operationId": "v1SpectroClustersEksValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEksClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Eks Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/features/backup/locations/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the cluster object references based on locationUid",
        "operationId": "V1ClusterFeatureBackupLocationUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterRefs"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Change cluster backup location",
        "operationId": "V1ClusterFeatureBackupLocationUidChange",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterBackupLocationType"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/features/logFetcher/{uid}/download": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Downloads the Log fetcher uid for cluster",
        "operationId": "v1ClusterFeatureLogFetcherLogDownload",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Type": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/features/logFetcher/{uid}/log": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Update the log in log fetcher uid",
        "operationId": "v1ClusterFeatureLogFetcherLogUpdate",
        "parameters": [
          {
            "type": "file",
            "name": "fileName",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/gcp": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a GCP cluster",
        "operationId": "v1SpectroClustersGcpCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/gcp/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Import a GCP cluster",
        "operationId": "v1SpectroClustersGcpImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/gcp/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get gcp spectro cluster estimated rate information",
        "operationId": "v1SpectroClustersGcpRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gcp Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/gcp/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate gcp spectro cluster create",
        "operationId": "v1SpectroClustersGcpValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gcp Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/generic/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Import a cluster of any cloud type in generic way",
        "operationId": "v1SpectroClustersGenericImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGenericClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/generic/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get generic spectro cluster estimated rate information",
        "operationId": "v1SpectroClustersGenericRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGenericClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Genric Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/internal/tenants/{tenantUid}/activeClusters": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Check any active clusters associated with the tenant",
        "operationId": "v1SpectroClustersTenantCheckActiveCluster",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ActiveTenantResources"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/internal/tenants/{tenantUid}/activeResources": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Check any active cluster resources associated with the deleted tenant",
        "operationId": "v1SpectroClustersTenantCheckActiveResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ActiveTenantResources"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/internal/tenants/{tenantUid}/cleanup": {
      "delete": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Clean up the resources associated with the deleted tenant",
        "operationId": "v1SpectroClustersTenantCleanUp",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "name": "forceDelete",
          "in": "query"
        }
      ]
    },
    "/v1/spectroclusters/internal/tenants/{tenantUid}/creditAccount/{cloudAccountUid}": {
      "delete": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Clean up the free cloud credit clusters",
        "operationId": "v1CreditAccountClustersCleanUp",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "cloudAccountUid",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "name": "forceDelete",
          "in": "query"
        }
      ]
    },
    "/v1/spectroclusters/libvirt": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Createa a Libvirt cluster",
        "operationId": "v1SpectroClustersLibvirtCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroLibvirtClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/libvirt/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Import a Libvirt cluster",
        "operationId": "v1SpectroClustersLibvirtImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroLibvirtClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/libvirt/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get libvirt spectro cluster estimated rate information",
        "operationId": "v1SpectroClustersLibvirtRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroLibvirtClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Libvirt Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/libvirt/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate libvirt spectro cluster create",
        "operationId": "v1SpectroClustersLibvirtValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroLibvirtClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "libvirt Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/maas": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an Maas cluster",
        "operationId": "v1SpectroClustersMaasCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroMaasClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/maas/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Import a Maas cluster",
        "operationId": "v1SpectroClustersMaasImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroMaasClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/maas/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get maas spectro cluster estimated rate information",
        "operationId": "v1SpectroClustersMaasRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroMaasClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Maas Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/maas/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate maas spectro cluster create",
        "operationId": "v1SpectroClustersMaasValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroMaasClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Maas Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/mgmt/upgrade": {
      "patch": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "upgrade the spectro application management",
        "operationId": "v1SpectroAppMgmtUpgrade",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAppMgmtUpgrade"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/openstack": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Createa a OpenStack cluster",
        "operationId": "v1SpectroClustersOpenStackCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroOpenStackClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/openstack/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Import a OpenStack cluster",
        "operationId": "v1SpectroClustersOpenStackImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroOpenStackClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/openstack/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get openstack spectro cluster estimated rate information",
        "operationId": "v1SpectroClustersOpenStackRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroOpenStackClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Openstack Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/openstack/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate OpenStack spectro cluster create",
        "operationId": "v1SpectroClustersOpenStackValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroOpenStackClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "vsphere Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/tke": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates an Tke cluster",
        "operationId": "v1SpectroClustersTkeCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroTencentClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/tke/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get tke spectro cluster estimated rate information",
        "operationId": "v1SpectroClustersTkeRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroTencentClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tke Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/tke/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate tke spectro cluster create",
        "operationId": "v1SpectroClustersTkeValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroTencentClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tke Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/usage/compute": {
      "post": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "Compute the spectro clusters usage",
        "operationId": "v1SpectroClustersUsageCompute",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersUsageComputeSpec"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/validate/name": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Validates the spectrocluster name",
        "operationId": "v1SpectroClustersValidateName",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/validate/packs": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate spectro cluster packs",
        "operationId": "v1SpectroClustersValidatePacks",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPacksEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Spectro Cluster packs validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/vsphere": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Createa a vSphere cluster",
        "operationId": "v1SpectroClustersVsphereCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVsphereClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/vsphere/import": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Import a Vsphere cluster",
        "operationId": "v1SpectroClustersVsphereImport",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVsphereClusterImportEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/spectroclusters/vsphere/rate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Get vsphere spectro cluster estimated rate information",
        "operationId": "v1SpectroClustersVsphereRate",
        "parameters": [
          {
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "type": "string",
            "default": "hourly",
            "name": "periodType",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVsphereClusterRateEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vsphere Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/vsphere/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate vsphere spectro cluster create",
        "operationId": "v1SpectroClustersVsphereValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVsphereClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "vsphere Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster",
        "operationId": "v1SpectroClustersGet",
        "parameters": [
          {
            "type": "string",
            "name": "includeTags",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "resolvePackValues",
            "in": "query"
          },
          {
            "type": "string",
            "description": "includes pack meta such as schema, presets",
            "name": "includePackMeta",
            "in": "query"
          },
          {
            "type": "string",
            "description": "filter cluster profile templates by profileType",
            "name": "profileType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroCluster"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified cluster",
        "operationId": "v1SpectroClustersDelete",
        "parameters": [
          {
            "type": "boolean",
            "name": "forceDelete",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/assets": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the spectrocluster asset doc",
        "operationId": "v1SpectroClustersUidAssetsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetEntity"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Associate the assets for the cluster",
        "operationId": "v1SpectroClustersUidAssets",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/assets/frpKubeconfig": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's frp kube config file",
        "operationId": "v1SpectroClustersUidFrpKubeConfigGet",
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster's kube config data",
        "operationId": "v1SpectroClustersUidFrpKubeConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetFrpKubeConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/assets/kubeconfig": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's kube config file",
        "operationId": "v1SpectroClustersUidKubeConfig",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "name": "frp",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster's manifest data",
        "operationId": "v1SpectroClustersUidKubeConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetKubeConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/assets/kubeconfigclient": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's kube config client file",
        "operationId": "v1SpectroClustersUidKubeConfigClientGet",
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster's kube config client data",
        "operationId": "v1SpectroClustersUidKubeConfigClientUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetKubeConfigClient"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/assets/manifest": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's manifest data",
        "operationId": "v1SpectroClustersUidManifestGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster's manifest data",
        "operationId": "v1SpectroClustersUidManifestUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetManifest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/cleanup": {
      "delete": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Clean up the resources associated with the deleted cluster",
        "operationId": "v1SpectroClustersCleanUp",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/clusterConfig/clusterRbac": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified spectro cluster Cluster Role bindings",
        "operationId": "v1SpectroClustersUidClusterRbacUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbacEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/clusterConfig/osPatch": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified spectro cluster OS patch configuration",
        "operationId": "v1SpectroClustersUidOsPatchUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1OsPatchEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/clusterrbac": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "get the cluster rbacs associated with a cluster",
        "operationId": "v1SpectroClustersClusterRbac",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbacs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/config/namespaces": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves namespaces for the specified spectro cluster",
        "operationId": "v1SpectroClustersUidConfigNamespacesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterNamespaceResources"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates namespaces for the specified spectro cluster",
        "operationId": "v1SpectroClustersUidConfigNamespacesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterNamespaceResourcesUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/config/namespaces/{namespaceUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves the specified namespace of the spectro cluster",
        "operationId": "v1SpectroClustersUidConfigNamespacesUidGet",
        "responses": {
          "200": {
            "description": "Spectro Cluster's namespace response",
            "schema": {
              "$ref": "#/definitions/v1ClusterNamespaceResource"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified namespace of the spectro cluster",
        "operationId": "v1SpectroClustersUidConfigNamespacesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterNamespaceResourceInputEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "namespaceUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/config/rbacs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves rbacs for the specified spectro cluster",
        "operationId": "v1SpectroClustersUidConfigRbacsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbacs"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates rbacs for the specified spectro cluster",
        "operationId": "v1SpectroClustersUidConfigRbacsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbacResourcesUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/config/rbacs/{rbacUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves the specified rbac of the spectro cluster",
        "operationId": "v1SpectroClustersUidConfigRbacsUidGet",
        "responses": {
          "200": {
            "description": "Spectro Cluster's rbac response",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbac"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified rbac of the spectro cluster",
        "operationId": "v1SpectroClustersUidConfigRbacsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbacInputEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "rbacUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/download": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Download the specified cluster",
        "operationId": "v1SpectroClustersUidDownload",
        "responses": {
          "200": {
            "description": "download cluster archive file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/downloadProfileArtifacts": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Initiate download of profile artificats for a specified cluster",
        "operationId": "v1SpectroClustersUidDownloadProfileArtifacts",
        "responses": {
          "202": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/edge/edgeHosts": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of edge host of libvirt cluster",
        "operationId": "v1EdgeClustersHostsList",
        "responses": {
          "200": {
            "description": "List of edge host device",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevices"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/backup": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the  cluster backup result",
        "operationId": "v1ClusterFeatureBackupGet",
        "parameters": [
          {
            "type": "string",
            "name": "backupRequestUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterBackup"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update cluster backup settings",
        "operationId": "v1ClusterFeatureBackupUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterBackupConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create cluster backup settings",
        "operationId": "v1ClusterFeatureBackupCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterBackupConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/backup/onDemand": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create On demand Cluster Backup",
        "operationId": "v1ClusterFeatureBackupOnDemandCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterBackupConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/backup/{backupName}/request/{requestUid}": {
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete cluster backup",
        "operationId": "v1ClusterFeatureBackupDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "backupName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "requestUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the Compliance scan of cluster, if driverType is provided then specific status of driverType will be returned",
        "operationId": "v1ClusterFeatureComplianceScanGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterComplianceScan"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update cluster compliance scan settings",
        "operationId": "v1ClusterFeatureComplianceScanUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterComplianceScheduleConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create cluster compliance scan",
        "operationId": "v1ClusterFeatureComplianceScanCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterComplianceScheduleConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the Compliance scan log by cluster uid and driver type",
        "operationId": "v1ClusterFeatureComplianceScanLogsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterComplianceScanLogs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers/kubeBench": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the Compliance scan kube bench log by uid",
        "operationId": "v1ClusterFeatureScanKubeBenchLogUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1KubeBenchEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers/kubeHunter": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the Compliance scan kube hunter log by uid",
        "operationId": "v1ClusterFeatureScanKubeHunterLogUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1KubeHunterEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers/sonobuoy": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update Compliance scan sonobuoy log by uid",
        "operationId": "v1ClusterFeatureScanSonobuoyLogUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SonobuoyEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}": {
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete the Compliance scan log by uid",
        "operationId": "v1ClusterFeatureComplianceScanLogDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "logUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/kubeBench": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the Compliance scan kube bench log by uid",
        "operationId": "v1ClusterFeatureKubeBenchLogGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterScanLogKubeBench"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "logUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "reportId",
          "in": "query"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/kubeHunter": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the Compliance scan kube hunter log by uid",
        "operationId": "v1ClusterFeatureKubeHunterLogGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterScanLogKubeHunter"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "logUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "reportId",
          "in": "query"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/sonobuoy": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the Compliance scan sonobuoy log by uid",
        "operationId": "v1ClusterFeatureSonobuoyLogGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterScanLogSonobuoy"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "logUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "reportId",
          "in": "query"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/{driver}/download": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Downloads the driver cluster logs",
        "operationId": "v1ClusterFeatureDriverLogDownload",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "logUid",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "kubeBench",
            "kubeHunter",
            "sonobuoy"
          ],
          "type": "string",
          "name": "driver",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "default": "pdf",
          "name": "fileFormat",
          "in": "query"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/onDemand": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create On demand cluster compliance scan",
        "operationId": "v1ClusterFeatureComplianceScanOnDemandCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterComplianceOnDemandConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/helmCharts": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the installed helm charts of a specified cluster",
        "operationId": "v1ClusterFeatureHelmChartsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterHelmCharts"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/logFetcher": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the log fetcher for cluster",
        "operationId": "v1ClusterFeatureLogFetcherGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterLogFetcher"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create the log fetcher for cluster",
        "operationId": "v1ClusterFeatureLogFetcherCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterLogFetcherRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/manifests": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the installed manifests of a specified cluster",
        "operationId": "v1ClusterFeatureManifestsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterManifests"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/restore": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the cluster restore of cluster",
        "operationId": "v1ClusterFeatureRestoreGet",
        "parameters": [
          {
            "type": "string",
            "name": "restoreRequestUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterRestore"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/restore/onDemand": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create On demand Cluster restore",
        "operationId": "v1ClusterFeatureRestoreOnDemandCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRestoreConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/import/manifest": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's import manifest file",
        "operationId": "v1SpectroClustersUidImportManifest",
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/k8certificates": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get K8Certificate for spectro cluster",
        "operationId": "v1SpectroClustersK8Certificate",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1MachineCertificates"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/k8certificates/renew": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Sets the cluster master nodes Kubernetes certificates for renewal",
        "operationId": "v1SpectroClustersCertificatesRenew",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/libvirt/edgeHosts": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of edge host of libvirt cluster",
        "operationId": "v1LibvirtClustersHostsList",
        "responses": {
          "200": {
            "description": "List of edge host device",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevices"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/metadata": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update the specified spectro cluster metadata",
        "operationId": "v1SpectroClustersUidMetadataUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMetaInputEntitySchema"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/namespaces": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns available namespaces for the cluster",
        "operationId": "v1ClusterNamespacesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterNamespaces"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/pack/manifests/{manifestUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's manifest",
        "operationId": "v1SpectroClustersUidPackManifestsUidGet",
        "parameters": [
          {
            "type": "string",
            "description": "cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "manifest uid which is part of the pack ref",
            "name": "manifestUid",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "name": "resolveManifestValues",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Pack manifest content",
            "schema": {
              "$ref": "#/definitions/v1PackManifest"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/{uid}/pack/properties": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get specified spectro cluster pack properties",
        "operationId": "v1SpectroClustersUidPackProperties",
        "parameters": [
          {
            "type": "string",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "layer",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "fieldPath",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "name": "resolveMacros",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Spectro Cluster's pack properties response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPackProperties"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/{uid}/packRefs": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster's pack references",
        "operationId": "v1SpectroClustersPacksRefUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterNotificationUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "notify",
          "in": "query"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/packs/resolvedValues": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's packs resolved values",
        "operationId": "v1SpectroClustersUidPacksResolvedValuesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfilesResolvedValues"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/v1SpectroClusterProfilesParamReferenceEntity"
          }
        }
      ]
    },
    "/v1/spectroclusters/{uid}/packs/{packName}/config": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified cluster's pack configuration",
        "operationId": "v1SpectroClustersUidPacksConfigGet",
        "parameters": [
          {
            "type": "string",
            "description": "cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack name",
            "name": "packName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster pack values",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPackConfigList"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/{uid}/profile": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Replaces the specified cluster profile for the cluster",
        "operationId": "v1SpectroClustersPatchProfile",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/profileUpdates": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the profile updates of a specified cluster",
        "operationId": "v1SpectroClustersGetProfileUpdates",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfileUpdates"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/profiles": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the associated profiles of a specified cluster",
        "operationId": "v1SpectroClustersGetProfiles",
        "parameters": [
          {
            "type": "string",
            "description": "includes pack meta such as schema, presets",
            "name": "includePackMeta",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfileList"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Associate cluster profiles to the specified cluster",
        "operationId": "v1SpectroClustersUpdateProfiles",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "resolveNotification",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfiles"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/profiles/packs/manifests": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the associated profile's pack manifests of a specified cluster",
        "operationId": "v1SpectroClustersGetProfilesPacksManifests",
        "parameters": [
          {
            "type": "string",
            "description": "includes pack meta such as schema, presets",
            "name": "includePackMeta",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "resolveMacros",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfilesPacksManifests"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/profiles/{profileUid}/packs/{packName}/manifests": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the associated profiles pack manifests of a specified cluster",
        "operationId": "v1SpectroClustersProfilesUidPackManifestsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PackManifests"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates cluster profiles pack manifests to the specified cluster",
        "operationId": "v1SpectroClustersProfilesUidPackManifestsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ManifestRefInputEntities"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "profileUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "packName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/rate": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the estimated rate of the specified cluster",
        "operationId": "v1SpectroClustersUidRate",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "hourly",
            "monthly",
            "yearly"
          ],
          "type": "string",
          "default": "hourly",
          "name": "periodType",
          "in": "query"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/reset": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "reset the spectroclusters by deleting machine pools and condtions",
        "operationId": "V1SpectroClustersUidReset",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/status/condition": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster status condition",
        "operationId": "v1SpectroClustersUpdateStatusCondition",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterCondition"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/status/conditions": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster status conditions",
        "operationId": "v1SpectroClustersUpdateStatusConditions",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1ClusterCondition"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/status/endpoints": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster's service endpoints information",
        "operationId": "v1SpectroClustersUpdateStatusEndpoints",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1ApiEndpoint"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/status/imported": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster status as imported",
        "operationId": "v1SpectroClustersUpdateStatusImported",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/status/services": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified cluster's services information",
        "operationId": "v1SpectroClustersUpdateStatusServices",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1LoadBalancerService"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/status/upgrades": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the cluster's upgrade status",
        "operationId": "v1SpectroClustersUidUpgradesPut",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterUidUpgrades"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/validate/packs": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Validate spectro cluster packs",
        "operationId": "v1SpectroClustersUidValidatePacks",
        "parameters": [
          {
            "type": "string",
            "description": "cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPacksEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Spectro Cluster packs validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1/spectroclusters/{uid}/workloads/sync": {
      "post": {
        "description": "Sync specified cluster workload",
        "tags": [
          "v1"
        ],
        "summary": "Sync specified cluster workload",
        "operationId": "v1SpectroClustersUidWorkloadsSync",
        "responses": {
          "202": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/spectroclusters/{uid}/workloads/{workloadKind}/sync": {
      "post": {
        "description": "Sync specified cluster workload",
        "tags": [
          "v1"
        ],
        "summary": "Sync specified cluster workload",
        "operationId": "v1SpectroClustersUidWorkloadsKindSync",
        "responses": {
          "202": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "namespace",
            "pod",
            "deployment",
            "statefulset",
            "daemonset",
            "job",
            "cronjob"
          ],
          "type": "string",
          "name": "workloadKind",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/svc/hutil/internal/hubble/info": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "get hubble info",
        "operationId": "V1SvcHutilInternalHubbleInfo",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1HubbleInfo"
            }
          }
        }
      }
    },
    "/v1/svc/hutil/internal/pause": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "pause all the services",
        "operationId": "V1SvcHutilInternalPause",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/svc/hutil/internal/reinit/nats": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "reinit nats",
        "operationId": "V1SvcHutilInternalReinitNats",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/system/admin/email": {
      "patch": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "email reset for system admin",
        "operationId": "V1SystemAdminEmail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1V1SystemAdminEmail"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/admin/password/reset": {
      "patch": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "password reset for system admin",
        "operationId": "V1SystemAdminPasswordReset",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1V1SystemAdminPasswordResetEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/alerts": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "get the alerts specified for the system",
        "operationId": "v1SystemAlertsGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Alerts"
            }
          }
        }
      }
    },
    "/v1/system/alerts/{component}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Upsert the specified alert to the specified system",
        "operationId": "v1SystemAlertUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AlertEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified alert to the specified system",
        "operationId": "v1SystemAlertDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "component",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/system/appFeatures": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Get system app features",
        "operationId": "v1SystemAppFeaturesGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AppFeatures"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Update system app features",
        "operationId": "v1SystemAppFeaturesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AppFeatures"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1/system/config/aws/account": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "get the system config aws devops account",
        "operationId": "V1SystemConfigAwsAccountGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemAwsAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "updates the system config aws devops account",
        "operationId": "V1SystemConfigAwsAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemAwsAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/aws/image": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "get the system aws image",
        "operationId": "V1SystemConfigAwsImageGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemAwsImage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "updates the system default aws devops image",
        "operationId": "V1SystemConfigAwsImageUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemAwsImage"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/aws/sts/account": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "get the system config aws sts devops account",
        "operationId": "V1SystemConfigAwsStsAccountGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemAwsStsAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "updates the system config aws sts devops account",
        "operationId": "V1SystemConfigAwsStsAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemAwsStsAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/azure/account": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "get the system azure account",
        "operationId": "V1SystemConfigAzureAccountGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemAzureAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "updates the system default azure devops account",
        "operationId": "V1SystemConfigAzureAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemAzureAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/azure/storage": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "get the system azure storage",
        "operationId": "V1SystemConfigAzureStorageGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemAzureStorage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "updates the system default azure devops storage",
        "operationId": "V1SystemConfigAzureStorageUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemAzureStorage"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/certificate": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system certificates",
        "operationId": "V1SystemConfigCertificateGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemCertificateSpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the system certificate",
        "operationId": "V1SystemConfigCertificateUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SystemCertificateSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/database/backup/": {
      "get": {
        "description": "Deprecated. Use the config specific apis.",
        "tags": [
          "v1",
          "system"
        ],
        "operationId": "V1SystemConfigDatabaseBackupGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemBackupConfigSpec"
            }
          }
        }
      },
      "put": {
        "description": "Deprecated. Use the config specific apis.",
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the system backup config",
        "operationId": "V1SystemConfigDatabaseBackupUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemBackupConfigSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/database/backup/ftp": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system backup interval config",
        "operationId": "V1SystemConfigDatabaseBackupFtpGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemBackupFtpConfigSpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the system backup interval config",
        "operationId": "V1SystemConfigDatabaseBackupFtpUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemBackupFtpConfigSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/database/backup/s3": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system backup s3 config",
        "operationId": "V1SystemConfigDatabaseBackupS3Get",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemBackupS3ConfigSpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the system backup ftp storage config",
        "operationId": "V1SystemConfigDatabaseBackupS3Update",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemBackupS3ConfigSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/domain": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system domain config",
        "operationId": "V1SystemConfigDomainGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemConfigDomainSpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the system domain config",
        "operationId": "V1SystemConfigDomainUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemConfigDomainSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "update domain host url",
        "operationId": "V1SystemConfigDomainHostPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DomainHost"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/edge/image": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system edge image",
        "operationId": "V1SystemConfigEdgeImageGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemEdgeImage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the system default edge devops image",
        "operationId": "V1SystemConfigEdgeImageUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemEdgeImage"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/ftp/validate": {
      "post": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "validates the ftp config",
        "operationId": "V1SystemConfigFtpValidate",
        "parameters": [
          {
            "enum": [
              "read",
              "write",
              "readwrite"
            ],
            "type": "string",
            "name": "permission",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemFtpSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/system/config/gcp/account": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "get the system gcp account",
        "operationId": "V1SystemConfigGcpAccountGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemGcpAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "updates the system default gcp devops account",
        "operationId": "V1SystemConfigGcpAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SystemGcpAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/gcp/image": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "get the system gcp image",
        "operationId": "V1SystemConfigGcpImageGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemGcpImage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "updates the system default gcp devops image",
        "operationId": "V1SystemConfigGcpImageUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemGcpImage"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/libvirt/image": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system libvirt image",
        "operationId": "V1SystemConfigLibvirtImageGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemLibvirtImage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the system default libvirt devops image",
        "operationId": "V1SystemConfigLibvirtImageUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemLibvirtImage"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/logger": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system logger",
        "operationId": "V1SystemConfigLoggerGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemLoggerSpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the system logger",
        "operationId": "V1SystemConfigLoggerUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemLoggerSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/maas/image": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system maas image",
        "operationId": "V1SystemConfigMaasImageGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemMaasImage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the system default maas devops image",
        "operationId": "V1SystemConfigMaasImageUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemMaasImage"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/openstack/image": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system openstack image",
        "operationId": "V1SystemConfigOpenstackImageGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemOpenstackImage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the system default openstack devops image",
        "operationId": "V1SystemConfigOpenstackImageUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemOpenstackImage"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/paymentsecrets": {
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the payment secrets",
        "operationId": "V1PaymentSecretsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PaymentSecrets"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/preferences/billing": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the billing preference",
        "operationId": "V1BillingPreferenceGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Billing"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the billing preference",
        "operationId": "V1BillingPreferenceUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Billing"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/preferences/cluster": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the cluster preference",
        "operationId": "V1ClusterPreferenceGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ClusterPreference"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the cluster preference",
        "operationId": "V1ClusterPreferenceUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ClusterPreference"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/proxy": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system proxy",
        "operationId": "V1SystemConfigProxyGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemProxySpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "updates the system proxy",
        "operationId": "V1SystemConfigProxyUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemProxySpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/registries/{registryName}": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Gets the specified Registry",
        "operationId": "V1SystemRegistriesNameGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemRegistry"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Updates the specified Registry",
        "operationId": "V1SystemRegistriesNameUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SystemRegistry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Deletes the specified Registry",
        "operationId": "V1SystemRegistriesNameDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "registryName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/system/config/reverseproxy": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "get the system config reverse proxy",
        "operationId": "V1SystemConfigReverseProxyGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemReverseProxy"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "updates the system config reverse proxy",
        "operationId": "V1SystemConfigReverseProxyUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemReverseProxy"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/s3/validate": {
      "post": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "validates the s3 config",
        "operationId": "V1SystemConfigS3Validate",
        "parameters": [
          {
            "enum": [
              "read",
              "write",
              "readwrite"
            ],
            "type": "string",
            "name": "permission",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemS3Spec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/system/config/scar": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system Spectro repository",
        "operationId": "V1SystemConfigScarGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemScarSpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the system Spectro repository",
        "operationId": "V1SystemConfigScarUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemScarSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/smtp": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system smtp",
        "operationId": "V1SystemConfigSmtpGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemSmtpSpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the system smtp",
        "operationId": "V1SystemConfigSmtpUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemSmtpSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/smtp/validate": {
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "validates the system smtp",
        "operationId": "V1SystemConfigSmtpValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemSmtpSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/system/config/sso": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system sso",
        "operationId": "V1SystemConfigSsoGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemSsoSpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the system sso",
        "operationId": "V1SystemConfigSsoUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemSsoSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/tencent/account": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "Get the system config tencent devops account",
        "operationId": "V1SystemConfigTencentAccountGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemTencentAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "updates the system config tencent devops account",
        "operationId": "V1SystemConfigTencentAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemTencentAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/timeseries": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system timeseries",
        "operationId": "V1SystemConfigTimeseriesGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemTimeseriesSpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the system timeseries",
        "operationId": "V1SystemConfigTimeseriesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemTimeseriesSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/config/vsphere/image": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system vsphere image",
        "operationId": "V1SystemConfigVsphereImageGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemVsphereImage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the system default vsphere devops image",
        "operationId": "V1SystemConfigVsphereImageUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemVsphereImage"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/database/backup": {
      "patch": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "backup the database",
        "operationId": "V1SystemDbBackup",
        "parameters": [
          {
            "enum": [
              "ftp",
              "s3"
            ],
            "type": "string",
            "name": "mode",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/database/backups": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the database status",
        "operationId": "V1SystemDbBackups",
        "parameters": [
          {
            "enum": [
              "ftp",
              "s3"
            ],
            "type": "string",
            "name": "mode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1DatabaseTransferStatus"
            }
          }
        }
      }
    },
    "/v1/system/database/backups/{backupUid}": {
      "delete": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "delete the database backup",
        "operationId": "V1SystemDbBackupsBackupUid",
        "parameters": [
          {
            "type": "string",
            "name": "backupUid",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "ftp",
              "s3"
            ],
            "type": "string",
            "name": "mode",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      }
    },
    "/v1/system/database/recovery/{backupUid}/{mode}": {
      "patch": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "recover the database",
        "operationId": "V1SystemDbRecover",
        "parameters": [
          {
            "type": "string",
            "name": "backupUid",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "ftp",
              "s3"
            ],
            "type": "string",
            "name": "mode",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/database/restore/{backupUid}": {
      "patch": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "restore the database",
        "operationId": "V1SystemDbRestore",
        "parameters": [
          {
            "type": "string",
            "name": "backupUid",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "ftp",
              "s3"
            ],
            "type": "string",
            "name": "mode",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/encrypt": {
      "post": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "encrypt the system data",
        "operationId": "V1SystemEncrypt",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemCryptoInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemCryptoData"
            }
          }
        }
      }
    },
    "/v1/system/internal/spectromgmt": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the spectro management information",
        "operationId": "V1SystemSpectroMgmtGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SpectroMgmt"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the spectro management information",
        "operationId": "V1SystemSpectroMgmtUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SpectroMgmt"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "create the spectro mgmt information",
        "operationId": "V1SystemSpectroMgmtCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SpectroMgmt"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/system/password/policy/default": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system password policy",
        "operationId": "V1SystemPasswordPolicyGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemPasswordPolicySpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "updates the system admin",
        "operationId": "V1SystemPasswordPolicyUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemPasswordPolicySpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/plan": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system plan",
        "operationId": "V1SystemPlanGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemPlan"
            }
          }
        }
      }
    },
    "/v1/system/plan/credits/{creditUid}": {
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Updates the specified Plan's credit data",
        "operationId": "v1SystemCreditsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PlanCreditUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Deletes the specified Plan's credit data",
        "operationId": "v1SystemCreditsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "creditUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/system/plan/freeCredit": {
      "post": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Add system free credit",
        "operationId": "v1SystemFreeCreditAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PlanAddFreeCreditUpdate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/system/plan/planLimit": {
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Updates the specified system plan's limit",
        "operationId": "v1SystemPlanLimitUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1SystemPlanLimitUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1/system/plan/slaCredit": {
      "post": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Adds system sla breach credit",
        "operationId": "v1SystemSlaCreditAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1PlanAddSlaCreditUpdate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/system/plan/startDate": {
      "patch": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "updates the system start date",
        "operationId": "V1SystemStartDatePatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemStartDate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1/system/version/installed": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system installed version",
        "operationId": "V1SystemVersionInstalled",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemVersionInfo"
            }
          }
        }
      }
    },
    "/v1/system/version/latest": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "get the system latest available version",
        "operationId": "V1SystemVersionLatest",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemVersionInfo"
            }
          }
        }
      }
    },
    "/v1/teams": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of teams",
        "operationId": "v1TeamsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of teams",
            "schema": {
              "$ref": "#/definitions/v1Teams"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Creates a team with the specified users and roles",
        "operationId": "v1TeamsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Team"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/teams/internal/batch": {
      "post": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Create a multiple teams with the respective users and roles",
        "operationId": "v1TeamsInternalBatchCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TeamsBatch"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uids"
            }
          }
        }
      }
    },
    "/v1/teams/meta": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of teams metadata",
        "operationId": "v1TeamsMetadata",
        "responses": {
          "200": {
            "description": "An array of teams metadata items",
            "schema": {
              "$ref": "#/definitions/v1TeamsMetadata"
            }
          }
        }
      }
    },
    "/v1/teams/summary": {
      "get": {
        "description": "Deprecated, Use Post api - Returns a list of team summaries",
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of team summary",
        "operationId": "v1TeamsSummary",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TeamsSummary"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of teams summary with provided filter spec",
        "operationId": "v1TeamsSummaryGet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TeamsSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of teams summary items",
            "schema": {
              "$ref": "#/definitions/v1TeamsSummaryList"
            }
          }
        }
      }
    },
    "/v1/teams/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the sepcified team",
        "operationId": "v1TeamsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Team"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the sepcified team",
        "operationId": "v1TeamsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Team"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified team",
        "operationId": "v1TeamsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Patches the specified team",
        "operationId": "v1TeamsUidPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TeamPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/teams/{uid}/projects": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified team's project and roles data",
        "operationId": "v1TeamsProjectRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ProjectRolesEntity"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the projects and roles for the specified team",
        "operationId": "v1TeamsProjectRolesPut",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ProjectRolesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/teams/{uid}/roles": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified team's tenant roles",
        "operationId": "V1TeamsUidTenantRolesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TeamTenantRolesEntity"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the tenant roles of the specified team",
        "operationId": "V1TeamsUidTenantRolesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TeamTenantRolesUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Retrieves a list of tenants",
        "operationId": "v1TenantsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of tenants",
            "schema": {
              "$ref": "#/definitions/v1Tenants"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Creates a tenant",
        "operationId": "v1TenantsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/tenants/internal/msgbroker/accounts/reinit": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Reintialize the tenants message broker accounts",
        "operationId": "V1TenantsInternalMsgBrokerAccountsReInit",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TenantsAccountsNas"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "boolean",
          "name": "ignoreErrors",
          "in": "query"
        }
      ]
    },
    "/v1/tenants/internal/{tenantUid}/cleanUpStatus": {
      "put": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Update tenant status",
        "operationId": "v1UpdateTenantStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UpdateTenantStatus"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/signup": {
      "post": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Self signing up",
        "operationId": "v1TenantsSelfSignUp",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantSelfSignUpSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/tenants/signup/{signupToken}/activate": {
      "post": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Activates the self signed tenant using the password token",
        "operationId": "v1TenantsSelfSignUpActivate",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "signupToken",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/validate": {
      "post": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Validate tenant",
        "operationId": "v1TenantsValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantBasicEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/tenants/{tenantUid}": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Returns the specified tenant",
        "operationId": "v1TenantsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Tenant"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Deletes the specified tenant",
        "operationId": "v1TenantsDelete",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/activate": {
      "patch": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "activates the specified tenant",
        "operationId": "V1TenantsUidActivate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantActivate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/address": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update tenant address",
        "operationId": "v1PatchTenantAddress",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantAddressPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/assets/certs": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "lists the certificates for the tenant",
        "operationId": "V1TenantUIdAssetsCertsList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantAssetCerts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create the tenant certificate",
        "operationId": "V1TenantUidAssetsCertsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantAssetCert"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/assets/certs/{certificateUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the ca certificate for the tenant",
        "operationId": "V1TenantUidAssetsCertsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantAssetCert"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "updates the tenant certificate",
        "operationId": "V1TenantUidAssetsCertsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantAssetCert"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "deletes the tenant certificate",
        "operationId": "V1TenantUidAssetsCertsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "certificateUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/assets/dataSinks": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns data sink config of tenant",
        "operationId": "V1TenantUidAssetsDataSinksGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1DataSinkConfig"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "updates the tenant data sink config",
        "operationId": "V1TenantUidAssetsDataSinksUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1DataSinkConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "create data sink config",
        "operationId": "V1TenantUidAssetsDataSinksCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1DataSinkConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "deletes the tenant data sink config",
        "operationId": "V1TenantUidAssetsDataSinksDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/cleanUp": {
      "delete": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Clean up tenant resources",
        "operationId": "v1TenantsCleanUp",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "name": "useTenantCtx",
          "in": "query"
        },
        {
          "type": "boolean",
          "name": "forceDelete",
          "in": "query"
        }
      ]
    },
    "/v1/tenants/{tenantUid}/contract": {
      "put": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Updates the tenant contract settings",
        "operationId": "v1TenantsUidContractUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantContractSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/contract/accept": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Tenant to accept the contract agreement",
        "operationId": "v1TenantsUidContractAccept",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/creditAccount/aws": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the credit accounts for the tenants with free tier access",
        "operationId": "v1TenantsCreditAccountGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AwsCreditAccountEntity"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Updates the credit account for tenants with free tier access",
        "operationId": "v1TenantsCreditAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsCreditAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the aws credit account for tenants",
        "operationId": "v1TenantsCreditAccountDelete",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "forceDelete",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/domains": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "retrieves the domains for tenant",
        "operationId": "V1TenantUidDomainsGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TenantDomains"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "creates or updates domains for tenant",
        "operationId": "V1TenantUidDomainsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantDomains"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/emailId": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update tenant emailId",
        "operationId": "v1PatchTenantEmailId",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantEmailPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/freemiumUsage": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get tenant freemium usage",
        "operationId": "v1TenantFreemiumUsageGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantFreemiumUsage"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/invoice": {
      "post": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Retrieves a invoice for the given month",
        "operationId": "v1InvoiceByMonthPost",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Invoice"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "name": "invoiceDate",
          "in": "query",
          "required": true
        },
        {
          "type": "boolean",
          "name": "forceInvoiceGenerate",
          "in": "query"
        }
      ]
    },
    "/v1/tenants/{tenantUid}/invoice/retry": {
      "post": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Retry invoice",
        "operationId": "V1InvoiceRetry",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1InvoiceRetryRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/invoices": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Retrieves a list of invoices",
        "operationId": "v1InvoicesList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Invoices"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/invoices/{invoiceUid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified invoice",
        "operationId": "v1InvoicesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Invoice"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "invoiceUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/invoices/{invoiceUid}/report/invoice/pdf": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Downloads the specified invoice report",
        "operationId": "V1InvoiceUidReportInvoicePdf",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "invoiceUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/invoices/{invoiceUid}/report/pdf": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Downloads the specified monthly report",
        "operationId": "V1InvoiceUidReportPdf",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "invoiceUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/invoices/{invoiceUid}/report/usage/pdf": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1"
        ],
        "summary": "Downloads the specified usage",
        "operationId": "V1InvoiceUidReportUsagePdf",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "invoiceUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/isCleanedUp": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Get cleaned up tenant resources",
        "operationId": "v1TenantsIsCleanedUp",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1CleanUpResource"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/macros": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "List the macros of the specified tenant",
        "operationId": "v1TenantsUidMacrosList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the macros of the specified tenant",
        "operationId": "v1TenantsUidMacrosUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/oidc/config": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the oidc Spec for tenant",
        "operationId": "V1TenantUidOidcConfigGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantOidcClientSpec"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Associates the  oidc Spec for the tenant",
        "operationId": "V1TenantUidOidcConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantOidcClientSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/password/policy": {
      "get": {
        "tags": [
          "v1",
          "private"
        ],
        "summary": "retrieves the password policy for tenant",
        "operationId": "V1TenantUidPasswordPolicyGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TenantPasswordPolicyEntity"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "creates or updates a password policy for tenant",
        "operationId": "V1TenantUidPasswordPolicyUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantPasswordPolicyEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/plan": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Returns the current tenant's plan",
        "operationId": "v1TenantsUidPlanGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Plan"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/plans/usage/monthly": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Returns the tenant's monthly planUsage grouped by projects",
        "operationId": "v1PlansUsageMonthlyGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PlanMonthlyUsages"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "date",
          "name": "endDate",
          "in": "query"
        },
        {
          "type": "string",
          "format": "date",
          "name": "startDate",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/rateConfig": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get all rate config for public and private cloud",
        "operationId": "v1RateConfigGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RateConfig"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "updates the rate config for public and private cloud",
        "operationId": "v1RateConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1RateConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/saml/config": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified service provider metadata and Saml Spec for tenant",
        "operationId": "V1TenantUidSamlConfigSpecGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantSamlSpec"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Associates the specified federation metadata for the tenant",
        "operationId": "V1TenantUidSamlConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantSamlRequestSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/tenants/{tenantUid}/usage/cpuCoreHours": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Returns the tenant's cpu corehours usages grouped by projects",
        "operationId": "v1UsageCpuCoreHours",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PlanCpuCoreHoursUsages"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "name": "endTime",
          "in": "query"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "name": "startTime",
          "in": "query"
        }
      ]
    },
    "/v1/tenants/{tenantUid}/user": {
      "get": {
        "tags": [
          "v1",
          "system"
        ],
        "summary": "Returns the user object of the specified tenant",
        "operationId": "v1TenantsUserGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1",
          "private",
          "system"
        ],
        "summary": "Updates the user object of the tenant",
        "operationId": "v1TenantsUserUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1",
          "private",
          "system"
        ],
        "summary": "Creates an user using sysadmin privileges on behalf of the tenant",
        "operationId": "v1TenantsUserCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/timeseries/internal/subscribe": {
      "put": {
        "description": "Subscribe timeseries with the message broker",
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Subscribe timeseries with the message broker",
        "operationId": "v1TimeseriesSubscriberUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1MsgSubscriber"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1/userprofiles": {
      "get": {
        "description": "Lists user profiles",
        "tags": [
          "v1"
        ],
        "summary": "Lists user profiles",
        "operationId": "v1UserProfilesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserProfiles"
            }
          }
        }
      }
    },
    "/v1/userprofiles/{emailId}": {
      "get": {
        "description": "Get user profile by email id",
        "tags": [
          "v1"
        ],
        "summary": "Get user profile by email id",
        "operationId": "V1UserProfilesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserProfile"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "emailId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users": {
      "get": {
        "description": "Lists users the given user context",
        "tags": [
          "v1"
        ],
        "summary": "Lists users",
        "operationId": "v1UsersList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Users"
            }
          }
        }
      },
      "post": {
        "description": "A user is created for the given user context",
        "tags": [
          "v1"
        ],
        "summary": "Create User",
        "operationId": "v1UsersCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/assets/clusterrbacs": {
      "get": {
        "description": "Returns a list of users assets cluster rbacs",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Users assets cluster rbacs",
        "operationId": "v1UsersAssetsClusterRbacGet",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbacs"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Stores the specified Users assets cluster rbac",
        "operationId": "v1UserAssetsClusterRbacCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetClusterRbacEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/assets/clusterrbacs/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified users cluster rbac",
        "operationId": "v1UsersAssetClusterRbacGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbac"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified users clusters rbac",
        "operationId": "v1UsersAssetClusterRbacUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbac"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified users cluster rbac",
        "operationId": "v1UsersAssetClusterRbacDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/assets/locations": {
      "get": {
        "description": "Returns a list of users location",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified users location",
        "operationId": "v1UsersAssetsLocationGet",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocations"
            }
          }
        }
      }
    },
    "/v1/users/assets/locations/gcp": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Stores the specified Users assets Gcp location",
        "operationId": "v1UsersAssetsLocationGcpCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationGcp"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/assets/locations/gcp/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified users Gcp location",
        "operationId": "v1UsersAssetsLocationGcpGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationGcp"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified users Gcp location",
        "operationId": "v1UsersAssetsLocationGcpUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationGcp"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/assets/locations/minio": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Stores the specified users assets minio location",
        "operationId": "v1UsersAssetsLocationMinioCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/assets/locations/minio/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified users minio location",
        "operationId": "v1UsersAssetsLocationMinioGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified users minio location",
        "operationId": "v1UsersAssetsLocationMinioUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/assets/locations/s3": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Stores the specified Users assets s3 location",
        "operationId": "v1UsersAssetsLocationS3Create",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/assets/locations/s3/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified users s3 location",
        "operationId": "v1UsersAssetsLocationS3Get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified users s3 location",
        "operationId": "v1UsersAssetsLocationS3Update",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified users s3 location",
        "operationId": "v1UsersAssetsLocationS3Delete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/assets/locations/{type}/{uid}/default": {
      "patch": {
        "tags": [
          "v1"
        ],
        "summary": "Update the default backup location",
        "operationId": "v1UsersAssetsLocationDefaultUpdate",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "type",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/assets/locations/{uid}": {
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified users location",
        "operationId": "v1UsersAssetsLocationDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/assets/sshkeys": {
      "get": {
        "description": "Returns a list of users assets ssh keys",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Users assets ssh keys",
        "operationId": "v1UsersAssetsSshGet",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsSsh"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Stores the specified Users assets ssh",
        "operationId": "v1UserAssetsSshCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetSshEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/assets/sshkeys/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Users ssh key",
        "operationId": "v1UsersAssetSshGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserAssetSsh"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified Users ssh key",
        "operationId": "v1UsersAssetSshUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetSsh"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified Users ssh key",
        "operationId": "v1UsersAssetSshDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/assets/vsphere/dnsMapping": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified vsphere dns mapping",
        "operationId": "v1VsphereMappingGet",
        "parameters": [
          {
            "type": "string",
            "name": "gatewayUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "datacenter",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VsphereDnsMapping"
            }
          }
        }
      }
    },
    "/v1/users/assets/vsphere/dnsMappings": {
      "get": {
        "description": "Returns a list of vsphere dns mappings",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified vsphere dns mappings",
        "operationId": "v1VsphereDnsMappingsGet",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VsphereDnsMappings"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Stores the vsphere dns mapping",
        "operationId": "v1VsphereDnsMappingCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereDnsMapping"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/assets/vsphere/dnsMappings/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified vsphere dns mapping",
        "operationId": "v1VsphereDnsMappingGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VsphereDnsMapping"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified vsphere dns mapping",
        "operationId": "v1VsphereDnsMappingUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereDnsMapping"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the vsphere dns mapping",
        "operationId": "v1VsphereDnsMappingDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/config/reverseproxy": {
      "get": {
        "tags": [
          "v1",
          "system",
          "private"
        ],
        "summary": "get the reverse proxy config",
        "operationId": "V1UsersConfigReverseProxyGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ConfigReverseProxy"
            }
          }
        }
      }
    },
    "/v1/users/config/scar": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Get the system Spectro repository. Restricted to edge services",
        "operationId": "V1UsersConfigScarGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemScarSpec"
            }
          }
        }
      }
    },
    "/v1/users/me": {
      "get": {
        "description": "Returns a User with permissions with scopes",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified User ACL information",
        "operationId": "v1UsersMeGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserMe"
            }
          }
        }
      }
    },
    "/v1/users/meta": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of users metadata",
        "operationId": "v1UsersMetadata",
        "responses": {
          "200": {
            "description": "An array of users metadata items",
            "schema": {
              "$ref": "#/definitions/v1UsersMetadata"
            }
          }
        }
      }
    },
    "/v1/users/password/change": {
      "patch": {
        "description": "User password change request via current password and emailId",
        "tags": [
          "v1"
        ],
        "summary": "User password change request using the user emailId",
        "operationId": "V1UsersPasswordChange",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "newPassword",
                "emailId",
                "currentPassword"
              ],
              "properties": {
                "currentPassword": {
                  "type": "string"
                },
                "emailId": {
                  "type": "string"
                },
                "newPassword": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/password/reset": {
      "patch": {
        "description": "User password request will be sent to the supplied emailId",
        "tags": [
          "v1"
        ],
        "summary": "User password reset request using the email id",
        "operationId": "v1UsersEmailPasswordReset",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "emailId"
              ],
              "properties": {
                "emailId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/users/summary": {
      "get": {
        "description": "Deprecated, Use Post api - Returns a list of user summaries",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified user summary list",
        "operationId": "v1UsersSummary",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token to paginate the subsequent data items",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UsersSummary"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Retrieves a list of users summary with provided filter spec",
        "operationId": "v1UsersSummaryGet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UsersSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of users summary items",
            "schema": {
              "$ref": "#/definitions/v1UsersSummaryList"
            }
          }
        }
      }
    },
    "/v1/users/system/macros": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "List the macros of the system",
        "operationId": "v1UsersSystemMacrosList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update the macros of the system",
        "operationId": "v1UsersSystemMacrosUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1/users/{uid}": {
      "get": {
        "description": "Returns a User for the specified uid.",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified User",
        "operationId": "v1UsersUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          }
        }
      },
      "put": {
        "description": "A user is created for the given user context",
        "tags": [
          "v1"
        ],
        "summary": "Update User",
        "operationId": "v1UsersUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1UserUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Deletes the specified User for given uid",
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified User",
        "operationId": "v1UsersUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "description": "User is patched for the specified information",
        "tags": [
          "v1"
        ],
        "summary": "Patches the specified User",
        "operationId": "v1UsersUidPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UserPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/{uid}/activationlink": {
      "get": {
        "description": "API to get the user  activation link to reset the password",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified User activation link to reset the password",
        "operationId": "V1UsersUidActivationLink",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserActivateLink"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/{uid}/internal/token": {
      "get": {
        "description": "Internal API for automation to get the user password token to reset the password (required sysadmin jwt token)",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified User password token to reset the password restricted to sysadmin",
        "operationId": "v1UsersPasswordToken",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserActivateInfo"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/{uid}/password/change": {
      "patch": {
        "description": "User password change request via current password",
        "tags": [
          "v1"
        ],
        "summary": "User password change request using the user uid",
        "operationId": "v1UsersUidPasswordChange",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "newPassword"
              ],
              "properties": {
                "currentPassword": {
                  "type": "string"
                },
                "newPassword": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/{uid}/password/reset": {
      "patch": {
        "description": "User password reset request, will send the password reset option through the emailId",
        "tags": [
          "v1"
        ],
        "summary": "User password reset request using the user uid",
        "operationId": "v1UsersUidPasswordReset",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/{uid}/projects": {
      "get": {
        "description": "Returns a User with projects and roles",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified User Projects and Roles information",
        "operationId": "v1UsersProjectRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ProjectRolesEntity"
            }
          }
        }
      },
      "put": {
        "description": "User is updated with projects and roles",
        "tags": [
          "v1"
        ],
        "summary": "Updates the projects and roles for user",
        "operationId": "v1UsersProjectRolesPut",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ProjectRolesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/{uid}/restore": {
      "post": {
        "description": "Deleted user is restored back to active users",
        "tags": [
          "v1",
          "private"
        ],
        "summary": "Restore Archive User",
        "operationId": "v1UsersRestore",
        "responses": {
          "204": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/users/{uid}/roles": {
      "get": {
        "description": "Returns roles clubbed from team",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified individual and team roles for a user",
        "operationId": "v1UsersUidRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserRolesEntity"
            }
          }
        }
      },
      "put": {
        "description": "User is updated with roles",
        "tags": [
          "v1"
        ],
        "summary": "Updates the roles for user",
        "operationId": "v1UsersUidRolesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UserRoleUIDs"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create workspace",
        "operationId": "v1WorkspacesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/workspaces/teams/{teamUid}/roles": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified team's workspaces and roles data",
        "operationId": "v1TeamsWorkspaceGetRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceScopeRoles"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the workspace roles for the specified team",
        "operationId": "v1TeamsWorkspaceRolesPut",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1WorkspacesRolesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "teamUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/users/{userUid}/roles": {
      "get": {
        "description": "Returns a User with workspaces and roles",
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified User workspaces and Roles information",
        "operationId": "v1UsersWorkspaceGetRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceScopeRoles"
            }
          }
        }
      },
      "put": {
        "description": "User is updated with workspace roles",
        "tags": [
          "v1"
        ],
        "summary": "Updates the workspace roles for user",
        "operationId": "v1UsersWorkspaceRolesPut",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1WorkspacesRolesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "userUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/validate/name": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Validates the workspace name",
        "operationId": "v1WorkspacesValidateName",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1/workspaces/{uid}": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the specified workspace",
        "operationId": "v1WorkspacesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Workspace"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified workspace",
        "operationId": "v1WorkspacesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/{uid}/backup": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the  workspace backup result",
        "operationId": "v1WorkspaceOpsBackupGet",
        "parameters": [
          {
            "type": "string",
            "name": "backupRequestUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceBackup"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Update workspace backup settings",
        "operationId": "v1WorkspaceOpsBackupUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceBackupConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create workspace backup settings",
        "operationId": "v1WorkspaceOpsBackupCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceBackupConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Delete workspace backup",
        "operationId": "v1WorkspaceOpsBackupDelete",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceBackupDeleteEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/{uid}/backup/onDemand": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create On demand Workspace Backup",
        "operationId": "v1WorkspaceOpsBackupOnDemandCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceBackupConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/{uid}/clusterRbacs": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create cluster rbac in workspace",
        "operationId": "v1WorkspacesClusterRbacCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbac"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/{uid}/clusterRbacs/{clusterRbacUid}": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified workspace cluster rbac",
        "operationId": "v1WorkspacesUidClusterRbacUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbac"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1"
        ],
        "summary": "Deletes the specified workspace cluster rbac",
        "operationId": "v1WorkspacesUidClusterRbacDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "clusterRbacUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/{uid}/meta": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified workspace meta",
        "operationId": "v1WorkspacesUidMetaUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMeta"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/{uid}/resourceAllocations": {
      "put": {
        "tags": [
          "v1"
        ],
        "summary": "Updates the specified workspace resource allocations",
        "operationId": "v1WorkspacesUidResourceAllocationsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceResourceAllocationsEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/{uid}/restore": {
      "get": {
        "tags": [
          "v1"
        ],
        "summary": "Returns the  workspace restore result",
        "operationId": "v1WorkspaceOpsRestoreGet",
        "parameters": [
          {
            "type": "string",
            "name": "restoreRequestUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceRestore"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/workspaces/{uid}/restore/onDemand": {
      "post": {
        "tags": [
          "v1"
        ],
        "summary": "Create On demand Workspace Restore",
        "operationId": "v1WorkspaceOpsRestoreOnDemandCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceRestoreConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "V1AwsAccountSts": {
      "description": "Aws cloud account sts",
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        }
      }
    },
    "v1.CloudWatchConfig": {
      "description": "Cloud watch config",
      "type": "object",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "group": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "stream": {
          "type": "string"
        }
      }
    },
    "v1.DataSinkCloudWatchConfig": {
      "description": "Data sink cloud watch config",
      "type": "object",
      "properties": {
        "payload": {
          "$ref": "#/definitions/v1.DataSinkPayloads"
        },
        "spec": {
          "$ref": "#/definitions/v1.CloudWatchConfig"
        }
      }
    },
    "v1.DataSinkPayload": {
      "type": "object",
      "properties": {
        "refUid": {
          "type": "string"
        },
        "timestamp": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "additionalProperties": {
        "type": "object"
      }
    },
    "v1.DataSinkPayloads": {
      "description": "Cloud watch config",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1.DataSinkPayload"
      }
    },
    "v1.GcpAccountEntitySpec": {
      "type": "object",
      "properties": {
        "jsonCredentials": {
          "type": "string"
        },
        "jsonCredentialsFileUid": {
          "type": "string"
        }
      }
    },
    "v1AADProfile": {
      "description": "AADProfile - AAD integration is managed by AKS.",
      "type": "object",
      "required": [
        "managed",
        "adminGroupObjectIDs"
      ],
      "properties": {
        "adminGroupObjectIDs": {
          "description": "AdminGroupObjectIDs - AAD group object IDs that will have admin role of the cluster.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "managed": {
          "description": "Managed - Whether to enable managed AAD.",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1APIEndpoint": {
      "description": "APIEndpoint represents a reachable Kubernetes API endpoint.",
      "type": "object",
      "required": [
        "host",
        "port"
      ],
      "properties": {
        "host": {
          "description": "The hostname on which the API server is serving.",
          "type": "string"
        },
        "port": {
          "description": "The port on which the API server is serving.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1AclMeta": {
      "description": "Resource access control information",
      "type": "object",
      "properties": {
        "ownerUid": {
          "description": "User or service uid which created the resource",
          "type": "string"
        },
        "projectUid": {
          "description": "Project's uid if the resource is under a project",
          "type": "string"
        },
        "tenantUid": {
          "description": "Tenant's uid",
          "type": "string"
        }
      }
    },
    "v1ActiveTenantResources": {
      "description": "Active resources of tenant",
      "type": "object",
      "properties": {
        "activeResources": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1Address": {
      "description": "Tenant Address",
      "type": "object",
      "properties": {
        "addressLine1": {
          "type": "string"
        },
        "addressLine2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "pincode": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1Alert": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Channel"
          }
        },
        "component": {
          "type": "string"
        }
      }
    },
    "v1AlertEntity": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Channel"
          }
        }
      }
    },
    "v1AlertNotificationStatus": {
      "type": "object",
      "properties": {
        "isSucceeded": {
          "type": "boolean",
          "x-omitempty": false
        },
        "message": {
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1Alerts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1Alert"
      }
    },
    "v1ApiEndpoint": {
      "description": "APIEndpoint represents a reachable Kubernetes API endpoint.",
      "type": "object",
      "required": [
        "host",
        "port"
      ],
      "properties": {
        "host": {
          "description": "The hostname on which the API server is serving.",
          "type": "string"
        },
        "port": {
          "description": "The port on which the API server is serving.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ApiKey": {
      "description": "Api key information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ApiKeySpec"
        },
        "status": {
          "$ref": "#/definitions/v1ApiKeyStatus"
        }
      }
    },
    "v1ApiKeyActiveState": {
      "description": "Api key active state",
      "properties": {
        "isActive": {
          "type": "boolean"
        }
      }
    },
    "v1ApiKeyEntity": {
      "description": "Api key information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ApiKeySpecEntity"
        }
      }
    },
    "v1ApiKeySpec": {
      "description": "Api key spec",
      "type": "object",
      "properties": {
        "expiry": {
          "$ref": "#/definitions/v1Time"
        },
        "key": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/v1ApiKeyUser"
        }
      }
    },
    "v1ApiKeySpecEntity": {
      "description": "Api key spec",
      "type": "object",
      "properties": {
        "expiry": {
          "$ref": "#/definitions/v1Time"
        },
        "userUid": {
          "type": "string"
        }
      }
    },
    "v1ApiKeySpecUpdate": {
      "description": "Api key spec to be updated",
      "properties": {
        "expiry": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1ApiKeyStatus": {
      "description": "Api key status",
      "type": "object",
      "properties": {
        "isActive": {
          "type": "boolean"
        }
      }
    },
    "v1ApiKeyUpdate": {
      "description": "Api key information to be updated",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ApiKeySpecUpdate"
        }
      }
    },
    "v1ApiKeyUser": {
      "description": "Api key user information",
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ApiKeys": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ApiKey"
          }
        }
      }
    },
    "v1ApiProfiler": {
      "type": "object",
      "properties": {
        "api": {
          "type": "string"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "ops": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "requestUid": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "timeTaken": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1AppFeatureFreemium": {
      "description": "Freemium information",
      "properties": {
        "activeClustersLimit": {
          "type": "integer",
          "x-omitempty": false
        },
        "isFreemium": {
          "type": "boolean",
          "x-omitempty": false
        },
        "overageUsageLimit": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "totalUsageLimit": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1AppFeatures": {
      "description": "System app features",
      "properties": {
        "freeCloudCredit": {
          "type": "boolean",
          "x-omitempty": false
        },
        "freemium": {
          "$ref": "#/definitions/v1AppFeatureFreemium"
        }
      }
    },
    "v1AppVersion": {
      "description": "spectro application management app version information",
      "properties": {
        "intermediateVersions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ReleaseVersion"
          }
        },
        "latestVerson": {
          "$ref": "#/definitions/v1ReleaseVersion"
        }
      }
    },
    "v1AsyncOperationIdEntity": {
      "description": "Async operation id",
      "type": "object",
      "properties": {
        "operationId": {
          "type": "string"
        }
      }
    },
    "v1AsyncResult": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object"
        },
        "error": {
          "type": "string"
        },
        "isSuccess": {
          "type": "boolean"
        }
      }
    },
    "v1AsyncStatus": {
      "type": "object",
      "properties": {
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "result": {
          "type": "object",
          "$ref": "#/definitions/v1AsyncResult"
        },
        "stage": {
          "type": "string"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1Audit": {
      "description": "Aduit entity",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AuditSpec"
        }
      }
    },
    "v1AuditActor": {
      "description": "Audit actor spec",
      "properties": {
        "actorType": {
          "type": "string",
          "enum": [
            "user",
            "system",
            "service"
          ]
        },
        "project": {
          "$ref": "#/definitions/v1ProjectMeta"
        },
        "serviceName": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/v1UserMeta"
        }
      }
    },
    "v1AuditMsgUpdate": {
      "description": "Aduit user msg update entity",
      "type": "object",
      "properties": {
        "userMsg": {
          "type": "string",
          "maxLength": 255,
          "minLength": 3
        }
      }
    },
    "v1AuditSpec": {
      "description": "Audit specifications",
      "properties": {
        "actionMsg": {
          "type": "string"
        },
        "actionType": {
          "type": "string",
          "enum": [
            "create",
            "update",
            "delete",
            "publish",
            "deploy"
          ]
        },
        "actor": {
          "$ref": "#/definitions/v1AuditActor"
        },
        "contentMsg": {
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/v1ResourceReference"
        },
        "userMsg": {
          "type": "string"
        }
      }
    },
    "v1AuditSysMsg": {
      "description": "Aduit system message",
      "type": "object",
      "properties": {
        "actionMsg": {
          "type": "string"
        },
        "contentMsg": {
          "type": "string"
        }
      }
    },
    "v1Audits": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Audit"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1AuthLogin": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "org": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "v1AuthLoginEntity": {
      "description": "Auth login entity",
      "type": "object",
      "properties": {
        "authType": {
          "type": "string",
          "enum": [
            "password",
            "sso"
          ]
        },
        "orgName": {
          "type": "string"
        },
        "redirectUrl": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1AuthLogins": {
      "description": "Applicable auth logins with multiple orgs",
      "type": "object",
      "properties": {
        "appEnv": {
          "type": "string"
        },
        "authType": {
          "description": "Deprecated.",
          "type": "string",
          "enum": [
            "password",
            "sso"
          ]
        },
        "orgName": {
          "description": "Deprecated.",
          "type": "string"
        },
        "orgs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AuthLoginEntity"
          }
        },
        "redirectUrl": {
          "description": "Deprecated.",
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1AwsAMI": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1AwsAccount": {
      "description": "Aws cloud account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1AwsAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AwsAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1AwsAvailabilityZone": {
      "description": "Aws availability zone",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zoneId": {
          "type": "string"
        }
      }
    },
    "v1AwsAvailabilityZones": {
      "type": "object",
      "required": [
        "zones"
      ],
      "properties": {
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsAvailabilityZone"
          }
        }
      }
    },
    "v1AwsCloudAccount": {
      "type": "object",
      "properties": {
        "accessKey": {
          "description": "sts type will be used for role assumption for sts type, accessKey/secretKey contains the source account, Arn is the target account",
          "type": "string"
        },
        "credentialType": {
          "$ref": "#/definitions/v1AwsCloudAccountCredentialType"
        },
        "secretKey": {
          "type": "string"
        },
        "sts": {
          "$ref": "#/definitions/v1AwsStsCredentials"
        }
      }
    },
    "v1AwsCloudAccountCredentialType": {
      "type": "string",
      "default": "secret",
      "enum": [
        "secret",
        "sts"
      ]
    },
    "v1AwsCloudClusterConfigEntity": {
      "description": "AWS cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1AwsClusterConfig"
        }
      }
    },
    "v1AwsCloudConfig": {
      "description": "AwsCloudConfig is the Schema for the awscloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AwsCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1AwsCloudConfigStatus"
        }
      }
    },
    "v1AwsCloudConfigSpec": {
      "description": "AwsCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains AwsCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1AwsClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsMachinePoolConfig"
          }
        }
      }
    },
    "v1AwsCloudConfigStatus": {
      "description": "AwsCloudConfigStatus defines the observed state of AwsCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "type": "object",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "images": {
          "description": "Images array items should be 1-to-1 mapping to Spec.MachinePoolConfig",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsAMI"
          }
        },
        "isAddonLayer": {
          "description": "addon layers present in spc",
          "type": "boolean"
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      }
    },
    "v1AwsCloudCostSpec": {
      "description": "Aws cloud account usage cost payload spec",
      "type": "object",
      "required": [
        "credentials"
      ],
      "properties": {
        "accountId": {
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "filter": {
          "$ref": "#/definitions/v1AwsCloudCostSpecFilter"
        }
      }
    },
    "v1AwsCloudCostSpecFilter": {
      "description": "Aws cloud account usage cost payload filter. startTime and endTime should be within 12 months range from now.",
      "type": "object",
      "required": [
        "startTime"
      ],
      "properties": {
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "iamUserId": {
          "type": "string"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1AwsCloudCostSummary": {
      "description": "Aws cloud account usage cost summary response data",
      "type": "object",
      "properties": {
        "cost": {
          "$ref": "#/definitions/v1AwsCloudCostSummaryCloudCost"
        }
      }
    },
    "v1AwsCloudCostSummaryCloudCost": {
      "description": "Aws cloud account usage cost summary of monthlyCosts and totalCost",
      "type": "object",
      "properties": {
        "monthlyCosts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsCloudCostSummaryMonthlyCost"
          }
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1AwsCloudCostSummaryMonthlyCost": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "timestamp": {
          "type": "integer"
        }
      }
    },
    "v1AwsClusterConfig": {
      "description": "cluster level configuration for aws cloud, same for all machinepools",
      "type": "object",
      "required": [
        "region"
      ],
      "properties": {
        "bastionDisabled": {
          "description": "Create bastion node option we have earlier supported creation of bastion by default capa seems to favour session manager against bastion node https://github.com/kubernetes-sigs/cluster-api-provider-aws/issues/947",
          "type": "boolean"
        },
        "controlPlaneLoadBalancer": {
          "description": "ControlPlaneLoadBalancer specifies how API server elb will be configured, this field is optional, not provided, \"\", default =\u003e \"Internet-facing\" \"Internet-facing\" =\u003e \"Internet-facing\" \"internal\" =\u003e \"internal\" For spectro saas setup we require to talk to the apiserver from our cluster so ControlPlaneLoadBalancer should be \"\", not provided or \"Internet-facing\"",
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "vpcId": {
          "description": "VPC Id to deploy cluster into should have one public and one private subnet for the the cluster creation, this field is optional, If VPC Id is not provided a fully managed VPC will be created",
          "type": "string"
        }
      }
    },
    "v1AwsCreditAccount": {
      "type": "object",
      "properties": {
        "creditLimitInDollars": {
          "type": "number",
          "format": "float64"
        },
        "loginCredentials": {
          "$ref": "#/definitions/v1AwsLoginCredentials"
        },
        "userCloudAccount": {
          "$ref": "#/definitions/v1AwsUserCloudAccount"
        }
      }
    },
    "v1AwsCreditAccountEntity": {
      "type": "object",
      "properties": {
        "creditLimitInDollars": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "creditUsedInDollars": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "loginCredentials": {
          "$ref": "#/definitions/v1AwsLoginCredentials"
        },
        "userCloudAccount": {
          "$ref": "#/definitions/v1AwsUserCloudAccount"
        }
      }
    },
    "v1AwsFindImageRequest": {
      "description": "Aws image name and credentials",
      "type": "object",
      "properties": {
        "amiName": {
          "type": "string"
        },
        "awsAccount": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        }
      }
    },
    "v1AwsImage": {
      "description": "Aws image name and ami",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        }
      }
    },
    "v1AwsInstanceTypes": {
      "type": "object",
      "properties": {
        "instanceTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InstanceType"
          }
        }
      }
    },
    "v1AwsKeyPairs": {
      "type": "object",
      "properties": {
        "keyNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1AwsLoginCredentials": {
      "type": "object",
      "properties": {
        "iamUser": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "v1AwsMachine": {
      "description": "AWS cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AwsMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1AwsMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "capacityType": {
          "description": "EC2 instance capacity type",
          "type": "string",
          "default": "on-demand",
          "enum": [
            "on-demand",
            "spot"
          ]
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64",
          "maximum": 2000,
          "minimum": 1
        },
        "spotMarketOptions": {
          "description": "SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.",
          "$ref": "#/definitions/v1SpotMarketOptions"
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsSubnetEntity"
          }
        }
      }
    },
    "v1AwsMachinePoolConfig": {
      "type": "object",
      "required": [
        "isControlPlane"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "azs": {
          "description": "AZs is only used for dynamic placement",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "capacityType": {
          "description": "EC2 instance capacity type",
          "type": "string",
          "default": "on-demand",
          "enum": [
            "on-demand",
            "spot"
          ]
        },
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "spotMarketOptions": {
          "description": "SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.",
          "$ref": "#/definitions/v1SpotMarketOptions"
        },
        "subnetIds": {
          "description": "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"us-west-2d\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first private subnet from the AZ will be picked up for deployment",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "taints": {
          "description": "master or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1AwsMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1AwsMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1AwsMachineSpec": {
      "description": "AWS cloud VM definition spec",
      "type": "object",
      "required": [
        "instanceType",
        "vpcId",
        "ami"
      ],
      "properties": {
        "ami": {
          "type": "string"
        },
        "az": {
          "type": "string"
        },
        "dnsName": {
          "type": "string"
        },
        "iamProfile": {
          "type": "string"
        },
        "instanceType": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsNic"
          }
        },
        "phase": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "subnetId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vpcId": {
          "type": "string"
        }
      }
    },
    "v1AwsMachines": {
      "description": "AWS machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AwsMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1AwsNic": {
      "description": "AWS network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1AwsRegion": {
      "description": "Aws region",
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "optInStatus": {
          "type": "string"
        }
      }
    },
    "v1AwsRegions": {
      "type": "object",
      "required": [
        "regions"
      ],
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsRegion"
          }
        }
      }
    },
    "v1AwsS3BucketCredentials": {
      "description": "Aws S Bucket credentials",
      "type": "object",
      "required": [
        "credentials",
        "bucket",
        "region"
      ],
      "properties": {
        "bucket": {
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "folder": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "v1AwsStorageTypes": {
      "type": "object",
      "properties": {
        "storageTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1StorageType"
          }
        }
      }
    },
    "v1AwsStsCredentials": {
      "description": "Aws sts credentials",
      "type": "object",
      "properties": {
        "arn": {
          "description": "Arn for the aws sts credentials in cloud account",
          "type": "string"
        },
        "externalId": {
          "description": "ExternalId for the aws sts credentials in cloud account",
          "type": "string"
        }
      }
    },
    "v1AwsSubnet": {
      "description": "Aws subnet",
      "type": "object",
      "properties": {
        "az": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "subnetId": {
          "type": "string"
        }
      }
    },
    "v1AwsSubnetEntity": {
      "properties": {
        "az": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1AwsUserCloudAccount": {
      "properties": {
        "accountId": {
          "type": "string"
        },
        "cloudAccount": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        }
      }
    },
    "v1AwsVpc": {
      "description": "Aws Vpc",
      "type": "object",
      "required": [
        "vpcId"
      ],
      "properties": {
        "cidrBlock": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsSubnet"
          }
        },
        "vpcId": {
          "type": "string"
        }
      }
    },
    "v1AwsVpcs": {
      "type": "object",
      "required": [
        "vpcs"
      ],
      "properties": {
        "vpcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsVpc"
          }
        }
      }
    },
    "v1AzureAccount": {
      "description": "Azure account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AzureCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1AzureAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AzureAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1AzureAvailabilityZone": {
      "description": "Azure availability zone",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1AzureCloudAccount": {
      "type": "object",
      "required": [
        "tenantId",
        "clientId",
        "clientSecret"
      ],
      "properties": {
        "clientId": {
          "description": "Client ID(Directory ID) is a unique identifier generated by Azure AD that is tied to an application",
          "type": "string"
        },
        "clientSecret": {
          "description": "ClientSecret is the secret associated with Client",
          "type": "string"
        },
        "tenantId": {
          "description": "Tenant ID is the ID for the Azure AD tenant that the user belongs to.",
          "type": "string"
        },
        "tenantName": {
          "description": "Tenant ID is the ID for the Azure AD tenant that the user belongs to.",
          "type": "string"
        }
      }
    },
    "v1AzureCloudClusterConfigEntity": {
      "description": "Azure cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1AzureClusterConfig"
        }
      }
    },
    "v1AzureCloudConfig": {
      "description": "AzureCloudConfig is the Schema for the azurecloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AzureCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1AzureCloudConfigStatus"
        }
      }
    },
    "v1AzureCloudConfigSpec": {
      "description": "AwsCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains AzureCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1AzureClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AzureMachinePoolConfig"
          }
        }
      }
    },
    "v1AzureCloudConfigStatus": {
      "description": "AzureCloudConfigStatus defines the observed state of AzureCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "type": "object",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "conditions": {
          "description": "spectroAnsibleProvisioner: should be added only once, subsequent recocile will use the same provisioner SpectroAnsiblePacker bool `json:\"spectroAnsiblePacker,omitempty\"`",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "images": {
          "description": "Images array items should be 1-to-1 mapping to Spec.MachinePoolConfig",
          "$ref": "#/definitions/v1AzureImage"
        },
        "isAddonLayer": {
          "description": "addon layers present in spc",
          "type": "boolean"
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        },
        "vhdImage": {
          "$ref": "#/definitions/v1AzureVHDImage"
        }
      }
    },
    "v1AzureClusterConfig": {
      "description": "cluster level configuration for azure cloud, same for all machinepools",
      "type": "object",
      "required": [
        "subscriptionId",
        "location",
        "sshKey"
      ],
      "properties": {
        "aadProfile": {
          "description": "AadProfile is Azure Active Directory configuration to integrate with AKS for aad authentication.",
          "$ref": "#/definitions/v1AADProfile"
        },
        "controlPlaneSubnet": {
          "description": "Subnet for Kubernetes control-plane node",
          "$ref": "#/definitions/v1Subnet"
        },
        "location": {
          "description": "Location is the Azure datacenter location",
          "type": "string"
        },
        "resourceGroup": {
          "type": "string"
        },
        "sshKey": {
          "type": "string"
        },
        "subscriptionId": {
          "description": "Subscription ID is unique identifier for the subscription used to access Azure services",
          "type": "string"
        },
        "vnetCidrBlock": {
          "type": "string"
        },
        "vnetName": {
          "description": "VNETName is the virtual network in which the cluster is to be provisioned.",
          "type": "string"
        },
        "workerSubnet": {
          "description": "Subnet for Kubernetes worker node",
          "$ref": "#/definitions/v1Subnet"
        }
      }
    },
    "v1AzureGroup": {
      "description": "Azure group",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1AzureGroups": {
      "type": "object",
      "required": [
        "groups"
      ],
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AzureGroup"
          }
        }
      }
    },
    "v1AzureImage": {
      "description": "Refers to Azure Shared Gallery image",
      "type": "object",
      "properties": {
        "gallery": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resourceGroup": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "subscriptionID": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1AzureInstanceTypes": {
      "type": "object",
      "properties": {
        "instanceTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InstanceType"
          }
        }
      }
    },
    "v1AzureMachine": {
      "description": "Azure cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AzureMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1AzureMachinePoolCloudConfigEntity": {
      "type": "object",
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "description": "Instance type stands for VMSize in Azure",
          "type": "string"
        },
        "isSystemNodePool": {
          "description": "whether this pool is for system node Pool",
          "type": "boolean"
        },
        "osDisk": {
          "$ref": "#/definitions/v1AzureOSDisk"
        }
      }
    },
    "v1AzureMachinePoolConfig": {
      "type": "object",
      "required": [
        "isControlPlane"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "instanceType": {
          "description": "Instance type stands for VMSize in Azure",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "isSystemNodePool": {
          "description": "whether this pool is for system node Pool",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "osDisk": {
          "$ref": "#/definitions/v1AzureOSDisk"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "spotVMOptions": {
          "description": "SpotVMOptions allows the ability to specify the Machine should use a Spot VM",
          "$ref": "#/definitions/v1SpotVMOptions"
        },
        "taints": {
          "description": "master or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1AzureMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1AzureMachinePoolCloudConfigEntity"
        },
        "managedPoolConfig": {
          "$ref": "#/definitions/v1AzureManagedMachinePoolConfig"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1AzureMachineSpec": {
      "description": "Azure cloud VM definition spec",
      "type": "object",
      "required": [
        "instanceType",
        "location",
        "osDisk"
      ],
      "properties": {
        "additionalTags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "allocatePublicIP": {
          "type": "boolean"
        },
        "availabilityZone": {
          "$ref": "#/definitions/v1AzureMachineSpecAvailabilityZone"
        },
        "image": {
          "$ref": "#/definitions/v1AzureMachineSpecImage"
        },
        "instanceType": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AzureNic"
          }
        },
        "osDisk": {
          "$ref": "#/definitions/v1AzureOSDisk"
        },
        "sshPublicKey": {
          "type": "string"
        }
      }
    },
    "v1AzureMachineSpecAvailabilityZone": {
      "description": "Azure Machine Spec Availability zone",
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1AzureMachineSpecImage": {
      "description": "Azure Machine Spec Image",
      "type": "object",
      "properties": {
        "gallery": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "offer": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "resourceGroup": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1AzureMachines": {
      "description": "Azure machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AzureMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1AzureManagedMachinePoolConfig": {
      "type": "object",
      "properties": {
        "isSystemNodePool": {
          "description": "whether this pool is for system node Pool",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1AzureNic": {
      "description": "AWS network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1AzureOSDisk": {
      "type": "object",
      "properties": {
        "diskSizeGB": {
          "type": "integer",
          "format": "int32"
        },
        "managedDisk": {
          "$ref": "#/definitions/v1ManagedDisk"
        },
        "osType": {
          "type": "string"
        }
      }
    },
    "v1AzureRegion": {
      "description": "Azure region",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AzureAvailabilityZone"
          }
        }
      }
    },
    "v1AzureRegions": {
      "type": "object",
      "required": [
        "regions"
      ],
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AzureRegion"
          }
        }
      }
    },
    "v1AzureResourceGroupList": {
      "type": "object",
      "properties": {
        "resourceGroupList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceGroup"
          }
        }
      }
    },
    "v1AzureStorageAccountEntity": {
      "description": "Azure Storage Account Entity",
      "type": "object",
      "properties": {
        "storageAccountTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1StorageAccountEntity"
          }
        }
      }
    },
    "v1AzureStorageTypes": {
      "type": "object",
      "properties": {
        "storageTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1StorageType"
          }
        }
      }
    },
    "v1AzureSubscriptionList": {
      "type": "object",
      "properties": {
        "subscriptionList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Subscription"
          }
        }
      }
    },
    "v1AzureVHDImage": {
      "description": "Mold always create VHD image for custom image, and this can be use as golden images",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1AzureVhdUrlEntity": {
      "description": "Azure vhd url entity",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "v1AzureVirtualNetworkList": {
      "type": "object",
      "properties": {
        "virtualNetworkList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VirtualNetwork"
          }
        }
      }
    },
    "v1AzureZoneEntity": {
      "type": "object",
      "properties": {
        "zoneList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ZoneEntity"
          }
        }
      }
    },
    "v1BackupRestoreStatusMeta": {
      "description": "Backup restored status",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "destinationClusterRef": {
          "$ref": "#/definitions/v1ResourceReference"
        },
        "restoreState": {
          "type": "string"
        }
      }
    },
    "v1BackupState": {
      "description": "Backup state",
      "properties": {
        "backupTime": {
          "$ref": "#/definitions/v1Time"
        },
        "deleteState": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1BackupStatusConfig": {
      "description": "Backup config",
      "properties": {
        "includeAllDisks": {
          "type": "boolean"
        },
        "includeClusterResources": {
          "type": "boolean"
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BackupStatusMeta": {
      "description": "Backup  status meta",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "backupState": {
          "$ref": "#/definitions/v1BackupState"
        },
        "backupedNamespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "expiryDate": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1BasicOciRegistry": {
      "description": "Basic oci registry information",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1BasicOciRegistrySpec"
        }
      }
    },
    "v1BasicOciRegistrySpec": {
      "description": "Basic oci registry spec",
      "type": "object",
      "required": [
        "endpoint",
        "auth"
      ],
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "endpoint": {
          "type": "string"
        }
      }
    },
    "v1Billing": {
      "description": "billing preference",
      "properties": {
        "billingDay": {
          "type": "integer"
        },
        "tierPricing": {
          "$ref": "#/definitions/v1TierPrice"
        }
      }
    },
    "v1BulkEvents": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1Event"
      }
    },
    "v1CPU": {
      "type": "object",
      "properties": {
        "cores": {
          "description": "number of cpu cores",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1Card": {
      "description": "Card details",
      "properties": {
        "brand": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "expMonth": {
          "type": "number",
          "format": "uint64"
        },
        "expYear": {
          "type": "number",
          "format": "uint64"
        },
        "fingerPrint": {
          "type": "string"
        },
        "funding": {
          "type": "string"
        },
        "last4": {
          "type": "string"
        }
      }
    },
    "v1Cert": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "string",
          "x-omitempty": false
        },
        "isCA": {
          "type": "boolean",
          "x-omitempty": false
        },
        "key": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1Certificate": {
      "description": "Certificate details",
      "type": "object",
      "properties": {
        "expiry": {
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1CertificateAuthority": {
      "description": "Certificate Authority",
      "type": "object",
      "properties": {
        "certificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Certificate"
          }
        },
        "expiry": {
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1Channel": {
      "type": "object",
      "properties": {
        "alertAllUsers": {
          "type": "boolean",
          "x-omitempty": false
        },
        "http": {
          "type": "object",
          "properties": {
            "body": {
              "type": "string"
            },
            "headers": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "method": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        },
        "identifiers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "isActive": {
          "type": "boolean",
          "x-omitempty": false
        },
        "status": {
          "$ref": "#/definitions/v1AlertNotificationStatus"
        },
        "type": {
          "type": "string",
          "enum": [
            "email",
            "app",
            "http"
          ]
        }
      }
    },
    "v1CleanUpResource": {
      "description": "Resources of tenant",
      "type": "object",
      "properties": {
        "activeResources": {
          "$ref": "#/definitions/v1ActiveTenantResources"
        },
        "tenantStatus": {
          "$ref": "#/definitions/v1TenantCleanUpStatus"
        }
      }
    },
    "v1CloudAccountMeta": {
      "description": "Cloud account meta information",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1CloudAccountStatus": {
      "description": "Status of the account",
      "type": "object",
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "v1CloudAccountSummary": {
      "description": "Cloud account summary",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "specSummary": {
          "description": "Cloud account spec summary",
          "type": "object",
          "properties": {
            "accountId": {
              "type": "string"
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1CloudAccountsPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1HttpPatch"
      }
    },
    "v1CloudAccountsSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudAccountSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1CloudConfigMeta": {
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1CloudType"
        },
        "machinePools": {
          "description": "Machine pool meta information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MachinePoolMeta"
          }
        }
      }
    },
    "v1CloudCost": {
      "description": "Cloud cost information",
      "type": "object",
      "properties": {
        "compute": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "storage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1CloudCostDataPoint": {
      "description": "Cloud cost data point information",
      "type": "object",
      "properties": {
        "compute": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "storage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "timestamp": {
          "type": "number",
          "format": "int64"
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1CloudInstanceRateConfig": {
      "description": "Cloud instance rate config",
      "properties": {
        "computeRateProportion": {
          "type": "number",
          "format": "float"
        },
        "memoryRateProportion": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "v1CloudMachineStatus": {
      "description": "cloud machine status",
      "type": "object",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1MachineHealth"
        },
        "instanceState": {
          "type": "string",
          "enum": [
            "Pending",
            "Provisioning",
            "Provisioned",
            "Running",
            "Deleting",
            "Deleted",
            "Failed",
            "Unknown"
          ]
        }
      }
    },
    "v1CloudRate": {
      "description": "Cloud estimated rate information",
      "type": "object",
      "properties": {
        "compute": {
          "$ref": "#/definitions/v1ComputeRate"
        },
        "storage": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1StorageRate"
          }
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1CloudResourceMetadata": {
      "description": "Cloud resource metadata",
      "type": "object",
      "properties": {
        "instanceTypes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1InstanceType"
          }
        },
        "storageTypes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1StorageType"
          }
        }
      }
    },
    "v1CloudSpotPrice": {
      "type": "object",
      "properties": {
        "spotPrice": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1CloudType": {
      "type": "string",
      "default": "all",
      "enum": [
        "all",
        "aws",
        "azure",
        "gcp",
        "vsphere",
        "openstack",
        "maas",
        "baremetal",
        "eks",
        "aks",
        "edge",
        "libvirt",
        "tencent",
        "tke"
      ]
    },
    "v1CloudWatch": {
      "type": "object",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "group": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "stream": {
          "type": "string"
        }
      }
    },
    "v1ClusterBackup": {
      "description": "Cluster Backup",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterBackupSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterBackupStatus"
        }
      }
    },
    "v1ClusterBackupConfig": {
      "description": "Cluster backup config",
      "properties": {
        "backupLocationUid": {
          "type": "string"
        },
        "backupName": {
          "type": "string"
        },
        "backupPrefix": {
          "type": "string"
        },
        "durationInHours": {
          "type": "number",
          "format": "int64"
        },
        "includeAllDisks": {
          "type": "boolean"
        },
        "includeClusterResources": {
          "type": "boolean"
        },
        "locationType": {
          "type": "string"
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "schedule": {
          "$ref": "#/definitions/v1ClusterFeatureSchedule"
        }
      }
    },
    "v1ClusterBackupLocationType": {
      "description": "Cluster backup location type",
      "required": [
        "locationType"
      ],
      "properties": {
        "locationType": {
          "type": "string"
        }
      }
    },
    "v1ClusterBackupSpec": {
      "description": "Cluster Backup Spec",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/v1ClusterBackupConfig"
        }
      }
    },
    "v1ClusterBackupStatus": {
      "description": "Cluster Backup Status",
      "properties": {
        "clusterBackupStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterBackupStatusMeta"
          }
        }
      }
    },
    "v1ClusterBackupStatusMeta": {
      "description": "Cluster Backup Status Meta",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "backupConfig": {
          "$ref": "#/definitions/v1BackupStatusConfig"
        },
        "backupRequestUid": {
          "type": "string"
        },
        "backupStatusMeta": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1BackupStatusMeta"
          }
        },
        "restoreStatusMeta": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1BackupRestoreStatusMeta"
          }
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterComplianceOnDemandConfig": {
      "description": "Cluster Compliance Scan on demand config",
      "properties": {
        "kubeBench": {
          "$ref": "#/definitions/v1ClusterComplianceScanKubeBenchConfig"
        },
        "kubeHunter": {
          "$ref": "#/definitions/v1ClusterComplianceScanKubeHunterConfig"
        },
        "sonobuoy": {
          "$ref": "#/definitions/v1ClusterComplianceScanSonobuoyConfig"
        }
      }
    },
    "v1ClusterComplianceScan": {
      "description": "Cluster Compliance Scan",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterComplianceScanSpec"
        }
      }
    },
    "v1ClusterComplianceScanKubeBenchConfig": {
      "description": "Cluster Compliance Scan config for kube bench driver",
      "properties": {
        "runScan": {
          "type": "boolean"
        }
      }
    },
    "v1ClusterComplianceScanKubeBenchScheduleConfig": {
      "description": "Cluster Compliance Scan schedule config for kube bench driver",
      "properties": {
        "schedule": {
          "$ref": "#/definitions/v1ClusterFeatureSchedule"
        }
      }
    },
    "v1ClusterComplianceScanKubeHunterConfig": {
      "description": "Cluster Compliance Scan config for kube hunter driver",
      "properties": {
        "runScan": {
          "type": "boolean"
        }
      }
    },
    "v1ClusterComplianceScanKubeHunterScheduleConfig": {
      "description": "Cluster Compliance Scan schedule config for kube hunter driver",
      "properties": {
        "schedule": {
          "$ref": "#/definitions/v1ClusterFeatureSchedule"
        }
      }
    },
    "v1ClusterComplianceScanLogSpec": {
      "description": "Cluster Compliance Scan logs spec",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "driverType": {
          "type": "string"
        }
      }
    },
    "v1ClusterComplianceScanLogs": {
      "description": "Cluster Compliance Scan Logs",
      "properties": {
        "kubeBenchLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterScanLogKubeBench"
          }
        },
        "kubeHunterLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterScanLogKubeHunter"
          }
        },
        "sonobuoyLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterScanLogSonobuoy"
          }
        }
      }
    },
    "v1ClusterComplianceScanSonobuoyConfig": {
      "description": "Cluster Compliance Scan config for sonobuoy driver",
      "properties": {
        "runScan": {
          "type": "boolean"
        }
      }
    },
    "v1ClusterComplianceScanSonobuoyScheduleConfig": {
      "description": "Cluster Compliance Scan schedule config for sonobuoy driver",
      "properties": {
        "schedule": {
          "$ref": "#/definitions/v1ClusterFeatureSchedule"
        }
      }
    },
    "v1ClusterComplianceScanSpec": {
      "description": "Cluster Compliance Scan Spec",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "driverSpec": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1ComplianceScanDriverSpec"
          }
        }
      }
    },
    "v1ClusterComplianceScheduleConfig": {
      "description": "Cluster Compliance Scan schedule config",
      "properties": {
        "kubeBench": {
          "$ref": "#/definitions/v1ClusterComplianceScanKubeBenchScheduleConfig"
        },
        "kubeHunter": {
          "$ref": "#/definitions/v1ClusterComplianceScanKubeHunterScheduleConfig"
        },
        "sonobuoy": {
          "$ref": "#/definitions/v1ClusterComplianceScanSonobuoyScheduleConfig"
        }
      }
    },
    "v1ClusterCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1ClusterConfig": {
      "type": "object",
      "properties": {
        "clusterRbac": {
          "description": "Deprecated. Use clusterResources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        },
        "clusterResources": {
          "description": "ClusterResources defines the managment of namespace resource allocations, role bindings.",
          "$ref": "#/definitions/v1ClusterResources"
        },
        "controlPlaneHealthCheckTimeout": {
          "description": "ControlPlaneHealthCheckTimeout is the timeout to check for ready state of the control plane nodes. If the node is not ready within the time out set, the node will be deleted and a new node will be launched.",
          "type": "string"
        },
        "machineHealthConfig": {
          "description": "MachineHealthCheckConfig defines the healthcheck timeouts for the node. The timeouts are configured by the user to overide the default healthchecks.",
          "$ref": "#/definitions/v1MachineHealthCheckConfig"
        },
        "machineManagementConfig": {
          "description": "MachineManagementConfig defines the management configurations for the node. Patching OS security updates etc can be configured by user.",
          "$ref": "#/definitions/v1MachineManagementConfig"
        },
        "updateWorkerPoolsInParallel": {
          "description": "UpdateWorkerPoolsInParallel is used to decide if the update of workerpools happen in parallel. When this flag is false, the workerpools are updated sequentially.",
          "type": "boolean"
        }
      }
    },
    "v1ClusterConfigEntity": {
      "type": "object",
      "properties": {
        "machineManagementConfig": {
          "$ref": "#/definitions/v1MachineManagementConfig"
        },
        "resources": {
          "$ref": "#/definitions/v1ClusterResourcesEntity"
        },
        "updateWorkerPoolsInParallel": {
          "type": "boolean"
        }
      }
    },
    "v1ClusterFeatureActor": {
      "description": "Compliance Scan actor",
      "properties": {
        "actorType": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ClusterFeatureSchedule": {
      "description": "Cluster feature schedule",
      "properties": {
        "scheduledRunTime": {
          "type": "string"
        }
      }
    },
    "v1ClusterHelmChart": {
      "description": "Cluster helm chart metadata",
      "properties": {
        "localName": {
          "type": "string"
        },
        "matchedRegistries": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterHelmRegistry"
          }
        },
        "name": {
          "type": "string"
        },
        "values": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ClusterHelmCharts": {
      "description": "Cluster helm charts metadata",
      "properties": {
        "charts": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterHelmChart"
          }
        }
      }
    },
    "v1ClusterHelmRegistry": {
      "description": "Cluster helm registry information",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ClusterImport": {
      "type": "object",
      "properties": {
        "importLink": {
          "description": "import link to download and install ally-lite, palette-lite",
          "type": "string"
        },
        "isBrownfield": {
          "description": "Deprecated. Use the 'spec.clusterType'",
          "type": "boolean",
          "x-omitempty": false
        },
        "state": {
          "description": "cluster import status",
          "type": "string"
        }
      }
    },
    "v1ClusterKubeBenchLogStatus": {
      "description": "Cluster Compliance Scan Kube Bench Log Status",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "reports": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1KubeBenchReport"
          }
        },
        "requestUid": {
          "type": "string"
        },
        "scanTime": {
          "$ref": "#/definitions/v1ClusterScanTime"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterKubeHunterLogStatus": {
      "description": "Cluster Compliance Scan Kube Hunter Log Status",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "reports": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1KubeHunterReport"
          }
        },
        "requestUid": {
          "type": "string"
        },
        "scanTime": {
          "$ref": "#/definitions/v1ClusterScanTime"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterLogFetcher": {
      "description": "Cluster Log Fetcher",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterLogFetcherSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterLogFetcherStatus"
        }
      }
    },
    "v1ClusterLogFetcherK8sRequest": {
      "description": "Cluster Log Fetcher K8s",
      "properties": {
        "labelSelector": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ClusterLogFetcherNodeRequest": {
      "description": "Cluster Log Fetcher Node Request",
      "properties": {
        "logs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ClusterLogFetcherRequest": {
      "description": "Cluster Log Fetcher Request",
      "properties": {
        "duration": {
          "type": "integer",
          "format": "int64",
          "default": 10
        },
        "k8s": {
          "$ref": "#/definitions/v1ClusterLogFetcherK8sRequest"
        },
        "noOfLines": {
          "type": "integer",
          "format": "int64",
          "default": 1000
        },
        "node": {
          "$ref": "#/definitions/v1ClusterLogFetcherNodeRequest"
        }
      }
    },
    "v1ClusterLogFetcherSpec": {
      "description": "Cluster Log Fetcher Spec",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "log": {
          "type": "string"
        }
      }
    },
    "v1ClusterLogFetcherStatus": {
      "description": "Cluster Log Fetcher Status",
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterManifest": {
      "description": "Cluster manifest information",
      "properties": {
        "content": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1ClusterManifests": {
      "description": "Cluster manifests information",
      "properties": {
        "manifests": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterManifest"
          }
        }
      }
    },
    "v1ClusterNamespace": {
      "description": "Cluster's namespace",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "pvcCount": {
          "type": "number",
          "format": "int32"
        }
      }
    },
    "v1ClusterNamespaceResource": {
      "description": "Cluster Namespace resource defintion",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterNamespaceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterNamespaceStatus"
        }
      }
    },
    "v1ClusterNamespaceResourceAllocation": {
      "description": "Cluster namespace resource allocation",
      "properties": {
        "cpuCores": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": true
        },
        "memoryMiB": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": true
        }
      }
    },
    "v1ClusterNamespaceResourceInputEntity": {
      "description": "Cluster Namespace resource defintion",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaUpdateEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterNamespaceSpec"
        }
      }
    },
    "v1ClusterNamespaceResources": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterNamespaceResource"
          }
        }
      }
    },
    "v1ClusterNamespaceResourcesUpdateEntity": {
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterNamespaceResourceInputEntity"
          }
        }
      }
    },
    "v1ClusterNamespaceSpec": {
      "description": "Cluster namespace spec",
      "properties": {
        "relatedObject": {
          "$ref": "#/definitions/v1RelatedObject"
        },
        "resourceAllocation": {
          "$ref": "#/definitions/v1ClusterNamespaceResourceAllocation"
        }
      }
    },
    "v1ClusterNamespaceStatus": {
      "description": "Cluster namespace status",
      "properties": {
        "errors": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterResourceError"
          }
        }
      }
    },
    "v1ClusterNamespaces": {
      "description": "Cluster's available namespaces",
      "properties": {
        "namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterNamespace"
          }
        }
      }
    },
    "v1ClusterNotificationUpdateEntity": {
      "description": "Cluster input for notification update",
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterProfileNotificationUpdateEntity"
          }
        }
      }
    },
    "v1ClusterPreference": {
      "description": "cluster preference",
      "properties": {
        "archivalInterval": {
          "description": "Time unit is hour",
          "type": "integer"
        },
        "deletePeriod": {
          "description": "Time unit is hour",
          "type": "integer"
        },
        "monitorInterval": {
          "description": "Time unit is minutes",
          "type": "integer"
        }
      }
    },
    "v1ClusterProfile": {
      "description": "ClusterProfile is the Schema for the clusterprofiles API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterProfileSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterProfileStatus"
        }
      }
    },
    "v1ClusterProfileCloneEntity": {
      "description": "Cluster profile input for clone",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterProfileCloneMetaInputEntity"
        }
      }
    },
    "v1ClusterProfileCloneMetaInputEntity": {
      "description": "Cluster profile clone meta input entity",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1ClusterProfileEntity": {
      "description": "Cluster profile input for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "template": {
              "$ref": "#/definitions/v1ClusterProfileTemplateDraft"
            }
          }
        }
      }
    },
    "v1ClusterProfileFilterSpec": {
      "description": "Cluster profile filter spec",
      "properties": {
        "environment": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudType"
          }
        },
        "profileName": {
          "$ref": "#/definitions/v1FilterString"
        },
        "profileType": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ProfileType"
          }
        },
        "tags": {
          "$ref": "#/definitions/v1FilterArray"
        }
      }
    },
    "v1ClusterProfileNotificationUpdateEntity": {
      "description": "Cluster profile input for notification update",
      "type": "object",
      "properties": {
        "packs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackManifestUpdateEntity"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ClusterProfilePackConfigList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackConfig"
          }
        }
      }
    },
    "v1ClusterProfilePackManifests": {
      "description": "Cluster profile's pack manifests information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackManifestsSpec"
        },
        "status": {
          "$ref": "#/definitions/v1PackSummaryStatus"
        }
      }
    },
    "v1ClusterProfilePacksEntities": {
      "description": "List of cluster profile packs entities",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterProfilePacksEntity"
          }
        }
      }
    },
    "v1ClusterProfilePacksEntity": {
      "description": "Cluster profile's packs information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackSummarySpec"
        },
        "status": {
          "$ref": "#/definitions/v1PackSummaryStatus"
        }
      }
    },
    "v1ClusterProfilePacksManifests": {
      "description": "Cluster profile's packs manifests information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "packs": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/v1ClusterProfilePackManifests"
              }
            }
          }
        }
      }
    },
    "v1ClusterProfileSortFields": {
      "type": "string",
      "enum": [
        "profileName",
        "environment",
        "profileType",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "x-nullable": true
    },
    "v1ClusterProfileSortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1ClusterProfileSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1ClusterProfileSpec": {
      "description": "ClusterProfileTemplate can be in draft mode, or published mode User only see the latest published template, and (or) the draft template User can apply either the draft version or the latest published version to a cluster when user create a draft version, just copy the Published template, increment the version, and keep changing the draft template without increment the draft version when user publish a draft, the version is fixed, and won't be able to make any modification on published template For each clusterprofile that has a published version, there will be a ClusterProfileArchive automatically created when user publish a draft, the published version will also be copied over to the corresponding ClusterProfileArchive it is just in case in the future for whatever reason we may want to expose earlier versions",
      "type": "object",
      "properties": {
        "draft": {
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "published": {
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        }
      }
    },
    "v1ClusterProfileStatus": {
      "description": "ClusterProfileStatus defines the observed state of ClusterProfile",
      "type": "object",
      "properties": {
        "inUseClusterUids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isPublished": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1ClusterProfileStatusSummary": {
      "description": "ClusterProfileStatusSummary defines the observed state of ClusterProfile",
      "type": "object",
      "properties": {
        "isPublished": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1ClusterProfileSummary": {
      "description": "Cluster profile summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "specSummary": {
          "description": "Cluster profile spec summary",
          "type": "object",
          "properties": {
            "draft": {
              "$ref": "#/definitions/v1ClusterProfileTemplateSummary"
            },
            "published": {
              "$ref": "#/definitions/v1ClusterProfileTemplateSummary"
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1ClusterProfileStatusSummary"
        }
      }
    },
    "v1ClusterProfileTemplate": {
      "description": "ClusterProfileTemplate contains details of a clusterprofile definition",
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string",
          "enum": [
            "aws",
            "eks",
            "gcp",
            "azure",
            "vsphere",
            "openstack",
            "libvirt",
            "edge",
            "aks",
            "all"
          ]
        },
        "name": {
          "type": "string"
        },
        "packServerRefs": {
          "description": "PackServerRefs is only used on Hubble side it is reference to pack registry servers which PackRef belongs to in hubble, pack server is a top level object, so use a reference to point to it packs within a clusterprofile can come from different pack servers, so this is an array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        },
        "packServerSecret": {
          "description": "This secret is used only on Palette side use case is similar  to k8s image pull secret this single secret internally should contains all the pack servers in PackServerRefs if empty, means no credential is needed to access the pack server For spectro saas, Ally will set this field before pass to palette",
          "type": "string"
        },
        "packs": {
          "description": "Packs definitions here are final definitions. If ClonedFrom and ParamsOverwrite is present, then Packs are the final merge result of ClonedFrom and ParamsOverwrite So orchestration engine will just take the Packs and do the work, no need to worry about parameters merge",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackRef"
          }
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "description": "version start from 0, matching the index of ClusterProfileSpec.Versions[] will be used by clusterSpec to identify which version is applied to the cluster",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ClusterProfileTemplateDraft": {
      "description": "Cluster profile template",
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1CloudType"
        },
        "packs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackManifestEntity"
          }
        },
        "type": {
          "$ref": "#/definitions/v1ProfileType"
        }
      }
    },
    "v1ClusterProfileTemplateMeta": {
      "description": "Cluster profile template meta information",
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1CloudType"
        },
        "name": {
          "type": "string"
        },
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackRef"
          }
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ClusterProfileTemplateSummary": {
      "description": "Cluster profile template summary",
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackRefSummary"
          }
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ClusterProfileTemplateUpdate": {
      "description": "Cluster profile template update",
      "type": "object",
      "properties": {
        "packs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackManifestUpdateEntity"
          }
        },
        "type": {
          "$ref": "#/definitions/v1ProfileType"
        }
      }
    },
    "v1ClusterProfileUpdateEntity": {
      "description": "Cluster profile input for update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "template": {
              "$ref": "#/definitions/v1ClusterProfileTemplateUpdate"
            }
          }
        }
      }
    },
    "v1ClusterProfileValidatorResponse": {
      "description": "Cluster profile validator response",
      "type": "object",
      "properties": {
        "packs": {
          "$ref": "#/definitions/v1ConstraintValidatorResponse"
        }
      }
    },
    "v1ClusterProfiles": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterProfile"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1ClusterProfilesFilterSpec": {
      "description": "Spectro cluster filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ClusterProfileFilterSpec"
        },
        "sort": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterProfileSortSpec"
          }
        }
      }
    },
    "v1ClusterProfilesSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterProfileSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1ClusterProxySpec": {
      "description": "cluster proxy config spec",
      "type": "object",
      "properties": {
        "httpProxy": {
          "type": "string"
        },
        "httpsProxy": {
          "type": "string"
        },
        "noProxy": {
          "type": "string"
        }
      }
    },
    "v1ClusterRbac": {
      "description": "Cluster RBAC role binding defintion",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterRbacSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterRbacStatus"
        }
      }
    },
    "v1ClusterRbacBinding": {
      "description": "Cluster RBAC binding",
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/v1ClusterRoleRef"
        },
        "subjects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterRbacSubjects"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "RoleBinding",
            "ClusterRoleBinding"
          ]
        }
      }
    },
    "v1ClusterRbacEntity": {
      "properties": {
        "clusterRbac": {
          "description": "Cluster RBAC role bindings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        }
      }
    },
    "v1ClusterRbacInputEntity": {
      "description": "Cluster RBAC role binding defintion",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaUpdateEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterRbacSpec"
        }
      }
    },
    "v1ClusterRbacResourcesUpdateEntity": {
      "type": "object",
      "properties": {
        "rbacs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterRbacInputEntity"
          }
        }
      }
    },
    "v1ClusterRbacSpec": {
      "description": "Cluster RBAC spec",
      "type": "object",
      "properties": {
        "bindings": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterRbacBinding"
          }
        },
        "relatedObject": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      }
    },
    "v1ClusterRbacStatus": {
      "description": "Cluster rbac status",
      "properties": {
        "errors": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterResourceError"
          }
        }
      }
    },
    "v1ClusterRbacSubjects": {
      "description": "Cluster role ref",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "User",
            "Group",
            "ServiceAccount"
          ]
        }
      }
    },
    "v1ClusterRbacs": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterRbac"
          }
        }
      }
    },
    "v1ClusterRefs": {
      "description": "Cluster Object References",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        }
      }
    },
    "v1ClusterResourceAllocation": {
      "description": "Workspace resource allocation",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "resourceAllocation": {
          "$ref": "#/definitions/v1WorkspaceResourceAllocation"
        }
      }
    },
    "v1ClusterResourceError": {
      "description": "Cluster resource error",
      "properties": {
        "msg": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        }
      }
    },
    "v1ClusterResources": {
      "type": "object",
      "properties": {
        "namespaces": {
          "description": "Cluster namespaces",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        },
        "rbacs": {
          "description": "Cluster RBAC role bindings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        }
      }
    },
    "v1ClusterResourcesEntity": {
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterNamespaceResourceInputEntity"
          }
        },
        "rbacs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterRbacInputEntity"
          }
        }
      }
    },
    "v1ClusterRestore": {
      "description": "Cluster Restore",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterRestoreSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterRestoreStatus"
        }
      }
    },
    "v1ClusterRestoreConfig": {
      "description": "Cluster restore config",
      "required": [
        "backupRequestUid",
        "backupName",
        "destinationClusterUid"
      ],
      "properties": {
        "backupName": {
          "type": "string"
        },
        "backupRequestUid": {
          "type": "string"
        },
        "destinationClusterUid": {
          "type": "string"
        },
        "includeClusterResources": {
          "type": "boolean"
        },
        "includeNamespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "preserveNodePorts": {
          "type": "boolean"
        },
        "restorePVs": {
          "type": "boolean"
        }
      }
    },
    "v1ClusterRestoreSpec": {
      "description": "Cluster Restore Spec",
      "properties": {
        "clusterUid": {
          "type": "string"
        }
      }
    },
    "v1ClusterRestoreStatus": {
      "description": "Cluster Restore Status",
      "properties": {
        "clusterRestoreStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterRestoreStatusMeta"
          }
        }
      }
    },
    "v1ClusterRestoreStatusMeta": {
      "description": "Cluster Restore Status Meta",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "backupName": {
          "type": "string"
        },
        "backupRequestUid": {
          "type": "string"
        },
        "restoreRequestUid": {
          "type": "string"
        },
        "restoreStatusMeta": {
          "$ref": "#/definitions/v1RestoreStatusMeta"
        },
        "sourceClusterRef": {
          "$ref": "#/definitions/v1ResourceReference"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterRoleRef": {
      "description": "Cluster role ref",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "Role",
            "ClusterRole"
          ]
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1ClusterScanLogKubeBench": {
      "description": "Cluster Compliance Scan Kube Bench Log",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterComplianceScanLogSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterKubeBenchLogStatus"
        }
      }
    },
    "v1ClusterScanLogKubeHunter": {
      "description": "Cluster Compliance Scan Kube Hunter Log",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterComplianceScanLogSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterKubeHunterLogStatus"
        }
      }
    },
    "v1ClusterScanLogSonobuoy": {
      "description": "Cluster Compliance Scan Sonobuoy Log",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterComplianceScanLogSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterSonobuoyLogStatus"
        }
      }
    },
    "v1ClusterScanTime": {
      "description": "Cluster Compliance Scan Time",
      "properties": {
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1ClusterSonobuoyLogStatus": {
      "description": "Cluster Compliance Scan Sonobuoy Log Status",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "reports": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1SonobuoyReport"
          }
        },
        "requestUid": {
          "type": "string"
        },
        "scanTime": {
          "$ref": "#/definitions/v1ClusterScanTime"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterState": {
      "type": "string",
      "enum": [
        "Pending",
        "Provisioning",
        "Running",
        "Deleting",
        "Deleted",
        "Error",
        "Importing"
      ]
    },
    "v1ClusterUsageSummary": {
      "description": "Cluster usage summary",
      "type": "object",
      "properties": {
        "cpuCores": {
          "type": "number",
          "x-omitempty": false
        },
        "isAlloy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkload": {
      "description": "Cluster workload summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterWorkloadSpec"
        }
      }
    },
    "v1ClusterWorkloadCondition": {
      "description": "Cluster workload condition",
      "type": "object",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastUpdateTime": {
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadCronJob": {
      "description": "Cluster workload cronjob summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterWorkloadCronJobSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadCronJobStatus"
        }
      }
    },
    "v1ClusterWorkloadCronJobSpec": {
      "description": "Cluster workload cronjob spec",
      "type": "object",
      "properties": {
        "schedule": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadCronJobStatus": {
      "description": "Cluster workload cronjob status",
      "type": "object",
      "properties": {
        "lastScheduleTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1ClusterWorkloadCronJobs": {
      "description": "Cluster workload cronjobs summary",
      "type": "object",
      "properties": {
        "cronJobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadCronJob"
          }
        }
      }
    },
    "v1ClusterWorkloadDaemonSet": {
      "description": "Cluster workload daemonset summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadDaemonSetStatus"
        }
      }
    },
    "v1ClusterWorkloadDaemonSetStatus": {
      "description": "Cluster workload daemonset status",
      "type": "object",
      "properties": {
        "available": {
          "type": "integer",
          "format": "int32"
        },
        "currentScheduled": {
          "type": "integer",
          "format": "int32"
        },
        "desiredScheduled": {
          "type": "integer",
          "format": "int32"
        },
        "misScheduled": {
          "type": "integer",
          "format": "int32"
        },
        "ready": {
          "type": "integer",
          "format": "int32"
        },
        "updatedScheduled": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ClusterWorkloadDaemonSets": {
      "description": "Cluster workload daemonset summary",
      "type": "object",
      "properties": {
        "daemonSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDaemonSet"
          }
        }
      }
    },
    "v1ClusterWorkloadDeployment": {
      "description": "Cluster workload deployment summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadDeploymentStatus"
        }
      }
    },
    "v1ClusterWorkloadDeploymentStatus": {
      "description": "Cluster workload deployment status",
      "type": "object",
      "properties": {
        "replicas": {
          "$ref": "#/definitions/v1ClusterWorkloadReplicaStatus"
        }
      }
    },
    "v1ClusterWorkloadDeployments": {
      "description": "Cluster workload deployments summary",
      "type": "object",
      "properties": {
        "deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDeployment"
          }
        }
      }
    },
    "v1ClusterWorkloadJob": {
      "description": "Cluster workload job summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadJobStatus"
        }
      }
    },
    "v1ClusterWorkloadJobStatus": {
      "description": "Cluster workload job status",
      "type": "object",
      "properties": {
        "completionTime": {
          "$ref": "#/definitions/v1Time"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadCondition"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "succeeded": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ClusterWorkloadJobs": {
      "description": "Cluster workload jobs summary",
      "type": "object",
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadJob"
          }
        }
      }
    },
    "v1ClusterWorkloadMetadata": {
      "description": "Cluster workload metadata",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "entity": {
          "$ref": "#/definitions/v1ClusterWorkloadRef"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadNamespace": {
      "description": "Cluster workload namespace summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadNamespaceStatus"
        }
      }
    },
    "v1ClusterWorkloadNamespaceStatus": {
      "description": "Cluster workload namespace status",
      "type": "object",
      "properties": {
        "phase": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadNamespaces": {
      "description": "Cluster workload namespaces summary",
      "properties": {
        "namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadNamespace"
          }
        }
      }
    },
    "v1ClusterWorkloadPod": {
      "description": "Cluster workload pod summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadPodMetadata"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterWorkloadPodSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadPodStatus"
        }
      }
    },
    "v1ClusterWorkloadPodContainer": {
      "description": "Cluster workload pod container",
      "type": "object",
      "properties": {
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/v1ClusterWorkloadPodContainerResources"
        }
      }
    },
    "v1ClusterWorkloadPodContainerResource": {
      "description": "Cluster workload pod container resource",
      "type": "object",
      "properties": {
        "cpu": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "cpuUnit": {
          "type": "string"
        },
        "memory": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "memoryUnit": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadPodContainerResources": {
      "description": "Cluster workload pod container resources",
      "type": "object",
      "properties": {
        "limits": {
          "$ref": "#/definitions/v1ClusterWorkloadPodContainerResource"
        },
        "requests": {
          "$ref": "#/definitions/v1ClusterWorkloadPodContainerResource"
        }
      }
    },
    "v1ClusterWorkloadPodContainerState": {
      "description": "Cluster workload pod container state",
      "type": "object",
      "properties": {
        "exitCode": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "finishedAt": {
          "$ref": "#/definitions/v1Time"
        },
        "reason": {
          "type": "string"
        },
        "startedAt": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadPodContainerStatus": {
      "description": "Cluster workload pod container status",
      "type": "object",
      "properties": {
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ready": {
          "type": "boolean",
          "x-omitempty": false
        },
        "restartCount": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "started": {
          "type": "boolean",
          "x-omitempty": false
        },
        "state": {
          "$ref": "#/definitions/v1ClusterWorkloadPodContainerState"
        }
      }
    },
    "v1ClusterWorkloadPodMetadata": {
      "description": "Cluster workload pod metadata",
      "type": "object",
      "properties": {
        "associatedRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadRef"
          }
        },
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "entity": {
          "$ref": "#/definitions/v1ClusterWorkloadRef"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "machineUid": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "nodename": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadPodSpec": {
      "description": "Cluster workload pod spec",
      "type": "object",
      "properties": {
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPodContainer"
          }
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPodVolume"
          }
        }
      }
    },
    "v1ClusterWorkloadPodStatus": {
      "description": "Cluster workload pod status",
      "type": "object",
      "properties": {
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPodContainerStatus"
          }
        },
        "phase": {
          "type": "string"
        },
        "podIp": {
          "type": "string"
        },
        "qosClass": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadPodVolume": {
      "description": "Cluster workload pod volume",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadPods": {
      "description": "Cluster workload pods summary",
      "properties": {
        "pods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPod"
          }
        }
      }
    },
    "v1ClusterWorkloadRef": {
      "description": "Cluster workload ref",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ClusterWorkloadReplicaStatus": {
      "description": "Cluster workload replica status",
      "type": "object",
      "properties": {
        "available": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "ready": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "updated": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        }
      }
    },
    "v1ClusterWorkloadSpec": {
      "description": "Cluster workload spec",
      "type": "object",
      "properties": {
        "cronJobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadCronJob"
          }
        },
        "daemonSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDaemonSet"
          }
        },
        "deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDeployment"
          }
        },
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadJob"
          }
        },
        "pods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPod"
          }
        },
        "statefulSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadStatefulSet"
          }
        }
      }
    },
    "v1ClusterWorkloadStatefulSet": {
      "description": "Cluster workload statefulset summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadStatefulSetStatus"
        }
      }
    },
    "v1ClusterWorkloadStatefulSetStatus": {
      "description": "Cluster workload statefulset status",
      "type": "object",
      "properties": {
        "replicas": {
          "$ref": "#/definitions/v1ClusterWorkloadReplicaStatus"
        }
      }
    },
    "v1ClusterWorkloadStatefulSets": {
      "description": "Cluster workload statefulsets summary",
      "type": "object",
      "properties": {
        "statefulSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadStatefulSet"
          }
        }
      }
    },
    "v1ClusterWorkloadsFilter": {
      "description": "Cluster workloads filter",
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ClusterWorkloadsSpec": {
      "description": "Cluster workloads spec",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ClusterWorkloadsFilter"
        }
      }
    },
    "v1ComplianceScanConfig": {
      "description": "Compliance Scan config",
      "properties": {
        "schedule": {
          "$ref": "#/definitions/v1ClusterFeatureSchedule"
        }
      }
    },
    "v1ComplianceScanDriverSpec": {
      "description": "Compliance Scan driver spec",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1ComplianceScanConfig"
        },
        "isClusterConfig": {
          "type": "boolean"
        }
      }
    },
    "v1ComputeMetrics": {
      "description": "Compute metrics",
      "type": "object",
      "properties": {
        "lastUpdatedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "limit": {
          "type": "number",
          "x-omitempty": false
        },
        "request": {
          "type": "number",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "x-omitempty": false
        },
        "unit": {
          "type": "string"
        },
        "usage": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1ComputeRate": {
      "description": "Compute estimated rate information",
      "type": "object",
      "properties": {
        "rate": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1ConfigReverseProxy": {
      "description": "config reverse proxy",
      "properties": {
        "caCert": {
          "type": "string"
        },
        "clientCert": {
          "type": "string"
        },
        "clientKey": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "protocol": {
          "type": "string",
          "enum": [
            "http",
            "https"
          ]
        },
        "server": {
          "type": "string"
        }
      }
    },
    "v1ConstraintError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1ConstraintValidatorResponse": {
      "description": "Constraint validator response",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ConstraintValidatorResult"
          }
        }
      }
    },
    "v1ConstraintValidatorResult": {
      "description": "Constraint validator result",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ConstraintError"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1ControlPlaneEndPoint": {
      "type": "object",
      "properties": {
        "ddnsSearchDomain": {
          "description": "DDNSSearchDomain is the search domain used for resolving IP addresses when the EndpointType is DDNS. This search domain is appended to the generated Hostname to obtain the complete DNS name for the endpoint. If Host is already a DDNS FQDN, DDNSSearchDomain is not required",
          "type": "string"
        },
        "host": {
          "description": "IP or FQDN(External/DDNS)",
          "type": "string"
        },
        "type": {
          "description": "VIP or External",
          "type": "string",
          "enum": [
            "VIP",
            "External",
            "DDNS"
          ]
        }
      }
    },
    "v1CrypticResponse": {
      "description": "Cryptic Response",
      "type": "object",
      "properties": {
        "encryptedText": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "plainText": {
          "type": "string"
        }
      }
    },
    "v1DashboardWorkspace": {
      "description": "Workspace information",
      "properties": {
        "meta": {
          "$ref": "#/definitions/v1DashboardWorkspaceMeta"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1DashboardWorkspaceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1DashboardWorkspaceStatus"
        }
      }
    },
    "v1DashboardWorkspaceAllocation": {
      "description": "Workspace allocation",
      "properties": {
        "cpu": {
          "$ref": "#/definitions/v1DashboardWorkspaceResourceAllocation"
        },
        "memory": {
          "$ref": "#/definitions/v1DashboardWorkspaceResourceAllocation"
        }
      }
    },
    "v1DashboardWorkspaceClusterRef": {
      "description": "Workspace cluster reference",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1DashboardWorkspaceMeta": {
      "description": "Deprecated. Workspace meta data",
      "properties": {
        "clusterNames": {
          "description": "Deprecated. Use clusterRefs",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "clusterRefs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1DashboardWorkspaceClusterRef"
          }
        },
        "creationTime": {
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "type": "string"
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1DashboardWorkspaceNamespaceAllocation": {
      "description": "Workspace namespace allocation",
      "properties": {
        "name": {
          "type": "string"
        },
        "total": {
          "$ref": "#/definitions/v1DashboardWorkspaceAllocation"
        }
      }
    },
    "v1DashboardWorkspaceResourceAllocation": {
      "description": "Workspace resource allocation",
      "properties": {
        "allocated": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "usage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1DashboardWorkspaceSpec": {
      "description": "Workspace spec summary",
      "properties": {
        "clusterRefs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1DashboardWorkspaceClusterRef"
          }
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1DashboardWorkspaceStatus": {
      "description": "Workspace status",
      "properties": {
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1DashboardWorkspaceNamespaceAllocation"
          }
        },
        "total": {
          "$ref": "#/definitions/v1DashboardWorkspaceAllocation"
        }
      }
    },
    "v1DashboardWorkspaces": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "cpuUnit": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1DashboardWorkspace"
          }
        },
        "memoryUnit": {
          "type": "string"
        }
      }
    },
    "v1DataSinkConfig": {
      "description": "Data sink",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1DataSinkSpec"
        }
      }
    },
    "v1DataSinkSpec": {
      "type": "object",
      "properties": {
        "auditDataSinks": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1DataSinkableSpec"
          }
        }
      }
    },
    "v1DataSinkableSpec": {
      "type": "object",
      "properties": {
        "cloudWatch": {
          "$ref": "#/definitions/v1CloudWatch"
        },
        "type": {
          "type": "string",
          "enum": [
            "cloudwatch"
          ]
        }
      }
    },
    "v1DatabaseTransferJob": {
      "description": "database transfer job details",
      "type": "object",
      "properties": {
        "backupStatus": {
          "$ref": "#/definitions/v1TransferJob"
        },
        "backupUid": {
          "type": "string"
        },
        "mode": {
          "type": "string",
          "enum": [
            "FileSystem",
            "Ftp"
          ]
        }
      }
    },
    "v1DatabaseTransferStatus": {
      "description": "database transfer status",
      "type": "object",
      "properties": {
        "backups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1DatabaseTransferJob"
          }
        },
        "isActive": {
          "type": "boolean"
        }
      }
    },
    "v1DeleteMeta": {
      "description": "Properties to send back after deletion operation",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1DeletedMsg": {
      "description": "Deleted response with message",
      "properties": {
        "msg": {
          "type": "string"
        }
      }
    },
    "v1DeviceSpec": {
      "description": "DeviceSpec defines the desired state of Device",
      "type": "object",
      "properties": {
        "cpu": {
          "$ref": "#/definitions/v1CPU"
        },
        "disks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Disk"
          }
        },
        "gpus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GPUDeviceSpec"
          }
        },
        "memory": {
          "$ref": "#/definitions/v1Memory"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Nic"
          }
        },
        "os": {
          "$ref": "#/definitions/v1OS"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1Disk": {
      "type": "object",
      "properties": {
        "controller": {
          "type": "string"
        },
        "partitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Partition"
          }
        },
        "size": {
          "description": "Size in GB",
          "type": "integer",
          "format": "int32"
        },
        "vendor": {
          "type": "string"
        }
      }
    },
    "v1DomainHost": {
      "description": "update domain host for application. RootDomain gets dervied from domain host url",
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        }
      }
    },
    "v1EcrAuthorizationRequestEntity": {
      "description": "Ecr registry credentials",
      "type": "object",
      "properties": {
        "awsCloudAccount": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "endpoint": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "v1EcrImageValidateEntity": {
      "description": "Ecr registry image meta",
      "type": "object",
      "properties": {
        "authEntity": {
          "$ref": "#/definitions/v1EcrAuthorizationRequestEntity"
        },
        "imageTag": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        }
      }
    },
    "v1EcrRegistry": {
      "description": "Ecr registry information",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EcrRegistrySpec"
        }
      }
    },
    "v1EcrRegistrySpec": {
      "description": "Ecr registry spec",
      "type": "object",
      "required": [
        "endpoint",
        "isPrivate"
      ],
      "properties": {
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "defaultRegion": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        }
      }
    },
    "v1EdgeCloudClusterConfigEntity": {
      "description": "Edge cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1EdgeClusterConfig"
        }
      }
    },
    "v1EdgeCloudConfig": {
      "description": "EdgeCloudConfig is the Schema for the Edgecloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1EdgeCloudConfigStatus"
        }
      }
    },
    "v1EdgeCloudConfigSpec": {
      "description": "EdgeCloudConfigSpec defines the desired state of EdgeCloudConfig",
      "type": "object",
      "required": [
        "clusterConfig",
        "machinePoolConfig"
      ],
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1EdgeClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EdgeMachinePoolConfig"
          }
        }
      }
    },
    "v1EdgeCloudConfigStatus": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          }
        },
        "nodeImage": {
          "type": "string"
        },
        "sourceImageId": {
          "description": "SourceImageId can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      }
    },
    "v1EdgeClusterConfig": {
      "description": "EdgeClusterConfig defines Edge Cluster specific Spec",
      "type": "object",
      "properties": {
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys to access the vms as a 'spectro' user",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1EdgeHost": {
      "description": "EdgeHost is the underlying appliance",
      "type": "object",
      "required": [
        "hostUid",
        "hostAddress"
      ],
      "properties": {
        "hostAddress": {
          "description": "HostAddress is a FQDN or IP address of the Host",
          "type": "string"
        },
        "hostIdentity": {
          "description": "HostIdentity is the identity to access the edge host",
          "$ref": "#/definitions/v1EdgeHostIdentity"
        },
        "hostUid": {
          "description": "HostUid is the ID of the EdgeHost",
          "type": "string"
        }
      }
    },
    "v1EdgeHostCloudProperties": {
      "description": "Additional cloud properties of edge host",
      "type": "object",
      "properties": {
        "vsphere": {
          "$ref": "#/definitions/v1EdgeHostVsphereCloudProperties"
        }
      }
    },
    "v1EdgeHostDevice": {
      "properties": {
        "aclmeta": {
          "$ref": "#/definitions/v1AclMeta"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeHostDeviceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1EdgeHostDeviceStatus"
        }
      }
    },
    "v1EdgeHostDeviceEntity": {
      "description": "Edge host device state",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        }
      }
    },
    "v1EdgeHostDeviceSpec": {
      "description": "EdgeHostDeviceSpec defines the desired state of EdgeHostDevice",
      "type": "object",
      "properties": {
        "cloudProperties": {
          "$ref": "#/definitions/v1EdgeHostCloudProperties"
        },
        "clusterProfileTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterProfileTemplate"
          }
        },
        "device": {
          "$ref": "#/definitions/v1DeviceSpec"
        },
        "host": {
          "$ref": "#/definitions/v1EdgeHost"
        },
        "properties": {
          "$ref": "#/definitions/v1EdgeHostProperties"
        },
        "type": {
          "type": "string",
          "enum": [
            "libvirt",
            "edge",
            "vsphere"
          ]
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1EdgeHostDeviceStatus": {
      "description": "EdgeHostDeviceStatus defines the observed state of EdgeHostDevice",
      "type": "object",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1EdgeHostHealth"
        },
        "inUseClusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectEntity"
          }
        },
        "state": {
          "type": "string",
          "enum": [
            "ready",
            "unpaired",
            "in-use"
          ]
        }
      }
    },
    "v1EdgeHostDevices": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1EdgeHostDevice"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1EdgeHostHealth": {
      "description": "EdgeHostHealth defines the desired health state of EdgeHostDevice",
      "properties": {
        "message": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "healthy",
            "unhealthy"
          ]
        }
      }
    },
    "v1EdgeHostIdentity": {
      "properties": {
        "caCert": {
          "description": "CACert is the client CA certificate",
          "type": "string"
        },
        "mode": {
          "description": "Mode indicates a system or session connection to the host",
          "type": "string"
        },
        "socketPath": {
          "description": "SocketPath is an optional path to the socket on the host, if not using defaults",
          "type": "string"
        },
        "sshSecret": {
          "description": "SSHSecret to the secret containing ssh-username",
          "$ref": "#/definitions/v1EdgeHostSSHSecret"
        }
      }
    },
    "v1EdgeHostNetwork": {
      "description": "Network defines the network configuration for a virtual machine",
      "type": "object",
      "required": [
        "networkName",
        "networkType"
      ],
      "properties": {
        "networkName": {
          "description": "NetworkName of the network where this machine will be connected",
          "type": "string"
        },
        "networkType": {
          "description": "NetworkType  specifies the type of network",
          "type": "string",
          "enum": [
            "default",
            "bridge"
          ]
        }
      }
    },
    "v1EdgeHostProperties": {
      "description": "Additional properties of edge host",
      "properties": {
        "networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EdgeHostNetwork"
          }
        },
        "storagePools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EdgeHostStoragePool"
          }
        }
      }
    },
    "v1EdgeHostSSHSecret": {
      "type": "object",
      "properties": {
        "name": {
          "description": "SSH secret name",
          "type": "string"
        },
        "privateKey": {
          "description": "Private Key to access the host",
          "type": "string"
        }
      }
    },
    "v1EdgeHostStoragePool": {
      "description": "StoragePool is the storage pool for the vm image",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1EdgeHostVsphereCloudProperties": {
      "description": "Vsphere cloud properties of edge host",
      "properties": {
        "datacenters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VsphereCloudDatacenter"
          }
        }
      }
    },
    "v1EdgeInstanceType": {
      "description": "EdgeInstanceType defines the instance configuration for a docker container node",
      "type": "object",
      "required": [
        "numCPUs",
        "memoryInMB"
      ],
      "properties": {
        "memoryInMB": {
          "description": "MemoryinMB is the memory in megabytes",
          "type": "integer",
          "format": "int32"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of CPUs",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1EdgeMachine": {
      "description": "Edge cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1EdgeMachinePoolCloudConfigEntity": {
      "required": [
        "edgeHosts"
      ],
      "properties": {
        "edgeHosts": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1EdgeMachinePoolHostEntity"
          }
        }
      }
    },
    "v1EdgeMachinePoolConfig": {
      "type": "object",
      "required": [
        "hosts"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "hosts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EdgeMachinePoolHost"
          }
        },
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "taints": {
          "description": "master or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean"
        }
      }
    },
    "v1EdgeMachinePoolConfigEntity": {
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1EdgeMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1EdgeMachinePoolHost": {
      "description": "EdgeHost of Edge clusters",
      "type": "object",
      "required": [
        "hostUid",
        "hostAddress"
      ],
      "properties": {
        "hostAddress": {
          "description": "HostAddress is a FQDN or IP address of the Host",
          "type": "string"
        },
        "hostIdentity": {
          "description": "HostIdentity is the identity to access the edge host",
          "$ref": "#/definitions/v1EdgeMachinePoolHostIdentity"
        },
        "hostName": {
          "description": "HostName is the name of the EdgeHost",
          "type": "string"
        },
        "hostUid": {
          "description": "HostUid is the ID of the EdgeHost",
          "type": "string"
        }
      }
    },
    "v1EdgeMachinePoolHostEntity": {
      "required": [
        "hostUid"
      ],
      "properties": {
        "hostUid": {
          "type": "string"
        }
      }
    },
    "v1EdgeMachinePoolHostIdentity": {
      "type": "object",
      "properties": {
        "caCert": {
          "description": "CACert is the client CA certificate",
          "type": "string"
        },
        "socketPath": {
          "description": "SocketPath is an optional path to the socket on the host, if not using defaults",
          "type": "string"
        }
      }
    },
    "v1EdgeMachineSpec": {
      "description": "Edge cloud VM definition spec",
      "type": "object",
      "properties": {
        "bootstrapped": {
          "type": "boolean"
        },
        "customImage": {
          "type": "string"
        },
        "edgeHostUid": {
          "type": "string"
        },
        "instanceType": {
          "$ref": "#/definitions/v1EdgeInstanceType"
        },
        "loadBalancerConfigured": {
          "type": "boolean"
        },
        "mounts": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1EdgeMount"
          }
        }
      }
    },
    "v1EdgeMachines": {
      "description": "Edge machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1EdgeMachine"
          }
        }
      }
    },
    "v1EdgeMount": {
      "description": "Edge mounts",
      "type": "object",
      "properties": {
        "containerPath": {
          "type": "string"
        },
        "hostPath": {
          "type": "string"
        },
        "readonly": {
          "type": "boolean"
        }
      }
    },
    "v1EdgeServiceLogin": {
      "description": "System service login input",
      "type": "object",
      "properties": {
        "edgeHostUid": {
          "type": "string"
        },
        "serviceName": {
          "type": "string",
          "enum": [
            "edge",
            "lodge"
          ]
        },
        "tenantUid": {
          "type": "string"
        }
      }
    },
    "v1EksAddon": {
      "description": "EksAddon represents a EKS addon",
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "conflictResolution": {
          "description": "ConflictResolution is used to declare what should happen if there are parameter conflicts.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the addon",
          "type": "string"
        },
        "serviceAccountRoleARN": {
          "description": "ServiceAccountRoleArn is the ARN of an IAM role to bind to the addons service account",
          "type": "string"
        },
        "version": {
          "description": "Version is the version of the addon to use",
          "type": "string"
        }
      }
    },
    "v1EksCloudClusterConfigEntity": {
      "description": "EKS cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1EksClusterConfig"
        }
      }
    },
    "v1EksCloudConfig": {
      "description": "EksCloudConfig is the Schema for the ekscloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EksCloudConfigSpec"
        }
      }
    },
    "v1EksCloudConfigSpec": {
      "description": "EksCloudConfigSpec defines the cloud configuration input by user",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains EksCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1EksClusterConfig"
        },
        "fargateProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1FargateProfile"
          }
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EksMachinePoolConfig"
          }
        }
      }
    },
    "v1EksClusterConfig": {
      "description": "EksClusterConfig defines EKS specific config",
      "type": "object",
      "required": [
        "region"
      ],
      "properties": {
        "addons": {
          "description": "Addons defines the EKS addons to enable with the EKS cluster. This may be required for brownfield clusters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EksAddon"
          }
        },
        "bastionDisabled": {
          "description": "BastionDisabled is the option to disable bastion node",
          "type": "boolean"
        },
        "controlPlaneLoadBalancer": {
          "description": "ControlPlaneLoadBalancer specifies how API server elb will be configured, this field is optional, not provided, \"\", default =\u003e \"Internet-facing\" \"Internet-facing\" =\u003e \"Internet-facing\" \"internal\" =\u003e \"internal\" For spectro saas setup we require to talk to the apiserver from our cluster so ControlPlaneLoadBalancer should be \"\", not provided or \"Internet-facing\"",
          "type": "string"
        },
        "encryptionConfig": {
          "description": "EncryptionConfig specifies the encryption configuration for the cluster",
          "$ref": "#/definitions/v1EncryptionConfig"
        },
        "endpointAccess": {
          "description": "Endpoints specifies access to this cluster's control plane endpoints",
          "$ref": "#/definitions/v1EksClusterConfigEndpointAccess"
        },
        "region": {
          "description": "The AWS Region the cluster lives in.",
          "type": "string"
        },
        "sshKeyName": {
          "description": "SSHKeyName specifies which EC2 SSH key can be used to access machines.",
          "type": "string"
        },
        "vpcId": {
          "description": "VPC Id to deploy cluster into should have one public and one private subnet for the the cluster creation, this field is optional, If VPC Id is not provided a fully managed VPC will be created",
          "type": "string"
        }
      }
    },
    "v1EksClusterConfigEndpointAccess": {
      "description": "EndpointAccess specifies how control plane endpoints are accessible",
      "type": "object",
      "properties": {
        "private": {
          "description": "Private points VPC-internal control plane access to the private endpoint",
          "type": "boolean"
        },
        "public": {
          "description": "Public controls whether control plane endpoints are publicly accessible",
          "type": "boolean"
        },
        "publicCIDRs": {
          "description": "PublicCIDRs specifies which blocks can access the public endpoint",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1EksFargateProfiles": {
      "description": "Fargate profiles",
      "type": "object",
      "properties": {
        "fargateProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1FargateProfile"
          }
        }
      }
    },
    "v1EksMachineCloudConfigEntity": {
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "capacityType": {
          "description": "EC2 instance capacity type",
          "type": "string",
          "default": "on-demand",
          "enum": [
            "on-demand",
            "spot"
          ]
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64",
          "maximum": 2000,
          "minimum": 1
        },
        "spotMarketOptions": {
          "description": "SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.",
          "$ref": "#/definitions/v1SpotMarketOptions"
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EksSubnetEntity"
          }
        }
      }
    },
    "v1EksMachinePoolConfig": {
      "type": "object",
      "required": [
        "isControlPlane"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "azs": {
          "description": "AZs is only used for dynamic placement",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "capacityType": {
          "description": "EC2 instance capacity type",
          "type": "string",
          "default": "on-demand",
          "enum": [
            "on-demand",
            "spot"
          ]
        },
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "spotMarketOptions": {
          "description": "SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.",
          "$ref": "#/definitions/v1SpotMarketOptions"
        },
        "subnetIds": {
          "description": "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"us-west-2d\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first private subnet from the AZ will be picked up for deployment",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "taints": {
          "description": "master or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1EksMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1EksMachineCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1EksSubnetEntity": {
      "properties": {
        "az": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1EncryptionConfig": {
      "description": "EncryptionConfig specifies the encryption configuration for the EKS clsuter.",
      "type": "object",
      "properties": {
        "isEnabled": {
          "description": "Is encryption configuration enabled for the cluster",
          "type": "boolean"
        },
        "provider": {
          "description": "Provider specifies the ARN or alias of the CMK (in AWS KMS)",
          "type": "string"
        },
        "resources": {
          "description": "Resources specifies the resources to be encrypted",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1EndpointAccess": {
      "description": "EndpointAccess specifies how control plane endpoints are accessible",
      "type": "object",
      "properties": {
        "private": {
          "description": "Private points VPC-internal control plane access to the private endpoint",
          "type": "boolean"
        },
        "public": {
          "description": "Public controls whether control plane endpoints are publicly accessible",
          "type": "boolean"
        },
        "publicCIDRs": {
          "description": "PublicCIDRs specifies which blocks can access the public endpoint",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Event": {
      "description": "Event information organized by tags",
      "type": "object",
      "properties": {
        "involvedObject": {
          "type": "object",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "message": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "reason": {
          "type": "string"
        },
        "relatedObject": {
          "type": "object",
          "$ref": "#/definitions/v1RelatedObject"
        },
        "severity": {
          "type": "string"
        },
        "source": {
          "type": "object",
          "$ref": "#/definitions/v1EventSource"
        }
      }
    },
    "v1EventSource": {
      "description": "Event source info",
      "type": "object",
      "properties": {
        "component": {
          "type": "string"
        },
        "host": {
          "type": "string"
        }
      }
    },
    "v1Events": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Event"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1FargateProfile": {
      "description": "FargateProfile defines the desired state of FargateProfile",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to AWS resources managed by the AWS provider, in addition to the ones added by default.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "name specifies the profile name.",
          "type": "string"
        },
        "selectors": {
          "description": "Selectors specify fargate pod selectors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1FargateSelector"
          }
        },
        "subnetIds": {
          "description": "SubnetIDs specifies which subnets are used for the auto scaling group of this nodegroup.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1FargateSelector": {
      "description": "FargateSelector specifies a selector for pods that should run on this fargate pool",
      "type": "object",
      "required": [
        "namespace"
      ],
      "properties": {
        "labels": {
          "description": "Labels specifies which pod labels this selector should match.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "namespace": {
          "description": "Namespace specifies which namespace this selector should match.",
          "type": "string"
        }
      }
    },
    "v1FileUploadResponse": {
      "description": "File upload response",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1FilterArray": {
      "type": "object",
      "properties": {
        "beginsWith": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": true
        },
        "eq": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": true
        },
        "ignoreCase": {
          "type": "boolean",
          "default": true
        },
        "ne": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": true
        }
      }
    },
    "v1FilterIntRange": {
      "type": "object",
      "properties": {
        "eq": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "gt": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "gte": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "lt": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "lte": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "ne": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      }
    },
    "v1FilterNumberRange": {
      "type": "object",
      "properties": {
        "eq": {
          "type": "number",
          "x-nullable": true
        },
        "gt": {
          "type": "number",
          "x-nullable": true
        },
        "gte": {
          "type": "number",
          "x-nullable": true
        },
        "lt": {
          "type": "number",
          "x-nullable": true
        },
        "lte": {
          "type": "number",
          "x-nullable": true
        },
        "ne": {
          "type": "number",
          "x-nullable": true
        }
      }
    },
    "v1FilterString": {
      "type": "object",
      "properties": {
        "beginsWith": {
          "type": "string",
          "x-nullable": true
        },
        "contains": {
          "type": "string",
          "x-nullable": true
        },
        "eq": {
          "type": "string",
          "x-nullable": true
        },
        "ignoreCase": {
          "type": "boolean",
          "default": true
        },
        "ne": {
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "v1FreemiumUsage": {
      "type": "object",
      "properties": {
        "usage": {
          "type": "number",
          "format": "float64"
        }
      }
    },
    "v1FreemiumUsageLimit": {
      "type": "object",
      "properties": {
        "activeClusters": {
          "type": "integer"
        },
        "overageUsage": {
          "type": "number"
        },
        "usage": {
          "type": "number",
          "format": "float64"
        }
      }
    },
    "v1GPUConfig": {
      "type": "object",
      "properties": {
        "deviceModel": {
          "description": "DeviceModel is the model of GPU, for a given vendor, for eg., TU104GL [Tesla T4]",
          "type": "string"
        },
        "numGPUs": {
          "description": "NumGPUs is the number of GPUs",
          "type": "integer",
          "format": "int32"
        },
        "vendorName": {
          "description": "VendorName is the GPU vendor, for eg., NVIDIA or AMD",
          "type": "string"
        }
      }
    },
    "v1GPUDeviceSpec": {
      "type": "object",
      "properties": {
        "addresses": {
          "description": "Addresses is a map of PCI device entry name to its addresses.\nExample entry would be \"11:00.0 VGA compatible controller [0300]: NVIDIA\nCorporation Device [10de:1eb1] (rev a1)\"- \u003e 0000_11_00_0\" The address is\nBDF (Bus Device Function) identifier format seperated by underscores. The\nfirst 4 bits are almost always 0000. In the above example 11 is Bus, 00\nis Device,0 is function. The values of these addreses are expected in hexadecimal\nformat\n",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "model": {
          "description": "Model is the model of GPU, for a given vendor, for eg., TU104GL [Tesla T4]",
          "type": "string"
        },
        "vendor": {
          "description": "Vendor is the GPU vendor, for eg., NVIDIA or AMD",
          "type": "string"
        }
      }
    },
    "v1GcpAccount": {
      "description": "GCP account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GcpAccountSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1GcpAccountEntity": {
      "description": "GCP account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GcpAccountEntitySpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1GcpAccountEntitySpec": {
      "type": "object",
      "properties": {
        "jsonCredentials": {
          "type": "string"
        },
        "jsonCredentialsFileUid": {
          "type": "string"
        }
      }
    },
    "v1GcpAccountSpec": {
      "type": "object",
      "properties": {
        "jsonCredentials": {
          "type": "string"
        },
        "jsonCredentialsFileName": {
          "type": "string"
        }
      }
    },
    "v1GcpAccountValidateSpec": {
      "description": "Gcp cloud account",
      "type": "object",
      "properties": {
        "jsonCredentials": {
          "type": "string"
        },
        "jsonCredentialsFileUid": {
          "type": "string"
        }
      }
    },
    "v1GcpAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1GcpAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1GcpCloudAccountValidateEntity": {
      "description": "Gcp cloud account",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1GcpAccountValidateSpec"
        }
      }
    },
    "v1GcpCloudClusterConfigEntity": {
      "description": "Gcp cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1GcpClusterConfig"
        }
      }
    },
    "v1GcpCloudConfig": {
      "description": "GcpCloudConfig is the Schema for the gcpcloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GcpCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1GcpCloudConfigStatus"
        }
      }
    },
    "v1GcpCloudConfigSpec": {
      "description": "GcpCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains GcpCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1GcpClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpMachinePoolConfig"
          }
        }
      }
    },
    "v1GcpCloudConfigStatus": {
      "description": "GcpCloudConfigStatus defines the observed state of GcpCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "type": "object",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "conditions": {
          "description": "spectroAnsibleProvisioner: should be added only once, subsequent recocile will use the same provisioner SpectroAnsiblePacker bool `json:\"spectroAnsiblePacker,omitempty\"`",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "images": {
          "description": "Images array items should be 1-to-1 mapping to Spec.MachinePoolConfig",
          "$ref": "#/definitions/v1GcpImage"
        },
        "isAddonLayer": {
          "description": "addon layers present in spc",
          "type": "boolean"
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      }
    },
    "v1GcpClusterConfig": {
      "description": "cluster level configuration for gcp cloud, same for all machinepools",
      "type": "object",
      "required": [
        "project",
        "region"
      ],
      "properties": {
        "network": {
          "description": "NetworkName if empty would create VPC Network in auto mode. If provided, custom VPC network will be used",
          "type": "string"
        },
        "project": {
          "description": "Name of the project in which cluster is to be deployed",
          "type": "string"
        },
        "region": {
          "description": "GCP region for the cluster",
          "type": "string"
        }
      }
    },
    "v1GcpImage": {
      "description": "Refers to Gcp image",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1GcpImageUrlEntity": {
      "description": "Gcp image url entity",
      "type": "object",
      "properties": {
        "imageFamily": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1GcpInstanceTypes": {
      "description": "Retrieves a list of Gcp instance types",
      "type": "object",
      "properties": {
        "instanceTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InstanceType"
          }
        }
      }
    },
    "v1GcpMachine": {
      "description": "GCP cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GcpMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1GcpMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "Size of root volume in GB. Default is 30GB",
          "type": "integer",
          "format": "int64"
        },
        "subnet": {
          "description": "Subnet specifies the subnetwork to use for given instance. If not specified, the first subnet from the cluster region and network is used",
          "type": "string"
        }
      }
    },
    "v1GcpMachinePoolConfig": {
      "type": "object",
      "required": [
        "isControlPlane",
        "instanceType"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "instanceType": {
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "Size of root volume in GB. Default is 30GB",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "subnet": {
          "description": "Subnet specifies the subnetwork to use for given instance. If not specified, the first subnet from the cluster region and network is used",
          "type": "string"
        },
        "taints": {
          "description": "master or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean"
        }
      }
    },
    "v1GcpMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1GcpMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1GcpMachineSpec": {
      "description": "GCP cloud VM definition spec",
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "image": {
          "type": "string"
        },
        "instanceType": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpNic"
          }
        },
        "project": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "rootDeviceSize": {
          "type": "integer",
          "format": "int64"
        },
        "zone": {
          "type": "string"
        }
      }
    },
    "v1GcpMachines": {
      "description": "GCP machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1GcpMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1GcpNetwork": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpSubnet"
          }
        }
      }
    },
    "v1GcpNetworks": {
      "type": "object",
      "properties": {
        "networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpNetwork"
          }
        }
      }
    },
    "v1GcpNic": {
      "description": "GCP network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1GcpProject": {
      "description": "Gcp project",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1GcpProjects": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpProject"
          }
        }
      }
    },
    "v1GcpRegion": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1GcpRegions": {
      "type": "object",
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpRegion"
          }
        }
      }
    },
    "v1GcpStorageConfig": {
      "description": "User asset Gcp location config",
      "type": "object",
      "required": [
        "bucketName",
        "credentials"
      ],
      "properties": {
        "bucketName": {
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/v1.GcpAccountEntitySpec"
        }
      }
    },
    "v1GcpStorageTypes": {
      "type": "object",
      "properties": {
        "storageTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1StorageType"
          }
        }
      }
    },
    "v1GcpSubnet": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1GcpZone": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1GcpZones": {
      "type": "object",
      "properties": {
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpZone"
          }
        }
      }
    },
    "v1GenericCloudClusterConfigEntity": {
      "description": "Generic cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1GenericClusterConfig"
        }
      }
    },
    "v1GenericCloudConfig": {
      "description": "Generic CloudConfig for all cloud types",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GenericCloudConfigSpec"
        }
      }
    },
    "v1GenericCloudConfigSpec": {
      "description": "Generic CloudConfig spec for all cloud types",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "Cloud account reference is optional and dynamically handled based on the kind",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1GenericClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GenericMachinePoolConfig"
          }
        }
      }
    },
    "v1GenericClusterConfig": {
      "description": "Generic cluster config",
      "type": "object",
      "properties": {
        "instanceType": {
          "$ref": "#/definitions/v1GenericInstanceType"
        },
        "region": {
          "description": "cluster region information",
          "type": "string"
        }
      }
    },
    "v1GenericInstanceType": {
      "type": "object",
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a virtual machine's disk, in GiB",
          "type": "integer",
          "format": "int32"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of virtual processors in a virtual machine",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1GenericMachine": {
      "description": "Generic cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GenericMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1GenericMachinePoolConfig": {
      "type": "object",
      "required": [
        "isControlPlane"
      ],
      "properties": {
        "instanceType": {
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "Size of root volume in GB. Default is 30GB",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean"
        }
      }
    },
    "v1GenericMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1GenericClusterConfig"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1GenericMachineSpec": {
      "description": "Generic cloud VM definition spec",
      "properties": {
        "hostName": {
          "type": "string"
        },
        "imageId": {
          "type": "string"
        },
        "instanceType": {
          "$ref": "#/definitions/v1GenericInstanceType"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GenericNic"
          }
        },
        "sshKeyName": {
          "type": "string"
        }
      }
    },
    "v1GenericMachines": {
      "description": "Generic machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1GenericMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1GenericNic": {
      "description": "Generic network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1GitRepoFileContent": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        }
      }
    },
    "v1Hash": {
      "type": "object",
      "required": [
        "hash"
      ],
      "properties": {
        "hash": {
          "type": "string"
        }
      }
    },
    "v1HealthCheck": {
      "type": "object",
      "properties": {
        "isHealthy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1HealthLocks": {
      "type": "object",
      "properties": {
        "expiredLocks": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Lock"
          }
        }
      }
    },
    "v1HealthPing": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string"
        }
      }
    },
    "v1HelmChartOption": {
      "description": "If chart options are provided then the specified chart is validated first and synced immediately. If the specified chart is not found in the specified registry then creation is cancelled.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1HelmRegistries": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1HelmRegistry"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1HelmRegistriesSummary": {
      "description": "Helm Registries Summary",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1HelmRegistrySummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1HelmRegistry": {
      "description": "Helm registry information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1HelmRegistrySpec"
        },
        "status": {
          "$ref": "#/definitions/v1HelmRegistryStatus"
        }
      }
    },
    "v1HelmRegistryCreateOption": {
      "description": "Helm registry create options",
      "type": "object",
      "properties": {
        "charts": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1HelmChartOption"
          }
        },
        "skipSync": {
          "type": "boolean"
        }
      }
    },
    "v1HelmRegistryEntity": {
      "description": "Helm registry information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1HelmRegistrySpecEntity"
        }
      }
    },
    "v1HelmRegistrySpec": {
      "description": "Helm registry credentials spec",
      "type": "object",
      "required": [
        "endpoint",
        "auth"
      ],
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "endpoint": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1HelmRegistrySpecEntity": {
      "description": "Helm registry credentials spec",
      "type": "object",
      "required": [
        "endpoint",
        "auth"
      ],
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "createOption": {
          "$ref": "#/definitions/v1HelmRegistryCreateOption"
        },
        "endpoint": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1HelmRegistrySpecSummary": {
      "description": "Helm Registry spec summary",
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1HelmRegistryStatus": {
      "description": "Status of the helm registry",
      "type": "object",
      "properties": {
        "helmSyncStatus": {
          "$ref": "#/definitions/v1RegistrySyncStatus"
        }
      }
    },
    "v1HelmRegistryStatusSummary": {
      "description": "Helm registry status summary",
      "properties": {
        "sync": {
          "$ref": "#/definitions/v1RegistrySyncStatus"
        }
      }
    },
    "v1HelmRegistrySummary": {
      "description": "Helm Registry summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1HelmRegistrySpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1HelmRegistryStatusSummary"
        }
      }
    },
    "v1HttpPatch": {
      "type": "object",
      "required": [
        "op",
        "path"
      ],
      "properties": {
        "from": {
          "description": "A path to the pointer from which reference will be taken",
          "type": "string"
        },
        "op": {
          "description": "The operation to be performed",
          "type": "string",
          "enum": [
            "add",
            "remove",
            "replace",
            "move",
            "copy"
          ]
        },
        "path": {
          "description": "A path to the pointer on which operation will be done",
          "type": "string"
        },
        "value": {
          "description": "The value to be used within the operations.",
          "type": "object"
        }
      }
    },
    "v1HubbleInfo": {
      "type": "object",
      "properties": {
        "apiEndpoint": {
          "type": "string"
        },
        "apiPort": {
          "type": "string"
        },
        "natsEndpoint": {
          "type": "string"
        },
        "uiEndpoint": {
          "type": "string"
        },
        "uiPort": {
          "type": "string"
        }
      }
    },
    "v1IPPool": {
      "description": "IPPool defines static IPs available. Gateway, Prefix, Nameserver, if defined, will be default values for all Pools",
      "type": "object",
      "properties": {
        "gateway": {
          "description": "Gateway is the gateway ip address",
          "type": "string"
        },
        "nameserver": {
          "description": "Nameserver provide information for dns resolvation",
          "$ref": "#/definitions/v1Nameserver"
        },
        "pools": {
          "description": "Pools contains the list of IP addresses pools",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Pool"
          }
        },
        "prefix": {
          "description": "Prefix is the mask of the network as integer (max 128)",
          "type": "integer",
          "format": "int32"
        },
        "uid": {
          "description": "UID is the UID of this IPPool, used by Hubble",
          "type": "string"
        }
      }
    },
    "v1IdentityProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1IdentityProviders": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1IdentityProvider"
      }
    },
    "v1ImportClusterConfig": {
      "type": "object",
      "properties": {
        "proxy": {
          "description": "Cluster proxy settings",
          "$ref": "#/definitions/v1ClusterProxySpec"
        }
      }
    },
    "v1InstallerStatus": {
      "description": "Spectro cluster installer status",
      "type": "object",
      "properties": {
        "clusterMigration": {
          "$ref": "#/definitions/v1SpectroClusterMigration"
        },
        "clusterState": {
          "type": "string"
        },
        "endpoint": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1InstanceCost": {
      "description": "Instance cost",
      "type": "object",
      "properties": {
        "price": {
          "description": "Array of cloud instance price",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InstancePrice"
          }
        }
      }
    },
    "v1InstancePrice": {
      "description": "Cloud instance price",
      "type": "object",
      "properties": {
        "onDemand": {
          "type": "number",
          "format": "double"
        },
        "os": {
          "type": "string",
          "enum": [
            "linux",
            "windows"
          ]
        },
        "spot": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "v1InstanceType": {
      "description": "Cloud Instance type details",
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "x-go-name": "Category"
        },
        "cost": {
          "$ref": "#/definitions/v1InstanceCost"
        },
        "cpu": {
          "type": "number",
          "format": "double",
          "x-go-name": "Cpu"
        },
        "gpu": {
          "type": "number",
          "format": "double",
          "x-go-name": "Gpu"
        },
        "memory": {
          "type": "number",
          "format": "double",
          "x-go-name": "Memory"
        },
        "nonSupportedZones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "price": {
          "type": "number",
          "format": "double",
          "x-go-name": "Price"
        },
        "supportedArchitectures": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      }
    },
    "v1Invoice": {
      "description": "Invoice",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1InvoiceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1InvoiceStatus"
        }
      }
    },
    "v1InvoiceBillingPeriod": {
      "description": "Invoice billing period",
      "properties": {
        "end": {
          "$ref": "#/definitions/v1Time"
        },
        "start": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1InvoiceCredits": {
      "description": "Invoice credits",
      "properties": {
        "alloyFreeCredits": {
          "type": "number",
          "format": "int64"
        },
        "pureFreeCredits": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "v1InvoicePlan": {
      "description": "Invoice plan",
      "properties": {
        "freeCredits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InvoicePlanCredit"
          }
        },
        "plantype": {
          "type": "string",
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ]
        },
        "slaCredits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InvoicePlanCredit"
          }
        }
      }
    },
    "v1InvoicePlanCredit": {
      "description": "Invoice plan",
      "properties": {
        "planCredit": {
          "$ref": "#/definitions/v1PlanCredit"
        },
        "totalCpuCoreHours": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "v1InvoiceProduct": {
      "description": "Product Invoice",
      "properties": {
        "alloy": {
          "$ref": "#/definitions/v1InvoiceProductData"
        },
        "pure": {
          "$ref": "#/definitions/v1InvoiceProductData"
        }
      }
    },
    "v1InvoiceProductData": {
      "description": "Product Invoice",
      "properties": {
        "allocatedCredits": {
          "type": "number",
          "format": "int64"
        },
        "amount": {
          "type": "number",
          "format": "float64"
        },
        "billableCredits": {
          "type": "number",
          "format": "float64"
        },
        "breachedCredits": {
          "type": "number",
          "format": "float64"
        },
        "discount": {
          "type": "number",
          "format": "int64"
        },
        "freeCredits": {
          "type": "number",
          "format": "int64"
        },
        "overageLimitPercentage": {
          "type": "number",
          "format": "int8"
        },
        "tierName": {
          "type": "string"
        },
        "tierPrice": {
          "type": "number",
          "format": "float64"
        },
        "totalUsedCredits": {
          "type": "number",
          "format": "float64"
        },
        "usedCredits": {
          "type": "number",
          "format": "float64"
        }
      }
    },
    "v1InvoiceProject": {
      "description": "Invoice Project",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float64"
        },
        "projectName": {
          "type": "string"
        },
        "projectUid": {
          "type": "string"
        },
        "usage": {
          "$ref": "#/definitions/v1ProjectUsage"
        }
      }
    },
    "v1InvoiceRetryRequest": {
      "description": "Retry invoice request",
      "properties": {
        "customerId": {
          "type": "string"
        },
        "invoiceUid": {
          "type": "string"
        },
        "paymentMethodId": {
          "type": "string"
        }
      }
    },
    "v1InvoiceSpec": {
      "description": "Invoice spec",
      "properties": {
        "address": {
          "$ref": "#/definitions/v1Address"
        },
        "billingPeriod": {
          "$ref": "#/definitions/v1InvoiceBillingPeriod"
        },
        "credits": {
          "$ref": "#/definitions/v1InvoiceCredits"
        },
        "envType": {
          "type": "string"
        },
        "month": {
          "$ref": "#/definitions/v1Time"
        },
        "paymentUnit": {
          "type": "string",
          "enum": [
            "usd"
          ]
        },
        "plan": {
          "$ref": "#/definitions/v1InvoicePlan"
        }
      }
    },
    "v1InvoiceState": {
      "description": "Invoice state",
      "properties": {
        "paymentMsg": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "Paid",
            "PaymentPending",
            "PaymentInProgress",
            "PaymentFailed"
          ]
        },
        "timestamp": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1InvoiceStatus": {
      "description": "Invoice Status",
      "properties": {
        "billableAmount": {
          "type": "number",
          "format": "float64"
        },
        "productInvoice": {
          "$ref": "#/definitions/v1InvoiceProduct"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InvoiceProject"
          }
        },
        "states": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1InvoiceState"
          }
        },
        "stripeInvoiceId": {
          "type": "string"
        }
      }
    },
    "v1Invoices": {
      "description": "Array of Invoices",
      "type": "object",
      "required": [
        "invoices"
      ],
      "properties": {
        "invoices": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Invoice"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1IpPoolEntity": {
      "description": "IP Pool entity definition",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "pool": {
              "$ref": "#/definitions/v1Pool"
            },
            "priavetGatewayUid": {
              "type": "string"
            },
            "restrictToSingleCluster": {
              "description": "if true, restricts this IP pool to be used by single cluster at any time",
              "type": "boolean",
              "x-omitempty": false
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1IpPoolStatus"
        }
      }
    },
    "v1IpPoolInputEntity": {
      "description": "IP Pool input entity definition",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "pool"
          ],
          "properties": {
            "pool": {
              "$ref": "#/definitions/v1Pool"
            },
            "restrictToSingleCluster": {
              "description": "if true, restricts this IP pool to be used by single cluster at any time",
              "type": "boolean"
            }
          }
        }
      }
    },
    "v1IpPoolStatus": {
      "description": "IP Pool status",
      "type": "object",
      "properties": {
        "allottedIps": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "associatedClusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "inUse": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1IpPools": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1IpPoolEntity"
          }
        }
      }
    },
    "v1KubeBenchEntity": {
      "description": "Kube bench response",
      "required": [
        "requestUid",
        "status",
        "reports"
      ],
      "properties": {
        "reports": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1KubeBenchReportEntity"
          }
        },
        "requestUid": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Completed",
            "InProgress",
            "Failed",
            "Initiated"
          ]
        }
      }
    },
    "v1KubeBenchLog": {
      "description": "Compliance Scan Kube Bench Report",
      "properties": {
        "description": {
          "type": "string"
        },
        "expected": {
          "type": "string"
        },
        "remediation": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "testId": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1KubeBenchLogEntity": {
      "description": "Kube bench log",
      "properties": {
        "description": {
          "type": "string"
        },
        "expected": {
          "type": "string"
        },
        "remediation": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "testId": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1KubeBenchReport": {
      "description": "Compliance Scan Kube Bench Report",
      "properties": {
        "fail": {
          "type": "integer",
          "format": "int32"
        },
        "info": {
          "type": "integer",
          "format": "int32"
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KubeBenchLog"
          }
        },
        "name": {
          "type": "string"
        },
        "pass": {
          "type": "integer",
          "format": "int32"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string"
        },
        "warn": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1KubeBenchReportEntity": {
      "description": "Kube bench report",
      "properties": {
        "fail": {
          "type": "integer",
          "format": "int32"
        },
        "info": {
          "type": "integer",
          "format": "int32"
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KubeBenchLogEntity"
          }
        },
        "name": {
          "type": "string"
        },
        "pass": {
          "type": "integer",
          "format": "int32"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string"
        },
        "warn": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1KubeHunterEntity": {
      "description": "Kube hunter response",
      "required": [
        "requestUid",
        "status",
        "reports"
      ],
      "properties": {
        "reports": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1KubeHunterReportEntity"
          }
        },
        "requestUid": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Completed",
            "InProgress",
            "Failed",
            "Initiated"
          ]
        }
      }
    },
    "v1KubeHunterLog": {
      "description": "Compliance Scan Kube Hunter Log",
      "properties": {
        "description": {
          "type": "string"
        },
        "evidence": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "testId": {
          "type": "string"
        },
        "vulnerability": {
          "type": "string"
        }
      }
    },
    "v1KubeHunterLogEntity": {
      "description": "Kube hunter log",
      "properties": {
        "description": {
          "type": "string"
        },
        "evidence": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "testId": {
          "type": "string"
        },
        "vulnerability": {
          "type": "string"
        }
      }
    },
    "v1KubeHunterReport": {
      "description": "Compliance Scan Kube Hunter Report",
      "properties": {
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KubeHunterLog"
          }
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        },
        "vulnerabilites": {
          "$ref": "#/definitions/v1KubeHunterVulnerabilities"
        }
      }
    },
    "v1KubeHunterReportEntity": {
      "description": "Kube hunter report",
      "properties": {
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KubeHunterLogEntity"
          }
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        },
        "vulnerabilities": {
          "$ref": "#/definitions/v1KubeHunterVulnerabilityDataEntity"
        }
      }
    },
    "v1KubeHunterVulnerabilities": {
      "description": "Compliance Scan Kube Hunter Vulnerabilities",
      "properties": {
        "high": {
          "type": "integer",
          "format": "int32"
        },
        "low": {
          "type": "integer",
          "format": "int32"
        },
        "medium": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1KubeHunterVulnerabilityDataEntity": {
      "description": "Kube hunter vulnerability data",
      "properties": {
        "high": {
          "type": "integer",
          "format": "int32"
        },
        "low": {
          "type": "integer",
          "format": "int32"
        },
        "medium": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1KubeMeta": {
      "description": "Spectro cluster kube meta",
      "type": "object",
      "properties": {
        "hasKubeConfig": {
          "type": "boolean",
          "x-omitempty": false
        },
        "hasKubeConfigClient": {
          "type": "boolean",
          "x-omitempty": false
        },
        "hasManifest": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1LibvirtCloudClusterConfigEntity": {
      "description": "Libvirt cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1LibvirtClusterConfig"
        }
      }
    },
    "v1LibvirtCloudConfig": {
      "description": "LibvirtCloudConfig is the Schema for the libvirtcloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1LibvirtCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1LibvirtCloudConfigStatus"
        }
      }
    },
    "v1LibvirtCloudConfigSpec": {
      "description": "LibvirtCloudConfigSpec defines the desired state of LibvirtCloudConfig",
      "type": "object",
      "required": [
        "clusterConfig",
        "machinePoolConfig"
      ],
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1LibvirtClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LibvirtMachinePoolConfig"
          }
        }
      }
    },
    "v1LibvirtCloudConfigStatus": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          }
        },
        "nodeImages": {
          "description": "NodeImages are the list of images generated on all the LibvirtHosts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LibvirtImage"
          }
        },
        "sourceImageId": {
          "description": "SourceImageId can be from packref's annotations or from pack.json",
          "type": "string"
        }
      }
    },
    "v1LibvirtClusterConfig": {
      "type": "object",
      "properties": {
        "controlPlaneEndpoint": {
          "description": "ControlPlaneEndpoint is the control plane endpoint, which can be an IP or FQDN",
          "$ref": "#/definitions/v1LibvirtControlPlaneEndPoint"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys to access the vms as a 'spectro' user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "staticIp": {
          "description": "StaticIP indicates if IP allocation type is static IP. DHCP is the default allocation type",
          "type": "boolean"
        }
      }
    },
    "v1LibvirtControlPlaneEndPoint": {
      "type": "object",
      "properties": {
        "ddnsSearchDomain": {
          "description": "DDNSSearchDomain is the search domain used for resolving IP addresses when the EndpointType is DDNS. This search domain is appended to the generated Hostname to obtain the complete DNS name for the endpoint. If Host is already a DDNS FQDN, DDNSSearchDomain is not required",
          "type": "string"
        },
        "host": {
          "description": "Host is FQDN(DDNS) or IP",
          "type": "string"
        },
        "type": {
          "description": "Type indicates DDNS or VIP",
          "type": "string"
        }
      }
    },
    "v1LibvirtDiskSpec": {
      "type": "object",
      "required": [
        "sizeInGB"
      ],
      "properties": {
        "dataStoragePool": {
          "description": "DataStoragePool is the storage pool from which additional disks are assigned",
          "type": "string"
        },
        "managed": {
          "description": "Managed indicates if the disk is a persistent or not. By default its false indicating all disks are ephemeral.",
          "type": "boolean"
        },
        "sizeInGB": {
          "description": "SizeInGB is the target size in GB of the disk to be added",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1LibvirtHostIdentity": {
      "type": "object",
      "properties": {
        "caCert": {
          "description": "CACert is the client CA certificate",
          "type": "string"
        },
        "mode": {
          "description": "Mode indicates a system or session connection to the host",
          "type": "string"
        },
        "socketPath": {
          "description": "SocketPath is an optional path to the socket on the host, if not using defaults",
          "type": "string"
        },
        "sshSecret": {
          "description": "SSHSecrets to the secret containing ssh-username",
          "$ref": "#/definitions/v1EdgeHostSSHSecret"
        }
      }
    },
    "v1LibvirtImage": {
      "description": "LibvirtImage is the Image generated on the LibvirtHost",
      "type": "object",
      "properties": {
        "hostID": {
          "description": "HostID is the ID of the LibvirtHost",
          "type": "string"
        },
        "imageName": {
          "description": "ImageName is the name of the Libvirt image",
          "type": "string"
        },
        "storagePool": {
          "description": "StoragePool is the name of the storagePool where is image is located",
          "type": "string"
        }
      }
    },
    "v1LibvirtInstanceType": {
      "description": "LibvirtInstanceType defines the instance configuration for a virtual machine",
      "type": "object",
      "required": [
        "numCPUs",
        "memoryInMB"
      ],
      "properties": {
        "cpuset": {
          "description": "CPUSet defines cpuset for an instance which allows allocation specific set of cpus E.g  cpuset=\"1-4,^3,6\" See https://libvirt.org/formatdomain.html#cpu-allocation",
          "type": "string"
        },
        "gpuConfig": {
          "description": "GPU configuration",
          "$ref": "#/definitions/v1GPUConfig"
        },
        "memoryInMB": {
          "description": "MemoryinMB is the memory in megabytes",
          "type": "integer",
          "format": "int32"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of CPUs",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1LibvirtMachine": {
      "description": "Libvirt cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1LibvirtMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1LibvirtMachinePoolCloudConfigEntity": {
      "required": [
        "instanceType",
        "placements",
        "rootDiskInGB"
      ],
      "properties": {
        "instanceType": {
          "$ref": "#/definitions/v1LibvirtInstanceType"
        },
        "nonRootDisksInGB": {
          "description": "NonRootDisksInGB is the list of additional disks, if required, in GB",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LibvirtDiskSpec"
          }
        },
        "placements": {
          "description": "Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1LibvirtPlacementEntity"
          }
        },
        "rootDiskInGB": {
          "description": "RootDiskInGB is the size of a vm's root disk, in GiB",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1LibvirtMachinePoolConfig": {
      "type": "object",
      "required": [
        "instanceType",
        "placements",
        "rootDiskInGB"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "instanceType": {
          "description": "InstanceType defines the instance configuration of the vms in the machine pool",
          "$ref": "#/definitions/v1LibvirtInstanceType"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "nonRootDisksInGB": {
          "description": "NonRootDisksInGB is the list of additional disks, if required, in GB",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LibvirtDiskSpec"
          }
        },
        "placements": {
          "description": "Placements defines the configurations of the failureDomains(hosts) for the machine pool",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LibvirtPlacementConfig"
          }
        },
        "rootDiskInGB": {
          "description": "RootDiskInGB is the size of a vm's root disk, in GB",
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "taints": {
          "description": "master or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean"
        }
      }
    },
    "v1LibvirtMachinePoolConfigEntity": {
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1LibvirtMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1LibvirtMachineSpec": {
      "description": "libvirt cloud VM definition spec",
      "type": "object",
      "properties": {
        "disks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LibvirtDiskSpec"
          }
        },
        "edgeHostUid": {
          "type": "string"
        },
        "failureDomain": {
          "type": "string"
        },
        "imageName": {
          "type": "string"
        },
        "instanceType": {
          "$ref": "#/definitions/v1LibvirtInstanceType"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LibvirtNicSpec"
          }
        },
        "targetStoragePool": {
          "type": "string"
        }
      }
    },
    "v1LibvirtMachines": {
      "description": "Libvirt machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1LibvirtMachine"
          }
        }
      }
    },
    "v1LibvirtNetworkSpec": {
      "description": "LibvirtNetworkSpec defines the network configuration for a virtual machine",
      "type": "object",
      "required": [
        "networkName",
        "networkType"
      ],
      "properties": {
        "networkName": {
          "description": "NetworkName of the libvirt network where this machine will be connected",
          "type": "string"
        },
        "networkType": {
          "description": "NetworkType  specifies the type of network",
          "type": "string",
          "enum": [
            "default",
            "bridge"
          ]
        }
      }
    },
    "v1LibvirtNicSpec": {
      "description": "Libvirt network interface",
      "type": "object",
      "required": [
        "macAddress"
      ],
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "macAddress": {
          "type": "string"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1LibvirtPlacementConfig": {
      "type": "object",
      "required": [
        "hostUid",
        "hostAddress",
        "networks",
        "sourceStoragePool"
      ],
      "properties": {
        "dataStoragePool": {
          "description": "DataStoragePool is the storage pool from which additional disks are assigned",
          "type": "string"
        },
        "gpuDevices": {
          "description": "GPU Devices is the list of LibvirtHost GPU devices, to be used for this placement",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GPUDeviceSpec"
          }
        },
        "hostAddress": {
          "description": "HostAddress is a FQDN or IP address of the LibvirtHost",
          "type": "string"
        },
        "hostIdentity": {
          "description": "HostIdentity is the identity to access the LibvirtHost",
          "$ref": "#/definitions/v1LibvirtHostIdentity"
        },
        "hostUid": {
          "description": "HostUid is the ID of the LibvirtHost",
          "type": "string"
        },
        "networks": {
          "description": "Networks defines the network specifications of the vms in the machine pool",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LibvirtNetworkSpec"
          }
        },
        "sourceStoragePool": {
          "description": "SourceStoragePool is the storage pool for the vm image",
          "type": "string"
        },
        "targetStoragePool": {
          "description": "TargetStoragePool is the optional storage pool from which additional disks are assigned. If not specified, the sourceStoragePool is also used as the targetStoragePool",
          "type": "string"
        }
      }
    },
    "v1LibvirtPlacementEntity": {
      "description": "Libvirt placement config",
      "type": "object",
      "required": [
        "hostUid"
      ],
      "properties": {
        "dataStoragePool": {
          "type": "string"
        },
        "hostUid": {
          "type": "string"
        },
        "networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LibvirtNetworkSpec"
          }
        },
        "sourceStoragePool": {
          "type": "string"
        },
        "targetStoragePool": {
          "type": "string"
        }
      }
    },
    "v1ListMetaData": {
      "description": "ListMeta describes metadata for the resource listing",
      "type": "object",
      "properties": {
        "continue": {
          "description": "Next token for the pagination. Next token is equal to empty string indicates end of result set.",
          "type": "string",
          "x-omitempty": false
        },
        "count": {
          "description": "Total count of the resources which might change during pagination based on the resources addition or deletion",
          "type": "integer",
          "x-omitempty": false
        },
        "limit": {
          "description": "Number of records feteched",
          "type": "integer",
          "x-omitempty": false
        },
        "offset": {
          "description": "The next offset for the pagination. Starting index for which next request will be placed.",
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "v1LoadBalancerService": {
      "type": "object",
      "properties": {
        "host": {
          "description": "IP or Host from svc.Status.LoadBalancerStatus.Ingress",
          "type": "string"
        },
        "name": {
          "description": "name of the loadbalancer service",
          "type": "string"
        },
        "ports": {
          "description": "port this service exposed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ServicePort"
          }
        }
      }
    },
    "v1LocationType": {
      "type": "string",
      "default": "s3",
      "enum": [
        "s3",
        "gcp",
        "minio"
      ]
    },
    "v1Lock": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object",
          "x-omitempty": false,
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "expireAt": {
              "x-omitempty": false,
              "$ref": "#/definitions/v1Time"
            },
            "key": {
              "type": "string",
              "x-omitempty": false
            }
          }
        }
      }
    },
    "v1Locks": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1Lock"
      }
    },
    "v1Login": {
      "description": "Login input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        }
      }
    },
    "v1LoginResponse": {
      "description": "Login response specifying auth type and org name",
      "type": "object",
      "properties": {
        "appEnv": {
          "type": "string"
        },
        "authType": {
          "type": "string",
          "enum": [
            "password",
            "sso"
          ]
        },
        "orgName": {
          "type": "string"
        },
        "redirectUrl": {
          "type": "string",
          "x-omitempty": false
        },
        "rootDomain": {
          "type": "string"
        },
        "totalTenants": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "v1LogoutResponse": {
      "description": "Logout response specifying the redirect url",
      "type": "object",
      "properties": {
        "redirectUrl": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1MaasAccount": {
      "description": "Maas cloud account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1MaasCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1MaasAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MaasAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1MaasCloudAccount": {
      "type": "object",
      "required": [
        "apiKey",
        "apiEndpoint"
      ],
      "properties": {
        "apiEndpoint": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        }
      }
    },
    "v1MaasCloudClusterConfigEntity": {
      "description": "Maas cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1MaasClusterConfig"
        }
      }
    },
    "v1MaasCloudConfig": {
      "description": "MaasCloudConfig is the Schema for the maascloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1MaasCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1MaasCloudConfigStatus"
        }
      }
    },
    "v1MaasCloudConfigSpec": {
      "description": "MaasCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains MaasCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1MaasClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MaasMachinePoolConfig"
          }
        }
      }
    },
    "v1MaasCloudConfigStatus": {
      "description": "MaasCloudConfigStatus defines the observed state of MaasCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "type": "object",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "isAddonLayer": {
          "description": "addon layes present in spc",
          "type": "boolean"
        },
        "nodeImage": {
          "$ref": "#/definitions/v1MaasImage"
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      }
    },
    "v1MaasClusterConfig": {
      "description": "cluster level configuration for maas cloud, same for all machinepools",
      "type": "object",
      "required": [
        "domain"
      ],
      "properties": {
        "domain": {
          "type": "string"
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys for the 'spectro' user",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1MaasDomain": {
      "description": "Maas domain",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1MaasDomains": {
      "description": "Array of maas domains",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MaasDomain"
          }
        }
      }
    },
    "v1MaasImage": {
      "description": "Name of the image",
      "type": "object",
      "properties": {
        "name": {
          "description": "full path of the image template location it contains datacenter/folder/templatename etc eg: /mydc/vm/template/spectro/workerpool-1-centos",
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1MaasInstanceType": {
      "type": "object",
      "properties": {
        "minCPU": {
          "description": "Minimum CPU cores",
          "type": "integer",
          "format": "int32"
        },
        "minMemInMB": {
          "description": "Minimum memory in MiB",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1MaasMachine": {
      "description": "Maas cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1MaasMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1MaasMachineConfigEntity": {
      "type": "object",
      "properties": {
        "azs": {
          "description": "for master pool, this will be the failure domains for kcp",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "$ref": "#/definitions/v1MaasInstanceType"
        },
        "resourcePool": {
          "type": "string"
        }
      }
    },
    "v1MaasMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "instanceType",
        "resourcePool"
      ],
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "$ref": "#/definitions/v1MaasInstanceType"
        },
        "resourcePool": {
          "description": "the resource pool",
          "type": "string"
        }
      }
    },
    "v1MaasMachinePoolConfig": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "instanceType": {
          "description": "InstanceType defines the required CPU, Memory",
          "$ref": "#/definitions/v1MaasInstanceType"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "resourcePool": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "taints": {
          "description": "master or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean"
        }
      }
    },
    "v1MaasMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1MaasMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1MaasMachineSpec": {
      "description": "Maas cloud VM definition spec",
      "type": "object",
      "properties": {
        "az": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MaasNic"
          }
        }
      }
    },
    "v1MaasMachines": {
      "description": "Maas machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MaasMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1MaasNic": {
      "description": "Maas network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1MaasPool": {
      "description": "Maas pool",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1MaasPools": {
      "description": "Array of maas pools",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MaasPool"
          }
        }
      }
    },
    "v1MaasSubnet": {
      "description": "Maas subnet",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "space": {
          "type": "string"
        },
        "vlans": {
          "$ref": "#/definitions/v1MaasVlan"
        }
      }
    },
    "v1MaasSubnets": {
      "description": "Array of maas subnets",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MaasSubnet"
          }
        }
      }
    },
    "v1MaasVlan": {
      "description": "Maas vlan",
      "type": "object",
      "properties": {
        "fabric": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1MaasZone": {
      "description": "Maas zone",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1MaasZones": {
      "description": "Array of maas zones",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MaasZone"
          }
        }
      }
    },
    "v1MachineCertificate": {
      "description": "K8 Certificates for master nodes",
      "type": "object",
      "properties": {
        "certificateAuthorities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CertificateAuthority"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1MachineCertificates": {
      "description": "K8 Certificates for all master nodes of cluster",
      "type": "object",
      "properties": {
        "machineCertificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MachineCertificate"
          }
        }
      }
    },
    "v1MachineHealth": {
      "description": "Machine health state",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MachineHealthCondition"
          }
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1MachineHealthCheckConfig": {
      "type": "object",
      "properties": {
        "healthCheckMaxUnhealthy": {
          "description": "HealthCheckMaxUnhealthy is the value above which, if current nodes are unhealthy remediation will not be triggered Can be an absolute int64 number or a percentage string Default value is 100%, i.e by default it is disabled",
          "type": "string"
        },
        "networkReadyHealthCheckDuration": {
          "description": "NetworkReadyHealthCheckDuration is the timeout to check for the network availability. If the network is not available in the given available time, beyond the timeout check a node will be killed and a new node will be created. Default time is 10m",
          "type": "string"
        },
        "nodeReadyHealthCheckDuration": {
          "description": "NodeReadyHealthCheckDuration is the timeout to check for the node ready state. If the node is not ready within the time out set, the node will be deleted and a new node will be launched. Default time is 10m",
          "type": "string"
        }
      }
    },
    "v1MachineHealthCondition": {
      "description": "Machine health condition",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1MachineManagementConfig": {
      "type": "object",
      "properties": {
        "osPatchConfig": {
          "description": "Os patch config contains properties to patch node os with latest security packages. If OsPatchConfig is not provided then node os will not be patched with latest security updates.",
          "$ref": "#/definitions/v1OsPatchConfig"
        }
      }
    },
    "v1MachinePoolConfigEntity": {
      "description": "Machine pool configuration API entity",
      "type": "object",
      "required": [
        "name",
        "size",
        "labels"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "taints": {
          "description": "master or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1MachinePoolMeta": {
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1CloudType"
        },
        "healthy": {
          "description": "number of healthy machines",
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "infraProfileTemplate": {
          "description": "InfraClusterProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        }
      }
    },
    "v1MachinePoolProfileConfigEntity": {
      "type": "object",
      "required": [
        "infraProfileUid"
      ],
      "properties": {
        "infraProfileUid": {
          "description": "InfraClusterProfile uid for the machine pool",
          "type": "string"
        },
        "packValues": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackValuesEntity"
          }
        }
      }
    },
    "v1MachinePoolRate": {
      "description": "Machine pool estimated rate information",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "nodesCount": {
          "type": "integer",
          "format": "int32"
        },
        "rate": {
          "$ref": "#/definitions/v1CloudRate"
        }
      }
    },
    "v1Macro": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1Macros": {
      "properties": {
        "macros": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Macro"
          }
        }
      }
    },
    "v1ManagedDisk": {
      "type": "object",
      "properties": {
        "storageAccountType": {
          "type": "string"
        }
      }
    },
    "v1ManifestData": {
      "description": "Manifest data",
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "digest": {
          "type": "string"
        }
      }
    },
    "v1ManifestEntities": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ManifestEntity"
          }
        }
      }
    },
    "v1ManifestEntity": {
      "description": "Manfiest entity",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ManifestSpec"
        }
      }
    },
    "v1ManifestInputEntity": {
      "description": "Manfiest input params",
      "properties": {
        "content": {
          "description": "Manifest content",
          "type": "string"
        },
        "name": {
          "description": "Name for the manifest",
          "type": "string"
        }
      }
    },
    "v1ManifestPublishedSpec": {
      "description": "Manifest spec data as draft \u0026 published",
      "properties": {
        "published": {
          "$ref": "#/definitions/v1ManifestData"
        }
      }
    },
    "v1ManifestRefInputEntities": {
      "description": "Pack manifests input params",
      "properties": {
        "manifests": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ManifestRefInputEntity"
          }
        }
      }
    },
    "v1ManifestRefInputEntity": {
      "description": "Manfiest input params",
      "properties": {
        "content": {
          "description": "Manifest content to override the existing content",
          "type": "string"
        },
        "uid": {
          "description": "Manifest uid",
          "type": "string"
        }
      }
    },
    "v1ManifestRefUpdateEntity": {
      "description": "Manfiest update params",
      "required": [
        "name"
      ],
      "properties": {
        "content": {
          "description": "Manifest content to override the existing content",
          "type": "string"
        },
        "name": {
          "description": "Name for the manifest",
          "type": "string"
        },
        "uid": {
          "description": "Manifest uid",
          "type": "string"
        }
      }
    },
    "v1ManifestSpec": {
      "description": "Manifest spec data as draft \u0026 published",
      "type": "object",
      "properties": {
        "draft": {
          "$ref": "#/definitions/v1ManifestData"
        },
        "published": {
          "$ref": "#/definitions/v1ManifestData"
        }
      }
    },
    "v1ManifestSummary": {
      "description": "Manfiest summary information",
      "properties": {
        "content": {
          "description": "Manifest content",
          "type": "string"
        },
        "name": {
          "description": "Name for the manifest",
          "type": "string"
        },
        "uid": {
          "description": "Manifest uid",
          "type": "string"
        }
      }
    },
    "v1Memory": {
      "type": "object",
      "properties": {
        "sizeInMB": {
          "description": "memory size in bytes",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1MetricAggregation": {
      "description": "Aggregation values",
      "type": "object",
      "properties": {
        "avg": {
          "type": "number",
          "x-omitempty": false
        },
        "count": {
          "type": "number",
          "format": "int64",
          "x-omitempty": false
        },
        "max": {
          "type": "number",
          "x-omitempty": false
        },
        "min": {
          "type": "number",
          "x-omitempty": false
        },
        "sum": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1MetricMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1MetricPoint": {
      "description": "Metric Info",
      "type": "object",
      "properties": {
        "avg": {
          "type": "number"
        },
        "count": {
          "type": "number",
          "format": "int64"
        },
        "max": {
          "type": "number"
        },
        "min": {
          "type": "number"
        },
        "sum": {
          "type": "number"
        },
        "timestamp": {
          "type": "number",
          "format": "int64"
        },
        "value": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1MetricTimeSeries": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Metrics"
          }
        }
      }
    },
    "v1MetricTimeSeriesList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MetricsList"
          }
        }
      }
    },
    "v1Metrics": {
      "type": "object",
      "properties": {
        "aggregation": {
          "$ref": "#/definitions/v1MetricAggregation"
        },
        "kind": {
          "type": "string"
        },
        "points": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MetricPoint"
          }
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "v1MetricsList": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1MetricMetadata"
        },
        "metrics": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Metrics"
          }
        }
      }
    },
    "v1MgmtApp": {
      "description": "Spectro application management data",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1MgmtAppSpec"
        },
        "status": {
          "$ref": "#/definitions/v1MgmtAppStatus"
        }
      }
    },
    "v1MgmtAppContainersState": {
      "type": "object",
      "properties": {
        "running": {
          "type": "object",
          "properties": {
            "startedAt": {
              "$ref": "#/definitions/v1Time"
            }
          }
        },
        "terminated": {
          "type": "object",
          "properties": {
            "exitCode": {
              "type": "integer"
            },
            "finishedAt": {
              "$ref": "#/definitions/v1Time"
            },
            "reason": {
              "type": "string"
            },
            "signal": {
              "type": "integer"
            },
            "startedAt": {
              "$ref": "#/definitions/v1Time"
            }
          }
        },
        "waiting": {
          "type": "object",
          "properties": {
            "reason": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1MgmtAppContainersStatus": {
      "type": "object",
      "properties": {
        "isHealthy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "numberOfRestarts": {
          "type": "integer"
        },
        "state": {
          "$ref": "#/definitions/v1MgmtAppContainersState"
        }
      }
    },
    "v1MgmtAppCronJobStatus": {
      "type": "object",
      "properties": {
        "isHealthy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "lastScheduleTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastSuccessfulRunTime": {
          "$ref": "#/definitions/v1Time"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "pods": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1MgmtAppPodsStatus"
          }
        }
      }
    },
    "v1MgmtAppEnvHealthStatus": {
      "type": "object",
      "properties": {
        "isHealthy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "namespaces": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1MgmtAppNameSpaceStatus"
          }
        }
      }
    },
    "v1MgmtAppHealth": {
      "type": "object",
      "properties": {
        "isHealthy": {
          "type": "boolean"
        },
        "podHealth": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MgmtPodHealth"
          }
        }
      }
    },
    "v1MgmtAppNameSpaceStatus": {
      "type": "object",
      "properties": {
        "cronJobs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1MgmtAppCronJobStatus"
          }
        },
        "deployments": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1MgmtAppObjectStatus"
          }
        },
        "isHealthy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "statefulSets": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1MgmtAppObjectStatus"
          }
        }
      }
    },
    "v1MgmtAppObjectStatus": {
      "type": "object",
      "properties": {
        "availableReplicas": {
          "type": "integer"
        },
        "creationTime": {
          "$ref": "#/definitions/v1Time"
        },
        "desiredReplicaCount": {
          "type": "integer"
        },
        "isHealthy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "pods": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1MgmtAppPodsStatus"
          }
        }
      }
    },
    "v1MgmtAppPodsStatus": {
      "type": "object",
      "properties": {
        "containers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1MgmtAppContainersStatus"
          }
        },
        "isHealthy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "phase": {
          "type": "string"
        },
        "pvcs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1MgmtAppPvcStatus"
          }
        },
        "reason": {
          "type": "string"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1MgmtAppPvcStatus": {
      "type": "object",
      "properties": {
        "claimName": {
          "type": "string"
        },
        "creationTime": {
          "$ref": "#/definitions/v1Time"
        },
        "isHealthy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1MgmtAppSpec": {
      "description": "spectro application management specifications",
      "properties": {
        "appEnv": {
          "type": "string"
        },
        "cloudType": {
          "type": "string"
        },
        "installedVersion": {
          "type": "string"
        },
        "latestVersion": {
          "type": "string"
        },
        "spectroClusterUid": {
          "type": "string"
        }
      }
    },
    "v1MgmtAppStatus": {
      "description": "spectro application management status",
      "properties": {
        "appVersions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AppVersion"
          }
        },
        "isFailed": {
          "type": "boolean",
          "x-omitempty": false
        },
        "message": {
          "type": "string"
        },
        "messageLogs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "state": {
          "type": "string"
        },
        "upgradeHistory": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroMgmtUpgrade"
          }
        }
      }
    },
    "v1MgmtAppUpgrade": {
      "type": "object",
      "properties": {
        "spec": {
          "type": "object",
          "properties": {
            "currentVersion": {
              "type": "string",
              "x-omitempty": false
            },
            "previousVersion": {
              "type": "string",
              "x-omitempty": false
            },
            "toBeUpgradedVersion": {
              "type": "string",
              "x-omitempty": false
            }
          }
        },
        "status": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "x-omitempty": false
            },
            "states": {
              "type": "object",
              "properties": {
                "imageUpdate": {
                  "x-omitempty": false,
                  "x-order": 1,
                  "$ref": "#/definitions/v1MgmtUpgradeState"
                },
                "spectroClusterUpdate": {
                  "x-omitempty": false,
                  "x-order": 0,
                  "$ref": "#/definitions/v1MgmtUpgradeState"
                },
                "spectroServiceResume": {
                  "x-omitempty": false,
                  "x-order": 4,
                  "$ref": "#/definitions/v1MgmtUpgradeState"
                },
                "spectroVersionConfigMapUpdate": {
                  "x-omitempty": false,
                  "x-order": 3,
                  "$ref": "#/definitions/v1MgmtUpgradeState"
                },
                "spectroVersionServiceSuspend": {
                  "x-omitempty": false,
                  "x-order": 2,
                  "$ref": "#/definitions/v1MgmtUpgradeState"
                }
              }
            },
            "upgradeStatus": {
              "type": "string",
              "x-omitempty": false
            },
            "versionHistory": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-omitempty": false
            }
          }
        }
      }
    },
    "v1MgmtAppVersion": {
      "description": "spectro application management version",
      "properties": {
        "version": {
          "type": "object",
          "properties": {
            "appEnv": {
              "type": "string"
            },
            "cloudType": {
              "type": "string"
            },
            "installedVersion": {
              "type": "string"
            },
            "latestVersion": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1MgmtBackupSpec": {
      "description": "backup spec",
      "type": "object",
      "properties": {
        "backupUid": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        },
        "modeUid": {
          "type": "string"
        },
        "proxy": {
          "description": "proxy information if applicable",
          "type": "string"
        },
        "scheduleTime": {
          "$ref": "#/definitions/v1Time"
        },
        "scheduleType": {
          "type": "string",
          "default": "Automated",
          "enum": [
            "OnDemand",
            "Automated"
          ]
        }
      }
    },
    "v1MgmtDeleteBackupFtpEntity": {
      "description": "delete backups based on retention period",
      "type": "object",
      "properties": {
        "fileTransferConfig": {
          "$ref": "#/definitions/v1MgmtFileTransferFtpEntity"
        },
        "retentionPeriod": {
          "type": "integer"
        }
      }
    },
    "v1MgmtDeleteBackupS3Entity": {
      "description": "delete backups based on retention period",
      "type": "object",
      "properties": {
        "fileTransferConfig": {
          "$ref": "#/definitions/v1MgmtFileTransferS3Entity"
        },
        "retentionPeriod": {
          "type": "integer"
        }
      }
    },
    "v1MgmtErrLog": {
      "type": "object",
      "properties": {
        "err": {
          "$ref": "#/definitions/v1MgmtErrStack"
        },
        "ref": {
          "type": "string"
        }
      }
    },
    "v1MgmtErrLogs": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1MgmtErrLog"
      }
    },
    "v1MgmtErrStack": {
      "type": "object",
      "properties": {
        "causes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MgmtErrStack"
          }
        },
        "code": {
          "type": "string"
        },
        "data": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1MgmtFileTransferFtpEntity": {
      "description": "file transfer details",
      "type": "object",
      "properties": {
        "backupSpec": {
          "$ref": "#/definitions/v1MgmtBackupSpec"
        },
        "ftp": {
          "$ref": "#/definitions/v1MgmtFtpConfig"
        }
      }
    },
    "v1MgmtFileTransferS3Entity": {
      "description": "file transfer details",
      "type": "object",
      "properties": {
        "backupSpec": {
          "$ref": "#/definitions/v1MgmtBackupSpec"
        },
        "s3": {
          "$ref": "#/definitions/v1MgmtS3Config"
        }
      }
    },
    "v1MgmtFtpConfig": {
      "description": "ftp config",
      "type": "object",
      "properties": {
        "directory": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "server": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1MgmtHash": {
      "type": "object",
      "required": [
        "hash"
      ],
      "properties": {
        "hash": {
          "type": "string"
        }
      }
    },
    "v1MgmtListBackupFtpEntity": {
      "description": "list ftp backups",
      "type": "object",
      "properties": {
        "fileTransferConfig": {
          "$ref": "#/definitions/v1MgmtFileTransferFtpEntity"
        }
      }
    },
    "v1MgmtListBackupS3Entity": {
      "description": "list s3 backups",
      "type": "object",
      "properties": {
        "fileTransferConfig": {
          "$ref": "#/definitions/v1MgmtFileTransferS3Entity"
        }
      }
    },
    "v1MgmtMigrateEntity": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "db": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "isServiceRecord": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "uri": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1MgmtMigrationStatuses": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "finishTime": {
          "$ref": "#/definitions/v1Time"
        },
        "folderName": {
          "type": "string"
        },
        "isCompleted": {
          "type": "boolean"
        },
        "message": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string",
          "x-omitempty": false
        },
        "status": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1MgmtMsgBrokerReinitStatus": {
      "type": "object",
      "properties": {
        "failures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MgmtMsgBrokerReinitStatusEntity"
          }
        },
        "success": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MgmtMsgBrokerReinitStatusEntity"
          }
        }
      }
    },
    "v1MgmtMsgBrokerReinitStatusEntity": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "isSuccess": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1MgmtPodHealth": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "isHealthy": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1MgmtS3Config": {
      "description": "s3 config",
      "type": "object",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "bucket": {
          "type": "string"
        },
        "directory": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "v1MgmtUpgradeState": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-omitempty": false
        },
        "details": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "endTimestamp": {
          "x-omitempty": false,
          "$ref": "#/definitions/v1Time"
        },
        "isCompleted": {
          "type": "boolean",
          "x-omitempty": false
        },
        "message": {
          "type": "string",
          "x-omitempty": false
        },
        "startTimestamp": {
          "x-omitempty": false,
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1MonthlyUsage": {
      "description": "Monthly usage",
      "properties": {
        "month": {
          "$ref": "#/definitions/v1Time"
        },
        "tenantUsages": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TenantUsage"
          }
        },
        "usedAlloyCredits": {
          "type": "number",
          "format": "float64"
        },
        "usedPureCredits": {
          "type": "number",
          "format": "float64"
        }
      }
    },
    "v1MsgBrokerConnection": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "accountUid": {
          "type": "string"
        },
        "cid": {
          "type": "integer"
        },
        "cluster": {
          "type": "object",
          "properties": {
            "addr": {
              "type": "string"
            },
            "authTimeout": {
              "type": "integer"
            },
            "clusterPort": {
              "type": "integer"
            },
            "urls": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "cpu": {
          "type": "number"
        },
        "duplicationCount": {
          "type": "integer"
        },
        "iP": {
          "type": "string"
        },
        "idle": {
          "type": "string"
        },
        "inBytes": {
          "type": "integer"
        },
        "inMsgs": {
          "type": "integer"
        },
        "lang": {
          "type": "string"
        },
        "lastActivity": {
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "type": "string"
        },
        "outBytes": {
          "type": "integer"
        },
        "outMsgs": {
          "type": "integer"
        },
        "pendingBytes": {
          "type": "integer"
        },
        "port": {
          "type": "integer"
        },
        "rtt": {
          "type": "string"
        },
        "start": {
          "$ref": "#/definitions/v1Time"
        },
        "subscriptionList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subscriptions": {
          "type": "integer"
        },
        "tLSCipherSuite": {
          "type": "string"
        },
        "tLSVersion": {
          "type": "string"
        },
        "uptime": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1MsgBrokerConnectionList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1MsgBrokerConnection"
      }
    },
    "v1MsgBrokerConnections": {
      "type": "object",
      "properties": {
        "connections": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MsgBrokerConnection"
          }
        },
        "limit": {
          "type": "integer"
        },
        "now": {
          "$ref": "#/definitions/v1Time"
        },
        "numOfConnections": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "serverId": {
          "type": "string"
        },
        "totalConnections": {
          "type": "integer"
        }
      }
    },
    "v1MsgBrokerHealth": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object",
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "$ref": "#/definitions/v1MsgBrokerNodesHealthSpec"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/v1MsgBrokerNodesHealthStatus"
        }
      }
    },
    "v1MsgBrokerNodeHealth": {
      "type": "object",
      "properties": {
        "allyPublishersByTenant": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1MsgBrokerConnectionList"
          }
        },
        "duplicateSubscribersCount": {
          "type": "object",
          "additionalProperties": {
            "type": "integer"
          }
        },
        "hubbleSubscribersByService": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1MsgBrokerConnectionList"
          }
        },
        "hubbleSubscribersByTenant": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1MsgBrokerConnectionList"
          }
        },
        "hubbleSubscribersByType": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1MsgBrokerConnectionList"
          }
        },
        "nodeId": {
          "type": "string"
        },
        "subscriberWithAbnormalRTT": {
          "$ref": "#/definitions/v1MsgBrokerConnectionList"
        },
        "subscribersWithAbnormalSubscriptions": {
          "$ref": "#/definitions/v1MsgBrokerConnectionList"
        },
        "uniqueSubscribers": {
          "type": "integer"
        },
        "unrecognizedClients": {
          "$ref": "#/definitions/v1MsgBrokerConnectionList"
        }
      }
    },
    "v1MsgBrokerNodeHealthSpec": {
      "type": "object",
      "properties": {
        "connections": {
          "type": "object",
          "$ref": "#/definitions/v1MsgBrokerConnections"
        },
        "nodeId": {
          "type": "string"
        },
        "routes": {
          "type": "object",
          "$ref": "#/definitions/v1MsgBrokerRoutes"
        },
        "variables": {
          "type": "object",
          "$ref": "#/definitions/v1MsgBrokerVariables"
        }
      }
    },
    "v1MsgBrokerNodesHealthSpec": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MsgBrokerNodeHealthSpec"
          }
        }
      }
    },
    "v1MsgBrokerNodesHealthStatus": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MsgBrokerNodeHealth"
          }
        }
      }
    },
    "v1MsgBrokerRoutes": {
      "type": "object",
      "properties": {
        "numRoutes": {
          "type": "integer"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1NatsRoute"
          }
        },
        "serverId": {
          "type": "string"
        }
      }
    },
    "v1MsgBrokerVariables": {
      "type": "object",
      "properties": {
        "authRequired": {
          "type": "boolean"
        },
        "authTimeout": {
          "type": "integer"
        },
        "cluster": {
          "type": "object",
          "properties": {
            "addr": {
              "type": "string"
            },
            "authTimeout": {
              "type": "integer"
            },
            "clusterPort": {
              "type": "integer"
            },
            "urls": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "configLoadTime": {
          "$ref": "#/definitions/v1Time"
        },
        "connectUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "connections": {
          "type": "integer"
        },
        "cores": {
          "type": "integer"
        },
        "cpu": {
          "type": "number"
        },
        "gitCommit": {
          "type": "string"
        },
        "go": {
          "type": "string"
        },
        "gomaxprocs": {
          "type": "integer"
        },
        "host": {
          "type": "string"
        },
        "httpHost": {
          "type": "string"
        },
        "httpPort": {
          "type": "integer"
        },
        "inBytes": {
          "type": "integer"
        },
        "inMsgs": {
          "type": "integer"
        },
        "leafNodes": {
          "type": "integer"
        },
        "maxConnections": {
          "type": "integer"
        },
        "maxControlLine": {
          "type": "integer"
        },
        "maxPayload": {
          "type": "integer"
        },
        "maxPending": {
          "type": "integer"
        },
        "mem": {
          "type": "integer"
        },
        "now": {
          "$ref": "#/definitions/v1Time"
        },
        "outBytes": {
          "type": "integer"
        },
        "outMsgs": {
          "type": "integer"
        },
        "pingInterval": {
          "type": "integer"
        },
        "pingMax": {
          "type": "integer"
        },
        "port": {
          "type": "integer"
        },
        "proto": {
          "type": "integer"
        },
        "remotes": {
          "type": "integer"
        },
        "routes": {
          "type": "integer"
        },
        "serverId": {
          "type": "string"
        },
        "serverName": {
          "type": "string"
        },
        "slowConsumers": {
          "type": "integer"
        },
        "start": {
          "$ref": "#/definitions/v1Time"
        },
        "subscriptions": {
          "type": "integer"
        },
        "tlsRequired": {
          "type": "boolean"
        },
        "tlsTimeout": {
          "type": "integer"
        },
        "totalConnections": {
          "type": "integer"
        },
        "uptime": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "writeDeadline": {
          "type": "integer"
        }
      }
    },
    "v1MsgSubscriber": {
      "description": "Message subscriber request",
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1Nameserver": {
      "description": "Nameserver define search domains and nameserver addresses",
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "search": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1NatsConfiguration": {
      "description": "Nats Configuration",
      "type": "object",
      "properties": {
        "connectionString": {
          "type": "string"
        },
        "enableTls": {
          "type": "boolean"
        },
        "insecureTls": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        },
        "scheme": {
          "type": "string"
        },
        "tlsCertificate": {
          "type": "string"
        },
        "tlsKey": {
          "type": "string"
        },
        "urls": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "v1NatsCredentialRequest": {
      "description": "Array of permissions",
      "type": "object",
      "properties": {
        "clusterUid": {
          "description": "Deprecated field please use resourceUid",
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "resourceUid": {
          "type": "string"
        },
        "serviceName": {
          "type": "string",
          "enum": [
            "ally",
            "jet"
          ]
        },
        "tenantUid": {
          "type": "string"
        }
      }
    },
    "v1NatsCredentials": {
      "description": "Array of permissions",
      "type": "object",
      "properties": {
        "allowedPublisher": {
          "type": "string"
        },
        "allowedSubcriber": {
          "type": "string"
        },
        "jwt": {
          "type": "string"
        },
        "seed": {
          "type": "string"
        }
      }
    },
    "v1NatsRoute": {
      "type": "object",
      "properties": {
        "didSolicit": {
          "type": "boolean"
        },
        "inBytes": {
          "type": "integer"
        },
        "inMsgs": {
          "type": "integer"
        },
        "isConfigured": {
          "type": "boolean"
        },
        "outBytes": {
          "type": "integer"
        },
        "outMsgs": {
          "type": "integer"
        },
        "pendingSize": {
          "type": "integer"
        },
        "port": {
          "type": "integer"
        },
        "remoteId": {
          "type": "string"
        },
        "rid": {
          "type": "integer"
        },
        "rtt": {
          "type": "string"
        },
        "subscriptions": {
          "type": "integer"
        }
      }
    },
    "v1Nic": {
      "type": "object",
      "properties": {
        "dns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gateway": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "macAddr": {
          "type": "string"
        },
        "subnet": {
          "type": "string"
        }
      }
    },
    "v1Notification": {
      "description": "Event notification and action definition",
      "type": "object",
      "properties": {
        "action": {
          "type": "object",
          "$ref": "#/definitions/v1NotificationAction"
        },
        "metadata": {
          "type": "object",
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "relatedObject": {
          "type": "object",
          "$ref": "#/definitions/v1RelatedObject"
        },
        "source": {
          "type": "object",
          "$ref": "#/definitions/v1NotificationSource"
        },
        "type": {
          "type": "string",
          "enum": [
            "NotificationPackUpdate",
            "NotificationPackRegistryUpdate",
            "NotificationNone"
          ]
        }
      }
    },
    "v1NotificationAction": {
      "description": "Notification action definition",
      "type": "object",
      "properties": {
        "ack": {
          "description": "Is the notification read by the consumer",
          "type": "boolean",
          "x-omitempty": false
        },
        "actionMessage": {
          "type": "string"
        },
        "actionType": {
          "type": "string",
          "enum": [
            "NotifyActionPacksUpdate",
            "NotifyActionClusterProfileUpdate",
            "NotifyActionPackRegistryUpdate",
            "NotifyActionClusterUpdate",
            "NotifyActionNone"
          ]
        },
        "events": {
          "description": "Event messages with meta digest as the key",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "isDone": {
          "description": "Is the notification action completed",
          "type": "boolean",
          "x-omitempty": false
        },
        "isInfo": {
          "description": "Is info notification",
          "type": "boolean",
          "x-omitempty": false
        },
        "link": {
          "type": "string"
        }
      }
    },
    "v1NotificationEvent": {
      "description": "Notification event",
      "type": "object",
      "properties": {
        "component": {
          "type": "string"
        },
        "digest": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "meta": {
          "description": "Event messages with meta digest as the key",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "NotificationPackSync",
            "NotificationClusterProfileSync"
          ]
        }
      }
    },
    "v1NotificationSource": {
      "description": "Notification source info",
      "type": "object",
      "properties": {
        "component": {
          "type": "string"
        }
      }
    },
    "v1Notifications": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Notification"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1OS": {
      "type": "object",
      "properties": {
        "family": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ObjectEntity": {
      "description": "Object identity meta",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/v1Time"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/v1Time"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "lastModifiedTimestamp": {
          "description": "LastModifiedTimestamp is a timestamp representing the server time when this object was last modified. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1ObjectMetaInputEntity": {
      "description": "ObjectMeta input entity for object creation",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "v1ObjectMetaInputEntitySchema": {
      "description": "Resource metadata",
      "type": "object",
      "required": [
        "metadata"
      ],
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1ObjectMetaUpdateEntity": {
      "description": "ObjectMeta update entity with uid as input",
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      }
    },
    "v1OciRegistries": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OciRegistry"
          }
        }
      }
    },
    "v1OciRegistry": {
      "description": "Oci registry information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1OciRegistrySpec"
        }
      }
    },
    "v1OciRegistryAuth": {
      "description": "Auth credentials of the oci registry",
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "format": "password"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1OciRegistryEntity": {
      "description": "Oci registry credentials",
      "type": "object",
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "defaultRegion": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1OciRegistrySpec": {
      "description": "Image registry spec",
      "type": "object",
      "properties": {
        "defaultRegion": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "registryType": {
          "type": "string"
        }
      }
    },
    "v1OpenStackAccount": {
      "description": "OpenStack account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1OpenStackCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1OpenStackAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1OpenStackAz": {
      "description": "OpenStack az",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1OpenStackAzs": {
      "description": "Array of openstack azs",
      "type": "object",
      "required": [
        "azs"
      ],
      "properties": {
        "azs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackAz"
          }
        }
      }
    },
    "v1OpenStackCloudAccount": {
      "description": "auth-url,project,username,password,domain,cacert etc",
      "type": "object",
      "required": [
        "identityEndpoint",
        "username",
        "password"
      ],
      "properties": {
        "caCert": {
          "type": "string"
        },
        "defaultDomain": {
          "description": "Default Domain name",
          "type": "string"
        },
        "defaultProject": {
          "description": "Default Project name",
          "type": "string"
        },
        "identityEndpoint": {
          "type": "string"
        },
        "insecure": {
          "description": "for self signed certs in IdentityEndpoint",
          "type": "boolean"
        },
        "parentRegion": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1OpenStackCloudClusterConfigEntity": {
      "description": "Openstack cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1OpenStackClusterConfig"
        }
      }
    },
    "v1OpenStackCloudConfig": {
      "description": "OpenStackCloudConfig is the Schema for the OpenStackcloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1OpenStackCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1OpenStackCloudConfigStatus"
        }
      }
    },
    "v1OpenStackCloudConfigSpec": {
      "description": "OpenStackCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains OpenStackCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1OpenStackClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OpenStackMachinePoolConfig"
          }
        }
      }
    },
    "v1OpenStackCloudConfigStatus": {
      "description": "OpenStackCloudConfigStatus defines the observed state of OpenStackCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "nodeImage": {
          "type": "string"
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "type": "boolean"
        }
      }
    },
    "v1OpenStackClusterConfig": {
      "description": "cluster level configuration for OpenStack cloud, same for all machinepools",
      "type": "object",
      "properties": {
        "bastionDisabled": {
          "description": "Create bastion node option we have earlier supported creation of bastion by default",
          "type": "boolean"
        },
        "dnsNameservers": {
          "description": "DNSNameservers is the list of nameservers for OpenStack Subnet being created. Set this value when you need create a new network/subnet while the access through DNS is required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "domain": {
          "$ref": "#/definitions/v1OpenStackResource"
        },
        "network": {
          "description": "For static placement",
          "$ref": "#/definitions/v1OpenStackResource"
        },
        "nodeCidr": {
          "description": "For dynamic provision NodeCIDR is the OpenStack Subnet to be created. Cluster actuator will create a network, a subnet with NodeCIDR, and a router connected to this subnet. If you leave this empty, no network will be created.",
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/v1OpenStackResource"
        },
        "region": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "subnet": {
          "$ref": "#/definitions/v1OpenStackResource"
        }
      }
    },
    "v1OpenStackDomain": {
      "description": "OpenStack domain",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1OpenStackFlavor": {
      "description": "OpenStack flavor",
      "type": "object",
      "properties": {
        "disk": {
          "type": "integer"
        },
        "ephemeral": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "memory": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "vcpus": {
          "type": "integer"
        }
      }
    },
    "v1OpenStackFlavors": {
      "description": "Array of openstack flavours",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackFlavor"
          }
        }
      }
    },
    "v1OpenStackKeypair": {
      "description": "OpenStack keypair",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        }
      }
    },
    "v1OpenStackKeypairs": {
      "description": "Array of openstack keypairs",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackKeypair"
          }
        }
      }
    },
    "v1OpenStackMachine": {
      "description": "OpenStack cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1OpenStackMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1OpenStackMachineConfigEntity": {
      "type": "object",
      "required": [
        "flavorConfig"
      ],
      "properties": {
        "azs": {
          "description": "for master pool, this will be the failure domains for kcp",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "flavorConfig": {
          "$ref": "#/definitions/v1OpenstackFlavorConfig"
        }
      }
    },
    "v1OpenStackMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "flavorConfig"
      ],
      "properties": {
        "azs": {
          "description": "for master pool, this will be the failure domains for kcp",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "diskGiB": {
          "description": "Root disk size",
          "type": "integer",
          "format": "int32"
        },
        "flavorConfig": {
          "$ref": "#/definitions/v1OpenstackFlavorConfig"
        },
        "subnet": {
          "$ref": "#/definitions/v1OpenStackResource"
        }
      }
    },
    "v1OpenStackMachinePoolConfig": {
      "type": "object",
      "required": [
        "flavorConfig"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "azs": {
          "description": "for master pool, this will be the failure domains for kcp",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "diskGiB": {
          "description": "DiskGiB is used to configure rootVolume, the volume metadata to boot from",
          "type": "integer",
          "format": "int32"
        },
        "flavor": {
          "description": "Openstack flavor name, only return argument",
          "type": "string"
        },
        "flavorConfig": {
          "description": "Openstack flavor configuration, input argument",
          "$ref": "#/definitions/v1OpenstackFlavorConfig"
        },
        "image": {
          "type": "string"
        },
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "subnet": {
          "$ref": "#/definitions/v1OpenStackResource"
        },
        "taints": {
          "description": "master or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean"
        }
      }
    },
    "v1OpenStackMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1OpenStackMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1OpenStackMachineSpec": {
      "description": "OpenStack cloud VM definition spec",
      "type": "object",
      "required": [
        "instanceType",
        "nics"
      ],
      "properties": {
        "az": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "instanceType": {
          "description": "Instance flavor of the machine with cpu and memory info",
          "$ref": "#/definitions/v1GenericInstanceType"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OpenStackNic"
          }
        },
        "projectId": {
          "type": "string"
        },
        "securityGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sshKeyName": {
          "type": "string"
        }
      }
    },
    "v1OpenStackMachines": {
      "description": "OpenStack machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackMachine"
          }
        }
      }
    },
    "v1OpenStackNetwork": {
      "description": "OpenStack network",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subnets": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackSubnet"
          }
        }
      }
    },
    "v1OpenStackNetworks": {
      "description": "Array of openstack networks",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackNetwork"
          }
        }
      }
    },
    "v1OpenStackNic": {
      "description": "OpenStack network interface",
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1OpenStackProject": {
      "description": "OpenStack project",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "domainId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parentProjectId": {
          "type": "string"
        }
      }
    },
    "v1OpenStackProjects": {
      "description": "Array of openstack projects",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackProject"
          }
        }
      }
    },
    "v1OpenStackRegion": {
      "description": "OpenStack region",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "parentRegionId": {
          "type": "string"
        }
      }
    },
    "v1OpenStackRegions": {
      "description": "Array of openstack regions and domains",
      "type": "object",
      "required": [
        "regions",
        "domains"
      ],
      "properties": {
        "domains": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackDomain"
          }
        },
        "regions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1OpenStackRegion"
          }
        }
      }
    },
    "v1OpenStackResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1OpenStackSubnet": {
      "description": "OpenStack subnet",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1OpenstackFlavorConfig": {
      "required": [
        "name"
      ],
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a virtual machine's disk, in GiB.",
          "type": "integer",
          "format": "int32"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB.",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "Openstack flavor name",
          "type": "string"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of virtual processors in a virtual machine.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1OrgState": {
      "description": "Org state",
      "type": "object",
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "v1OsPatchConfig": {
      "type": "object",
      "properties": {
        "onDemandPatchAfter": {
          "description": "OnDemandPatchAfter is the desired time for one time on-demand patch",
          "$ref": "#/definitions/v1Time"
        },
        "patchOnBoot": {
          "description": "PatchOnBoot indicates need to do patch when node first boot up, only once",
          "type": "boolean",
          "x-omitempty": false
        },
        "schedule": {
          "description": "The schedule at which security patches will be applied to OS. Schedule should be in Cron format, see https://en.wikipedia.org/wiki/Cron for more help.",
          "type": "string"
        }
      }
    },
    "v1OsPatchEntity": {
      "type": "object",
      "properties": {
        "osPatchConfig": {
          "$ref": "#/definitions/v1OsPatchConfig"
        }
      }
    },
    "v1OverloadSpec": {
      "description": "Overload spec",
      "type": "object",
      "properties": {
        "cloudAccountUid": {
          "type": "string",
          "x-omitempty": false
        },
        "ipAddress": {
          "type": "string"
        },
        "ipPools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1IpPoolEntity"
          }
        },
        "isSystem": {
          "type": "boolean"
        },
        "registryUid": {
          "type": "string",
          "x-omitempty": false
        },
        "spectroClusterUid": {
          "type": "string",
          "x-omitempty": false
        },
        "tenantUid": {
          "type": "string"
        }
      }
    },
    "v1OverloadStatus": {
      "description": "Overload status",
      "type": "object",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1SpectroClusterHealthStatus"
        },
        "isActive": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isReady": {
          "type": "boolean",
          "x-omitempty": false
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1OverloadVsphereOva": {
      "description": "Overload ova details",
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1Overlord": {
      "description": "Overlord defintiion",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1OverloadSpec"
        },
        "status": {
          "$ref": "#/definitions/v1OverloadStatus"
        }
      }
    },
    "v1OverlordMaasAccountCreate": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1MaasCloudAccount"
        },
        "name": {
          "description": "Name for the private gateway \u0026 cloud account",
          "type": "string"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordMaasAccountEntity": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1MaasCloudAccount"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordMaasCloudConfig": {
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1MaasClusterConfig"
        },
        "clusterSettings": {
          "description": "clusterSettings is the generic configuration related to a cluster like OS patch, Rbac, Namespace allocation",
          "$ref": "#/definitions/v1ClusterConfigEntity"
        },
        "machineConfig": {
          "$ref": "#/definitions/v1MaasMachineConfigEntity"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1OverlordManifest": {
      "description": "overlord manifest",
      "type": "object",
      "properties": {
        "manifest": {
          "type": "string"
        }
      }
    },
    "v1OverlordOpenStackAccountCreate": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1OpenStackCloudAccount"
        },
        "name": {
          "description": "Name for the private gateway \u0026 cloud account",
          "type": "string"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordOpenStackAccountEntity": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1OpenStackCloudAccount"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordOpenStackCloudConfig": {
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1OpenStackClusterConfig"
        },
        "clusterSettings": {
          "description": "clusterSettings is the generic configuration related to a cluster like OS patch, Rbac, Namespace allocation",
          "$ref": "#/definitions/v1ClusterConfigEntity"
        },
        "machineConfig": {
          "$ref": "#/definitions/v1OpenStackMachineConfigEntity"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1OverlordVsphereAccountCreate": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1VsphereCloudAccount"
        },
        "name": {
          "description": "Name for the private gateway \u0026 cloud account",
          "type": "string"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordVsphereAccountEntity": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1VsphereCloudAccount"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordVsphereCloudConfig": {
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1VsphereOverlordClusterConfigEntity"
        },
        "clusterSettings": {
          "description": "clusterSettings is the generic configuration related to a cluster like OS patch, Rbac, Namespace allocation",
          "$ref": "#/definitions/v1ClusterConfigEntity"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1Overlords": {
      "description": "Array of Overlords",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Overlord"
          }
        }
      }
    },
    "v1PackConfig": {
      "description": "Pack configuration",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1PackConfigSpec"
        }
      }
    },
    "v1PackConfigSpec": {
      "type": "object",
      "properties": {
        "associatedObject": {
          "type": "string"
        },
        "isValuesOverridden": {
          "type": "boolean",
          "x-omitempty": false
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackManifestRef"
          }
        },
        "name": {
          "type": "string"
        },
        "packUid": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "values": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1PackEntity": {
      "description": "Pack entity with values to overwrite",
      "type": "object",
      "required": [
        "uid",
        "name"
      ],
      "properties": {
        "layer": {
          "description": "Pack layer",
          "type": "string"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "tag": {
          "description": "Pack tag",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "uid": {
          "description": "Pack uid",
          "type": "string"
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        }
      }
    },
    "v1PackFilterSpec": {
      "description": "pack filter spec",
      "properties": {
        "addOnType": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "displayName": {
          "$ref": "#/definitions/v1FilterString"
        },
        "environment": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudType"
          }
        },
        "layer": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackLayer"
          }
        },
        "name": {
          "$ref": "#/definitions/v1FilterString"
        },
        "registryUid": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackType"
          }
        }
      }
    },
    "v1PackInputEntity": {
      "description": "Pack input entity with values to overwrite and manifests for the intial creation",
      "properties": {
        "pack": {
          "$ref": "#/definitions/v1PackManifestEntity"
        }
      }
    },
    "v1PackLayer": {
      "type": "string",
      "enum": [
        "kernel",
        "os",
        "k8s",
        "cni",
        "csi",
        "addon"
      ]
    },
    "v1PackManifest": {
      "description": "Pack manifest data",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ManifestPublishedSpec"
        }
      }
    },
    "v1PackManifestEntity": {
      "description": "Pack input entity with values to overwrite and manifests for the intial creation",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "layer": {
          "description": "Pack layer",
          "type": "string"
        },
        "manifests": {
          "description": "additional manifests content to the pack as part of the profile",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ManifestInputEntity"
          }
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "registryUid": {
          "description": "registry uid",
          "type": "string"
        },
        "tag": {
          "description": "Pack tag",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "uid": {
          "description": "Pack uid",
          "type": "string"
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        }
      }
    },
    "v1PackManifestRef": {
      "type": "object",
      "properties": {
        "digest": {
          "type": "string"
        },
        "isOverridden": {
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        },
        "parentUid": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1PackManifestUpdateEntity": {
      "description": "Pack input entity with values to overwrite and manifests for the intial creation",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "layer": {
          "description": "Pack layer",
          "type": "string"
        },
        "manifests": {
          "description": "additional manifests content to the pack as part of the profile",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ManifestRefUpdateEntity"
          }
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "registryUid": {
          "description": "Regsitry uid",
          "type": "string"
        },
        "tag": {
          "description": "Pack tag",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "uid": {
          "description": "Pack uid",
          "type": "string"
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        }
      }
    },
    "v1PackManifests": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackManifest"
          }
        }
      }
    },
    "v1PackManifestsSpec": {
      "description": "Specs of a pack manifests",
      "type": "object",
      "properties": {
        "addonType": {
          "description": "If Layer is Addon, then can specify additional addonType=logging/monitoring/security etc",
          "type": "string"
        },
        "annotations": {
          "description": "Annotations is used to allow pack to add more arbitrary configurations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "cloudTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CloudType"
          }
        },
        "digest": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "eol": {
          "description": "end of life for this pack, date format: yyyy-MM-dd",
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1PackLayer"
        },
        "logoUrl": {
          "type": "string"
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ManifestSummary"
          }
        },
        "name": {
          "type": "string"
        },
        "presets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackPreset"
          }
        },
        "registryUid": {
          "type": "string"
        },
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackSchema"
          }
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "values": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1PackMetadata": {
      "description": "Pack metadata of a pack",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackMetadataSpec"
        }
      }
    },
    "v1PackMetadataList": {
      "description": "List of pack meta data list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackMetadata"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1PackMetadataSpec": {
      "description": "Specs of a pack metadata",
      "type": "object",
      "properties": {
        "addonType": {
          "description": "If Layer is Addon, then can specify additional addonType=logging/monitoring/security etc",
          "type": "string"
        },
        "cloudTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CloudType"
          }
        },
        "displayName": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1PackLayer"
        },
        "name": {
          "type": "string"
        },
        "registries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1RegistryPackMetadata"
          }
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        }
      }
    },
    "v1PackParamsEntity": {
      "description": "Pack input params",
      "properties": {
        "references": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1PackPreset": {
      "description": "PackPreset defines the preset pack values",
      "type": "object",
      "properties": {
        "add": {
          "type": "string",
          "x-omitempty": false
        },
        "displayName": {
          "type": "string",
          "x-omitempty": false
        },
        "group": {
          "type": "string",
          "x-omitempty": false
        },
        "name": {
          "type": "string",
          "x-omitempty": false
        },
        "remove": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        }
      }
    },
    "v1PackRef": {
      "description": "PackRef server/name:tag to point to a pack PackRef is used when construct a ClusterProfile PackSpec is used for UI to render the parameters form ClusterProfile will not know inner details of a pack ClusterProfile only contain pack name:tag, and the param values user entered for it",
      "type": "object",
      "required": [
        "layer",
        "name"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations is used to allow packref to add more arbitrary information one example is to add git reference for values.yaml",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "digest": {
          "description": "digest is used to specify the version should be installed by palette when pack upgrade available, change this digest to trigger upgrade",
          "type": "string"
        },
        "inValidReason": {
          "type": "string"
        },
        "isInvalid": {
          "description": "pack is invalid when the associated tag is deleted from the registry",
          "type": "boolean"
        },
        "layer": {
          "type": "string",
          "enum": [
            "kernel",
            "os",
            "k8s",
            "cni",
            "csi",
            "addon"
          ]
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        },
        "name": {
          "description": "pack name",
          "type": "string"
        },
        "packUid": {
          "description": "PackUID is Hubble packUID, not palette Pack.UID It is used by Hubble only.",
          "type": "string"
        },
        "params": {
          "description": "params passed as env variables to be consumed at installation time",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "presets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackPreset"
          }
        },
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackSchema"
          }
        },
        "server": {
          "description": "pack registry server or helm repo",
          "type": "string"
        },
        "tag": {
          "description": "pack tag",
          "type": "string"
        },
        "type": {
          "description": "type of the pack",
          "type": "string",
          "enum": [
            "spectro",
            "helm",
            "manifest"
          ]
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        },
        "version": {
          "description": "pack version",
          "type": "string"
        }
      }
    },
    "v1PackRefSummary": {
      "description": "Pack ref summary",
      "properties": {
        "addonType": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1PackLayer"
        },
        "name": {
          "type": "string"
        },
        "packUid": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1PackRegistries": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackRegistry"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1PackRegistriesSummary": {
      "description": "Pack Registries Summary",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackRegistrySummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1PackRegistry": {
      "description": "Pack registry information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackRegistrySpec"
        },
        "status": {
          "$ref": "#/definitions/v1PackRegistryStatus"
        }
      }
    },
    "v1PackRegistrySpec": {
      "description": "Pack registry credentials spec",
      "type": "object",
      "required": [
        "endpoint",
        "auth"
      ],
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "private": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1PackRegistrySpecSummary": {
      "description": "Pack Registry spec summary",
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "private": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1PackRegistryStatus": {
      "description": "Status of the pack registry",
      "type": "object",
      "properties": {
        "packSyncStatus": {
          "$ref": "#/definitions/v1RegistrySyncStatus"
        }
      }
    },
    "v1PackRegistryStatusSummary": {
      "description": "Pack registry status summary",
      "type": "object",
      "properties": {
        "sync": {
          "$ref": "#/definitions/v1RegistrySyncStatus"
        }
      }
    },
    "v1PackRegistrySummary": {
      "description": "Pack Registry summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackRegistrySpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1PackRegistryStatusSummary"
        }
      }
    },
    "v1PackResolvedValues": {
      "description": "Resolved packs values",
      "properties": {
        "resolved": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1PackSchema": {
      "description": "PackSchema defines the schema definition, hints for the pack values",
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "x-omitempty": false
        },
        "hints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "listOptions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "name": {
          "type": "string",
          "x-omitempty": false
        },
        "readonly": {
          "type": "boolean",
          "x-omitempty": false
        },
        "regex": {
          "type": "string",
          "x-omitempty": false
        },
        "required": {
          "type": "boolean",
          "x-omitempty": false
        },
        "type": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1PackSortFields": {
      "type": "string",
      "enum": [
        "name",
        "type",
        "layer",
        "addOnType",
        "displayName"
      ],
      "x-nullable": true
    },
    "v1PackSortSpec": {
      "description": "pack sort spec",
      "properties": {
        "field": {
          "$ref": "#/definitions/v1PackSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1PackSummaries": {
      "description": "List of pack summary information",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1PackSummary": {
      "description": "Pack summary of a pack",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackSummarySpec"
        },
        "status": {
          "$ref": "#/definitions/v1PackSummaryStatus"
        }
      }
    },
    "v1PackSummarySpec": {
      "description": "Specs of a pack summary",
      "type": "object",
      "properties": {
        "addonType": {
          "description": "If Layer is Addon, then can specify additional addonType=logging/monitoring/security etc",
          "type": "string"
        },
        "annotations": {
          "description": "Annotations is used to allow pack to add more arbitrary configurations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "cloudTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CloudType"
          }
        },
        "digest": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "eol": {
          "description": "end of life for this pack, date format: yyyy-MM-dd",
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1PackLayer"
        },
        "logoUrl": {
          "type": "string"
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        },
        "name": {
          "type": "string"
        },
        "presets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackPreset"
          }
        },
        "registryUid": {
          "type": "string"
        },
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackSchema"
          }
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "values": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1PackSummaryStatus": {
      "description": "Pack summary status",
      "type": "object"
    },
    "v1PackTagEntity": {
      "description": "Pack information organized by tags",
      "type": "object",
      "properties": {
        "addonType": {
          "description": "If Layer is Addon, then can specify additional addonType=logging/monitoring/security etc",
          "type": "string"
        },
        "cloudTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CloudType"
          }
        },
        "displayName": {
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1PackLayer"
        },
        "logoUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "packValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackUidValues"
          }
        },
        "registryUid": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackTags"
          }
        }
      }
    },
    "v1PackTags": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "packUid": {
          "type": "string"
        },
        "parentTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tag": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1PackType": {
      "type": "string",
      "default": "spectro",
      "enum": [
        "spectro",
        "helm",
        "manifest",
        "oci"
      ]
    },
    "v1PackUidValues": {
      "type": "object",
      "properties": {
        "packUid": {
          "type": "string"
        },
        "presets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackPreset"
          }
        },
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PackSchema"
          }
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters",
          "type": "string"
        }
      }
    },
    "v1PackUpdateEntity": {
      "description": "Pack input entity with values to overwrite and manifests for the intial creation",
      "properties": {
        "pack": {
          "$ref": "#/definitions/v1PackEntity"
        }
      }
    },
    "v1PackValuesEntity": {
      "description": "Pack values entity to refer the existing pack for the values overrride",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "manifests": {
          "description": "manifests content which can overriden at the cluster level",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ManifestRefUpdateEntity"
          }
        },
        "name": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "values": {
          "type": "string"
        }
      }
    },
    "v1PacksFilterSpec": {
      "description": "Pack filter spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1PackFilterSpec"
        },
        "sort": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackSortSpec"
          }
        }
      }
    },
    "v1PairingCode": {
      "description": "Pairing code response",
      "type": "object",
      "properties": {
        "pairingCode": {
          "type": "string"
        }
      }
    },
    "v1Partition": {
      "type": "object",
      "properties": {
        "fileSystemType": {
          "type": "string"
        },
        "freeSpace": {
          "type": "integer",
          "format": "int32"
        },
        "mountPoint": {
          "type": "string"
        },
        "totalSpace": {
          "type": "integer",
          "format": "int32"
        },
        "usedSpace": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1PaymentIntent": {
      "description": "Payment Setup",
      "properties": {
        "clientSecret": {
          "type": "string"
        },
        "paymentIntentId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1PaymentMethod": {
      "description": "Payment Method",
      "properties": {
        "card": {
          "$ref": "#/definitions/v1Card"
        },
        "customerId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "paymentMethodId": {
          "type": "string"
        }
      }
    },
    "v1PaymentMethods": {
      "description": "Payment Method list",
      "properties": {
        "defaultPaymentMethod": {
          "type": "string"
        },
        "paymentMethods": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PaymentMethod"
          }
        }
      }
    },
    "v1PaymentPlan": {
      "description": "Stripe price detail",
      "properties": {
        "billingScheme": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "unitAmount": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "v1PaymentPlans": {
      "description": "Array of Stripe plan details",
      "type": "object",
      "required": [
        "stripePlanDetails"
      ],
      "properties": {
        "stripePlanDetails": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PaymentPlan"
          }
        }
      }
    },
    "v1PaymentSecrets": {
      "description": "payment secrets",
      "properties": {
        "publishableKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "v1PaymentSubscription": {
      "description": "Subscription",
      "properties": {
        "customerId": {
          "type": "string"
        },
        "paymentIntent": {
          "$ref": "#/definitions/v1PaymentIntent"
        },
        "paymentMethodIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "planType": {
          "type": "string"
        },
        "priceId": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "subscriptionState": {
          "type": "string"
        }
      }
    },
    "v1Permission": {
      "description": "Permission information",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "$ref": "#/definitions/v1Scope"
        }
      }
    },
    "v1Permissions": {
      "description": "Array of permissions",
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1Permission"
      }
    },
    "v1Plan": {
      "description": "Plan",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PlanSpec"
        },
        "status": {
          "$ref": "#/definitions/v1PlanStatus"
        }
      }
    },
    "v1PlanAddFreeCreditUpdate": {
      "description": "Plan add free credit update entity",
      "properties": {
        "credit": {
          "$ref": "#/definitions/v1PlanCreditEntity"
        }
      }
    },
    "v1PlanAddSlaCreditUpdate": {
      "description": "Plan add sla credit update entity",
      "properties": {
        "credit": {
          "$ref": "#/definitions/v1PlanCreditEntity"
        }
      }
    },
    "v1PlanChangeUpdate": {
      "description": "Plan change update entity",
      "required": [
        "type",
        "start",
        "expiry"
      ],
      "properties": {
        "expiry": {
          "description": "plan expiry time",
          "$ref": "#/definitions/v1Time"
        },
        "isPaymentGateway": {
          "type": "boolean"
        },
        "planLimit": {
          "$ref": "#/definitions/v1PlanLimit"
        },
        "start": {
          "description": "plan start time",
          "$ref": "#/definitions/v1Time"
        },
        "tierPrice": {
          "$ref": "#/definitions/v1TierPrice"
        },
        "type": {
          "type": "string",
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ]
        }
      }
    },
    "v1PlanCost": {
      "description": "Plan Cost",
      "properties": {
        "discount": {
          "type": "number",
          "format": "float",
          "x-omitempty": false
        },
        "price": {
          "type": "number",
          "format": "float",
          "x-omitempty": false
        }
      }
    },
    "v1PlanCpuCoreHoursUsages": {
      "type": "object",
      "properties": {
        "hourlyUsages": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ResourceUsage"
          }
        }
      }
    },
    "v1PlanCredit": {
      "description": "Plan Credit",
      "required": [
        "type"
      ],
      "properties": {
        "cpuCoreHours": {
          "type": "number",
          "format": "int64",
          "x-omitempty": false
        },
        "creditUid": {
          "type": "string"
        },
        "expiry": {
          "description": "credit expiry time",
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "type": "string"
        },
        "start": {
          "description": "credit start time",
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string",
          "enum": [
            "Pure",
            "Alloy"
          ]
        }
      }
    },
    "v1PlanCreditEntity": {
      "description": "Plan Credit entity for create/update request",
      "required": [
        "type"
      ],
      "properties": {
        "cpuCoreHours": {
          "type": "number",
          "format": "int64",
          "x-omitempty": false
        },
        "expiry": {
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "type": "string"
        },
        "start": {
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string",
          "enum": [
            "Pure",
            "Alloy"
          ]
        }
      }
    },
    "v1PlanCreditUpdate": {
      "description": "Plan credit update entity",
      "properties": {
        "credit": {
          "$ref": "#/definitions/v1PlanCreditEntity"
        }
      }
    },
    "v1PlanExpiry": {
      "description": "Plan expiry",
      "required": [
        "expiry"
      ],
      "properties": {
        "expiry": {
          "description": "plan expiry time",
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1PlanLimit": {
      "description": "Monthly Plan Limit",
      "properties": {
        "alloy": {
          "$ref": "#/definitions/v1PlanLimitSpec"
        },
        "isOnDemand": {
          "description": "is onDemand plan and has no limit",
          "type": "boolean",
          "x-omitempty": false
        },
        "isUnlimited": {
          "description": "is unlimited cpu core hours",
          "type": "boolean",
          "x-omitempty": false
        },
        "pure": {
          "$ref": "#/definitions/v1PlanLimitSpec"
        }
      }
    },
    "v1PlanLimitSpec": {
      "description": "Monthly Plan Limit spec",
      "properties": {
        "cpuCoreHours": {
          "description": "cpu cores hours",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "overageLimitPercentage": {
          "description": "overage limit in percentage",
          "type": "integer",
          "format": "int8",
          "default": 25,
          "x-omitempty": false
        },
        "warnLimitPercentage": {
          "description": "warning limit in percentage",
          "type": "integer",
          "format": "int8",
          "default": 90,
          "x-omitempty": false
        }
      }
    },
    "v1PlanLimitUpdate": {
      "description": "Plan limit change update entity",
      "required": [
        "planLimit"
      ],
      "properties": {
        "planLimit": {
          "$ref": "#/definitions/v1PlanLimit"
        }
      }
    },
    "v1PlanMonthlyUsage": {
      "description": "Plan monthly usage entity",
      "properties": {
        "dailyUsages": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ResourceUsage"
          }
        },
        "month": {
          "description": "usage month",
          "$ref": "#/definitions/v1Time"
        },
        "planLimit": {
          "$ref": "#/definitions/v1PlanLimit"
        },
        "planType": {
          "type": "string",
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ]
        },
        "planUid": {
          "type": "string"
        },
        "totalMonthlyUsage": {
          "$ref": "#/definitions/v1TotalResourceUsage"
        }
      }
    },
    "v1PlanMonthlyUsages": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PlanMonthlyUsage"
          }
        }
      }
    },
    "v1PlanRenewal": {
      "description": "Plan Renewal",
      "required": [
        "type",
        "start",
        "expiry"
      ],
      "properties": {
        "expiry": {
          "description": "credit expiry time",
          "$ref": "#/definitions/v1Time"
        },
        "planLimit": {
          "$ref": "#/definitions/v1PlanLimit"
        },
        "start": {
          "description": "credit start time",
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string",
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ]
        }
      }
    },
    "v1PlanRenewalUpdate": {
      "description": "Plan add renawal update entity",
      "properties": {
        "renewal": {
          "$ref": "#/definitions/v1PlanRenewal"
        }
      }
    },
    "v1PlanSpec": {
      "description": "Plan specifications",
      "required": [
        "type",
        "start",
        "expiry"
      ],
      "properties": {
        "cost": {
          "$ref": "#/definitions/v1PlanCost"
        },
        "expiry": {
          "description": "plan expiry time",
          "$ref": "#/definitions/v1Time"
        },
        "freeCredits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PlanCredit"
          }
        },
        "planLimit": {
          "$ref": "#/definitions/v1PlanLimit"
        },
        "renewal": {
          "$ref": "#/definitions/v1PlanRenewal"
        },
        "slaCredits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PlanCredit"
          }
        },
        "start": {
          "description": "plan start time",
          "$ref": "#/definitions/v1Time"
        },
        "tierPricing": {
          "$ref": "#/definitions/v1TierPrice"
        },
        "type": {
          "type": "string",
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ]
        }
      }
    },
    "v1PlanStatus": {
      "type": "object",
      "properties": {
        "changeLogs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Plans": {
      "description": "Array of Plans",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Plan"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1PlansUsageComputeSpec": {
      "description": "Plans usage compute spec",
      "type": "object",
      "properties": {
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "tenantUids": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Pool": {
      "description": "Pool defines IP ranges or with CIDR for available IPs Gateway, Prefix and Nameserver if provided, will overwrite values in IPPool",
      "type": "object",
      "properties": {
        "end": {
          "description": "End is the last IP address that can be rendered. It is used as a validation that the rendered IP is in bound.",
          "type": "string"
        },
        "gateway": {
          "description": "Gateway is the gateway ip address",
          "type": "string"
        },
        "nameserver": {
          "description": "Nameserver provide information for dns resolvation",
          "$ref": "#/definitions/v1Nameserver"
        },
        "prefix": {
          "description": "Prefix is the mask of the network as integer (max 128)",
          "type": "integer",
          "format": "int32"
        },
        "start": {
          "description": "Start is the first ip address that can be rendered",
          "type": "string"
        },
        "subnet": {
          "description": "Subnet is used to validate that the rendered IP is in bounds. eg: 192.168.0.0/24 If Start value is not given, start value is derived from the subnet ip incremented by 1 (start value is `192.168.0.1` for subnet `192.168.0.0/24`)",
          "type": "string"
        }
      }
    },
    "v1PriceRange": {
      "description": "tier price range",
      "properties": {
        "discount": {
          "type": "number",
          "format": "int64"
        },
        "startFrom": {
          "type": "number",
          "format": "float64"
        },
        "unitAmount": {
          "type": "number",
          "format": "float64"
        },
        "upTo": {
          "type": "number",
          "format": "float64"
        },
        "upToInfinity": {
          "type": "boolean"
        }
      }
    },
    "v1PrivateCloudRateConfig": {
      "description": "Private cloud rate config",
      "properties": {
        "cpuUnitPricePerHour": {
          "type": "number",
          "format": "float64"
        },
        "gpuUnitPricePerHour": {
          "type": "number",
          "format": "float64"
        },
        "memoryUnitPriceGiBPerHour": {
          "type": "number",
          "format": "float64"
        },
        "storageUnitPriceGiBPerHour": {
          "type": "number",
          "format": "float64"
        }
      }
    },
    "v1ProductUsage": {
      "description": "Product usage",
      "properties": {
        "alloyUsage": {
          "$ref": "#/definitions/v1SystemProductUsage"
        },
        "pureUsage": {
          "$ref": "#/definitions/v1SystemProductUsage"
        }
      }
    },
    "v1ProfileResolvedValues": {
      "description": "Resolved profile pack values",
      "properties": {
        "resolved": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ProfileType": {
      "type": "string",
      "default": "cluster",
      "enum": [
        "cluster",
        "infra",
        "add-on",
        "system"
      ]
    },
    "v1Project": {
      "description": "Project information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ProjectSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ProjectStatus"
        }
      }
    },
    "v1ProjectAlertComponent": {
      "description": "Project alert component",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "supportedChannels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ProjectAlertComponents": {
      "description": "Supported project alerts component",
      "type": "object",
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ProjectAlertComponent"
          }
        }
      }
    },
    "v1ProjectEntity": {
      "description": "Project information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ProjectEntitySpec"
        }
      }
    },
    "v1ProjectEntitySpec": {
      "description": "Project specifications",
      "properties": {
        "logoUid": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TeamRoleMap"
          }
        },
        "users": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserRoleMap"
          }
        }
      }
    },
    "v1ProjectMeta": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ProjectPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1HttpPatch"
      }
    },
    "v1ProjectResourceUsage": {
      "description": "project resource usage",
      "properties": {
        "alloyCpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        },
        "project": {
          "$ref": "#/definitions/v1ProjectMeta"
        },
        "pureCpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1ProjectRolesEntity": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidRoleSummary"
          }
        }
      }
    },
    "v1ProjectRolesPatch": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "projectUid": {
                "type": "string"
              },
              "roles": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "v1ProjectSpec": {
      "description": "Project specifications",
      "properties": {
        "alerts": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Alert"
          }
        },
        "logoUrl": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TeamRoleMap"
          }
        },
        "users": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserRoleMap"
          }
        }
      }
    },
    "v1ProjectSpecSummary": {
      "type": "object",
      "properties": {
        "logoUrl": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        }
      }
    },
    "v1ProjectStatus": {
      "description": "Project status",
      "type": "object"
    },
    "v1ProjectStatusSummary": {
      "description": "Project status summary",
      "type": "object",
      "properties": {
        "clustersHealth": {
          "$ref": "#/definitions/v1SpectroClustersHealth"
        },
        "usage": {
          "$ref": "#/definitions/v1ProjectUsageSummary"
        }
      }
    },
    "v1ProjectSummary": {
      "description": "Project summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "specSummary": {
          "description": "Project spec summary",
          "$ref": "#/definitions/v1ProjectSpecSummary"
        },
        "status": {
          "description": "Spectro cluster status summary",
          "$ref": "#/definitions/v1ProjectStatusSummary"
        }
      }
    },
    "v1ProjectTeamsEntity": {
      "properties": {
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TeamRoleMap"
          }
        }
      }
    },
    "v1ProjectUsage": {
      "description": "Project level usage",
      "properties": {
        "alloy": {
          "$ref": "#/definitions/v1ProjectUsageData"
        },
        "pure": {
          "$ref": "#/definitions/v1ProjectUsageData"
        }
      }
    },
    "v1ProjectUsageData": {
      "description": "Project usage data",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float64"
        },
        "tierPrice": {
          "type": "number",
          "format": "float64"
        },
        "usedCredits": {
          "type": "number",
          "format": "float64"
        }
      }
    },
    "v1ProjectUsageSummary": {
      "description": "Project usage summary",
      "type": "object",
      "properties": {
        "alloyCpuCores": {
          "type": "number",
          "x-omitempty": false
        },
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterUsageSummary"
          }
        },
        "pureCpuCores": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1ProjectUsersEntity": {
      "properties": {
        "users": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserRoleMap"
          }
        }
      }
    },
    "v1Projects": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Project"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1ProjectsSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ProjectSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1ProjectsWorkspaces": {
      "description": "List projects and its workspaces",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "workspaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1WorkspacesRoles"
          }
        }
      }
    },
    "v1PublicCloudRateConfig": {
      "description": "Public cloud rate config",
      "properties": {
        "computeOptimized": {
          "$ref": "#/definitions/v1CloudInstanceRateConfig"
        },
        "memoryOptimized": {
          "$ref": "#/definitions/v1CloudInstanceRateConfig"
        }
      }
    },
    "v1RateConfig": {
      "description": "Rate config",
      "properties": {
        "aws": {
          "$ref": "#/definitions/v1PublicCloudRateConfig"
        },
        "azure": {
          "$ref": "#/definitions/v1PublicCloudRateConfig"
        },
        "edge": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "gcp": {
          "$ref": "#/definitions/v1PublicCloudRateConfig"
        },
        "generic": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "libvirt": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "maas": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "openstack": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "vsphere": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        }
      }
    },
    "v1RegistriesMetadata": {
      "description": "Pack Registries Metadata",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1RegistryMetadata"
          }
        }
      }
    },
    "v1RegistryAuth": {
      "description": "Auth credentials of the registry",
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "format": "password"
        },
        "token": {
          "type": "string",
          "format": "password"
        },
        "type": {
          "type": "string",
          "enum": [
            "noAuth",
            "basic",
            "token"
          ]
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1RegistryConf": {
      "description": "Registry configuration",
      "type": "object",
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "endpoint": {
          "type": "string"
        }
      }
    },
    "v1RegistryConfigEntity": {
      "description": "Registry configuration entity",
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1RegistryConfiguration"
        }
      }
    },
    "v1RegistryConfiguration": {
      "description": "Registry configuration",
      "type": "object",
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1RegistryMetadata": {
      "description": "Registry meta",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1RegistryPackMetadata": {
      "description": "Registry metadata information",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "logoUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1RegistrySyncStatus": {
      "description": "Status of the registry sync",
      "type": "object",
      "properties": {
        "lastRunTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastSyncedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1RelatedObject": {
      "description": "The object for which the event is related",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "spectrocluster",
            "machine",
            "cloudconfig",
            "clusterprofile",
            "pack"
          ]
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ReleaseDescription": {
      "description": "spectro application management release description",
      "properties": {
        "details": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ReleaseVersion": {
      "description": "spectro application management release version information",
      "properties": {
        "date": {
          "$ref": "#/definitions/v1Time"
        },
        "description": {
          "type": "string"
        },
        "releaseNotes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ReleaseDescription"
          }
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ResourceCloudCostSummary": {
      "description": "Resource cloud cost summary information",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudCostDataPoint"
          }
        },
        "entity": {
          "$ref": "#/definitions/v1ResourceReference"
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalCloudCost"
        }
      }
    },
    "v1ResourceConsumption": {
      "description": "Resource consumption information",
      "type": "object",
      "properties": {
        "associatedResources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        },
        "data": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ResourceConsumptionDataPoint"
          }
        },
        "entity": {
          "$ref": "#/definitions/v1ResourceReference"
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalConsumptionData"
        }
      }
    },
    "v1ResourceConsumptionData": {
      "description": "Resource cosumption data",
      "type": "object",
      "properties": {
        "cpu": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "memory": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1ResourceConsumptionDataPoint": {
      "description": "Resource cosumption data point",
      "type": "object",
      "properties": {
        "allotted": {
          "$ref": "#/definitions/v1ResourceConsumptionData"
        },
        "timestamp": {
          "type": "number",
          "format": "int64"
        },
        "usage": {
          "$ref": "#/definitions/v1ResourceConsumptionData"
        }
      }
    },
    "v1ResourceConsumptionFilter": {
      "description": "Resource consumption filter",
      "type": "object",
      "properties": {
        "clouds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "clusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "includeMasterMachines": {
          "type": "boolean"
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "workspaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ResourceConsumptionOptions": {
      "description": "Resource consumption options",
      "type": "object",
      "properties": {
        "enableSummaryView": {
          "type": "boolean"
        },
        "groupBy": {
          "type": "string",
          "default": "namespace",
          "enum": [
            "project",
            "workspace",
            "cluster",
            "namespace",
            "cloud"
          ]
        },
        "period": {
          "type": "integer",
          "format": "int32",
          "default": 60
        }
      }
    },
    "v1ResourceConsumptionSpec": {
      "description": "Resource consumption spec",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ResourceConsumptionFilter"
        },
        "options": {
          "$ref": "#/definitions/v1ResourceConsumptionOptions"
        }
      }
    },
    "v1ResourceCost": {
      "description": "Resource Cost information",
      "type": "object",
      "properties": {
        "cloud": {
          "$ref": "#/definitions/v1CloudCost"
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1ResourceCostDataPoint": {
      "description": "Resource cost data point",
      "type": "object",
      "properties": {
        "cpu": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "memory": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "storage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "timestamp": {
          "type": "number",
          "format": "int64"
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1ResourceCostSummary": {
      "description": "Resource cost summary information",
      "type": "object",
      "properties": {
        "associatedResources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        },
        "data": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ResourceCostDataPoint"
          }
        },
        "entity": {
          "$ref": "#/definitions/v1ResourceReference"
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalCost"
        }
      }
    },
    "v1ResourceCostSummaryFilter": {
      "description": "Resource cost summary filter",
      "type": "object",
      "properties": {
        "clouds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "clusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "includeMasterMachines": {
          "type": "boolean"
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "workspaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ResourceCostSummaryOptions": {
      "description": "Resource cost summary options",
      "type": "object",
      "properties": {
        "enableSummaryView": {
          "type": "boolean"
        },
        "groupBy": {
          "type": "string",
          "default": "cluster",
          "enum": [
            "project",
            "workspace",
            "cluster",
            "namespace",
            "cloud"
          ]
        },
        "period": {
          "type": "integer",
          "format": "int32",
          "default": 60
        }
      }
    },
    "v1ResourceCostSummarySpec": {
      "description": "Resource cost summary spec",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ResourceCostSummaryFilter"
        },
        "options": {
          "$ref": "#/definitions/v1ResourceCostSummaryOptions"
        }
      }
    },
    "v1ResourceEntity": {
      "type": "object",
      "properties": {
        "checks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "v1ResourceGroup": {
      "description": "Azure resource Group",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1ResourceReference": {
      "type": "object",
      "required": [
        "uid"
      ],
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ResourceTotalCloudCost": {
      "description": "Resource total cloud cost information",
      "type": "object",
      "properties": {
        "compute": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "storage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1ResourceTotalConsumptionData": {
      "description": "Resource total cosumption data",
      "type": "object",
      "properties": {
        "allotted": {
          "$ref": "#/definitions/v1ResourceConsumptionData"
        },
        "usage": {
          "$ref": "#/definitions/v1ResourceConsumptionData"
        }
      }
    },
    "v1ResourceTotalCost": {
      "description": "Resource total cost information",
      "type": "object",
      "properties": {
        "cpu": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "memory": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "storage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1ResourceUsage": {
      "description": "ResourceUsage",
      "properties": {
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ProjectResourceUsage"
          }
        },
        "timestamp": {
          "description": "resource usage time",
          "$ref": "#/definitions/v1Time"
        },
        "totalAlloyCpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        },
        "totalPureCpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1ResourceUsageDataPoint": {
      "description": "Resource usage data point",
      "type": "object",
      "properties": {
        "cpu": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "memory": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "timestamp": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "v1ResourceUsageSummary": {
      "description": "Resource usage summary information",
      "type": "object",
      "properties": {
        "associatedResources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        },
        "data": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ResourceUsageDataPoint"
          }
        },
        "entity": {
          "$ref": "#/definitions/v1ResourceReference"
        }
      }
    },
    "v1ResourceUsageSummaryFilter": {
      "description": "Resource usage summary filter",
      "type": "object",
      "properties": {
        "clouds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "clusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "includeMasterMachines": {
          "type": "boolean"
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "pods": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "workload": {
          "$ref": "#/definitions/v1ResourceWorkloadFilter"
        },
        "workspaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ResourceUsageSummaryOptions": {
      "description": "Resource usage summary options",
      "type": "object",
      "properties": {
        "enableSummaryView": {
          "type": "boolean"
        },
        "groupBy": {
          "type": "string",
          "default": "cluster",
          "enum": [
            "project",
            "workspace",
            "cluster",
            "namespace",
            "deployment",
            "statefulset",
            "daemonset",
            "pod",
            "cloud"
          ]
        },
        "period": {
          "type": "integer",
          "format": "int32",
          "default": 60
        }
      }
    },
    "v1ResourceUsageSummarySpec": {
      "description": "Resource usage summary spec",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ResourceUsageSummaryFilter"
        },
        "options": {
          "$ref": "#/definitions/v1ResourceUsageSummaryOptions"
        }
      }
    },
    "v1ResourceWorkloadFilter": {
      "description": "Workload resource filter",
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "default": "all",
          "enum": [
            "deployment",
            "statefulset",
            "daemonset",
            "all"
          ]
        }
      }
    },
    "v1Resources": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceEntity"
          }
        }
      }
    },
    "v1ResourcesCloudCostSummary": {
      "description": "Resources cloud cost summary information",
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceCloudCostSummary"
          }
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalCloudCost"
        }
      }
    },
    "v1ResourcesConsumption": {
      "description": "Resources consumption information",
      "type": "object",
      "properties": {
        "cpuUnit": {
          "type": "string"
        },
        "memoryUnit": {
          "type": "string"
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceConsumption"
          }
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalConsumptionData"
        }
      }
    },
    "v1ResourcesCostSummary": {
      "description": "Resources cost summary information",
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceCostSummary"
          }
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalCost"
        }
      }
    },
    "v1ResourcesUsageSummary": {
      "description": "Resources usage summary information",
      "type": "object",
      "properties": {
        "cpuUnit": {
          "type": "string"
        },
        "memoryUnit": {
          "type": "string"
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceUsageSummary"
          }
        }
      }
    },
    "v1RestoreStatusMeta": {
      "description": "Restore  status meta",
      "properties": {
        "isSucceeded": {
          "type": "boolean"
        },
        "msg": {
          "type": "string"
        },
        "restoreTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1Role": {
      "description": "Role",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1RoleSpec"
        },
        "status": {
          "$ref": "#/definitions/v1RoleStatus"
        }
      }
    },
    "v1RolePatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1HttpPatch"
      }
    },
    "v1RoleSpec": {
      "description": "Role specifications",
      "properties": {
        "permissions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "$ref": "#/definitions/v1Scope"
        },
        "type": {
          "type": "string",
          "enum": [
            "system",
            "user"
          ]
        }
      }
    },
    "v1RoleStatus": {
      "description": "Role status",
      "properties": {
        "isEnabled": {
          "description": "Specifies if role account is enabled/disabled",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1Roles": {
      "description": "Array of Roles",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Role"
          }
        }
      }
    },
    "v1S3StorageConfig": {
      "description": "User asset s3 location config",
      "type": "object",
      "required": [
        "bucketName",
        "region",
        "credentials"
      ],
      "properties": {
        "bucketName": {
          "type": "string"
        },
        "caCert": {
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "region": {
          "type": "string"
        },
        "s3ForcePathStyle": {
          "type": "boolean",
          "default": true
        },
        "s3Url": {
          "description": "For custom hosted S3, s3Url can be specified",
          "type": "string"
        },
        "useRestic": {
          "description": "Uses Restic plugin for the backup",
          "type": "boolean",
          "default": true
        }
      }
    },
    "v1SchedulerJob": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object",
          "x-omitempty": false,
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "cycles": {
              "type": "integer",
              "x-omitempty": false
            },
            "interval": {
              "type": "integer",
              "x-omitempty": false
            }
          }
        },
        "status": {
          "type": "object",
          "properties": {
            "cycleNumber": {
              "type": "integer",
              "x-omitempty": false
            },
            "error": {
              "type": "string",
              "x-omitempty": false
            },
            "forceNextRun": {
              "type": "boolean",
              "x-omitempty": false
            },
            "isActive": {
              "type": "boolean",
              "x-omitempty": false
            },
            "isDisabled": {
              "type": "boolean",
              "x-omitempty": false
            },
            "isLocked": {
              "type": "boolean",
              "x-omitempty": false
            },
            "lastRunTime": {
              "x-omitempty": false,
              "$ref": "#/definitions/v1Time"
            },
            "lastSuccessfulRunTime": {
              "x-omitempty": false,
              "$ref": "#/definitions/v1Time"
            },
            "nextRunTime": {
              "x-omitempty": false,
              "$ref": "#/definitions/v1Time"
            }
          }
        }
      }
    },
    "v1SchedulerJobs": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1SchedulerJob"
      }
    },
    "v1SchedulerJobsHealth": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1SchedulerJob"
      }
    },
    "v1Scope": {
      "type": "string",
      "enum": [
        "system",
        "tenant",
        "project"
      ]
    },
    "v1ServiceImage": {
      "description": "Service image entity",
      "type": "object",
      "properties": {
        "buildId": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ServiceManifest": {
      "description": "Service manifest information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ServiceManifestSpec"
        }
      }
    },
    "v1ServiceManifestSpec": {
      "type": "object",
      "properties": {
        "manifests": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1GitRepoFileContent"
          }
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ServicePort": {
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "port": {
          "description": "The port that will be exposed by this service.",
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "v1ServiceVersion": {
      "description": "Service version information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ServiceVersionSpec"
        }
      }
    },
    "v1ServiceVersionSpec": {
      "type": "object",
      "properties": {
        "latestVersion": {
          "$ref": "#/definitions/v1GitRepoFileContent"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1ServicesImages": {
      "type": "object",
      "properties": {
        "serviceImages": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ServiceImage"
          }
        }
      }
    },
    "v1SonobuoyEntity": {
      "description": "Sonobuoy response",
      "required": [
        "requestUid",
        "status",
        "reports"
      ],
      "properties": {
        "reports": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1SonobuoyReportEntity"
          }
        },
        "requestUid": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Completed",
            "InProgress",
            "Failed",
            "Initiated"
          ]
        }
      }
    },
    "v1SonobuoyLog": {
      "description": "Compliance Scan Sonobuoy Report",
      "properties": {
        "description": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "output": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1SonobuoyLogEntity": {
      "description": "Sonobuoy log",
      "properties": {
        "description": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "output": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1SonobuoyReport": {
      "description": "Compliance Scan Sonobuoy Report",
      "properties": {
        "fail": {
          "type": "integer",
          "format": "int32"
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SonobuoyLog"
          }
        },
        "node": {
          "type": "string"
        },
        "pass": {
          "type": "integer",
          "format": "int32"
        },
        "plugin": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1SonobuoyReportEntity": {
      "description": "Sonobuoy report",
      "properties": {
        "fail": {
          "type": "integer",
          "format": "int32"
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SonobuoyLogEntity"
          }
        },
        "node": {
          "type": "string"
        },
        "pass": {
          "type": "integer",
          "format": "int32"
        },
        "plugin": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1SortOrder": {
      "type": "string",
      "default": "asc",
      "enum": [
        "asc",
        "desc"
      ]
    },
    "v1SpectroAppMgmtUpgrade": {
      "description": "Spectro application management upgrade information",
      "type": "object",
      "required": [
        "version"
      ],
      "properties": {
        "version": {
          "type": "string"
        }
      }
    },
    "v1SpectroAwsClusterEntity": {
      "description": "Spectro AWS cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1AwsClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1AwsMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroAwsClusterImportEntity": {
      "description": "Spectro AWS cluster import entity",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroAwsClusterRateEntity": {
      "description": "Spectro AWS cluster entity for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1AwsClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroAzureClusterEntity": {
      "description": "Spectro Azure cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1AzureClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroAzureClusterImportEntity": {
      "description": "Spectro Azure cluster import entity",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroAzureClusterRateEntity": {
      "description": "Spectro Azure cluster entity for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1AzureClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroCluster": {
      "description": "SpectroCluster is the Schema for the spectroclusters API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SpectroClusterSpec"
        },
        "status": {
          "$ref": "#/definitions/v1SpectroClusterStatus"
        }
      }
    },
    "v1SpectroClusterAssetEntity": {
      "description": "Spectro cluster asset",
      "type": "object",
      "properties": {
        "spec": {
          "type": "object",
          "properties": {
            "frpKubeconfig": {
              "type": "string"
            },
            "kubeconfig": {
              "type": "string"
            },
            "kubeconfigclient": {
              "type": "string"
            },
            "manifest": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1SpectroClusterAssetFrpKubeConfig": {
      "description": "Spectro cluster asset Frp Kube Config",
      "type": "object",
      "properties": {
        "frpKubeconfig": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterAssetKubeConfig": {
      "description": "Spectro cluster asset Kube Config",
      "type": "object",
      "properties": {
        "kubeconfig": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterAssetKubeConfigClient": {
      "description": "Spectro cluster asset Kube Config Client",
      "type": "object",
      "properties": {
        "kubeconfigclient": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterAssetManifest": {
      "description": "Spectro cluster asset",
      "type": "object",
      "properties": {
        "manifest": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterCloudCost": {
      "description": "Spectro cluster cloud cost information",
      "type": "object",
      "properties": {
        "cost": {
          "$ref": "#/definitions/v1ResourceCost"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CloudCostDataPoint"
          }
        }
      }
    },
    "v1SpectroClusterCloudCostSummaryFilter": {
      "description": "Spectro cluster cloud cost summary filter",
      "type": "object",
      "properties": {
        "clouds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "workspaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SpectroClusterCloudCostSummaryOptions": {
      "description": "Spectro cluster cloud cost summary options",
      "type": "object",
      "properties": {
        "groupBy": {
          "type": "string",
          "default": "project",
          "enum": [
            "project",
            "cloud",
            "cluster"
          ]
        },
        "period": {
          "type": "integer",
          "format": "int32",
          "default": 1440
        }
      }
    },
    "v1SpectroClusterCloudCostSummarySpec": {
      "description": "Spectro cluster cloud cost summary spec",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1SpectroClusterCloudCostSummaryFilter"
        },
        "options": {
          "$ref": "#/definitions/v1SpectroClusterCloudCostSummaryOptions"
        }
      }
    },
    "v1SpectroClusterCost": {
      "description": "Spectro cluster cost information",
      "type": "object",
      "properties": {
        "cloud": {
          "$ref": "#/definitions/v1SpectroClusterCloudCost"
        },
        "cost": {
          "$ref": "#/definitions/v1ResourceCost"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterCostSummary": {
      "type": "object",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/v1SpectroClusterCost"
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "period": {
          "type": "integer",
          "format": "int32"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1SpectroClusterFilterSpec": {
      "description": "Spectro cluster filter spec",
      "properties": {
        "clusterName": {
          "$ref": "#/definitions/v1FilterString"
        },
        "clusterState": {
          "description": "Deprecated. Use clusterStates",
          "$ref": "#/definitions/v1ClusterState"
        },
        "clusterStates": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterState"
          }
        },
        "cpuUsage": {
          "$ref": "#/definitions/v1FilterIntRange"
        },
        "environment": {
          "description": "Deprecated. Use environments",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudType"
          }
        },
        "environments": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1CloudType"
          }
        },
        "healthState": {
          "type": "string",
          "default": "all",
          "enum": [
            "all",
            "Healthy",
            "UnHealthy"
          ]
        },
        "isDeleted": {
          "type": "boolean",
          "default": false
        },
        "memoryUsage": {
          "$ref": "#/definitions/v1FilterNumberRange"
        },
        "metricPeriod": {
          "description": "Metric period in minutes defines latest metrics by period",
          "type": "integer",
          "format": "int32",
          "default": 60
        },
        "tags": {
          "$ref": "#/definitions/v1FilterArray"
        }
      }
    },
    "v1SpectroClusterHealthCheck": {
      "type": "object",
      "properties": {
        "spec": {
          "type": "object",
          "$ref": "#/definitions/v1SpectroClusterHealthCheckSpec"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/v1SpectroClusterHealthCheckStatus"
        }
      }
    },
    "v1SpectroClusterHealthCheckSpec": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "ownerName": {
          "type": "string"
        },
        "ownerUid": {
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterHealthCheckStatus": {
      "type": "object",
      "properties": {
        "machineHealthChecks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1HealthCheck"
          }
        },
        "msgBrokerHealthChecks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1HealthCheck"
          }
        },
        "spectroClusterHealthChecks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1HealthCheck"
          }
        }
      }
    },
    "v1SpectroClusterHealthCondition": {
      "description": "Spectro cluster health condition",
      "properties": {
        "message": {
          "type": "string"
        },
        "relatedObject": {
          "type": "object",
          "$ref": "#/definitions/v1RelatedObject"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterHealthStatus": {
      "description": "Spectro cluster health status",
      "properties": {
        "agentVersion": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroClusterHealthCondition"
          }
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterMetadataFilterSpec": {
      "description": "Spectro cluster filter spec",
      "properties": {
        "environment": {
          "$ref": "#/definitions/v1CloudType"
        },
        "isAlloy": {
          "description": "isAlloy is renamed to isImported",
          "type": "boolean",
          "default": false
        },
        "isImported": {
          "type": "boolean",
          "default": false
        },
        "name": {
          "$ref": "#/definitions/v1FilterString"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterMetadataSpec": {
      "description": "Spectro cluster metadata spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1SpectroClusterMetadataFilterSpec"
        },
        "sort": {
          "type": "string",
          "enum": [
            "environment",
            "state",
            "name"
          ],
          "x-nullable": true
        }
      }
    },
    "v1SpectroClusterMetrics": {
      "description": "Spectro cluster metrics",
      "properties": {
        "cpu": {
          "$ref": "#/definitions/v1ComputeMetrics"
        },
        "memory": {
          "$ref": "#/definitions/v1ComputeMetrics"
        }
      }
    },
    "v1SpectroClusterMigration": {
      "description": "Spectro cluster migration status",
      "type": "object",
      "properties": {
        "database": {
          "$ref": "#/definitions/v1MgmtMigrationStatuses"
        },
        "state": {
          "type": "string",
          "x-omitempty": false
        },
        "tenant": {
          "$ref": "#/definitions/v1SpectroTenantMigration"
        }
      }
    },
    "v1SpectroClusterNotifications": {
      "description": "Spectro cluster notifications",
      "properties": {
        "isAvailable": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1SpectroClusterPackConfigList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackConfig"
          }
        }
      }
    },
    "v1SpectroClusterPackProperties": {
      "description": "Spectro Cluster pack properties response",
      "type": "object",
      "properties": {
        "yaml": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1SpectroClusterPacksEntity": {
      "description": "Spectro cluster entity for pack refs validate",
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileEntity"
          }
        }
      }
    },
    "v1SpectroClusterPolicies": {
      "description": "Cluster policies",
      "type": "object",
      "properties": {
        "backupPolicy": {
          "$ref": "#/definitions/v1ClusterBackupConfig"
        },
        "scanPolicy": {
          "$ref": "#/definitions/v1ClusterComplianceScheduleConfig"
        }
      }
    },
    "v1SpectroClusterProfile": {
      "description": "Spectro cluster profile response",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SpectroClusterProfileSpec"
        }
      }
    },
    "v1SpectroClusterProfileEntity": {
      "description": "Spectro cluster profile entity",
      "type": "object",
      "properties": {
        "packValues": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PackValuesEntity"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterProfileList": {
      "type": "object",
      "required": [
        "profiles"
      ],
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfile"
          }
        }
      }
    },
    "v1SpectroClusterProfileSpec": {
      "description": "Spectro cluster profile spec response",
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "packs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterProfilePacksEntity"
          }
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1SpectroClusterProfileUpdates": {
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterProfileTemplate"
          }
        }
      }
    },
    "v1SpectroClusterProfileValidatorResponse": {
      "description": "Spectro cluster profile validator response",
      "type": "object",
      "properties": {
        "packs": {
          "$ref": "#/definitions/v1ConstraintValidatorResponse"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterProfiles": {
      "type": "object",
      "required": [
        "profiles"
      ],
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileEntity"
          }
        }
      }
    },
    "v1SpectroClusterProfilesPacksManifests": {
      "type": "object",
      "required": [
        "profiles"
      ],
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterProfilePacksManifests"
          }
        }
      }
    },
    "v1SpectroClusterProfilesParamReferenceEntity": {
      "description": "Spectro cluster profiles param reference entity",
      "type": "object",
      "properties": {
        "references": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SpectroClusterProfilesResolvedValues": {
      "description": "Spectro cluster profiles resolved values response",
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ProfileResolvedValues"
          }
        }
      }
    },
    "v1SpectroClusterRate": {
      "description": "Cluster estimated rate information",
      "type": "object",
      "properties": {
        "machinePools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MachinePoolRate"
          }
        },
        "name": {
          "type": "string"
        },
        "rate": {
          "$ref": "#/definitions/v1TotalClusterRate"
        },
        "resourceMetadata": {
          "$ref": "#/definitions/v1CloudResourceMetadata"
        }
      }
    },
    "v1SpectroClusterSortFields": {
      "type": "string",
      "enum": [
        "environment",
        "clusterName",
        "cpuUsage",
        "memoryUsage",
        "healthState",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "x-nullable": true
    },
    "v1SpectroClusterSortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1SpectroClusterSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1SpectroClusterSpec": {
      "description": "SpectroClusterSpec defines the desired state of SpectroCluster",
      "type": "object",
      "properties": {
        "cloudConfigRef": {
          "description": "CloudConfigRef point to the cloud configuration for the cluster, input by user Ref types are: AwsCloudConfig/VsphereCloudConfig/BaremetalConfig/ etc this user config will be used to generate cloud specific cluster/machine spec for cluster-api For VM, it will contain information needed to launch VMs, like cloud account, instance type For BM, it will contain actual baremetal machines",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "cloudType": {
          "type": "string",
          "enum": [
            "aws",
            "gcp",
            "azure",
            "vsphere",
            "openstack",
            "libvirt",
            "edge",
            "aks",
            "eks",
            "all"
          ]
        },
        "clusterConfig": {
          "description": "ClusterConfig is the configuration related to a general cluster. Configuration related to the health of the cluster.",
          "$ref": "#/definitions/v1ClusterConfig"
        },
        "clusterProfileTemplates": {
          "description": "When a cluster created from a clusterprofile at t1, ClusterProfileTemplate is a copy of the draft version or latest published version of the clusterprofileSpec.clusterprofileTemplate then clusterprofile may evolve to v2 at t2, but before user decide to upgrade the cluster, it will stay as it is when user decide to upgrade, clusterProfileTemplate will be updated from the clusterprofile pointed by ClusterProfileRef",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterProfileTemplate"
          }
        },
        "clusterType": {
          "type": "string",
          "enum": [
            "PureManage",
            "AlloyMonitor",
            "AlloyAssist",
            "AlloyExtend"
          ]
        }
      }
    },
    "v1SpectroClusterStatus": {
      "description": "SpectroClusterStatus",
      "type": "object",
      "properties": {
        "abortTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "apiEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1APIEndpoint"
          }
        },
        "clusterImport": {
          "$ref": "#/definitions/v1ClusterImport"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LoadBalancerService"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "state": {
          "description": "current operational state",
          "type": "string"
        },
        "upgrades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Upgrades"
          }
        }
      }
    },
    "v1SpectroClusterSummary": {
      "description": "Spectro cluster summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "specSummary": {
          "description": "Spectro cluster spec summary",
          "type": "object",
          "properties": {
            "cloudConfig": {
              "$ref": "#/definitions/v1CloudConfigMeta"
            },
            "clusterProfileTemplate": {
              "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
            },
            "clusterProfileTemplates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
              }
            },
            "projectMeta": {
              "$ref": "#/definitions/v1ProjectMeta"
            }
          }
        },
        "status": {
          "description": "Spectro cluster status summary",
          "properties": {
            "clusterImport": {
              "$ref": "#/definitions/v1ClusterImport"
            },
            "cost": {
              "$ref": "#/definitions/v1ResourceCost"
            },
            "health": {
              "$ref": "#/definitions/v1SpectroClusterHealthStatus"
            },
            "hourlyRate": {
              "$ref": "#/definitions/v1ResourceCost"
            },
            "metrics": {
              "$ref": "#/definitions/v1SpectroClusterMetrics"
            },
            "notifications": {
              "$ref": "#/definitions/v1SpectroClusterNotifications"
            },
            "state": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1SpectroClusterSummarySpec": {
      "description": "Spectro cluster filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1SpectroClusterFilterSpec"
        },
        "sort": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroClusterSortSpec"
          }
        }
      }
    },
    "v1SpectroClusterUidStatusSummary": {
      "description": "Spectro cluster status summary",
      "properties": {
        "abortTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "apiEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1APIEndpoint"
          }
        },
        "clusterImport": {
          "$ref": "#/definitions/v1ClusterImport"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          }
        },
        "cost": {
          "$ref": "#/definitions/v1ResourceCost"
        },
        "health": {
          "$ref": "#/definitions/v1SpectroClusterHealthStatus"
        },
        "hourlyRate": {
          "$ref": "#/definitions/v1ResourceCost"
        },
        "kubeMeta": {
          "$ref": "#/definitions/v1KubeMeta"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LoadBalancerService"
          }
        },
        "state": {
          "description": "current operational state",
          "type": "string"
        },
        "upgrades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Upgrades"
          }
        },
        "workspaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          }
        }
      }
    },
    "v1SpectroClusterUidSummary": {
      "description": "Spectro cluster summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "description": "Spectro cluster spec summary",
          "type": "object",
          "properties": {
            "cloudConfig": {
              "$ref": "#/definitions/v1CloudConfigMeta"
            },
            "cloudaccount": {
              "$ref": "#/definitions/v1CloudAccountMeta"
            },
            "clusterProfileTemplate": {
              "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
            },
            "clusterProfileTemplates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
              }
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1SpectroClusterUidStatusSummary"
        }
      }
    },
    "v1SpectroClusterUidUpgrades": {
      "description": "Spectro cluster status upgrades",
      "type": "object",
      "properties": {
        "upgrades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Upgrades"
          }
        }
      }
    },
    "v1SpectroClusterValidatorResponse": {
      "description": "Spectro cluster validator response",
      "type": "object",
      "properties": {
        "machinePools": {
          "$ref": "#/definitions/v1ConstraintValidatorResponse"
        },
        "profiles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileValidatorResponse"
          }
        }
      }
    },
    "v1SpectroClusters": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroCluster"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1SpectroClustersCostComputeSpec": {
      "description": "Spectro clusters cost compute spec",
      "type": "object",
      "properties": {
        "clusterUids": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1SpectroClustersHealth": {
      "description": "Spectro Clusters health data",
      "type": "object",
      "properties": {
        "errored": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "healthy": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "running": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "unhealthy": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        }
      }
    },
    "v1SpectroClustersMetadata": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ObjectMeta"
          }
        }
      }
    },
    "v1SpectroClustersSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroClusterSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1SpectroClustersUsageComputeSpec": {
      "description": "Spectro clusters usage compute spec",
      "type": "object",
      "properties": {
        "clusterUids": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1SpectroEdgeClusterEntity": {
      "description": "Spectro Edge cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "cloudConfig": {
              "$ref": "#/definitions/v1EdgeClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1EdgeMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroEdgeClusterImportEntity": {
      "description": "Spectro Edge cluster import entity",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroEdgeClusterRateEntity": {
      "description": "Spectro edge cluster entity for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1EdgeClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EdgeMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroEksClusterEntity": {
      "description": "Spectro EKS cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudAccountUid",
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1EksClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "fargateProfiles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1FargateProfile"
              }
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1EksMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroEksClusterRateEntity": {
      "description": "Spectro EKS cluster entity for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1EksClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EksMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroGcpClusterEntity": {
      "description": "Spectro GCP cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1GcpClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1GcpMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroGcpClusterImportEntity": {
      "description": "Spectro GCP cluster import entity",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroGcpClusterRateEntity": {
      "description": "Spectro Gcp cluster entity for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1GcpClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GcpMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroGenericClusterImportEntity": {
      "description": "Spectro generic cluster import entity",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroGenericClusterRateEntity": {
      "description": "Spectro generic cluster entity for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1GenericClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GenericMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroInstallerEntity": {
      "description": "Spectro installer entity for create",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "privateGatewayUid": {
              "type": "string"
            },
            "spectroClusterUid": {
              "type": "string"
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1InstallerStatus"
        }
      }
    },
    "v1SpectroInstallerInputEntity": {
      "description": "Spectro installer entity for create",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1SpectroInstallerStatus": {
      "description": "spectro installer status",
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1InstallerStatus"
        }
      }
    },
    "v1SpectroInstallers": {
      "description": "List Spectro installers",
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroInstallerEntity"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1SpectroLibvirtClusterEntity": {
      "description": "Spectro Libvirt cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "cloudConfig": {
              "$ref": "#/definitions/v1LibvirtClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1LibvirtMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroLibvirtClusterImportEntity": {
      "description": "Spectro Libvirt cluster import entity",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroLibvirtClusterRateEntity": {
      "description": "Spectro libvirt cluster entity for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1LibvirtClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LibvirtMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroMaasClusterEntity": {
      "description": "Spectro Maas cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1MaasClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1MaasMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroMaasClusterImportEntity": {
      "description": "Spectro maas cluster import entity",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroMaasClusterRateEntity": {
      "description": "Spectro Maas cluster entity for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1MaasClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MaasMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroMgmt": {
      "description": "Spectro management data",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SpectroMgmtSpec"
        },
        "status": {
          "$ref": "#/definitions/v1SpectroMgmtStatus"
        }
      }
    },
    "v1SpectroMgmtSpec": {
      "description": "spectro management specifications",
      "properties": {
        "installerMode": {
          "type": "string"
        },
        "spectroClusterUid": {
          "type": "string"
        },
        "targetVersion": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1SpectroMgmtStatus": {
      "description": "spectro management status information",
      "properties": {
        "appVersions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1AppVersion"
          }
        },
        "isFailed": {
          "type": "boolean",
          "x-omitempty": false
        },
        "lastUpdatedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "type": "string"
        },
        "messageLogs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "state": {
          "type": "string"
        },
        "upgradeHistory": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroMgmtUpgrade"
          }
        }
      }
    },
    "v1SpectroMgmtUpgrade": {
      "description": "spectro management upgrade logs",
      "properties": {
        "upgradeTime": {
          "$ref": "#/definitions/v1Time"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1SpectroOpenStackClusterEntity": {
      "description": "Spectro OpenStack cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudAccountUid",
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1OpenStackClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1OpenStackMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroOpenStackClusterImportEntity": {
      "description": "Spectro OpenStack cluster import entity",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroOpenStackClusterRateEntity": {
      "description": "Spectro Openstack cluster entity for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1OpenStackClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OpenStackMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroTenantClusterMigration": {
      "description": "Spectro tenant cluster migration status",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1SpectroTenantMigration": {
      "description": "Spectro tenant migration status",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1SpectroTenantClusterMigration"
          }
        },
        "state": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1SpectroTencentClusterEntity": {
      "description": "Spectro Tencent cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1TencentClusterConfig"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1TencentMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroTencentClusterRateEntity": {
      "description": "Spectro Tencent cluster entity for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1TencentClusterConfig"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TencentMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpectroVsphereClusterEntity": {
      "description": "Spectro vSphere cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudConfig"
          ],
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1VsphereClusterConfigEntity"
            },
            "clusterConfig": {
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac",
              "$ref": "#/definitions/v1ClusterConfigEntity"
            },
            "edgeHostUid": {
              "description": "Appliance (Edge Host) uid for Edge env",
              "type": "string"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1VsphereMachinePoolConfigEntity"
              }
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              }
            }
          }
        }
      }
    },
    "v1SpectroVsphereClusterImportEntity": {
      "description": "Spectro Vsphere cluster import entity",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "type": "object",
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          }
        }
      }
    },
    "v1SpectroVsphereClusterRateEntity": {
      "description": "Spectro Vsphere cluster entity for estimating rate",
      "type": "object",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1VsphereClusterConfigEntity"
        },
        "machinepoolconfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VsphereMachinePoolConfigEntity"
          }
        }
      }
    },
    "v1SpotMarketOptions": {
      "description": "SpotMarketOptions defines the options available to a user when configuring Machines to run on Spot instances. Most users should provide an empty struct.",
      "type": "object",
      "properties": {
        "maxPrice": {
          "description": "MaxPrice defines the maximum price the user is willing to pay for Spot VM instances",
          "type": "string"
        }
      }
    },
    "v1SpotVMOptions": {
      "description": "SpotVMOptions defines the options relevant to running the Machine on Spot VMs",
      "type": "object",
      "properties": {
        "maxPrice": {
          "description": "MaxPrice defines the maximum price the user is willing to pay for Spot VM instances",
          "type": "string"
        }
      }
    },
    "v1StorageAccountEntity": {
      "description": "Azure Storage Account Entity",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1StorageCost": {
      "description": "Cloud storage cost",
      "type": "object",
      "properties": {
        "discountedUsage": {
          "description": "Cloud storage upper limit which is free.",
          "type": "string"
        },
        "price": {
          "description": "Array of cloud storage range prices",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1StoragePrice"
          }
        }
      }
    },
    "v1StoragePrice": {
      "description": "Cloud storage price within an upper limit.",
      "type": "object",
      "properties": {
        "limit": {
          "description": "Upper limit of cloud storage usage",
          "type": "string"
        },
        "price": {
          "type": "string"
        }
      }
    },
    "v1StorageRate": {
      "description": "Storage estimated rate information",
      "type": "object",
      "properties": {
        "iops": {
          "type": "number",
          "format": "float64"
        },
        "rate": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "sizeGB": {
          "type": "number",
          "format": "float64"
        },
        "throughput": {
          "type": "number",
          "format": "float64"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1StorageType": {
      "description": "Cloud cloud Storage type details",
      "type": "object",
      "properties": {
        "cost": {
          "$ref": "#/definitions/v1StorageCost"
        },
        "iopsCost": {
          "$ref": "#/definitions/v1StorageCost"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "throughputCost": {
          "$ref": "#/definitions/v1StorageCost"
        }
      }
    },
    "v1StripeKey": {
      "description": "Key",
      "properties": {
        "publishKey": {
          "type": "string"
        }
      }
    },
    "v1Subnet": {
      "type": "object",
      "properties": {
        "cidrBlock": {
          "description": "CidrBlock is the CIDR block to be used when the provider creates a managed Vnet.",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "securityGroupName": {
          "description": "Network Security Group(NSG) to be attached to subnet. NSG for a control plane subnet, should allow inbound to port 6443, as port 6443 is used by kubeadm to bootstrap the control planes",
          "type": "string"
        }
      }
    },
    "v1Subscription": {
      "description": "Azure Subscription Type",
      "type": "object",
      "properties": {
        "authorizationSource": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        }
      }
    },
    "v1SysLogin": {
      "description": "System admin login input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1SysUserToken": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "Authorization": {
          "type": "string"
        },
        "IsPasswordReset": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1SystemAwsAccount": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemAwsSpec"
        }
      }
    },
    "v1SystemAwsImage": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemAwsImageSpec"
        }
      }
    },
    "v1SystemAwsImageSpec": {
      "description": "system aws account specifications",
      "properties": {
        "goldenImageRegion": {
          "type": "string"
        }
      }
    },
    "v1SystemAwsSpec": {
      "description": "system aws account specifications",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "v1SystemAwsStsAccount": {
      "description": "system aws account specifications",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "v1SystemAzureAccount": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemAzureSpec"
        }
      }
    },
    "v1SystemAzureSpec": {
      "description": "system azure account specifications",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "v1SystemAzureStorage": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemAzureStorageSpec"
        }
      }
    },
    "v1SystemAzureStorageSpec": {
      "description": "system aws account specifications",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "container": {
          "type": "string"
        },
        "storageName": {
          "type": "string"
        }
      }
    },
    "v1SystemBackupConfigSpec": {
      "description": "system backup config spec",
      "type": "object",
      "properties": {
        "ftp": {
          "$ref": "#/definitions/v1SystemFtpSpec"
        },
        "hourOfTheDay": {
          "type": "integer",
          "x-omitempty": false
        },
        "interval": {
          "type": "integer",
          "x-omitempty": false
        },
        "retentionPeriod": {
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "v1SystemBackupFtpConfigSpec": {
      "description": "system backup config spec",
      "type": "object",
      "properties": {
        "backupSpec": {
          "$ref": "#/definitions/v1SystemBackupSpec"
        },
        "ftp": {
          "$ref": "#/definitions/v1SystemFtpSpec"
        }
      }
    },
    "v1SystemBackupS3ConfigSpec": {
      "description": "system backup config spec",
      "type": "object",
      "properties": {
        "backupSpec": {
          "$ref": "#/definitions/v1SystemBackupSpec"
        },
        "s3": {
          "$ref": "#/definitions/v1SystemS3Spec"
        }
      }
    },
    "v1SystemBackupSpec": {
      "description": "system backup config spec",
      "type": "object",
      "properties": {
        "hourOfTheDay": {
          "type": "integer",
          "x-omitempty": false
        },
        "interval": {
          "type": "integer",
          "x-omitempty": false
        },
        "retentionPeriod": {
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "v1SystemCertificateSpec": {
      "description": "system smtp config spec",
      "type": "object",
      "properties": {
        "crt": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "v1SystemConfigDomainSpec": {
      "description": "system domain config spec",
      "type": "object",
      "properties": {
        "apiServer": {
          "type": "string"
        },
        "derivedApiServer": {
          "type": "string"
        },
        "derivedRootDomain": {
          "type": "string"
        },
        "rootDomain": {
          "type": "string"
        },
        "urlProtocol": {
          "type": "string"
        }
      }
    },
    "v1SystemCryptoData": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "input": {
          "type": "string"
        },
        "result": {
          "type": "string"
        }
      }
    },
    "v1SystemCryptoInput": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "input": {
          "type": "string"
        }
      }
    },
    "v1SystemEdgeImage": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemEdgeImageSpec"
        }
      }
    },
    "v1SystemEdgeImageSpec": {
      "description": "system edge account specifications",
      "properties": {
        "imagesHostEndpoint": {
          "type": "string"
        }
      }
    },
    "v1SystemFtpSpec": {
      "description": "system ftp config spec",
      "type": "object",
      "properties": {
        "dir": {
          "type": "string",
          "x-omitempty": false
        },
        "password": {
          "type": "string",
          "x-omitempty": false
        },
        "server": {
          "type": "string",
          "x-omitempty": false
        },
        "username": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1SystemGcpAccount": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemGcpSpec"
        }
      }
    },
    "v1SystemGcpImage": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemGcpImageSpec"
        }
      }
    },
    "v1SystemGcpImageSpec": {
      "description": "system gcp account specifications",
      "properties": {
        "imageProject": {
          "type": "string"
        }
      }
    },
    "v1SystemGcpSpec": {
      "description": "system gcp account specifications",
      "properties": {
        "json": {
          "type": "string"
        }
      }
    },
    "v1SystemGitAuthSpec": {
      "description": "system git auth account specifications",
      "properties": {
        "_type": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "username": {
          "$ref": "#/definitions/v1SystemGitAuthSpec"
        }
      }
    },
    "v1SystemLibvirtImage": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemLibvirtImageSpec"
        }
      }
    },
    "v1SystemLibvirtImageSpec": {
      "description": "system libvirt account specifications",
      "properties": {
        "imagesHostEndpoint": {
          "type": "string"
        }
      }
    },
    "v1SystemLoggerSpec": {
      "description": "system logger config spec",
      "type": "object",
      "properties": {
        "format": {
          "type": "string"
        },
        "level": {
          "type": "string"
        }
      }
    },
    "v1SystemMaasImage": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemMaasImageSpec"
        }
      }
    },
    "v1SystemMaasImageSpec": {
      "description": "system maas account specifications",
      "properties": {
        "imagesHostEndpoint": {
          "type": "string"
        }
      }
    },
    "v1SystemOpenstackImage": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemOpenstackImageSpec"
        }
      }
    },
    "v1SystemOpenstackImageSpec": {
      "description": "system openstack account specifications",
      "properties": {
        "imagesHostEndpoint": {
          "type": "string"
        }
      }
    },
    "v1SystemPasswordPolicySpec": {
      "description": "system password policy",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "expiryDurationInDays": {
          "type": "integer"
        },
        "firstReminderInDays": {
          "type": "integer"
        },
        "isRegex": {
          "type": "boolean"
        },
        "minLength": {
          "type": "integer"
        },
        "minNumOfBlockLetters": {
          "type": "integer"
        },
        "minNumOfDigits": {
          "type": "integer"
        },
        "minNumOfSmallLetters": {
          "type": "integer"
        },
        "minNumOfSpecialCharacters": {
          "type": "integer"
        },
        "regex": {
          "type": "string"
        },
        "reminderFrequency": {
          "type": "integer"
        },
        "updateTimestamp": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1SystemPlan": {
      "description": "system plan",
      "properties": {
        "freeCredits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SystemPlanCredit"
          }
        },
        "planLimit": {
          "$ref": "#/definitions/v1SystemPlanLimit"
        },
        "slaCredits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SystemPlanCredit"
          }
        },
        "systemStartDate": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1SystemPlanCredit": {
      "description": "Plan Credit",
      "required": [
        "type"
      ],
      "properties": {
        "cpuCoreHours": {
          "type": "number",
          "format": "int64",
          "x-omitempty": false
        },
        "creditUid": {
          "type": "string"
        },
        "expiry": {
          "description": "credit expiry time",
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "type": "string"
        },
        "start": {
          "description": "credit start time",
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string",
          "enum": [
            "Pure",
            "Alloy"
          ]
        }
      }
    },
    "v1SystemPlanLimit": {
      "description": "System Monthly Plan Limit",
      "properties": {
        "alloy": {
          "$ref": "#/definitions/v1SystemPlanLimitSpec"
        },
        "isUnlimited": {
          "description": "is unlimited cpu core hours",
          "type": "boolean",
          "x-omitempty": false
        },
        "pure": {
          "$ref": "#/definitions/v1SystemPlanLimitSpec"
        }
      }
    },
    "v1SystemPlanLimitSpec": {
      "description": "Monthly Plan Limit spec",
      "properties": {
        "cpuCoreHours": {
          "description": "cpu cores hours",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "overageLimitPercentage": {
          "description": "overage limit in percentage",
          "type": "integer",
          "format": "int8",
          "default": 25,
          "x-omitempty": false
        },
        "warnLimitPercentage": {
          "description": "warning limit in percentage",
          "type": "integer",
          "format": "int8",
          "default": 90,
          "x-omitempty": false
        }
      }
    },
    "v1SystemPlanLimitUpdate": {
      "description": "System Plan limit change update entity",
      "properties": {
        "planLimit": {
          "$ref": "#/definitions/v1SystemPlanLimit"
        }
      }
    },
    "v1SystemProductUsage": {
      "description": "Yearly usage",
      "properties": {
        "allocatedCredits": {
          "type": "number",
          "format": "int64"
        },
        "breachedCredits": {
          "type": "number",
          "format": "float64"
        },
        "freeSlaCredits": {
          "type": "number",
          "format": "int64"
        },
        "usedCredits": {
          "type": "number",
          "format": "float64"
        }
      }
    },
    "v1SystemProxySpec": {
      "description": "system proxy config spec",
      "type": "object",
      "properties": {
        "httpProxy": {
          "type": "string"
        },
        "httpsProxy": {
          "type": "string"
        },
        "noProxy": {
          "type": "string"
        }
      }
    },
    "v1SystemRegistry": {
      "description": "Registry configuration",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1RegistryConf"
        }
      }
    },
    "v1SystemReverseProxy": {
      "description": "system config reverse proxy",
      "properties": {
        "caCert": {
          "type": "string"
        },
        "clientCert": {
          "type": "string"
        },
        "clientKey": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "protocol": {
          "type": "string",
          "enum": [
            "http",
            "https"
          ]
        },
        "server": {
          "type": "string"
        },
        "vHostPort": {
          "type": "integer"
        }
      }
    },
    "v1SystemS3Spec": {
      "description": "system backup s3 storage config spec",
      "type": "object",
      "properties": {
        "accessKey": {
          "type": "string",
          "x-omitempty": false
        },
        "bucket": {
          "type": "string",
          "x-omitempty": false
        },
        "folder": {
          "type": "string",
          "x-omitempty": false
        },
        "region": {
          "type": "string",
          "x-omitempty": false
        },
        "secretKey": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1SystemScarSpec": {
      "description": "system scar config spec",
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1SystemServiceLogin": {
      "description": "System service login input",
      "type": "object",
      "properties": {
        "isSystem": {
          "type": "boolean"
        },
        "serviceName": {
          "type": "string",
          "enum": [
            "ally",
            "jet",
            "git",
            "ambit",
            "edge",
            "lodge"
          ]
        },
        "spectroClusterUid": {
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        }
      }
    },
    "v1SystemSmtpSpec": {
      "description": "system smtp config spec",
      "type": "object",
      "properties": {
        "fromEmailId": {
          "type": "string"
        },
        "insecureSkipVerifyTls": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        },
        "smtpPort": {
          "type": "integer"
        },
        "smtpServer": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "v1SystemSsoSpec": {
      "description": "system sso config spec",
      "type": "object",
      "properties": {
        "acsUrlRoot": {
          "type": "string"
        },
        "acsUrlScheme": {
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        },
        "audienceUrl": {
          "type": "string"
        },
        "entityId": {
          "type": "string"
        }
      }
    },
    "v1SystemStartDate": {
      "description": "system start date",
      "properties": {
        "systemStartDate": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1SystemTencentAccount": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemTencentSpec"
        }
      }
    },
    "v1SystemTencentSpec": {
      "description": "system tencent account specifications",
      "properties": {
        "secretId": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "v1SystemTimeseriesMetrics": {
      "description": "system timeseries metrics config",
      "type": "object",
      "properties": {
        "archivalInterval": {
          "type": "integer"
        },
        "batchInterval": {
          "type": "integer"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "retentionPeriod": {
          "type": "integer"
        }
      }
    },
    "v1SystemTimeseriesSpec": {
      "description": "system timeseries config spec",
      "type": "object",
      "properties": {
        "machine": {
          "$ref": "#/definitions/v1SystemTimeseriesMetrics"
        },
        "pod": {
          "$ref": "#/definitions/v1SystemTimeseriesMetrics"
        }
      }
    },
    "v1SystemUsage": {
      "description": "System usage",
      "properties": {
        "planLimit": {
          "$ref": "#/definitions/v1PlanLimit"
        },
        "usageBillingPeriod": {
          "$ref": "#/definitions/v1InvoiceBillingPeriod"
        },
        "yearlyUsages": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1YearlyUsage"
          }
        }
      }
    },
    "v1SystemVersionInfo": {
      "description": "system version info",
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        }
      }
    },
    "v1SystemVsphereImage": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemVsphereImageSpec"
        }
      }
    },
    "v1SystemVsphereImageSpec": {
      "description": "system vsphere account specifications",
      "properties": {
        "imagesHostEndpoint": {
          "type": "string"
        },
        "overlordOvaLocation": {
          "type": "string"
        }
      }
    },
    "v1Taint": {
      "description": "Taint",
      "type": "object",
      "properties": {
        "effect": {
          "type": "string",
          "enum": [
            "NoSchedule",
            "PreferNoSchedule",
            "NoExecute"
          ]
        },
        "key": {
          "description": "The taint key to be applied to a node",
          "type": "string"
        },
        "timeAdded": {
          "$ref": "#/definitions/v1Time"
        },
        "value": {
          "description": "The taint value corresponding to the taint key.",
          "type": "string"
        }
      }
    },
    "v1Team": {
      "description": "Team information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TeamSpec"
        },
        "status": {
          "$ref": "#/definitions/v1TeamStatus"
        }
      }
    },
    "v1TeamPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1HttpPatch"
      }
    },
    "v1TeamRoleMap": {
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "teamId": {
          "type": "string"
        }
      }
    },
    "v1TeamSpec": {
      "description": "Team specifications",
      "properties": {
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "sources": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "users": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1TeamSpecSummary": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        }
      }
    },
    "v1TeamStatus": {
      "description": "Team status",
      "type": "object"
    },
    "v1TeamSummary": {
      "description": "Team summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TeamSpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1TeamStatus"
        }
      }
    },
    "v1TeamSummarySortFields": {
      "type": "string",
      "enum": [
        "name",
        "creationTimestamp"
      ],
      "x-nullable": true
    },
    "v1TeamSummarySortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1TeamSummarySortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1TeamTenantRolesEntity": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        }
      }
    },
    "v1TeamTenantRolesUpdate": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Teams": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Team"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1TeamsBatch": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1Team"
      }
    },
    "v1TeamsFilterSpec": {
      "description": "Teams filter spec",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1FilterString"
        }
      }
    },
    "v1TeamsMetadata": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ObjectEntity"
          }
        }
      }
    },
    "v1TeamsSummary": {
      "description": "Deprecated, Use v1UsersSummaryList - Returns User summary",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TeamSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1TeamsSummaryList": {
      "description": "Returns Team summary",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TeamSummary"
          }
        }
      }
    },
    "v1TeamsSummarySpec": {
      "description": "Teams filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1TeamsFilterSpec"
        },
        "sort": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TeamSummarySortSpec"
          }
        }
      }
    },
    "v1Tenant": {
      "description": "Tenant",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TenantSpec"
        },
        "status": {
          "$ref": "#/definitions/v1TenantStatus"
        }
      }
    },
    "v1TenantActivate": {
      "description": "Activate/Deactivate tenant",
      "type": "object",
      "properties": {
        "isActive": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "v1TenantAddressPatch": {
      "description": "Tenant Address",
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/v1Address"
        }
      }
    },
    "v1TenantAssetCert": {
      "description": "tenant cert",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1Cert"
        }
      }
    },
    "v1TenantAssetCerts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TenantAssetCert"
          }
        }
      }
    },
    "v1TenantBasicEntity": {
      "description": "Tenant Basic param",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        }
      }
    },
    "v1TenantCleanUpStatus": {
      "description": "Tenant CleanUp Status",
      "type": "object",
      "properties": {
        "cleanUpError": {
          "type": "string"
        },
        "cleanUpStages": {
          "type": "string"
        },
        "cleanUpTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "cleanedResources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isCompleted": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isInProgress": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1TenantContractSpec": {
      "description": "Tenant contract settings",
      "type": "object",
      "required": [
        "isRequired",
        "isAccepted"
      ],
      "properties": {
        "acceptedTime": {
          "description": "If the contract is accepted offline, set the accepted time",
          "$ref": "#/definitions/v1Time"
        },
        "isAccepted": {
          "description": "If the contract is accepted offline, then set this field to true",
          "type": "boolean"
        },
        "isRequired": {
          "description": "Is the contract required, for on-prem installation it will be false",
          "type": "boolean"
        }
      }
    },
    "v1TenantDomains": {
      "description": "Tenant domains",
      "type": "object",
      "properties": {
        "domains": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1TenantEmailPatch": {
      "description": "Tenant EmailId",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        }
      }
    },
    "v1TenantEntity": {
      "description": "Tenant Entity",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TenantSpecEntity"
        }
      }
    },
    "v1TenantFreemiumUsage": {
      "type": "object",
      "properties": {
        "isFreemium": {
          "type": "boolean",
          "x-omitempty": false
        },
        "limit": {
          "$ref": "#/definitions/v1FreemiumUsageLimit"
        },
        "usage": {
          "$ref": "#/definitions/v1FreemiumUsage"
        }
      }
    },
    "v1TenantOidcClaims": {
      "type": "object",
      "properties": {
        "Email": {
          "type": "string",
          "x-omitempty": false
        },
        "FirstName": {
          "type": "string",
          "x-omitempty": false
        },
        "LastName": {
          "type": "string",
          "x-omitempty": false
        },
        "SpectroTeam": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1TenantOidcClientSpec": {
      "description": "Tenant",
      "type": "object",
      "properties": {
        "callbackUrl": {
          "type": "string",
          "x-omitempty": false
        },
        "clientId": {
          "type": "string",
          "x-omitempty": false
        },
        "clientSecret": {
          "type": "string",
          "x-omitempty": false
        },
        "defaultTeams": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "isSsoEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "issuerUrl": {
          "description": "the issuer is the URL identifier for the service",
          "type": "string",
          "x-omitempty": false
        },
        "logoutUrl": {
          "type": "string",
          "x-omitempty": false
        },
        "requiredClaims": {
          "$ref": "#/definitions/v1TenantOidcClaims"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "syncSsoTeams": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1TenantPasswordPolicyEntity": {
      "description": "Tenant Password Policy Entity",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "expiryDurationInDays": {
          "type": "integer"
        },
        "firstReminderInDays": {
          "type": "integer"
        },
        "isRegex": {
          "type": "boolean"
        },
        "minLength": {
          "type": "integer"
        },
        "minNumOfBlockLetters": {
          "type": "integer"
        },
        "minNumOfDigits": {
          "type": "integer"
        },
        "minNumOfSmallLetters": {
          "type": "integer"
        },
        "minNumOfSpecialCharacters": {
          "type": "integer"
        },
        "regex": {
          "type": "string"
        },
        "updateTimestamp": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1TenantSamlRequestSpec": {
      "description": "Tenant",
      "type": "object",
      "properties": {
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TenantSamlSpecAttribute"
          }
        },
        "defaultTeams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "federationMetadata": {
          "type": "string"
        },
        "identityProvider": {
          "type": "string"
        },
        "isSingleLogoutEnabled": {
          "type": "boolean"
        },
        "isSsoEnabled": {
          "type": "boolean"
        },
        "nameIdFormat": {
          "type": "string"
        },
        "syncSsoTeams": {
          "type": "boolean"
        }
      }
    },
    "v1TenantSamlSpec": {
      "description": "Tenant",
      "type": "object",
      "properties": {
        "acsUrl": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TenantSamlSpecAttribute"
          }
        },
        "audienceUrl": {
          "description": "same as entity id",
          "type": "string"
        },
        "certificate": {
          "description": "certificate for slo",
          "type": "string"
        },
        "defaultTeams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entityId": {
          "type": "string"
        },
        "federationMetadata": {
          "type": "string"
        },
        "identityProvider": {
          "type": "string"
        },
        "isSingleLogoutEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isSsoEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "issuer": {
          "description": "same as entity id",
          "type": "string"
        },
        "nameIdFormat": {
          "type": "string"
        },
        "serviceProviderMetadata": {
          "type": "string"
        },
        "singleLogoutUrl": {
          "description": "slo url",
          "type": "string",
          "x-omitempty": false
        },
        "syncSsoTeams": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1TenantSamlSpecAttribute": {
      "type": "object",
      "properties": {
        "attributeValue": {
          "type": "string"
        },
        "mappedAttribute": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nameFormat": {
          "type": "string"
        }
      }
    },
    "v1TenantSelfSignUpSpec": {
      "description": "Tenant sign up data",
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "emailId",
        "orgName"
      ],
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "notifyTenantAdmin": {
          "type": "boolean"
        },
        "orgName": {
          "type": "string"
        }
      }
    },
    "v1TenantSpec": {
      "description": "Tenant Spec",
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/v1Address"
        },
        "authType": {
          "type": "string"
        },
        "orgEmailId": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "planUid": {
          "type": "string"
        }
      }
    },
    "v1TenantSpecEntity": {
      "description": "Tenant Entity input",
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/v1Address"
        },
        "authType": {
          "type": "string"
        },
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "orgEmailId": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1TenantStatus": {
      "description": "Tenant Status",
      "type": "object",
      "properties": {
        "cleanUpStatus": {
          "$ref": "#/definitions/v1TenantCleanUpStatus"
        },
        "isActive": {
          "type": "boolean",
          "x-omitempty": false
        },
        "toBeDeleted": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1TenantUsage": {
      "description": "Tenant usage",
      "properties": {
        "orgName": {
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        },
        "usedAlloyCredits": {
          "type": "number",
          "format": "float64"
        },
        "usedPureCredits": {
          "type": "number",
          "format": "float64"
        }
      }
    },
    "v1Tenants": {
      "description": "Tenants list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Tenant"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1TenantsAccountsNas": {
      "type": "object",
      "properties": {
        "failures": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "success": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1TencentAccount": {
      "description": "Tencent cloud account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TencentCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1TencentAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TencentAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1TencentAvailabilityZone": {
      "description": "Tencent availability zone",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zoneId": {
          "type": "string"
        }
      }
    },
    "v1TencentAvailabilityZones": {
      "type": "object",
      "required": [
        "zones"
      ],
      "properties": {
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TencentAvailabilityZone"
          }
        }
      }
    },
    "v1TencentCloudAccount": {
      "type": "object",
      "required": [
        "secretId",
        "secretKey"
      ],
      "properties": {
        "secretId": {
          "description": "Tencent api secretID and secretKey",
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "v1TencentCloudClusterConfigEntity": {
      "description": "Tencent cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1TencentClusterConfig"
        }
      }
    },
    "v1TencentCloudConfig": {
      "description": "TencentCloudConfig is the Schema for the tencentcloudconfigs API",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TencentCloudConfigSpec"
        }
      }
    },
    "v1TencentCloudConfigSpec": {
      "description": "TencentCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains TencentCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1TencentClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TencentMachinePoolConfig"
          }
        }
      }
    },
    "v1TencentClusterConfig": {
      "description": "cluster level configuration for tencent cloud, same for all machinepools",
      "type": "object",
      "required": [
        "region"
      ],
      "properties": {
        "endpointAccess": {
          "description": "Endpoints specifies access to this cluster's control plane endpoints",
          "$ref": "#/definitions/v1EndpointAccess"
        },
        "region": {
          "type": "string"
        },
        "sshKeyIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "vpcID": {
          "description": "VPC Id to deploy cluster into should have one public and one private subnet for the the cluster creation, this field is optional, If VPC Id is not provided a fully managed VPC will be created",
          "type": "string"
        }
      }
    },
    "v1TencentInstanceTypes": {
      "type": "object",
      "properties": {
        "instanceTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InstanceType"
          }
        }
      }
    },
    "v1TencentKeypair": {
      "description": "Tencent Keypair",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "publickey": {
          "type": "string"
        }
      }
    },
    "v1TencentKeypairs": {
      "type": "object",
      "properties": {
        "keypairs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TencentKeypair"
          }
        }
      }
    },
    "v1TencentMachine": {
      "description": "Tencent cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TencentMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1TencentMachinePoolCloudConfigEntity": {
      "type": "object",
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64",
          "maximum": 2000,
          "minimum": 1
        },
        "subnetIds": {
          "description": "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"ap-guangzhou-6\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first subnet from the AZ will be picked up for deployment",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1TencentMachinePoolConfig": {
      "type": "object",
      "properties": {
        "additionalLabels": {
          "description": "AdditionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "azs": {
          "description": "AZs is only used for dynamic placement",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "subnetIds": {
          "description": "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"ap-guangzhou-6\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first subnet from the AZ will be picked up for deployment",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "taints": {
          "description": "master or worker taints",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean"
        }
      }
    },
    "v1TencentMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1TencentMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1TencentMachineSpec": {
      "description": "Tencent cloud VM definition spec",
      "type": "object",
      "required": [
        "nics",
        "instanceType",
        "imageId"
      ],
      "properties": {
        "dnsName": {
          "type": "string"
        },
        "imageId": {
          "type": "string"
        },
        "instanceType": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TencentNic"
          }
        },
        "securityGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subnetId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vpcId": {
          "type": "string"
        },
        "zoneId": {
          "type": "string"
        }
      }
    },
    "v1TencentMachines": {
      "description": "Tencent machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1TencentMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1TencentNic": {
      "description": "Tencent network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1TencentRegion": {
      "description": "Tencent region",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1TencentRegions": {
      "type": "object",
      "required": [
        "regions"
      ],
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TencentRegion"
          }
        }
      }
    },
    "v1TencentSecurityGroup": {
      "description": "Tencent Security Group",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        }
      }
    },
    "v1TencentSecurityGroups": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TencentSecurityGroup"
          }
        }
      }
    },
    "v1TencentStorageTypes": {
      "type": "object",
      "properties": {
        "storageTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1StorageType"
          }
        }
      }
    },
    "v1TencentSubnet": {
      "description": "Tencent Subnet",
      "type": "object",
      "properties": {
        "cidrBlock": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subnetId": {
          "type": "string"
        }
      }
    },
    "v1TencentVpc": {
      "description": "Tencent Vpc",
      "type": "object",
      "required": [
        "vpcId"
      ],
      "properties": {
        "cidrBlock": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TencentSubnet"
          }
        },
        "vpcId": {
          "type": "string"
        }
      }
    },
    "v1TencentVpcs": {
      "type": "object",
      "required": [
        "vpcs"
      ],
      "properties": {
        "vpcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TencentVpc"
          }
        }
      }
    },
    "v1TierPrice": {
      "description": "tier price",
      "properties": {
        "alloyPricing": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PriceRange"
          }
        },
        "purePricing": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1PriceRange"
          }
        }
      }
    },
    "v1Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "type": "string",
      "format": "date-time"
    },
    "v1TotalClusterRate": {
      "description": "Cluster total estimated rate information",
      "type": "object",
      "properties": {
        "compute": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "storage": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "format": "float64",
          "x-omitempty": false
        }
      }
    },
    "v1TotalResourceUsage": {
      "description": "Total Resource Usage",
      "properties": {
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ProjectResourceUsage"
          }
        },
        "totalAlloyCpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        },
        "totalPureCpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1TransferJob": {
      "description": "transfer job details",
      "type": "object",
      "properties": {
        "finishTime": {
          "$ref": "#/definitions/v1Time"
        },
        "folder": {
          "type": "string"
        },
        "isCompleted": {
          "type": "boolean"
        },
        "message": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string"
        },
        "status": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Uid": {
      "type": "object",
      "required": [
        "uid"
      ],
      "properties": {
        "uid": {
          "type": "string"
        }
      }
    },
    "v1UidRoleSummary": {
      "type": "object",
      "properties": {
        "inheritedRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1UidSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1Uids": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1Uid"
      }
    },
    "v1UpdateStrategy": {
      "description": "UpdatesStrategy will be used to translate to RollingUpdateStrategy of a MachineDeployment We'll start with default values for the translation, can expose more details later Following is details of parameters translated from the type ScaleOut =\u003e maxSurge=1, maxUnavailable=0 ScaleIn =\u003e maxSurge=0, maxUnavailable=1",
      "type": "object",
      "properties": {
        "type": {
          "description": "update strategy, either ScaleOut or ScaleIn if empty, will default to RollingUpdateScaleOut",
          "type": "string",
          "enum": [
            "RollingUpdateScaleOut",
            "RollingUpdateScaleIn"
          ]
        }
      }
    },
    "v1UpdateTenantStatus": {
      "description": "Update tenant status",
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "stage": {
          "type": "string"
        }
      }
    },
    "v1Updated": {
      "description": "The resource was updated successfully"
    },
    "v1UpdatedMsg": {
      "description": "Update response with message",
      "properties": {
        "msg": {
          "type": "string"
        }
      }
    },
    "v1Upgrades": {
      "description": "Upgrades represent the reason of the last upgrade that took place",
      "type": "object",
      "properties": {
        "reason": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timestamp": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1User": {
      "description": "User",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserSpec"
        },
        "status": {
          "$ref": "#/definitions/v1UserStatus"
        }
      }
    },
    "v1UserActivateInfo": {
      "type": "object",
      "properties": {
        "passwordToken": {
          "type": "string"
        }
      }
    },
    "v1UserActivateLink": {
      "type": "object",
      "properties": {
        "activationLink": {
          "type": "string"
        }
      }
    },
    "v1UserAssetClusterRbacEntity": {
      "description": "User asset cluster rbac input entity for create",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterRbacSpec"
        }
      }
    },
    "v1UserAssetSsh": {
      "description": "User asset ssh",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetSshSpec"
        }
      }
    },
    "v1UserAssetSshEntity": {
      "description": "User asset input entity for create",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetSshSpec"
        }
      }
    },
    "v1UserAssetSshSpec": {
      "description": "User asset ssh spec",
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string"
        }
      }
    },
    "v1UserAssetsLocation": {
      "description": "User asset location",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetsLocationSpec"
        }
      }
    },
    "v1UserAssetsLocationGcp": {
      "description": "User asset Gcp location input entity to create",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetsLocationGcpSpec"
        }
      }
    },
    "v1UserAssetsLocationGcpSpec": {
      "description": "User asset Gcp location spec",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/v1GcpStorageConfig"
        },
        "isDefault": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1UserAssetsLocationS3": {
      "description": "User asset S3 location input entity to create",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetsLocationS3Spec"
        }
      }
    },
    "v1UserAssetsLocationS3Spec": {
      "description": "User asset S3 location spec",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/v1S3StorageConfig"
        },
        "isDefault": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1UserAssetsLocationSpec": {
      "description": "User asset location spec",
      "type": "object",
      "properties": {
        "isDefault": {
          "type": "boolean"
        },
        "storage": {
          "$ref": "#/definitions/v1LocationType"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1UserAssetsLocations": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserAssetsLocation"
          }
        }
      }
    },
    "v1UserAssetsSsh": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserAssetSsh"
          }
        }
      }
    },
    "v1UserEntity": {
      "description": "User",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserSpecEntity"
        }
      }
    },
    "v1UserMe": {
      "description": "User information wrt permissions",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserSpec"
        },
        "status": {
          "$ref": "#/definitions/v1UserMeStatus"
        }
      }
    },
    "v1UserMeStatus": {
      "description": "User status with permissions",
      "properties": {
        "activationLink": {
          "description": "Contains activation link for the user",
          "type": "string"
        },
        "isActive": {
          "description": "Specifies if user account is active/disabled",
          "type": "boolean"
        },
        "isContractAccepted": {
          "description": "Specifies if user account has accepted the contract",
          "type": "boolean",
          "x-omitempty": false
        },
        "projectPermissions": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "tenant": {
          "description": "users's tenant information",
          "$ref": "#/definitions/v1UserMeTenant"
        },
        "tenantPermissions": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1UserMeTenant": {
      "type": "object",
      "properties": {
        "orgName": {
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        }
      }
    },
    "v1UserMeta": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "org": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1UserMetaEntity": {
      "description": "User meta entity",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1UserPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1HttpPatch"
      }
    },
    "v1UserProfile": {
      "description": "User Profile",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserProfileSpec"
        },
        "status": {
          "$ref": "#/definitions/v1UserProfileStatus"
        }
      }
    },
    "v1UserProfileSpec": {
      "description": "User Profile specifications",
      "properties": {
        "emailId": {
          "description": "User's email id",
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      }
    },
    "v1UserProfileStatus": {
      "description": "User Profile status",
      "properties": {
        "lastPasswordPolicyMail": {
          "description": "user's last password policy time",
          "$ref": "#/definitions/v1Time"
        },
        "lastPasswordUpdate": {
          "description": "user's last password update time",
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1UserProfiles": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserProfile"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1UserRoleMap": {
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1UserRoleUIDs": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1UserRolesEntity": {
      "type": "object",
      "properties": {
        "inheritedRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        }
      }
    },
    "v1UserSpec": {
      "description": "User specifications",
      "properties": {
        "emailId": {
          "description": "User's email id",
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1UserSpecEntity": {
      "description": "User Entity input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1UserSpecSummary": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          }
        }
      }
    },
    "v1UserStatus": {
      "description": "User status",
      "properties": {
        "activationLink": {
          "description": "provides the link to activate or reset the user password",
          "type": "string",
          "x-omitempty": false
        },
        "isActive": {
          "description": "Specifies if user account is active/disabled",
          "type": "boolean",
          "x-omitempty": false
        },
        "lastSignIn": {
          "description": "user's last sign in time",
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1UserSummary": {
      "description": "User summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserSpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1UserStatus"
        }
      }
    },
    "v1UserSummarySortFields": {
      "type": "string",
      "enum": [
        "name",
        "creationTimestamp"
      ],
      "x-nullable": true
    },
    "v1UserSummarySortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1UserSummarySortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1UserToken": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "Authorization": {
          "type": "string"
        }
      }
    },
    "v1UserUpdateEntity": {
      "description": "User",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserUpdateSpecEntity"
        }
      }
    },
    "v1UserUpdateSpecEntity": {
      "description": "User Entity input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Users": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1User"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1UsersFilterSpec": {
      "description": "Users filter spec",
      "properties": {
        "emailId": {
          "$ref": "#/definitions/v1FilterString"
        },
        "name": {
          "$ref": "#/definitions/v1FilterString"
        }
      }
    },
    "v1UsersMetadata": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserMetaEntity"
          }
        }
      }
    },
    "v1UsersSummary": {
      "description": "Deprecated, Use v1UsersSummaryList - Returns User summary",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1UsersSummaryList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserSummary"
          }
        }
      }
    },
    "v1UsersSummarySpec": {
      "description": "Users filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1UsersFilterSpec"
        },
        "sort": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1UserSummarySortSpec"
          }
        }
      }
    },
    "v1V1SystemAdminEmail": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "v1V1SystemAdminPasswordResetEntity": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "newPassword": {
          "type": "string"
        },
        "oldPassword": {
          "type": "string"
        }
      }
    },
    "v1VirtualNetwork": {
      "description": "Azure virtual network",
      "type": "object",
      "properties": {
        "addressSpaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Subnet"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1VsphereAccount": {
      "description": "VSphere account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VsphereCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      }
    },
    "v1VsphereAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1VsphereAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1VsphereCloudAccount": {
      "type": "object",
      "required": [
        "vcenterServer",
        "username",
        "password"
      ],
      "properties": {
        "insecure": {
          "description": "Insecure is a flag that controls whether or not to validate the vSphere server's certificate.",
          "type": "boolean",
          "x-omitempty": false
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "vcenterServer": {
          "description": "VcenterServer is the address of the vSphere endpoint",
          "type": "string"
        }
      }
    },
    "v1VsphereCloudClusterConfigEntity": {
      "description": "vSphere cloud cluster config entity",
      "type": "object",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1VsphereClusterConfigEntity"
        }
      }
    },
    "v1VsphereCloudConfig": {
      "description": "VsphereCloudConfig is the Schema for the vspherecloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VsphereCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1VsphereCloudConfigStatus"
        }
      }
    },
    "v1VsphereCloudConfigSpec": {
      "description": "VsphereCloudConfigSpec defines the desired state of VsphereCloudConfig",
      "type": "object",
      "required": [
        "clusterConfig",
        "machinePoolConfig"
      ],
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains VsphereCloudAccount",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1VsphereClusterConfig"
        },
        "edgeHostRef": {
          "description": "Appliance (Edge Host) uid for Edge env",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VsphereMachinePoolConfig"
          }
        }
      }
    },
    "v1VsphereCloudConfigStatus": {
      "description": "VsphereCloudConfigStatus defines the observed state of VsphereCloudConfig",
      "type": "object",
      "properties": {
        "ansibleDigest": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "isAddonLayer": {
          "description": "addon layers present in spc",
          "type": "boolean"
        },
        "lastOVACreated": {
          "type": "string"
        },
        "lastVMExported": {
          "type": "string"
        },
        "nodeImage": {
          "$ref": "#/definitions/v1VsphereImage"
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "uploadOvaS3": {
          "description": "UploadOVAS3 will hold last image name which uploaded to S3",
          "type": "string"
        },
        "useCapiImage": {
          "description": "If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      }
    },
    "v1VsphereCloudDatacenter": {
      "description": "Vsphere datacenter",
      "type": "object",
      "properties": {
        "computeClusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VsphereComputeCluster"
          }
        },
        "folders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1VsphereClusterConfig": {
      "type": "object",
      "required": [
        "placement"
      ],
      "properties": {
        "controlPlaneEndpoint": {
          "description": "The optional control plane endpoint, which can be an IP or FQDN",
          "$ref": "#/definitions/v1ControlPlaneEndPoint"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "placement": {
          "description": "Placement configuration Placement config in ClusterConfig serve as default values for each MachinePool",
          "$ref": "#/definitions/v1VspherePlacementConfig"
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys for the 'spectro' user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "staticIp": {
          "description": "whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name",
          "type": "boolean"
        }
      }
    },
    "v1VsphereClusterConfigEntity": {
      "type": "object",
      "required": [
        "placement"
      ],
      "properties": {
        "controlPlaneEndpoint": {
          "description": "The optional control plane endpoint, which can be an IP or FQDN",
          "$ref": "#/definitions/v1ControlPlaneEndPoint"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "placement": {
          "description": "Placement configuration Placement config in ClusterConfig serve as default values for each MachinePool",
          "$ref": "#/definitions/v1VspherePlacementConfigEntity"
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys for the 'spectro' user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "staticIp": {
          "description": "whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name",
          "type": "boolean"
        }
      }
    },
    "v1VsphereComputeCluster": {
      "description": "Vsphere compute cluster",
      "type": "object",
      "properties": {
        "datastores": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "networks": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "resourcePools": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1VsphereComputeClusterResources": {
      "description": "Datacenter and its resources like datastore, resoucepool, folders",
      "type": "object",
      "properties": {
        "computecluster": {
          "$ref": "#/definitions/v1VsphereComputeCluster"
        },
        "datacenter": {
          "type": "string"
        }
      }
    },
    "v1VsphereDatacenter": {
      "description": "Array of Datacenter with computeclusters",
      "type": "object",
      "properties": {
        "computeclusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "datacenter": {
          "type": "string"
        },
        "folders": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1VsphereDatacenters": {
      "description": "Array of Datacenters with computeclusters",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1VsphereDatacenter"
          }
        }
      }
    },
    "v1VsphereDnsMapping": {
      "description": "VSphere Dns Mapping",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VsphereDnsMappingSpec"
        }
      }
    },
    "v1VsphereDnsMappingSpec": {
      "description": "Vsphere Dns Mapping Spec",
      "type": "object",
      "required": [
        "privateGatewayUid",
        "datacenter",
        "network",
        "dnsName"
      ],
      "properties": {
        "datacenter": {
          "type": "string"
        },
        "dnsName": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "networkUrl": {
          "type": "string",
          "readOnly": true
        },
        "privateGatewayUid": {
          "type": "string"
        }
      }
    },
    "v1VsphereDnsMappings": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1VsphereDnsMapping"
          }
        }
      }
    },
    "v1VsphereEnv": {
      "description": "Vsphere environment",
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        }
      }
    },
    "v1VsphereImage": {
      "description": "A generated Image should always be a template which resides inside vsphere Will not generate a OVA file out of the image OVA can be used as a base input of the os pack, that's internal to the pack",
      "type": "object",
      "properties": {
        "fullPath": {
          "description": "full path of the image template location it contains datacenter/folder/templatename etc eg: /mydc/vm/template/spectro/workerpool-1-centos",
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1VsphereInstanceType": {
      "type": "object",
      "required": [
        "numCPUs",
        "memoryMiB",
        "diskGiB"
      ],
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a virtual machine's disk, in GiB. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int32"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int64"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of virtual processors in a virtual machine. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1VsphereMachine": {
      "description": "vSphere cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VsphereMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1VsphereMachinePoolCloudConfigEntity": {
      "properties": {
        "instanceType": {
          "$ref": "#/definitions/v1VsphereInstanceType"
        },
        "placements": {
          "description": "Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VspherePlacementConfigEntity"
          }
        }
      }
    },
    "v1VsphereMachinePoolConfig": {
      "type": "object",
      "required": [
        "isControlPlane",
        "instanceType"
      ],
      "properties": {
        "additionalLabels": {
          "description": "additionalLabels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "additionalTags": {
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "instanceType": {
          "description": "InstanceType defines the required CPU, Memory, Storage",
          "$ref": "#/definitions/v1VsphereInstanceType"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "placements": {
          "description": "Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VspherePlacementConfig"
          }
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "taints": {
          "description": "master or worker taints",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1Taint"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1VsphereMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1VsphereMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1VsphereMachineSpec": {
      "description": "vSphere cloud VM definition spec",
      "type": "object",
      "required": [
        "vcenterServer",
        "nics",
        "placement"
      ],
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VsphereImage"
          }
        },
        "instanceType": {
          "$ref": "#/definitions/v1VsphereInstanceType"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VsphereNic"
          }
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "placement": {
          "description": "Placement configuration",
          "$ref": "#/definitions/v1VspherePlacementConfig"
        },
        "vcenterServer": {
          "description": "VcenterServer is the address of the vSphere endpoint",
          "type": "string"
        }
      }
    },
    "v1VsphereMachines": {
      "description": "vSphere machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1VsphereMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      }
    },
    "v1VsphereNetworkConfig": {
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "ipPool": {
          "description": "when staticIP=true, need to provide IPPool",
          "$ref": "#/definitions/v1IPPool"
        },
        "networkName": {
          "description": "NetworkName is the name of the network in which VMs are created/located.",
          "type": "string"
        },
        "parentPoolRef": {
          "description": "ParentPoolRef reference to the ParentPool which allocates IPs for this IPPool",
          "$ref": "#/definitions/v1ObjectReference"
        },
        "staticIp": {
          "description": "support dhcp or static IP, if false, use DHCP",
          "type": "boolean"
        }
      }
    },
    "v1VsphereNetworkConfigEntity": {
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "networkName": {
          "description": "NetworkName is the name of the network in which VMs are created/located.",
          "type": "string"
        },
        "parentPoolUid": {
          "description": "ParentPoolRef Uid to the ParentPool which allocates IPs for this IPPool",
          "type": "string"
        },
        "staticIp": {
          "description": "support dhcp or static IP, if false, use DHCP",
          "type": "boolean"
        }
      }
    },
    "v1VsphereNic": {
      "description": "vSphere network interface",
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "macAddress": {
          "type": "string"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1VsphereOverlordClusterConfigEntity": {
      "type": "object",
      "properties": {
        "controlPlaneEndpoint": {
          "description": "The optional control plane endpoint, which can be an IP or FQDN",
          "$ref": "#/definitions/v1ControlPlaneEndPoint"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "placements": {
          "description": "Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VspherePlacementConfigEntity"
          }
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys for the 'spectro' user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "staticIp": {
          "description": "whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name",
          "type": "boolean"
        }
      }
    },
    "v1VspherePlacementConfig": {
      "description": "Both ClusterConfig and MachinePoolConfig will have PlacementConfig MachinePoolconfig.Placements will overwrite values defined in ClusterConfig Currently the convention is: Datacenter / Folder / ImageTemplateFolder / Network should be defined at ClusterConfig Cluster / ResourcePool / Datastore / Network is defined at MachinePool ClusterConfig Network should only indicate use DHCP or not MachinePool Network should contain the actual network and IPPool",
      "type": "object",
      "properties": {
        "cluster": {
          "description": "Cluster is the computecluster in vsphere",
          "type": "string"
        },
        "datacenter": {
          "description": "Datacenter is the name or inventory path of the datacenter where this machine's VM is created/located.",
          "type": "string"
        },
        "datastore": {
          "description": "Datastore is the datastore in which VMs are created/located.",
          "type": "string"
        },
        "folder": {
          "description": "Folder is the folder in which VMs are created/located.",
          "type": "string"
        },
        "imageTemplateFolder": {
          "description": "ImageTemplateFolder is the folder in which VMs templates are created/located. if empty will use default value spectro-templates",
          "type": "string"
        },
        "network": {
          "description": "network info",
          "$ref": "#/definitions/v1VsphereNetworkConfig"
        },
        "resourcePool": {
          "description": "ResourcePool is the resource pool within the above computecluster Cluster",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "StoragePolicyName of the storage policy to use with this Virtual Machine",
          "type": "string"
        },
        "uid": {
          "description": "UID for this placement",
          "type": "string"
        }
      }
    },
    "v1VspherePlacementConfigEntity": {
      "description": "Both ClusterConfig and MachinePoolConfig will have PlacementConfig MachinePoolconfig.Placements will overwrite values defined in ClusterConfig Currently the convention is: Datacenter / Folder / ImageTemplateFolder / Network should be defined at ClusterConfig Cluster / ResourcePool / Datastore / Network is defined at MachinePool ClusterConfig Network should only indicate use DHCP or not MachinePool Network should contain the actual network and IPPool",
      "type": "object",
      "properties": {
        "cluster": {
          "description": "Cluster is the computecluster in vsphere",
          "type": "string"
        },
        "datacenter": {
          "description": "Datacenter is the name or inventory path of the datacenter where this machine's VM is created/located.",
          "type": "string"
        },
        "datastore": {
          "description": "Datastore is the datastore in which VMs are created/located.",
          "type": "string"
        },
        "folder": {
          "description": "Folder is the folder in which VMs are created/located.",
          "type": "string"
        },
        "imageTemplateFolder": {
          "description": "ImageTemplateFolder is the folder in which VMs templates are created/located. if empty will use default value spectro-templates",
          "type": "string"
        },
        "network": {
          "description": "network info",
          "$ref": "#/definitions/v1VsphereNetworkConfigEntity"
        },
        "resourcePool": {
          "description": "ResourcePool is the resource pool within the above computecluster Cluster",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "StoragePolicyName of the storage policy to use with this Virtual Machine",
          "type": "string"
        },
        "uid": {
          "description": "UID for this placement",
          "type": "string"
        }
      }
    },
    "v1Workspace": {
      "description": "Workspace information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1WorkspaceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1WorkspaceStatus"
        }
      }
    },
    "v1WorkspaceBackup": {
      "description": "Workspace backup",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1WorkspaceBackupSpec"
        },
        "status": {
          "$ref": "#/definitions/v1WorkspaceBackupStatus"
        }
      }
    },
    "v1WorkspaceBackupClusterRef": {
      "description": "Workspace backup cluster ref",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "clusterUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceBackupConfig": {
      "description": "Workspace backup config",
      "properties": {
        "backupConfig": {
          "$ref": "#/definitions/v1ClusterBackupConfig"
        },
        "clusterUids": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "includeAllClusters": {
          "type": "boolean"
        }
      }
    },
    "v1WorkspaceBackupConfigEntity": {
      "description": "Cluster backup config",
      "properties": {
        "backupConfig": {
          "$ref": "#/definitions/v1ClusterBackupConfig"
        },
        "clusterUids": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "includeAllClusters": {
          "type": "boolean"
        }
      }
    },
    "v1WorkspaceBackupDeleteEntity": {
      "description": "Cluster backup delete config",
      "properties": {
        "clusterConfigs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1WorkspaceBackupClusterRef"
          }
        },
        "requestUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceBackupSpec": {
      "description": "Workspace backup spec",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1WorkspaceBackupConfig"
        },
        "workspaceUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceBackupState": {
      "description": "Workspace backup state",
      "properties": {
        "deleteState": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceBackupStatus": {
      "description": "Workspace backup status",
      "properties": {
        "workspaceBackupStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceBackupStatusMeta"
          }
        }
      }
    },
    "v1WorkspaceBackupStatusConfig": {
      "description": "Workspace backup status config",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "durationInHours": {
          "type": "number",
          "format": "int64"
        },
        "includeAllDisks": {
          "type": "boolean"
        },
        "includeClusterResources": {
          "type": "boolean"
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1WorkspaceBackupStatusMeta": {
      "description": "Workspace backup status meta",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "requestUid": {
          "type": "string"
        },
        "workspaceBackupConfig": {
          "$ref": "#/definitions/v1WorkspaceClusterBackupConfig"
        }
      }
    },
    "v1WorkspaceClusterBackupConfig": {
      "description": "Workspace cluster backup config",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "backupState": {
          "$ref": "#/definitions/v1WorkspaceBackupState"
        },
        "backupTime": {
          "$ref": "#/definitions/v1Time"
        },
        "clusterBackupRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterBackupResponse"
          }
        },
        "config": {
          "$ref": "#/definitions/v1WorkspaceBackupStatusConfig"
        },
        "requestTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1WorkspaceClusterBackupResponse": {
      "description": "Workspace cluster backup response",
      "properties": {
        "backupStatusMeta": {
          "$ref": "#/definitions/v1BackupStatusMeta"
        },
        "backupUid": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "clusterUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceClusterNamespace": {
      "description": "Workspace cluster namespace",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespaceResourceAllocation": {
          "$ref": "#/definitions/v1WorkspaceNamespaceResourceAllocation"
        }
      }
    },
    "v1WorkspaceClusterRef": {
      "description": "Workspace cluster reference",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "clusterUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceClusterRestoreConfig": {
      "description": "Workspace cluster restore config",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "clusterRestoreRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterRestoreResponse"
          }
        },
        "restoreState": {
          "$ref": "#/definitions/v1WorkspaceRestoreState"
        },
        "restoreTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1WorkspaceClusterRestoreResponse": {
      "description": "Workspace cluster restore response",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "clusterUid": {
          "type": "string"
        },
        "restoreStatusMeta": {
          "$ref": "#/definitions/v1WorkspaceClusterRestoreState"
        },
        "restoreUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceClusterRestoreState": {
      "description": "Workspace cluster restore state",
      "properties": {
        "msg": {
          "type": "string"
        },
        "restoreTime": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceClusterWorkloadCronJobs": {
      "description": "Workspace cluster workload cronjobs summary",
      "type": "object",
      "properties": {
        "cronjobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadCronJob"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      }
    },
    "v1WorkspaceClusterWorkloadDaemonSets": {
      "description": "Workspace cluster workload daemonsets summary",
      "type": "object",
      "properties": {
        "daemonSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDaemonSet"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      }
    },
    "v1WorkspaceClusterWorkloadDeployments": {
      "description": "Workspace cluster workload deployments summary",
      "type": "object",
      "properties": {
        "deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDeployment"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      }
    },
    "v1WorkspaceClusterWorkloadJobs": {
      "description": "Workspace cluster workload jobs summary",
      "type": "object",
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadJob"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      }
    },
    "v1WorkspaceClusterWorkloadNamespaces": {
      "description": "Workspace cluster workload namespaces summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        },
        "namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadNamespace"
          }
        }
      }
    },
    "v1WorkspaceClusterWorkloadPods": {
      "description": "Workspace cluster workload pods summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        },
        "pods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPod"
          }
        }
      }
    },
    "v1WorkspaceClusterWorkloadStatefulSets": {
      "description": "Workspace cluster workload statefulsets summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        },
        "statefulSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadStatefulSet"
          }
        }
      }
    },
    "v1WorkspaceClustersWorkloadCronJobs": {
      "description": "Workspace clusters workload cronjobs summary",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadCronJobs"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1WorkspaceClustersWorkloadDaemonSets": {
      "description": "Workspace clusters workload statefulsets summary",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadDaemonSets"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1WorkspaceClustersWorkloadDeployments": {
      "description": "Workspace clusters workload deployments summary",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadDeployments"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1WorkspaceClustersWorkloadJobs": {
      "description": "Workspace clusters workload jobs summary",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadJobs"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1WorkspaceClustersWorkloadNamespaces": {
      "description": "Workspace clusters workload namespaces summary",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadNamespaces"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1WorkspaceClustersWorkloadPods": {
      "description": "Workspace clusters workload pods summary",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadPods"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1WorkspaceClustersWorkloadStatefulSets": {
      "description": "Workspace clusters workload statefulsets summary",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadStatefulSets"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      }
    },
    "v1WorkspaceEntity": {
      "description": "Workspace information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1WorkspaceSpec"
        }
      }
    },
    "v1WorkspaceError": {
      "description": "Workspace error",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceNamespaceResourceAllocation": {
      "description": "Workspace namespace resource allocation",
      "properties": {
        "clusterResourceAllocations": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterResourceAllocation"
          }
        },
        "defaultResourceAllocation": {
          "$ref": "#/definitions/v1WorkspaceResourceAllocation"
        }
      }
    },
    "v1WorkspacePolicies": {
      "description": "Workspace policies",
      "properties": {
        "backupPolicy": {
          "$ref": "#/definitions/v1WorkspaceBackupConfigEntity"
        }
      }
    },
    "v1WorkspaceResourceAllocation": {
      "description": "Workspace resource allocation",
      "properties": {
        "cpuCores": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": true
        },
        "memoryMiB": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": true
        }
      }
    },
    "v1WorkspaceResourceAllocationsEntity": {
      "description": "Workspace resource allocation update entity",
      "properties": {
        "clusterNamespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterNamespace"
          }
        },
        "clusterRefs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterRef"
          }
        }
      }
    },
    "v1WorkspaceRestore": {
      "description": "Workspace restore",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1WorkspaceRestoreSpec"
        },
        "status": {
          "$ref": "#/definitions/v1WorkspaceRestoreStatus"
        }
      }
    },
    "v1WorkspaceRestoreConfig": {
      "description": "Workspace cluster restore config",
      "required": [
        "backupName",
        "sourceClusterUid"
      ],
      "properties": {
        "backupName": {
          "type": "string"
        },
        "includeClusterResources": {
          "type": "boolean"
        },
        "includeNamespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "preserveNodePorts": {
          "type": "boolean"
        },
        "restorePVs": {
          "type": "boolean"
        },
        "sourceClusterUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceRestoreConfigEntity": {
      "description": "Cluster restore config",
      "required": [
        "backupRequestUid"
      ],
      "properties": {
        "backupRequestUid": {
          "type": "string"
        },
        "restoreConfigs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1WorkspaceRestoreConfig"
          }
        }
      }
    },
    "v1WorkspaceRestoreSpec": {
      "description": "Workspace restore spec",
      "properties": {
        "workspaceUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceRestoreState": {
      "description": "Workspace restore state",
      "properties": {
        "deleteState": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceRestoreStatus": {
      "description": "Workspace restore status",
      "properties": {
        "workspaceRestoreStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceRestoreStatusMeta"
          }
        }
      }
    },
    "v1WorkspaceRestoreStatusMeta": {
      "description": "Workspace restore status meta",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "requestUid": {
          "type": "string"
        },
        "workspaceRestoreConfig": {
          "$ref": "#/definitions/v1WorkspaceClusterRestoreConfig"
        }
      }
    },
    "v1WorkspaceRolesPatch": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceRolesUidSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceScopeRoles": {
      "description": "List all workspaces with the roles assigned to the users",
      "properties": {
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ProjectsWorkspaces"
          }
        }
      }
    },
    "v1WorkspaceSpec": {
      "description": "Workspace specifications",
      "properties": {
        "clusterNamespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterNamespace"
          }
        },
        "clusterRbacs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1ClusterRbac"
          }
        },
        "clusterRefs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterRef"
          }
        },
        "policies": {
          "$ref": "#/definitions/v1WorkspacePolicies"
        }
      }
    },
    "v1WorkspaceStatus": {
      "description": "Workspace status",
      "properties": {
        "errors": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1WorkspaceError"
          }
        }
      }
    },
    "v1WorkspaceWorkloadsFilter": {
      "description": "Workspace workloads filter",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "namespaces": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1WorkspaceWorkloadsSpec": {
      "description": "Workspace workloads spec",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1WorkspaceWorkloadsFilter"
        }
      }
    },
    "v1WorkspacesRoles": {
      "description": "Workspace users and their roles",
      "properties": {
        "inheritedRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceRolesUidSummary"
          }
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceRolesUidSummary"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1WorkspacesRolesPatch": {
      "type": "object",
      "properties": {
        "workspaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceRolesPatch"
          }
        }
      }
    },
    "v1YearlyUsage": {
      "description": "Yearly usage",
      "properties": {
        "billingPeriod": {
          "$ref": "#/definitions/v1InvoiceBillingPeriod"
        },
        "monthlyUsages": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1MonthlyUsage"
          }
        },
        "productUsages": {
          "$ref": "#/definitions/v1ProductUsage"
        }
      }
    },
    "v1ZoneEntity": {
      "description": "Azure zone entity",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    }
  }
}