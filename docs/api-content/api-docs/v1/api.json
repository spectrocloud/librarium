{
  "consumes": [
    "application/json"
  ],
  "definitions": {
    "URLEncodedBase64": {
      "format": "url-encoded-base64",
      "type": "string"
    },
    "V1AwsAccountSts": {
      "description": "AWS cloud account sts",
      "properties": {
        "accountId": {
          "description": "A 12-digit number, such as 123456789012, that uniquely identifies an AWS account",
          "type": "string"
        },
        "externalId": {
          "description": "It can be passed to the AssumeRole API of the STS. It can be used in the condition element in a role's trust policy, allowing the role to be assumed only when a certain value is present in the external ID",
          "type": "string"
        },
        "partition": {
          "$ref": "#/definitions/v1AwsPartition"
        }
      },
      "type": "object"
    },
    "V1AwsPropertiesValidateSpec": {
      "description": "AWS properties validate spec",
      "properties": {
        "region": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "V1EksPropertiesValidateSpec": {
      "description": "Eks properties validate spec",
      "properties": {
        "cloudAccountUid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "subnets": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "vpcId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "V1GcpPropertiesValidateSpec": {
      "description": "Gcp properties validate spec",
      "properties": {
        "azs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "cloudAccountUid": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "V1PasswordsBlockList": {
      "description": "List of blocklisted passwords",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1PasswordsBlockListEntity"
        }
      },
      "type": "object"
    },
    "urlEncodedBase64": {
      "format": "url-encoded-base64",
      "type": "string"
    },
    "v1.AzureAccountEntitySpec": {
      "properties": {
        "clientCloud": {
          "default": "public",
          "description": "Contains configuration for Azure cloud",
          "enum": [
            "azure-china",
            "azure-government",
            "public"
          ],
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.CloudWatchConfig": {
      "description": "Cloud watch config entity",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "group": {
          "description": "Name of the group",
          "type": "string"
        },
        "region": {
          "description": "Name of the region",
          "type": "string"
        },
        "stream": {
          "description": "Name of the stream",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1.DataSinkCloudWatchConfig": {
      "description": "Data sink cloud watch config",
      "properties": {
        "payload": {
          "$ref": "#/definitions/v1.DataSinkPayloads"
        },
        "spec": {
          "$ref": "#/definitions/v1.CloudWatchConfig"
        }
      },
      "type": "object"
    },
    "v1.DataSinkPayload": {
      "additionalProperties": {
        "type": "object"
      },
      "description": "Data sink payload entity",
      "properties": {
        "refUid": {
          "description": "RefUid of the data sink payload",
          "type": "string"
        },
        "timestamp": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "type": "object"
    },
    "v1.DataSinkPayloads": {
      "description": "List of data sink payload entities",
      "items": {
        "$ref": "#/definitions/v1.DataSinkPayload"
      },
      "type": "array",
      "uniqueItems": true
    },
    "v1.GcpAccountEntitySpec": {
      "properties": {
        "jsonCredentials": {
          "type": "string"
        },
        "jsonCredentialsFileUid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AADProfile": {
      "description": "AADProfile - AAD integration is managed by AKS.",
      "properties": {
        "adminGroupObjectIDs": {
          "description": "AdminGroupObjectIDs - AAD group object IDs that will have admin role of the cluster.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "managed": {
          "description": "Managed - Whether to enable managed AAD.",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "managed",
        "adminGroupObjectIDs"
      ],
      "type": "object"
    },
    "v1APIEndpoint": {
      "description": "APIEndpoint represents a reachable Kubernetes API endpoint.",
      "properties": {
        "host": {
          "description": "The hostname on which the API server is serving.",
          "type": "string"
        },
        "port": {
          "description": "The port on which the API server is serving.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "host",
        "port"
      ],
      "type": "object"
    },
    "v1APIServerAccessProfile": {
      "description": "APIServerAccessProfile - access profile for AKS API server.",
      "properties": {
        "authorizedIPRanges": {
          "description": "AuthorizedIPRanges - Authorized IP Ranges to kubernetes API server.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "enablePrivateCluster": {
          "description": "EnablePrivateCluster - Whether to create the cluster as a private cluster or not.",
          "type": "boolean"
        },
        "enablePrivateClusterPublicFQDN": {
          "description": "EnablePrivateClusterPublicFQDN - Whether to create additional public FQDN for private cluster or not.",
          "type": "boolean"
        },
        "privateDNSZone": {
          "description": "PrivateDNSZone - Private dns zone mode for private cluster.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AWSVolumeTypes": {
      "description": "AWS Volume Types",
      "properties": {
        "volumeTypes": {
          "items": {
            "$ref": "#/definitions/v1AwsVolumeType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AclMeta": {
      "description": "Resource access control information (Read-only response data)",
      "properties": {
        "ownerUid": {
          "description": "User or service uid which created the resource",
          "type": "string"
        },
        "projectUid": {
          "description": "Project's uid if the resource is under a project",
          "type": "string"
        },
        "tenantUid": {
          "description": "Tenant's uid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ActiveTenantResources": {
      "description": "Active resources of tenant",
      "properties": {
        "activeResources": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1Address": {
      "description": "Tenant Address",
      "properties": {
        "addressLine1": {
          "type": "string"
        },
        "addressLine2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "pincode": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Alert": {
      "properties": {
        "channels": {
          "items": {
            "$ref": "#/definitions/v1Channel"
          },
          "type": "array"
        },
        "component": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AlertEntity": {
      "properties": {
        "channels": {
          "items": {
            "$ref": "#/definitions/v1Channel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AlertNotificationStatus": {
      "properties": {
        "isSucceeded": {
          "type": "boolean",
          "x-omitempty": false
        },
        "message": {
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "type": "object"
    },
    "v1Alerts": {
      "items": {
        "$ref": "#/definitions/v1Alert"
      },
      "type": "array"
    },
    "v1ApiEndpoint": {
      "description": "APIEndpoint represents a reachable Kubernetes API endpoint.",
      "properties": {
        "host": {
          "description": "The hostname on which the API server is serving.",
          "type": "string"
        },
        "port": {
          "description": "The port on which the API server is serving.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "host",
        "port"
      ],
      "type": "object"
    },
    "v1ApiKey": {
      "description": "API key information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ApiKeySpec"
        },
        "status": {
          "$ref": "#/definitions/v1ApiKeyStatus"
        }
      },
      "type": "object"
    },
    "v1ApiKeyActiveState": {
      "properties": {
        "isActive": {
          "description": "API key active state",
          "type": "boolean"
        }
      }
    },
    "v1ApiKeyCreateResponse": {
      "description": "Response of create API key",
      "properties": {
        "apiKey": {
          "description": "Api key is used for authentication",
          "type": "string"
        },
        "uid": {
          "description": "User uid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ApiKeyEntity": {
      "description": "API key request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ApiKeySpecEntity"
        }
      },
      "type": "object"
    },
    "v1ApiKeySpec": {
      "description": "API key specification",
      "properties": {
        "expiry": {
          "$ref": "#/definitions/v1Time",
          "description": "API key expiry date"
        },
        "key": {
          "description": "Deprecated: API key field will be no longer available",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/v1ApiKeyUser",
          "description": "User to whom the API key is created"
        }
      },
      "type": "object"
    },
    "v1ApiKeySpecEntity": {
      "description": "API key specification",
      "properties": {
        "expiry": {
          "$ref": "#/definitions/v1Time",
          "description": "API key expiry date"
        },
        "userUid": {
          "description": "User to whom the API key has to be created",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ApiKeySpecUpdate": {
      "description": "API key update request specification",
      "properties": {
        "expiry": {
          "$ref": "#/definitions/v1Time",
          "description": "API key expiry date"
        }
      }
    },
    "v1ApiKeyStatus": {
      "description": "API key status",
      "properties": {
        "isActive": {
          "description": "API key active state",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1ApiKeyUpdate": {
      "description": "API key update request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ApiKeySpecUpdate"
        }
      },
      "type": "object"
    },
    "v1ApiKeyUser": {
      "description": "API key user information",
      "properties": {
        "firstName": {
          "description": "First name of user",
          "type": "string"
        },
        "lastName": {
          "description": "Last name of user",
          "type": "string"
        },
        "uid": {
          "description": "User uid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ApiKeys": {
      "properties": {
        "items": {
          "description": "List of API keys",
          "items": {
            "$ref": "#/definitions/v1ApiKey"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1ApiProfiler": {
      "properties": {
        "api": {
          "type": "string"
        },
        "endTime": {
          "format": "date-time",
          "type": "string"
        },
        "ops": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requestUid": {
          "type": "string"
        },
        "startTime": {
          "format": "date-time",
          "type": "string"
        },
        "timeTaken": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1AppDeployment": {
      "description": "Application deployment response",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AppDeploymentSpec"
        },
        "status": {
          "$ref": "#/definitions/v1AppDeploymentStatus"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentClusterGroupConfigEntity": {
      "description": "Application deployment cluster group config",
      "properties": {
        "targetSpec": {
          "$ref": "#/definitions/v1AppDeploymentClusterGroupTargetSpec"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentClusterGroupEntity": {
      "description": "Application deployment cluster group request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1AppDeploymentClusterGroupSpec"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentClusterGroupSpec": {
      "description": "Application deployment cluster group spec",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1AppDeploymentClusterGroupConfigEntity"
        },
        "profile": {
          "$ref": "#/definitions/v1AppDeploymentProfileEntity"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentClusterGroupTargetSpec": {
      "description": "Application deployment cluster group target spec",
      "properties": {
        "clusterGroupUid": {
          "description": "Application deployment cluster group uid",
          "type": "string"
        },
        "clusterLimits": {
          "$ref": "#/definitions/v1AppDeploymentTargetClusterLimits"
        },
        "clusterName": {
          "description": "Application deployment virtual cluster name",
          "type": "string"
        }
      },
      "required": [
        "clusterName",
        "clusterGroupUid"
      ],
      "type": "object"
    },
    "v1AppDeploymentClusterHealth": {
      "description": "Application deployment cluster health status",
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "v1AppDeploymentClusterRef": {
      "description": "Application deployment cluster reference",
      "properties": {
        "deploymentClusterType": {
          "description": "Application deployment source cluster type[ \"virtualCluster\", \"hostCluster\" ]",
          "enum": [
            "virtual",
            "host"
          ],
          "type": "string"
        },
        "name": {
          "description": "Application deployment cluster name",
          "type": "string"
        },
        "uid": {
          "description": "Application deployment cluster uid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentClusterRefSummary": {
      "description": "Application deployment cluster reference",
      "properties": {
        "deploymentClusterType": {
          "description": "Application deployment source cluster type[ \"virtualCluster\", \"hostCluster\" ]",
          "enum": [
            "virtual",
            "host"
          ],
          "type": "string"
        },
        "name": {
          "description": "Application deployment source cluster name",
          "type": "string"
        },
        "uid": {
          "description": "Application deployment source cluster uid",
          "type": "string"
        }
      }
    },
    "v1AppDeploymentClusterStatus": {
      "description": "Application deployment cluster status",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1AppDeploymentClusterHealth"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1AppDeploymentConfig": {
      "description": "Application deployment config response",
      "properties": {
        "target": {
          "$ref": "#/definitions/v1AppDeploymentTargetConfig"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentConfigSummary": {
      "description": "Application deployment config summary",
      "properties": {
        "target": {
          "$ref": "#/definitions/v1AppDeploymentTargetConfigSummary"
        }
      }
    },
    "v1AppDeploymentFilterSpec": {
      "description": "Application deployment filter spec",
      "properties": {
        "appDeploymentName": {
          "$ref": "#/definitions/v1FilterString"
        },
        "clusterUids": {
          "$ref": "#/definitions/v1FilterArray"
        },
        "tags": {
          "$ref": "#/definitions/v1FilterArray"
        }
      }
    },
    "v1AppDeploymentNotifications": {
      "description": "Application deployment notifications",
      "properties": {
        "isAvailable": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1AppDeploymentProfile": {
      "description": "Application deployment profile",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1AppDeploymentProfileMeta"
        },
        "template": {
          "$ref": "#/definitions/v1AppProfileTemplate"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentProfileEntity": {
      "description": "Application deployment profile request payload",
      "properties": {
        "appProfileUid": {
          "description": "Application deployment profile uid",
          "type": "string"
        }
      },
      "required": [
        "appProfileUid"
      ],
      "type": "object"
    },
    "v1AppDeploymentProfileMeta": {
      "description": "Application deployment profile metadata",
      "properties": {
        "name": {
          "description": "Application deployment profile name",
          "type": "string"
        },
        "uid": {
          "description": "Application deployment profile uid",
          "type": "string"
        },
        "version": {
          "description": "Application deployment profile version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentProfileMetadataSummary": {
      "description": "Application deployment profile metadata summary",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1AppDeploymentProfileSpec": {
      "description": "Application deployment profile spec",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1AppDeploymentProfileMeta"
        },
        "template": {
          "$ref": "#/definitions/v1AppProfileTemplateSpec"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentProfileSummary": {
      "description": "Application deployment profile summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1AppDeploymentProfileMetadataSummary"
        },
        "template": {
          "$ref": "#/definitions/v1AppProfileTemplateSummary"
        }
      }
    },
    "v1AppDeploymentProfileVersion": {
      "description": "Application deployment profile version",
      "properties": {
        "uid": {
          "description": "Application deployment profile uid",
          "type": "string"
        },
        "version": {
          "description": "Application deployment profile version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentProfileVersions": {
      "description": "Application deployment profile versions",
      "properties": {
        "availableVersions": {
          "description": "Application deployment profile available versions",
          "items": {
            "$ref": "#/definitions/v1AppDeploymentProfileVersion"
          },
          "type": "array"
        },
        "latestVersions": {
          "description": "Application deployment profile latest versions",
          "items": {
            "$ref": "#/definitions/v1AppDeploymentProfileVersion"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/v1AppDeploymentProfileMeta"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentSortFields": {
      "enum": [
        "appDeploymentName",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "type": "string",
      "x-nullable": true
    },
    "v1AppDeploymentSortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1AppDeploymentSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1AppDeploymentSpec": {
      "description": "Application deployment spec",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1AppDeploymentConfig"
        },
        "profile": {
          "$ref": "#/definitions/v1AppDeploymentProfile"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentStatus": {
      "description": "Application deployment status",
      "properties": {
        "appTiers": {
          "description": "Application deployment tiers",
          "items": {
            "$ref": "#/definitions/v1ClusterPackStatus"
          },
          "type": "array"
        },
        "lifecycleStatus": {
          "$ref": "#/definitions/v1LifecycleStatus"
        },
        "state": {
          "description": "Application deployment state [ \"Pending\", \"Deploying\", \"Deployed\", \"Updating\" ]",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentStatusSummary": {
      "description": "Application deployment status summary",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/v1AppDeploymentClusterStatus"
        },
        "notifications": {
          "$ref": "#/definitions/v1AppDeploymentNotifications"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentSummary": {
      "description": "Application deployment summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "description": "Application deployment spec summary",
          "properties": {
            "config": {
              "$ref": "#/definitions/v1AppDeploymentConfigSummary"
            },
            "profile": {
              "$ref": "#/definitions/v1AppDeploymentProfileSummary"
            }
          },
          "type": "object"
        },
        "status": {
          "$ref": "#/definitions/v1AppDeploymentStatusSummary"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentTargetClusterLimits": {
      "description": "Application deployment target cluster limits",
      "properties": {
        "cpu": {
          "description": "CPU cores",
          "format": "int32",
          "type": "integer"
        },
        "memoryMiB": {
          "description": "Memory in MiB",
          "format": "int32",
          "type": "integer"
        },
        "storageGiB": {
          "description": "Storage in GiB",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1AppDeploymentTargetConfig": {
      "description": "Application deployment target config response",
      "properties": {
        "clusterRef": {
          "$ref": "#/definitions/v1AppDeploymentClusterRef"
        },
        "envRef": {
          "$ref": "#/definitions/v1AppDeploymentTargetEnvironmentRef"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentTargetConfigSummary": {
      "description": "Application deployment target config summary",
      "properties": {
        "clusterRef": {
          "$ref": "#/definitions/v1AppDeploymentClusterRefSummary"
        }
      }
    },
    "v1AppDeploymentTargetEnvironmentRef": {
      "description": "Application deployment target environment reference",
      "properties": {
        "name": {
          "description": "Application deployment target resource name",
          "type": "string"
        },
        "type": {
          "description": "Application deployment target resource type [ \"nestedCluster\", \"clusterGroup\" ]",
          "type": "string"
        },
        "uid": {
          "description": "Application deployment target resource uid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentVirtualClusterConfigEntity": {
      "description": "Application deployment virtual cluster config",
      "properties": {
        "targetSpec": {
          "$ref": "#/definitions/v1AppDeploymentVirtualClusterTargetSpec"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentVirtualClusterEntity": {
      "description": "Application deployment virtual cluster request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1AppDeploymentVirtualClusterSpec"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentVirtualClusterSpec": {
      "description": "Application deployment virtual cluster spec",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1AppDeploymentVirtualClusterConfigEntity"
        },
        "profile": {
          "$ref": "#/definitions/v1AppDeploymentProfileEntity"
        }
      },
      "type": "object"
    },
    "v1AppDeploymentVirtualClusterTargetSpec": {
      "description": "Application deployment virtual cluster target spec",
      "properties": {
        "clusterUid": {
          "description": "Application deployment virtual cluster uid",
          "type": "string"
        }
      },
      "required": [
        "clusterUid"
      ],
      "type": "object"
    },
    "v1AppDeploymentsFilterSpec": {
      "description": "Application deployment filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1AppDeploymentFilterSpec"
        },
        "sort": {
          "items": {
            "$ref": "#/definitions/v1AppDeploymentSortSpec"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1AppDeploymentsSummary": {
      "properties": {
        "appDeployments": {
          "items": {
            "$ref": "#/definitions/v1AppDeploymentSummary"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "type": "object"
    },
    "v1AppFeatureFreemium": {
      "description": "Freemium information",
      "properties": {
        "activeClustersLimit": {
          "type": "integer",
          "x-omitempty": false
        },
        "isFreemium": {
          "type": "boolean",
          "x-omitempty": false
        },
        "overageUsageLimit": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "totalUsageLimit": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1AppFeatures": {
      "description": "System app features",
      "properties": {
        "developerCredit": {
          "$ref": "#/definitions/v1DeveloperCredit"
        },
        "freeCloudCredit": {
          "type": "boolean",
          "x-omitempty": false
        },
        "freemium": {
          "$ref": "#/definitions/v1AppFeatureFreemium"
        }
      }
    },
    "v1AppProfile": {
      "description": "Application profile response",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "parentUid": {
              "description": "Application profile parent profile uid",
              "type": "string"
            },
            "template": {
              "$ref": "#/definitions/v1AppProfileTemplate"
            },
            "version": {
              "description": "Application profile version",
              "type": "string"
            },
            "versions": {
              "description": "Application profile versions list",
              "items": {
                "$ref": "#/definitions/v1AppProfileVersion"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "status": {
          "description": "Application profile status",
          "properties": {
            "inUseApps": {
              "description": "Application profile apps array",
              "items": {
                "$ref": "#/definitions/v1ObjectResReference"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1AppProfileCloneEntity": {
      "description": "Application profile clone request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1AppProfileCloneMetaInputEntity"
        }
      },
      "type": "object"
    },
    "v1AppProfileCloneMetaInputEntity": {
      "description": "Application profile clone metadata",
      "properties": {
        "name": {
          "description": "Application profile name",
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/v1AppProfileCloneTarget"
        },
        "version": {
          "description": "Application profile version",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1AppProfileCloneTarget": {
      "description": "Application profile clone target",
      "properties": {
        "projectUid": {
          "description": "Application profile clone target project uid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AppProfileEntity": {
      "description": "Application profile request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "description": "Application profile spec",
          "properties": {
            "template": {
              "$ref": "#/definitions/v1AppProfileTemplateEntity"
            },
            "version": {
              "description": "Application profile version",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1AppProfileFilterSpec": {
      "description": "Application profile filter spec",
      "properties": {
        "profileName": {
          "$ref": "#/definitions/v1FilterString"
        },
        "tags": {
          "$ref": "#/definitions/v1FilterArray"
        },
        "version": {
          "$ref": "#/definitions/v1FilterVersionString"
        }
      }
    },
    "v1AppProfileMetaEntity": {
      "description": "Application profile metadata request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1AppProfileMetaUpdateEntity"
        },
        "version": {
          "description": "Application profile version",
          "type": "string"
        }
      },
      "required": [
        "metadata"
      ],
      "type": "object"
    },
    "v1AppProfileMetaUpdateEntity": {
      "description": "Application profile metadata update request payload",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application profile annotations",
          "type": "object"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application profile labels",
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1AppProfileMetadata": {
      "description": "Application profile metadata summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectEntity"
        },
        "spec": {
          "properties": {
            "version": {
              "type": "string"
            }
          }
        }
      },
      "type": "object"
    },
    "v1AppProfileSortFields": {
      "enum": [
        "profileName",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "type": "string",
      "x-nullable": true
    },
    "v1AppProfileSortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1AppProfileSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1AppProfileSummary": {
      "description": "Application profile summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "description": "Application profile spec summary",
          "properties": {
            "parentUid": {
              "type": "string"
            },
            "template": {
              "$ref": "#/definitions/v1AppProfileTemplateSummary"
            },
            "version": {
              "type": "string"
            },
            "versions": {
              "description": "Application profile's list of all the versions",
              "items": {
                "$ref": "#/definitions/v1AppProfileVersion"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1AppProfileTemplate": {
      "description": "Application profile template information",
      "properties": {
        "appTiers": {
          "description": "Application profile tiers",
          "items": {
            "$ref": "#/definitions/v1AppTierRef"
          },
          "type": "array",
          "uniqueItems": true
        },
        "registryRefs": {
          "description": "Application profile registries reference",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AppProfileTemplateEntity": {
      "description": "Application profile template spec",
      "properties": {
        "appTiers": {
          "description": "Application profile tiers",
          "items": {
            "$ref": "#/definitions/v1AppTierEntity"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1AppProfileTemplateSpec": {
      "description": "Application profile template specs",
      "properties": {
        "appTiers": {
          "description": "Application profile tiers",
          "items": {
            "$ref": "#/definitions/v1AppTier"
          },
          "type": "array",
          "uniqueItems": true
        },
        "registryRefs": {
          "description": "Application profile registries reference",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AppProfileTemplateSummary": {
      "description": "Application profile template summary",
      "properties": {
        "appTiers": {
          "items": {
            "$ref": "#/definitions/v1AppTierSummary"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AppProfileTiers": {
      "description": "Application profile tiers information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AppProfileTiersSpec"
        }
      },
      "type": "object"
    },
    "v1AppProfileTiersSpec": {
      "description": "Application profile tiers information",
      "properties": {
        "appTiers": {
          "description": "Application profile tiers",
          "items": {
            "$ref": "#/definitions/v1AppTier"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1AppProfileVersion": {
      "description": "Application profile version",
      "properties": {
        "uid": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AppProfilesFilterSpec": {
      "description": "Application profile filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1AppProfileFilterSpec"
        },
        "sort": {
          "items": {
            "$ref": "#/definitions/v1AppProfileSortSpec"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1AppProfilesMetadata": {
      "properties": {
        "appProfiles": {
          "items": {
            "$ref": "#/definitions/v1AppProfileMetadata"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1AppProfilesSummary": {
      "properties": {
        "appProfiles": {
          "items": {
            "$ref": "#/definitions/v1AppProfileSummary"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "type": "object"
    },
    "v1AppTier": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AppTierSpec"
        }
      }
    },
    "v1AppTierEntity": {
      "description": "Application tier request payload",
      "properties": {
        "containerRegistryUid": {
          "description": "Application tier container registry uid",
          "type": "string"
        },
        "installOrder": {
          "description": "Application tier installation order",
          "format": "int32",
          "type": "integer"
        },
        "manifests": {
          "description": "Application tier manifests",
          "items": {
            "$ref": "#/definitions/v1ManifestInputEntity"
          },
          "type": "array"
        },
        "name": {
          "description": "Application tier name",
          "type": "string"
        },
        "properties": {
          "description": "Application tier properties",
          "items": {
            "$ref": "#/definitions/v1AppTierPropertyEntity"
          },
          "type": "array"
        },
        "registryUid": {
          "description": "Application tier registry uid",
          "type": "string"
        },
        "sourceAppTierUid": {
          "description": "Application tier source pack uid",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1AppTierType"
        },
        "values": {
          "description": "Application tier configuration values in yaml format",
          "type": "string"
        },
        "version": {
          "description": "Application tier version",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1AppTierManifests": {
      "description": "Application tier manifests data",
      "properties": {
        "manifests": {
          "description": "Application tier manifests array",
          "items": {
            "$ref": "#/definitions/v1Manifest"
          },
          "type": "array"
        }
      }
    },
    "v1AppTierPatchEntity": {
      "description": "Application tier patch request payload",
      "properties": {
        "appTier": {
          "$ref": "#/definitions/v1AppTierEntity"
        },
        "replaceWithAppTier": {
          "description": "Application tier UID to be replaced with new tier",
          "type": "string"
        }
      }
    },
    "v1AppTierProperty": {
      "description": "Application tier property object",
      "properties": {
        "format": {
          "description": "Application tier property format",
          "type": "string"
        },
        "name": {
          "description": "Application tier property name",
          "type": "string"
        },
        "type": {
          "description": "Application tier property data type",
          "type": "string"
        },
        "value": {
          "description": "Application tier property value",
          "type": "string"
        }
      }
    },
    "v1AppTierPropertyEntity": {
      "description": "Application tier property object",
      "properties": {
        "name": {
          "description": "Application tier property name",
          "type": "string"
        },
        "value": {
          "description": "Application tier property value",
          "type": "string"
        }
      }
    },
    "v1AppTierRef": {
      "description": "Application tier reference",
      "properties": {
        "name": {
          "description": "Application tier name",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1AppTierType"
        },
        "uid": {
          "description": "Application tier uid to uniquely identify the tier",
          "type": "string"
        },
        "version": {
          "description": "Application tier version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AppTierResolvedValues": {
      "description": "Application tier resolved macro values",
      "properties": {
        "resolved": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Application tier resolved macro values map",
          "type": "object"
        }
      }
    },
    "v1AppTierSourceSummary": {
      "description": "Application profile's tier source information",
      "properties": {
        "addonSubType": {
          "type": "string"
        },
        "addonType": {
          "type": "string"
        },
        "logoUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1AppTierSpec": {
      "description": "Application tier specs",
      "properties": {
        "containerRegistryUid": {
          "description": "Application tier container registry uid",
          "type": "string"
        },
        "installOrder": {
          "description": "Application tier installation order",
          "format": "int32",
          "type": "integer"
        },
        "manifests": {
          "description": "Application tier attached manifest content in yaml format",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          },
          "type": "array"
        },
        "properties": {
          "description": "Application tier properties",
          "items": {
            "$ref": "#/definitions/v1AppTierProperty"
          },
          "type": "array"
        },
        "registryUid": {
          "description": "Registry uid",
          "type": "string"
        },
        "sourceAppTierUid": {
          "description": "Application tier source pack uid",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1AppTierType",
          "description": "Application tier type"
        },
        "values": {
          "description": "Application tier configuration values in yaml format",
          "type": "string"
        },
        "version": {
          "description": "Application tier version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AppTierSummary": {
      "description": "Application profile's tier summary",
      "properties": {
        "name": {
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/v1AppTierSourceSummary"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1AppTierType": {
      "default": "manifest",
      "enum": [
        "manifest",
        "helm",
        "operator-instance",
        "container"
      ],
      "type": "string"
    },
    "v1AppTierUpdateEntity": {
      "description": "Application tier update request payload",
      "properties": {
        "containerRegistryUid": {
          "description": "Application tier container registry uid",
          "type": "string"
        },
        "installOrder": {
          "description": "Application tier installation order",
          "format": "int32",
          "type": "integer"
        },
        "manifests": {
          "description": "Application tier manifests",
          "items": {
            "$ref": "#/definitions/v1ManifestRefUpdateEntity"
          },
          "type": "array"
        },
        "name": {
          "description": "Application tier name",
          "type": "string"
        },
        "properties": {
          "description": "Application tier properties",
          "items": {
            "$ref": "#/definitions/v1AppTierPropertyEntity"
          },
          "type": "array"
        },
        "values": {
          "description": "Application tier configuration values in yaml format",
          "type": "string"
        },
        "version": {
          "description": "Application tier version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AppVersion": {
      "description": "spectro application management app version information",
      "properties": {
        "intermediateVersions": {
          "items": {
            "$ref": "#/definitions/v1ReleaseVersion"
          },
          "type": "array",
          "uniqueItems": true
        },
        "latestVerson": {
          "$ref": "#/definitions/v1ReleaseVersion"
        }
      }
    },
    "v1ArchType": {
      "default": "amd64",
      "enum": [
        "amd64",
        "arm64"
      ],
      "type": "string"
    },
    "v1AsyncOperationIdEntity": {
      "description": "Async operation id",
      "properties": {
        "operationId": {
          "description": "OperationId for a particular sync operation id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AsyncResult": {
      "properties": {
        "data": {
          "type": "object"
        },
        "error": {
          "type": "string"
        },
        "isSuccess": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1AsyncStatus": {
      "properties": {
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "result": {
          "$ref": "#/definitions/v1AsyncResult",
          "type": "object"
        },
        "stage": {
          "type": "string"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "type": "object"
    },
    "v1Audit": {
      "description": "Audit response payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AuditSpec"
        }
      },
      "type": "object"
    },
    "v1AuditActor": {
      "description": "Audit actor object",
      "properties": {
        "actorType": {
          "enum": [
            "user",
            "system",
            "service"
          ],
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/v1ProjectMeta"
        },
        "serviceName": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/v1UserMeta"
        }
      }
    },
    "v1AuditMsgUpdate": {
      "description": "Audit user message update request payload",
      "properties": {
        "userMsg": {
          "description": "User message",
          "maxLength": 255,
          "minLength": 3,
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AuditResourceReference": {
      "description": "Audit resource reference object",
      "properties": {
        "kind": {
          "description": "Audit resource type",
          "type": "string"
        },
        "label": {
          "description": "Audit resource label",
          "type": "string"
        },
        "name": {
          "description": "Audit resource name",
          "type": "string"
        },
        "uid": {
          "description": "Audit resource uid",
          "type": "string"
        }
      },
      "required": [
        "uid"
      ],
      "type": "object"
    },
    "v1AuditSpec": {
      "description": "Audit specifications",
      "properties": {
        "actionMsg": {
          "description": "Audit action message",
          "type": "string"
        },
        "actionType": {
          "enum": [
            "create",
            "update",
            "delete",
            "publish",
            "deploy"
          ],
          "type": "string"
        },
        "actor": {
          "$ref": "#/definitions/v1AuditActor"
        },
        "contentMsg": {
          "description": "Audit content message",
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/v1AuditResourceReference"
        },
        "userMsg": {
          "description": "Audit user message",
          "type": "string"
        }
      }
    },
    "v1AuditSysMsg": {
      "description": "Audit system message",
      "properties": {
        "actionMsg": {
          "description": "Audit resource action message",
          "type": "string"
        },
        "contentMsg": {
          "description": "Audit resource content message",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Audits": {
      "properties": {
        "items": {
          "description": "List of audit message",
          "items": {
            "$ref": "#/definitions/v1Audit"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1AuthAllyTokenRequest": {
      "properties": {
        "edgeAuthToken": {
          "type": "string"
        },
        "edgeHostUid": {
          "type": "string"
        },
        "spectroClusterUid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AuthCertsGet": {
      "description": "Auth certs get",
      "properties": {
        "apiDomain": {
          "type": "string",
          "x-omitempty": false
        },
        "caCert": {
          "type": "string",
          "x-omitempty": false
        },
        "insecureSkipVerify": {
          "type": "boolean",
          "x-omitempty": false
        },
        "rootDomain": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1AuthEdgeJetKeyRequest": {
      "properties": {
        "edgeAuthToken": {
          "type": "string"
        },
        "edgeHostUid": {
          "type": "string"
        },
        "spectroClusterUid": {
          "type": "string"
        }
      },
      "required": [
        "edgeAuthToken",
        "edgeHostUid"
      ],
      "type": "object"
    },
    "v1AuthJetKeyRequest": {
      "properties": {
        "allyAuthToken": {
          "type": "string"
        },
        "hostClusterUid": {
          "type": "string"
        }
      },
      "required": [
        "allyAuthToken",
        "hostClusterUid"
      ],
      "type": "object"
    },
    "v1AuthLogin": {
      "description": "Describes the credential details required for authentication",
      "properties": {
        "emailId": {
          "description": "Describes the email id required for the user to authenticate",
          "type": "string"
        },
        "org": {
          "description": "Describes the user's organization name to login",
          "type": "string"
        },
        "password": {
          "description": "Describes the password required for the user to authenticate",
          "format": "password",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AuthLoginEntity": {
      "description": "Auth login entity",
      "properties": {
        "authType": {
          "enum": [
            "password",
            "sso"
          ],
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "redirectUrl": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1AuthLogins": {
      "description": "Deprecated. Applicable auth logins with multiple orgs",
      "properties": {
        "appEnv": {
          "type": "string"
        },
        "authType": {
          "description": "Deprecated.",
          "enum": [
            "password",
            "sso"
          ],
          "type": "string"
        },
        "orgName": {
          "description": "Deprecated.",
          "type": "string"
        },
        "orgs": {
          "items": {
            "$ref": "#/definitions/v1AuthLoginEntity"
          },
          "type": "array"
        },
        "redirectUrl": {
          "description": "Deprecated.",
          "type": "string",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1AuthMfaLoginFinishRequest": {
      "properties": {
        "_type": {
          "type": "string"
        },
        "authenticatorAttachment": {
          "type": "string"
        },
        "clientExtensionResults": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "deviceName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "rawId": {
          "$ref": "#/definitions/urlEncodedBase64"
        },
        "response": {
          "properties": {
            "authenticatorData": {
              "$ref": "#/definitions/urlEncodedBase64"
            },
            "clientDataJSON": {
              "$ref": "#/definitions/urlEncodedBase64"
            },
            "signature": {
              "$ref": "#/definitions/urlEncodedBase64"
            },
            "userHandle": {
              "$ref": "#/definitions/urlEncodedBase64"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1AuthServiceTokenRequest": {
      "properties": {
        "authKey": {
          "type": "string"
        },
        "edgeHostUid": {
          "type": "string"
        },
        "hostClusterUid": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "jetUid": {
          "type": "string"
        },
        "overlordUid": {
          "type": "string"
        },
        "serviceVersion": {
          "type": "string"
        },
        "spectroClusterUid": {
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AuthServiceTokenResponse": {
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AuthShellyLoginRequest": {
      "properties": {
        "secret": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AuthToken": {
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AuthTokenRevoke": {
      "properties": {
        "tokens": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1AuthTokenSettings": {
      "description": "System auth token settings",
      "properties": {
        "expiryTimeMinutes": {
          "description": "Auth token expiry time in minutes",
          "format": "int32",
          "maximum": 1440,
          "minimum": 15,
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "v1AwsAMI": {
      "properties": {
        "id": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AwsAccount": {
      "description": "Aws cloud account information",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      },
      "type": "object"
    },
    "v1AwsAccounts": {
      "description": "List of AWS accounts",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1AwsAccount"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1AwsAmiReference": {
      "description": "AMI is the reference to the AMI from which to create the machine instance",
      "properties": {
        "eksOptimizedLookupType": {
          "description": "EKSOptimizedLookupType If specified, will look up an EKS Optimized image in SSM Parameter store",
          "enum": [
            "AmazonLinux",
            "AmazonLinuxGPU"
          ],
          "type": "string"
        },
        "id": {
          "description": "ID of resource",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AwsAvailabilityZone": {
      "description": "Distinct locations within an AWS Region that are engineered to be isolated from failures in other Zones",
      "properties": {
        "name": {
          "description": "AWS availability zone name",
          "type": "string"
        },
        "state": {
          "description": "AWS availability zone state",
          "type": "string"
        },
        "zoneId": {
          "description": "AWS availability zone id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AwsAvailabilityZones": {
      "properties": {
        "zones": {
          "description": "List of AWS Zones",
          "items": {
            "$ref": "#/definitions/v1AwsAvailabilityZone"
          },
          "type": "array"
        }
      },
      "required": [
        "zones"
      ],
      "type": "object"
    },
    "v1AwsCloudAccount": {
      "description": "AWS cloud account which includes access key and secret key in case of 'secret' credentials type. It includes policyARNS, ARN and externalId in case of sts. Partition is a group of AWS Region and Service objects",
      "properties": {
        "accessKey": {
          "description": "AWS account access key",
          "type": "string"
        },
        "credentialType": {
          "$ref": "#/definitions/v1AwsCloudAccountCredentialType"
        },
        "partition": {
          "default": "aws",
          "description": "AWS accounts are scoped to a single partition. Allowed values [aws, aws-us-gov], Default values",
          "enum": [
            "aws",
            "aws-us-gov"
          ],
          "type": "string"
        },
        "policyARNs": {
          "description": "List of policy ARNs required in case of credentialType sts.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "secretKey": {
          "description": "AWS account secret key",
          "type": "string"
        },
        "sts": {
          "$ref": "#/definitions/v1AwsStsCredentials",
          "description": "AWS STS credentials in case of credentialType sts, will be empty in case of credential type secret"
        }
      },
      "type": "object"
    },
    "v1AwsCloudAccountCredentialType": {
      "default": "secret",
      "description": "Allowed Values [secret, sts]. STS type will be used for role assumption for sts type, accessKey/secretKey contains the source account, Arn is the target account.",
      "enum": [
        "secret",
        "sts"
      ],
      "type": "string"
    },
    "v1AwsCloudClusterConfigEntity": {
      "description": "AWS cloud cluster config entity",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1AwsClusterConfig"
        }
      },
      "type": "object"
    },
    "v1AwsCloudConfig": {
      "description": "AwsCloudConfig is the Schema for the awscloudconfigs API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AwsCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1AwsCloudConfigStatus"
        }
      },
      "type": "object"
    },
    "v1AwsCloudConfigSpec": {
      "description": "AwsCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "properties": {
        "cloudAccountRef": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "cloudAccountRef should point to the secret which contains AwsCloudAccount"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1AwsClusterConfig"
        },
        "machinePoolConfig": {
          "items": {
            "$ref": "#/definitions/v1AwsMachinePoolConfig"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AwsCloudConfigStatus": {
      "description": "AwsCloudConfigStatus defines the observed state of AwsCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "type": "array"
        },
        "images": {
          "description": "Images array items should be 1-to-1 mapping to Spec.MachinePoolConfig",
          "items": {
            "$ref": "#/definitions/v1AwsAMI"
          },
          "type": "array"
        },
        "isAddonLayer": {
          "description": "addon layers present in spc",
          "type": "boolean"
        },
        "roleDigest": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object"
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1AwsCloudCostSpec": {
      "description": "Aws cloud account usage cost payload spec",
      "properties": {
        "accountId": {
          "description": "AccountId of AWS cloud cost",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "filter": {
          "$ref": "#/definitions/v1AwsCloudCostSpecFilter"
        }
      },
      "required": [
        "credentials"
      ],
      "type": "object"
    },
    "v1AwsCloudCostSpecFilter": {
      "description": "Aws cloud account usage cost payload filter. startTime and endTime should be within 12 months range from now.",
      "properties": {
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "iamUserId": {
          "description": "IAM UserId of AWS account",
          "type": "string"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "required": [
        "startTime"
      ],
      "type": "object"
    },
    "v1AwsCloudCostSummary": {
      "description": "AWS cloud account usage cost summary response data",
      "properties": {
        "cost": {
          "$ref": "#/definitions/v1AwsCloudCostSummaryCloudCost"
        }
      },
      "type": "object"
    },
    "v1AwsCloudCostSummaryCloudCost": {
      "description": "AWS cloud account usage cost summary of monthlyCosts and totalCost",
      "properties": {
        "monthlyCosts": {
          "description": "Monthly cost of AWS cost",
          "items": {
            "$ref": "#/definitions/v1AwsCloudCostSummaryMonthlyCost"
          },
          "type": "array"
        },
        "total": {
          "description": "Total cost of AWS cost",
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1AwsCloudCostSummaryMonthlyCost": {
      "properties": {
        "amount": {
          "description": "Amount for aws cloud cost",
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "timestamp": {
          "description": "Time duration for aws cloud cost",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1AwsClusterConfig": {
      "description": "Cluster level configuration for aws cloud and applicable for all the machine pools",
      "properties": {
        "bastionDisabled": {
          "description": "Create bastion node option we have earlier supported creation of bastion by default capa seems to favour session manager against bastion node https://github.com/kubernetes-sigs/cluster-api-provider-aws/issues/947",
          "type": "boolean"
        },
        "controlPlaneLoadBalancer": {
          "description": "ControlPlaneLoadBalancer specifies how API server elb will be configured, this field is optional, not provided, \"\", default =\u003e \"Internet-facing\" \"Internet-facing\" =\u003e \"Internet-facing\" \"internal\" =\u003e \"internal\" For spectro saas setup we require to talk to the apiserver from our cluster so ControlPlaneLoadBalancer should be \"\", not provided or \"Internet-facing\"",
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "vpcId": {
          "description": "VPC Id to deploy cluster into should have one public and one private subnet for the the cluster creation, this field is optional, If VPC Id is not provided a fully managed VPC will be created",
          "type": "string"
        }
      },
      "required": [
        "region"
      ],
      "type": "object"
    },
    "v1AwsCreditAccount": {
      "properties": {
        "creditLimitInDollars": {
          "format": "float64",
          "type": "number"
        },
        "loginCredentials": {
          "$ref": "#/definitions/v1AwsLoginCredentials"
        },
        "userCloudAccount": {
          "$ref": "#/definitions/v1AwsUserCloudAccount"
        }
      },
      "type": "object"
    },
    "v1AwsCreditAccountEntity": {
      "properties": {
        "creditLimitInDollars": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "creditUsedInDollars": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "loginCredentials": {
          "$ref": "#/definitions/v1AwsLoginCredentials"
        },
        "userCloudAccount": {
          "$ref": "#/definitions/v1AwsUserCloudAccount"
        }
      },
      "type": "object"
    },
    "v1AwsFindImageRequest": {
      "description": "AWS image name and credentials",
      "properties": {
        "amiName": {
          "description": "AWS image ami name",
          "type": "string"
        },
        "awsAccount": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        }
      },
      "type": "object"
    },
    "v1AwsIamPolicy": {
      "description": "Aws policy",
      "properties": {
        "arn": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AwsImage": {
      "description": "AWS image name and ami",
      "properties": {
        "id": {
          "description": "AWS image id",
          "type": "string"
        },
        "name": {
          "description": "AWS image name",
          "type": "string"
        },
        "owner": {
          "description": "AWS image owner id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AwsInstanceTypes": {
      "description": "List of AWS instance types",
      "properties": {
        "instanceTypes": {
          "items": {
            "$ref": "#/definitions/v1InstanceType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AwsKeyPairs": {
      "description": "List of AWS keypairs",
      "properties": {
        "keyNames": {
          "description": "Array of Aws Keypair names",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AwsKmsKey": {
      "description": "AWS KMS Key - gives you centralized control over the cryptographic keys used to protect your data.",
      "properties": {
        "keyAlias": {
          "description": "AWS KMS alias",
          "type": "string"
        },
        "keyArn": {
          "description": "AWS KMS arn",
          "type": "string"
        },
        "keyId": {
          "description": "AWS KMS keyid",
          "type": "string"
        }
      },
      "required": [
        "keyId",
        "keyArn"
      ],
      "type": "object"
    },
    "v1AwsKmsKeyEntity": {
      "description": "List of AWS Keys",
      "properties": {
        "awsAccountId": {
          "description": "The twelve-digit account ID of the Amazon Web Services account that owns the KMS key",
          "type": "string"
        },
        "enabled": {
          "description": "Specifies whether the KMS key is enabled.",
          "type": "boolean"
        },
        "keyId": {
          "description": "The globally unique identifier for the KMS key",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AwsKmsKeys": {
      "description": "List of AWS Keys",
      "properties": {
        "kmsKeys": {
          "items": {
            "$ref": "#/definitions/v1AwsKmsKey"
          },
          "type": "array"
        }
      },
      "required": [
        "kmsKeys"
      ],
      "type": "object"
    },
    "v1AwsLaunchTemplate": {
      "description": "AWSLaunchTemplate specifies the launch template to use to create the managed node group",
      "properties": {
        "additionalSecurityGroups": {
          "description": "AdditionalSecurityGroups is an array of references to security groups that should be applied to the instances",
          "items": {
            "$ref": "#/definitions/v1AwsResourceReference"
          },
          "type": "array",
          "uniqueItems": true
        },
        "ami": {
          "$ref": "#/definitions/v1AwsAmiReference"
        },
        "imageLookupBaseOS": {
          "description": "ImageLookupBaseOS is the name of the base operating system to use for image lookup the AMI is not set",
          "type": "string"
        },
        "imageLookupFormat": {
          "description": "ImageLookupFormat is the AMI naming format to look up the image",
          "type": "string"
        },
        "imageLookupOrg": {
          "description": "ImageLookupOrg is the AWS Organization ID to use for image lookup if AMI is not set",
          "type": "string"
        },
        "rootVolume": {
          "$ref": "#/definitions/v1AwsRootVolume"
        }
      },
      "type": "object"
    },
    "v1AwsLoginCredentials": {
      "properties": {
        "iamUser": {
          "type": "string"
        },
        "password": {
          "format": "password",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AwsMachine": {
      "description": "AWS cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AwsMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      },
      "type": "object"
    },
    "v1AwsMachinePoolCloudConfigEntity": {
      "properties": {
        "additionalSecurityGroups": {
          "description": "Additional Security groups",
          "items": {
            "$ref": "#/definitions/v1AwsResourceReference"
          },
          "type": "array"
        },
        "azs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "capacityType": {
          "default": "on-demand",
          "description": "EC2 instance capacity type",
          "enum": [
            "on-demand",
            "spot"
          ],
          "type": "string"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "format": "int64",
          "maximum": 2000,
          "minimum": 1,
          "type": "integer"
        },
        "spotMarketOptions": {
          "$ref": "#/definitions/v1SpotMarketOptions",
          "description": "SpotMarketOptions allows users to configure instances to be run using AWS Spot instances."
        },
        "subnets": {
          "items": {
            "$ref": "#/definitions/v1AwsSubnetEntity"
          },
          "type": "array"
        }
      },
      "required": [
        "instanceType"
      ],
      "type": "object"
    },
    "v1AwsMachinePoolConfig": {
      "properties": {
        "additionalLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "additionalLabels",
          "type": "object"
        },
        "additionalSecurityGroups": {
          "description": "Additional Security groups",
          "items": {
            "$ref": "#/definitions/v1AwsResourceReference"
          },
          "type": "array"
        },
        "additionalTags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object"
        },
        "azs": {
          "description": "AZs is only used for dynamic placement",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "capacityType": {
          "default": "on-demand",
          "description": "EC2 instance capacity type",
          "enum": [
            "on-demand",
            "spot"
          ],
          "type": "string"
        },
        "instanceConfig": {
          "$ref": "#/definitions/v1InstanceConfig"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "format": "int32",
          "type": "integer"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "format": "int64",
          "type": "integer"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer"
        },
        "spotMarketOptions": {
          "$ref": "#/definitions/v1SpotMarketOptions",
          "description": "SpotMarketOptions allows users to configure instances to be run using AWS Spot instances."
        },
        "subnetIds": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"us-west-2d\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first private subnet from the AZ will be picked up for deployment",
          "type": "object"
        },
        "taints": {
          "description": "control plane or worker taints",
          "items": {
            "$ref": "#/definitions/v1Taint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updateStrategy": {
          "$ref": "#/definitions/v1UpdateStrategy",
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "isControlPlane"
      ],
      "type": "object"
    },
    "v1AwsMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1AwsMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      },
      "required": [
        "cloudConfig"
      ],
      "type": "object"
    },
    "v1AwsMachineSpec": {
      "description": "AWS cloud VM definition spec",
      "properties": {
        "additionalSecurityGroups": {
          "description": "Additional Security groups",
          "items": {
            "$ref": "#/definitions/v1AwsResourceReference"
          },
          "type": "array"
        },
        "ami": {
          "type": "string"
        },
        "az": {
          "type": "string"
        },
        "dnsName": {
          "type": "string"
        },
        "iamProfile": {
          "type": "string"
        },
        "instanceType": {
          "type": "string"
        },
        "nics": {
          "items": {
            "$ref": "#/definitions/v1AwsNic"
          },
          "type": "array"
        },
        "phase": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "subnetId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vpcId": {
          "type": "string"
        }
      },
      "required": [
        "instanceType",
        "vpcId",
        "ami"
      ],
      "type": "object"
    },
    "v1AwsMachines": {
      "description": "AWS machine list",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1AwsMachine"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1AwsNic": {
      "description": "AWS network interface",
      "properties": {
        "index": {
          "format": "int8",
          "type": "integer"
        },
        "privateIPs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "publicIp": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AwsPartition": {
      "default": "aws",
      "description": "AWS accounts are scoped to a single partition. Allowed values [aws, aws-us-gov], Default values",
      "enum": [
        "aws",
        "aws-us-gov"
      ],
      "type": "string"
    },
    "v1AwsPolicies": {
      "properties": {
        "policies": {
          "items": {
            "$ref": "#/definitions/v1AwsIamPolicy"
          },
          "type": "array"
        }
      },
      "required": [
        "policies"
      ],
      "type": "object"
    },
    "v1AwsPolicyArnsSpec": {
      "description": "Aws policy ARNs spec",
      "properties": {
        "account": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "policyArns": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "policyArns",
        "account"
      ],
      "type": "object"
    },
    "v1AwsRegion": {
      "description": "AWS region which represents separate geographic area.",
      "properties": {
        "endpoint": {
          "description": "AWS offer a regional endpoint that can used to make requests",
          "type": "string"
        },
        "name": {
          "description": "Name of the AWS region",
          "type": "string"
        },
        "optInStatus": {
          "description": "Enable your account to operate in the particular regions",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AwsRegions": {
      "properties": {
        "regions": {
          "description": "List of AWS regions",
          "items": {
            "$ref": "#/definitions/v1AwsRegion"
          },
          "type": "array"
        }
      },
      "required": [
        "regions"
      ],
      "type": "object"
    },
    "v1AwsResourceFilter": {
      "description": "Filter is a filter used to identify an AWS resource",
      "properties": {
        "name": {
          "description": "Name of the filter. Filter names are case-sensitive",
          "type": "string"
        },
        "values": {
          "description": "Values includes one or more filter values. Filter values are case-sensitive",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1AwsResourceReference": {
      "description": "AWSResourceReference is a reference to a specific AWS resource by ID or filters",
      "properties": {
        "arn": {
          "description": "ARN of resource",
          "type": "string"
        },
        "filters": {
          "description": "Filters is a set of key/value pairs used to identify a resource",
          "items": {
            "$ref": "#/definitions/v1AwsResourceFilter"
          },
          "type": "array",
          "uniqueItems": true
        },
        "id": {
          "description": "ID of resource",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AwsRootVolume": {
      "description": "Volume encapsulates the configuration options for the storage device.",
      "properties": {
        "deviceName": {
          "description": "Device name",
          "type": "string"
        },
        "encrypted": {
          "description": "EncryptionKey is the KMS key to use to encrypt the volume. Can be either a KMS key ID or ARN",
          "type": "boolean"
        },
        "encryptionKey": {
          "description": "EncryptionKey is the KMS key to use to encrypt the volume. Can be either a KMS key ID or ARN",
          "type": "string"
        },
        "iops": {
          "description": "IOPS is the number of IOPS requested for the disk. Not applicable to all types",
          "format": "int64",
          "type": "integer"
        },
        "throughput": {
          "description": "Throughput to provision in MiB/s supported for the volume type. Not applicable to all types.",
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "description": "Type is the type of the volume (e.g. gp2, io1, etc...)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AwsS3BucketCredentials": {
      "description": "AWS S3 Bucket credentials",
      "properties": {
        "bucket": {
          "description": "Name of AWS S3 bucket",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "folder": {
          "description": "Name of the folder in the specified AWS S3 bucket.",
          "type": "string"
        },
        "region": {
          "description": "Name of the available AWS region.",
          "type": "string"
        }
      },
      "required": [
        "credentials",
        "bucket",
        "region"
      ],
      "type": "object"
    },
    "v1AwsSecurityGroups": {
      "properties": {
        "groups": {
          "items": {
            "$ref": "#/definitions/v1AwsSecuritygroup"
          },
          "type": "array"
        }
      },
      "required": [
        "groups"
      ],
      "type": "object"
    },
    "v1AwsSecuritygroup": {
      "description": "Aws security group",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AwsStorageTypes": {
      "properties": {
        "storageTypes": {
          "description": "List of AWS storage types",
          "items": {
            "$ref": "#/definitions/v1StorageType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AwsStsCredentials": {
      "description": "Aws sts credentials",
      "properties": {
        "arn": {
          "description": "Arn for the aws sts credentials in cloud account",
          "type": "string"
        },
        "externalId": {
          "description": "ExternalId for the aws sts credentials in cloud account",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AwsSubnet": {
      "description": "A subnet is a range of IP addresses in a AWS VPC",
      "properties": {
        "az": {
          "description": "Every subnet can only be associated with only one Availability Zone",
          "type": "string"
        },
        "isPrivate": {
          "description": "Is this subnet private",
          "type": "boolean"
        },
        "mapPublicIpOnLaunch": {
          "description": "Indicates whether instances launched in this subnet receive a public IPv4 address.",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "description": "Name of the subnet",
          "type": "string"
        },
        "subnetId": {
          "description": "Id of the subnet",
          "type": "string"
        }
      }
    },
    "v1AwsSubnetEntity": {
      "properties": {
        "az": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1AwsUserCloudAccount": {
      "properties": {
        "accountId": {
          "type": "string"
        },
        "cloudAccount": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        }
      }
    },
    "v1AwsVolumeSize": {
      "description": "AWS Volume Size entity",
      "properties": {
        "sizeGB": {
          "description": "AWS volume size",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1AwsVolumeType": {
      "description": "AWS Volume Type entity",
      "properties": {
        "id": {
          "description": "AWS volume type id",
          "type": "string"
        },
        "maxIops": {
          "description": "Iops through put of volume type",
          "type": "string"
        },
        "maxThroughPut": {
          "description": "Max through put of volume type",
          "type": "string"
        },
        "name": {
          "description": "AWS Volume Type Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AwsVpc": {
      "description": "A virtual network dedicated to a AWS account",
      "properties": {
        "cidrBlock": {
          "type": "string"
        },
        "name": {
          "description": "Name of the virtual network",
          "type": "string"
        },
        "subnets": {
          "description": "List of subnets associated to a AWS VPC",
          "items": {
            "$ref": "#/definitions/v1AwsSubnet"
          },
          "type": "array"
        },
        "vpcId": {
          "description": "Id of the virtual network",
          "type": "string"
        }
      },
      "required": [
        "vpcId"
      ],
      "type": "object"
    },
    "v1AwsVpcs": {
      "description": "List of AWS VPCs",
      "properties": {
        "vpcs": {
          "items": {
            "$ref": "#/definitions/v1AwsVpc"
          },
          "type": "array"
        }
      },
      "required": [
        "vpcs"
      ],
      "type": "object"
    },
    "v1AzValidateEntity": {
      "description": "Az validate entity",
      "properties": {
        "azs": {
          "description": "Gcp Azs",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "project": {
          "description": "Gcp project",
          "type": "string"
        },
        "region": {
          "description": "Gcp region",
          "type": "string"
        },
        "uid": {
          "description": "Cloud account uid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AzureAccount": {
      "description": "Azure account information",
      "properties": {
        "apiVersion": {
          "description": "Cloud account api version",
          "type": "string"
        },
        "kind": {
          "description": "Cloud account kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AzureCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      },
      "type": "object"
    },
    "v1AzureAccounts": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1AzureAccount"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1AzureAvailabilityZone": {
      "description": "Azure availability zone",
      "properties": {
        "name": {
          "description": "Azure availability zone name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AzureCloudAccount": {
      "properties": {
        "azureEnvironment": {
          "default": "AzurePublicCloud",
          "description": "Contains configuration for Azure cloud",
          "enum": [
            "AzureChinaCloud",
            "AzurePublicCloud",
            "AzureUSGovernment",
            "AzureUSGovernmentCloud"
          ],
          "type": "string"
        },
        "clientId": {
          "description": "Client ID(Directory ID) is a unique identifier generated by Azure AD that is tied to an application",
          "type": "string"
        },
        "clientSecret": {
          "description": "ClientSecret is the secret associated with Client",
          "type": "string"
        },
        "settings": {
          "$ref": "#/definitions/v1CloudAccountSettings",
          "description": "Palette internal cloud settings"
        },
        "tenantId": {
          "description": "Tenant ID is the ID for the Azure AD tenant that the user belongs to.",
          "type": "string"
        },
        "tenantName": {
          "description": "Tenant ID is the ID for the Azure AD tenant that the user belongs to.",
          "type": "string"
        }
      },
      "required": [
        "tenantId",
        "clientId",
        "clientSecret"
      ],
      "type": "object"
    },
    "v1AzureCloudClusterConfigEntity": {
      "description": "Azure cloud cluster config entity",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1AzureClusterConfig"
        }
      },
      "type": "object"
    },
    "v1AzureCloudConfig": {
      "description": "AzureCloudConfig is the Schema for the azurecloudconfigs API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AzureCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1AzureCloudConfigStatus"
        }
      },
      "type": "object"
    },
    "v1AzureCloudConfigSpec": {
      "description": "AzureCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "properties": {
        "cloudAccountRef": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "cloudAccountRef should point to the secret which contains AzureCloudAccount"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1AzureClusterConfig"
        },
        "machinePoolConfig": {
          "items": {
            "$ref": "#/definitions/v1AzureMachinePoolConfig"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AzureCloudConfigStatus": {
      "description": "AzureCloudConfigStatus defines the observed state of AzureCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "conditions": {
          "description": "spectroAnsibleProvisioner: should be added only once, subsequent recocile will use the same provisioner SpectroAnsiblePacker bool `json:\"spectroAnsiblePacker,omitempty\"`",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "type": "array"
        },
        "images": {
          "$ref": "#/definitions/v1AzureImage",
          "description": "Images array items should be 1-to-1 mapping to Spec.MachinePoolConfig"
        },
        "isAddonLayer": {
          "description": "addon layers present in spc",
          "type": "boolean"
        },
        "roleDigest": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object"
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        },
        "vhdImage": {
          "$ref": "#/definitions/v1AzureVHDImage"
        }
      },
      "type": "object"
    },
    "v1AzureClusterConfig": {
      "description": "Cluster level configuration for Azure cloud and applicable for all the machine pools",
      "properties": {
        "aadProfile": {
          "$ref": "#/definitions/v1AADProfile",
          "description": "AadProfile is Azure Active Directory configuration to integrate with AKS for aad authentication."
        },
        "apiServerAccessProfile": {
          "$ref": "#/definitions/v1APIServerAccessProfile",
          "description": "APIServerAccessProfile is the access profile for AKS API server."
        },
        "containerName": {
          "type": "string"
        },
        "controlPlaneSubnet": {
          "$ref": "#/definitions/v1Subnet",
          "description": "Subnet for Kubernetes control-plane node"
        },
        "enablePrivateCluster": {
          "description": "Deprecated. use apiServerAccessProfile.enablePrivateCluster",
          "type": "boolean"
        },
        "infraLBConfig": {
          "$ref": "#/definitions/v1InfraLBConfig",
          "description": "APIServerLB is the configuration for the control-plane load balancer."
        },
        "location": {
          "description": "Location is the Azure datacenter location",
          "type": "string"
        },
        "resourceGroup": {
          "type": "string"
        },
        "sshKey": {
          "type": "string"
        },
        "storageAccountName": {
          "type": "string"
        },
        "subscriptionId": {
          "description": "Subscription ID is unique identifier for the subscription used to access Azure services",
          "type": "string"
        },
        "vnetCidrBlock": {
          "type": "string"
        },
        "vnetName": {
          "description": "VNETName is the virtual network in which the cluster is to be provisioned.",
          "type": "string"
        },
        "vnetResourceGroup": {
          "type": "string"
        },
        "workerSubnet": {
          "$ref": "#/definitions/v1Subnet",
          "description": "Subnet for Kubernetes worker node"
        }
      },
      "required": [
        "subscriptionId",
        "location",
        "sshKey"
      ],
      "type": "object"
    },
    "v1AzureGroup": {
      "description": "Azure group entity",
      "properties": {
        "id": {
          "description": "Azure group id",
          "type": "string"
        },
        "name": {
          "description": "Azure group name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AzureGroups": {
      "description": "List of Azure groups",
      "properties": {
        "groups": {
          "items": {
            "$ref": "#/definitions/v1AzureGroup"
          },
          "type": "array"
        }
      },
      "required": [
        "groups"
      ],
      "type": "object"
    },
    "v1AzureImage": {
      "description": "Refers to Azure Shared Gallery image",
      "properties": {
        "gallery": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resourceGroup": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "subscriptionID": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AzureInstanceTypes": {
      "description": "List of Azure instance types",
      "properties": {
        "instanceTypes": {
          "items": {
            "$ref": "#/definitions/v1InstanceType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AzureMachine": {
      "description": "Azure cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1AzureMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      },
      "type": "object"
    },
    "v1AzureMachinePoolCloudConfigEntity": {
      "properties": {
        "azs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instanceType": {
          "description": "Instance type stands for VMSize in Azure",
          "type": "string"
        },
        "isSystemNodePool": {
          "description": "whether this pool is for system node Pool",
          "type": "boolean"
        },
        "osDisk": {
          "$ref": "#/definitions/v1AzureOSDisk"
        }
      },
      "type": "object"
    },
    "v1AzureMachinePoolConfig": {
      "properties": {
        "additionalLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "additionalLabels",
          "type": "object"
        },
        "additionalTags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object"
        },
        "azs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instanceConfig": {
          "$ref": "#/definitions/v1InstanceConfig"
        },
        "instanceType": {
          "description": "Instance type stands for VMSize in Azure",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "isSystemNodePool": {
          "description": "whether this pool is for system node Pool",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "format": "int32",
          "type": "integer"
        },
        "osDisk": {
          "$ref": "#/definitions/v1AzureOSDisk"
        },
        "osType": {
          "$ref": "#/definitions/v1OsType",
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer"
        },
        "spotVMOptions": {
          "$ref": "#/definitions/v1SpotVMOptions",
          "description": "SpotVMOptions allows the ability to specify the Machine should use a Spot VM"
        },
        "taints": {
          "description": "control plane or worker taints",
          "items": {
            "$ref": "#/definitions/v1Taint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updateStrategy": {
          "$ref": "#/definitions/v1UpdateStrategy",
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "isControlPlane"
      ],
      "type": "object"
    },
    "v1AzureMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1AzureMachinePoolCloudConfigEntity"
        },
        "managedPoolConfig": {
          "$ref": "#/definitions/v1AzureManagedMachinePoolConfig"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      },
      "required": [
        "cloudConfig"
      ],
      "type": "object"
    },
    "v1AzureMachineSpec": {
      "description": "Azure cloud VM definition spec",
      "properties": {
        "additionalTags": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "allocatePublicIP": {
          "type": "boolean"
        },
        "availabilityZone": {
          "$ref": "#/definitions/v1AzureMachineSpecAvailabilityZone"
        },
        "image": {
          "$ref": "#/definitions/v1AzureMachineSpecImage"
        },
        "instanceType": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "nics": {
          "items": {
            "$ref": "#/definitions/v1AzureNic"
          },
          "type": "array"
        },
        "osDisk": {
          "$ref": "#/definitions/v1AzureOSDisk"
        },
        "sshPublicKey": {
          "type": "string"
        }
      },
      "required": [
        "instanceType",
        "location",
        "osDisk"
      ],
      "type": "object"
    },
    "v1AzureMachineSpecAvailabilityZone": {
      "description": "Azure Machine Spec Availability zone",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AzureMachineSpecImage": {
      "description": "Azure Machine Spec Image",
      "properties": {
        "gallery": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "offer": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "resourceGroup": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AzureMachines": {
      "description": "Azure machine list",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1AzureMachine"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1AzureManagedMachinePoolConfig": {
      "properties": {
        "isSystemNodePool": {
          "description": "whether this pool is for system node Pool",
          "type": "boolean",
          "x-omitempty": false
        },
        "osType": {
          "$ref": "#/definitions/v1OsType",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AzureNic": {
      "description": "AWS network interface",
      "properties": {
        "index": {
          "format": "int8",
          "type": "integer"
        },
        "privateIPs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "publicIp": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AzureOSDisk": {
      "properties": {
        "diskSizeGB": {
          "format": "int32",
          "type": "integer"
        },
        "managedDisk": {
          "$ref": "#/definitions/v1ManagedDisk"
        },
        "osType": {
          "$ref": "#/definitions/v1OsType",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AzurePrivateDnsZone": {
      "description": "Azure Private DNS zone entity",
      "properties": {
        "id": {
          "description": "Fully qualified resource Id for the resource",
          "type": "string"
        },
        "location": {
          "description": "The Azure Region where the resource lives",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AzurePrivateDnsZones": {
      "description": "List of Azure storage accounts",
      "properties": {
        "privateDnsZones": {
          "items": {
            "$ref": "#/definitions/v1AzurePrivateDnsZone"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AzureRegion": {
      "description": "Azure region entity",
      "properties": {
        "displayName": {
          "description": "Azure region displayname",
          "type": "string"
        },
        "name": {
          "description": "Azure region name",
          "type": "string"
        },
        "zones": {
          "description": "List of zones associated to a particular Azure region",
          "items": {
            "$ref": "#/definitions/v1AzureAvailabilityZone"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AzureRegions": {
      "description": "List of Azure regions",
      "properties": {
        "regions": {
          "items": {
            "$ref": "#/definitions/v1AzureRegion"
          },
          "type": "array"
        }
      },
      "required": [
        "regions"
      ],
      "type": "object"
    },
    "v1AzureResourceGroupList": {
      "description": "List of Azure resource group",
      "properties": {
        "resourceGroupList": {
          "items": {
            "$ref": "#/definitions/v1ResourceGroup"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AzureStorageAccountEntity": {
      "description": "Azure Storage Account Entity",
      "properties": {
        "storageAccountTypes": {
          "items": {
            "$ref": "#/definitions/v1StorageAccountEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AzureStorageAccounts": {
      "description": "List of Azure storage accounts",
      "properties": {
        "accounts": {
          "items": {
            "$ref": "#/definitions/v1StorageAccount"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AzureStorageConfig": {
      "description": "Azure storage config object",
      "properties": {
        "containerName": {
          "description": "Azure container name",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/v1.AzureAccountEntitySpec",
          "description": "Azure cloud account credentials"
        },
        "resourceGroup": {
          "description": "Azure resource group name, to which the storage account is mapped",
          "type": "string"
        },
        "sku": {
          "description": "Azure sku",
          "type": "string"
        },
        "storageName": {
          "description": "Azure storage name",
          "type": "string"
        }
      },
      "required": [
        "resourceGroup",
        "containerName",
        "storageName",
        "credentials"
      ],
      "type": "object"
    },
    "v1AzureStorageContainers": {
      "description": "List of Azure storage containers",
      "properties": {
        "containers": {
          "items": {
            "$ref": "#/definitions/v1StorageContainer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AzureStorageTypes": {
      "description": "List of Azure storage types",
      "properties": {
        "storageTypes": {
          "items": {
            "$ref": "#/definitions/v1StorageType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AzureSubscriptionList": {
      "description": "List of Azure subscription",
      "properties": {
        "subscriptionList": {
          "items": {
            "$ref": "#/definitions/v1Subscription"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AzureVHDImage": {
      "description": "Mold always create VHD image for custom image, and this can be use as golden images",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AzureVhdUrlEntity": {
      "description": "Azure vhd url entity",
      "properties": {
        "name": {
          "description": "The name of the resource",
          "type": "string"
        },
        "url": {
          "description": "The url of the Azure Vhd",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1AzureVirtualNetworkList": {
      "description": "List of Azure virtual network",
      "properties": {
        "virtualNetworkList": {
          "items": {
            "$ref": "#/definitions/v1VirtualNetwork"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1AzureZoneEntity": {
      "description": "List of Azure zone",
      "properties": {
        "zoneList": {
          "items": {
            "$ref": "#/definitions/v1ZoneEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1BackupLocationConfig": {
      "description": "Backup location configuration",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1BackupRestoreStatusMeta": {
      "description": "Backup restored status",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "destinationClusterRef": {
          "$ref": "#/definitions/v1ResourceReference"
        },
        "restoreState": {
          "type": "string"
        }
      }
    },
    "v1BackupState": {
      "description": "Backup state",
      "properties": {
        "backupTime": {
          "$ref": "#/definitions/v1Time"
        },
        "deleteState": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1BackupStatusConfig": {
      "description": "Backup config",
      "properties": {
        "includeAllDisks": {
          "type": "boolean"
        },
        "includeClusterResources": {
          "type": "boolean"
        },
        "namespaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1BackupStatusMeta": {
      "description": "Backup  status meta",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "backupState": {
          "$ref": "#/definitions/v1BackupState"
        },
        "backupedNamespaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "expiryDate": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1BasicOciRegistry": {
      "description": "Basic oci registry information",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1BasicOciRegistrySpec"
        }
      },
      "type": "object"
    },
    "v1BasicOciRegistrySpec": {
      "description": "Basic oci registry spec",
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "baseContentPath": {
          "description": "OCI registry content base path",
          "type": "string"
        },
        "basePath": {
          "description": "OCI registry api base path",
          "type": "string"
        },
        "endpoint": {
          "description": "OCI registry endpoint",
          "type": "string"
        },
        "providerType": {
          "default": "helm",
          "enum": [
            "helm",
            "zarf",
            "pack"
          ],
          "type": "string"
        },
        "registryUid": {
          "description": "Basic oci registry uid",
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      },
      "required": [
        "endpoint",
        "auth"
      ],
      "type": "object"
    },
    "v1Billing": {
      "description": "billing preference",
      "properties": {
        "billingDay": {
          "type": "integer"
        },
        "tierPricing": {
          "$ref": "#/definitions/v1TierPrice"
        }
      }
    },
    "v1BrokerLogin": {
      "description": "Request for broker login request",
      "properties": {
        "subscriberSubjects": {
          "description": "subjects that client need to subscribe",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1BrokerToken": {
      "description": "Response for broker login request",
      "properties": {
        "maxAllowedClients": {
          "description": "maximum number of clients that can subscribe to the subject",
          "type": "integer"
        },
        "msgCtxData": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "message context data can be used as contextual information for the message exchange"
        },
        "publisherSubjects": {
          "description": "subjects that client can publish",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "subscriberSubjects": {
          "description": "subjects that client has subscribed",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1BulkDeleteFailure": {
      "properties": {
        "errMsg": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1BulkDeleteRequest": {
      "properties": {
        "uids": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "uids"
      ]
    },
    "v1BulkDeleteResponse": {
      "properties": {
        "deletedCount": {
          "type": "integer",
          "x-omitempty": false
        },
        "failures": {
          "items": {
            "$ref": "#/definitions/v1BulkDeleteFailure"
          },
          "type": "array",
          "uniqueItems": true,
          "x-omitempty": false
        },
        "isSucceeded": {
          "type": "boolean",
          "x-omitempty": false
        },
        "message": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1BulkEvents": {
      "description": "Describes a list component events' details",
      "items": {
        "$ref": "#/definitions/v1Event"
      },
      "type": "array",
      "uniqueItems": true
    },
    "v1CPU": {
      "properties": {
        "cores": {
          "description": "number of cpu cores",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1CPUPassthroughSpec": {
      "properties": {
        "cachePassthrough": {
          "type": "boolean"
        },
        "isEnabled": {
          "description": "Enables the CPU Passthrough for the libvirt domain",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1Card": {
      "description": "Card details object",
      "properties": {
        "brand": {
          "description": "Card brand",
          "type": "string"
        },
        "country": {
          "description": "Country name the card belongs",
          "type": "string"
        },
        "expYear": {
          "description": "Expiry year of the card",
          "format": "uint64",
          "type": "number"
        },
        "fingerPrint": {
          "description": "Finger print",
          "type": "string"
        },
        "funding": {
          "description": "Funding",
          "type": "string"
        },
        "last4": {
          "description": "Last 4 digit of the card",
          "type": "string"
        }
      }
    },
    "v1Cert": {
      "properties": {
        "certificate": {
          "type": "string",
          "x-omitempty": false
        },
        "isCA": {
          "type": "boolean",
          "x-omitempty": false
        },
        "key": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1Certificate": {
      "description": "Certificate details",
      "properties": {
        "expiry": {
          "$ref": "#/definitions/v1Time",
          "description": "Certificate expiry time"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1CertificateAuthority": {
      "description": "Certificate Authority",
      "properties": {
        "certificates": {
          "items": {
            "$ref": "#/definitions/v1Certificate"
          },
          "type": "array"
        },
        "expiry": {
          "$ref": "#/definitions/v1Time",
          "description": "Certificate expiry time"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Channel": {
      "properties": {
        "alertAllUsers": {
          "type": "boolean",
          "x-omitempty": false
        },
        "createdBy": {
          "type": "string"
        },
        "http": {
          "properties": {
            "body": {
              "type": "string"
            },
            "headers": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "method": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "identifiers": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "isActive": {
          "type": "boolean",
          "x-omitempty": false
        },
        "status": {
          "$ref": "#/definitions/v1AlertNotificationStatus"
        },
        "type": {
          "enum": [
            "email",
            "app",
            "http"
          ],
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1CleanUpResource": {
      "description": "Resources of tenant",
      "properties": {
        "activeResources": {
          "$ref": "#/definitions/v1ActiveTenantResources"
        },
        "tenantStatus": {
          "$ref": "#/definitions/v1TenantCleanUpStatus"
        }
      },
      "type": "object"
    },
    "v1CloudAccountMeta": {
      "description": "Cloud account meta information",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1CloudAccountMetadata": {
      "description": "Cloud account metadata summary",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        }
      }
    },
    "v1CloudAccountSettings": {
      "description": "Cloud account settings",
      "properties": {
        "disablePropertiesRequest": {
          "description": "Will disable certain properties request to cloud and the input is collected directly from the user",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1CloudAccountStatus": {
      "description": "Status of the account",
      "properties": {
        "state": {
          "description": "Cloud account status",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1CloudAccountSummary": {
      "description": "Cloud account summary",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "specSummary": {
          "description": "Cloud account spec summary",
          "properties": {
            "accountId": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      },
      "type": "object"
    },
    "v1CloudAccountUidEntity": {
      "description": "Cloud account uid entity",
      "properties": {
        "uid": {
          "description": "Cloud account uid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1CloudAccountsMetadata": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1CloudAccountMetadata"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1CloudAccountsPatch": {
      "items": {
        "$ref": "#/definitions/v1HttpPatch"
      },
      "type": "array"
    },
    "v1CloudAccountsSummary": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1CloudAccountSummary"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1CloudCategory": {
      "default": "cloud",
      "description": "Cloud category description",
      "enum": [
        "datacenter",
        "cloud",
        "edge"
      ],
      "type": "string"
    },
    "v1CloudConfigMeta": {
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "machinePools": {
          "description": "Machine pool meta information",
          "items": {
            "$ref": "#/definitions/v1MachinePoolMeta"
          },
          "type": "array"
        },
        "uid": {
          "description": "Cluster's cloud config uid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1CloudCost": {
      "description": "Cloud cost information",
      "properties": {
        "compute": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "storage": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "total": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1CloudCostDataPoint": {
      "description": "Cloud cost data point information",
      "properties": {
        "compute": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "storage": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "timestamp": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1CloudInstanceRateConfig": {
      "description": "Cloud instance rate config",
      "properties": {
        "computeRateProportion": {
          "format": "float",
          "type": "number"
        },
        "memoryRateProportion": {
          "format": "float",
          "type": "number"
        }
      }
    },
    "v1CloudMachineStatus": {
      "description": "cloud machine status",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1MachineHealth"
        },
        "instanceState": {
          "enum": [
            "Pending",
            "Provisioning",
            "Provisioned",
            "Running",
            "Deleting",
            "Deleted",
            "Failed",
            "Unknown"
          ],
          "type": "string"
        },
        "maintenanceStatus": {
          "$ref": "#/definitions/v1MachineMaintenanceStatus"
        }
      },
      "type": "object"
    },
    "v1CloudRate": {
      "description": "Cloud estimated rate information",
      "properties": {
        "compute": {
          "$ref": "#/definitions/v1ComputeRate"
        },
        "storage": {
          "items": {
            "$ref": "#/definitions/v1StorageRate"
          },
          "type": "array"
        },
        "total": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1CloudResourceMetadata": {
      "description": "Cloud resource metadata",
      "properties": {
        "instanceTypes": {
          "additionalProperties": {
            "$ref": "#/definitions/v1InstanceType"
          },
          "type": "object"
        },
        "storageTypes": {
          "additionalProperties": {
            "$ref": "#/definitions/v1StorageType"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1CloudSpotPrice": {
      "description": "Spot price entity of a particular cloud type",
      "properties": {
        "spotPrice": {
          "description": "Spot price of a resource for a particular cloud",
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1CloudWatch": {
      "properties": {
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "group": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "stream": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterBackup": {
      "description": "Cluster Backup",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterBackupSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterBackupStatus"
        }
      }
    },
    "v1ClusterBackupConfig": {
      "description": "Cluster backup config",
      "properties": {
        "backupLocationName": {
          "type": "string"
        },
        "backupLocationUid": {
          "type": "string"
        },
        "backupName": {
          "type": "string"
        },
        "backupPrefix": {
          "type": "string"
        },
        "durationInHours": {
          "format": "int64",
          "type": "number"
        },
        "includeAllDisks": {
          "type": "boolean"
        },
        "includeClusterResources": {
          "type": "boolean"
        },
        "locationType": {
          "type": "string"
        },
        "namespaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "schedule": {
          "$ref": "#/definitions/v1ClusterFeatureSchedule"
        }
      }
    },
    "v1ClusterBackupLocationType": {
      "description": "Cluster backup location type",
      "properties": {
        "locationType": {
          "type": "string"
        }
      },
      "required": [
        "locationType"
      ]
    },
    "v1ClusterBackupSpec": {
      "description": "Cluster Backup Spec",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/v1ClusterBackupConfig"
        }
      }
    },
    "v1ClusterBackupStatus": {
      "description": "Cluster Backup Status",
      "properties": {
        "clusterBackupStatuses": {
          "items": {
            "$ref": "#/definitions/v1ClusterBackupStatusMeta"
          },
          "type": "array"
        }
      }
    },
    "v1ClusterBackupStatusMeta": {
      "description": "Cluster Backup Status Meta",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "backupConfig": {
          "$ref": "#/definitions/v1BackupStatusConfig"
        },
        "backupLocationConfig": {
          "$ref": "#/definitions/v1BackupLocationConfig"
        },
        "backupRequestUid": {
          "type": "string"
        },
        "backupStatusMeta": {
          "items": {
            "$ref": "#/definitions/v1BackupStatusMeta"
          },
          "type": "array"
        },
        "restoreStatusMeta": {
          "items": {
            "$ref": "#/definitions/v1BackupRestoreStatusMeta"
          },
          "type": "array"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterComplianceOnDemandConfig": {
      "description": "Cluster compliance scan on demand configuration",
      "properties": {
        "kubeBench": {
          "$ref": "#/definitions/v1ClusterComplianceScanKubeBenchConfig"
        },
        "kubeHunter": {
          "$ref": "#/definitions/v1ClusterComplianceScanKubeHunterConfig"
        },
        "sonobuoy": {
          "$ref": "#/definitions/v1ClusterComplianceScanSonobuoyConfig"
        },
        "syft": {
          "$ref": "#/definitions/v1ClusterComplianceScanSyftConfig"
        }
      }
    },
    "v1ClusterComplianceScan": {
      "description": "Cluster Compliance Scan",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterComplianceScanSpec"
        }
      }
    },
    "v1ClusterComplianceScanKubeBenchConfig": {
      "description": "Cluster compliance scan config for kube bench driver",
      "properties": {
        "runScan": {
          "type": "boolean"
        }
      }
    },
    "v1ClusterComplianceScanKubeBenchScheduleConfig": {
      "description": "Cluster compliance scan schedule config for kube bench driver",
      "properties": {
        "schedule": {
          "$ref": "#/definitions/v1ClusterFeatureSchedule"
        }
      }
    },
    "v1ClusterComplianceScanKubeHunterConfig": {
      "description": "Cluster compliance scan config for kube hunter driver",
      "properties": {
        "runScan": {
          "type": "boolean"
        }
      }
    },
    "v1ClusterComplianceScanKubeHunterScheduleConfig": {
      "description": "Cluster compliance scan schedule config for kube hunter driver",
      "properties": {
        "schedule": {
          "$ref": "#/definitions/v1ClusterFeatureSchedule"
        }
      }
    },
    "v1ClusterComplianceScanLogSpec": {
      "description": "Cluster compliance scan logs spec",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "driverType": {
          "type": "string"
        }
      }
    },
    "v1ClusterComplianceScanLogs": {
      "description": "Cluster compliance scan Logs",
      "properties": {
        "kubeBenchLogs": {
          "items": {
            "$ref": "#/definitions/v1ClusterScanLogKubeBench"
          },
          "type": "array"
        },
        "kubeHunterLogs": {
          "items": {
            "$ref": "#/definitions/v1ClusterScanLogKubeHunter"
          },
          "type": "array"
        },
        "sonobuoyLogs": {
          "items": {
            "$ref": "#/definitions/v1ClusterScanLogSonobuoy"
          },
          "type": "array"
        },
        "syftLogs": {
          "items": {
            "$ref": "#/definitions/v1ClusterScanLogSyft"
          },
          "type": "array"
        }
      }
    },
    "v1ClusterComplianceScanSonobuoyConfig": {
      "description": "Cluster compliance scan config for sonobuoy driver",
      "properties": {
        "runScan": {
          "type": "boolean"
        }
      }
    },
    "v1ClusterComplianceScanSonobuoyScheduleConfig": {
      "description": "Cluster compliance scan schedule config for sonobuoy driver",
      "properties": {
        "schedule": {
          "$ref": "#/definitions/v1ClusterFeatureSchedule"
        }
      }
    },
    "v1ClusterComplianceScanSpec": {
      "description": "Cluster compliance scan Spec",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "driverSpec": {
          "additionalProperties": {
            "$ref": "#/definitions/v1ComplianceScanDriverSpec"
          },
          "type": "object"
        }
      }
    },
    "v1ClusterComplianceScanSyftConfig": {
      "description": "Cluster compliance scan config for syft driver",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1ClusterComplianceScanSyftDriverConfig"
        },
        "runScan": {
          "type": "boolean"
        }
      }
    },
    "v1ClusterComplianceScanSyftDriverConfig": {
      "description": "Cluster compliance scan specification",
      "properties": {
        "format": {
          "enum": [
            "cyclonedx-json",
            "github-json",
            "spdx-json",
            "syft-json"
          ],
          "type": "string"
        },
        "labelSelector": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/v1ObjectEntity"
        },
        "namespace": {
          "type": "string"
        },
        "podName": {
          "type": "string"
        },
        "scope": {
          "enum": [
            "cluster",
            "namespace",
            "label-selector",
            "pod"
          ],
          "type": "string"
        }
      }
    },
    "v1ClusterComplianceScheduleConfig": {
      "description": "Cluster compliance scan schedule configuration",
      "properties": {
        "kubeBench": {
          "$ref": "#/definitions/v1ClusterComplianceScanKubeBenchScheduleConfig"
        },
        "kubeHunter": {
          "$ref": "#/definitions/v1ClusterComplianceScanKubeHunterScheduleConfig"
        },
        "sonobuoy": {
          "$ref": "#/definitions/v1ClusterComplianceScanSonobuoyScheduleConfig"
        }
      }
    },
    "v1ClusterCondition": {
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "v1ClusterConfig": {
      "properties": {
        "clusterMetaAttribute": {
          "description": "ClusterMetaAttribute contains additional cluster metadata information.",
          "type": "string"
        },
        "clusterRbac": {
          "description": "Deprecated. Use clusterResources",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          },
          "type": "array"
        },
        "clusterResources": {
          "$ref": "#/definitions/v1ClusterResources",
          "description": "ClusterResources defines the managment of namespace resource allocations, role bindings."
        },
        "controlPlaneHealthCheckTimeout": {
          "description": "ControlPlaneHealthCheckTimeout is the timeout to check for ready state of the control plane nodes. If the node is not ready within the time out set, the node will be deleted and a new node will be launched.",
          "type": "string"
        },
        "hostClusterConfig": {
          "$ref": "#/definitions/v1HostClusterConfig",
          "description": "HostClusterConfiguration defines the configuration of host clusters, where virtual clusters be deployed"
        },
        "lifecycleConfig": {
          "$ref": "#/definitions/v1LifecycleConfig"
        },
        "machineHealthConfig": {
          "$ref": "#/definitions/v1MachineHealthCheckConfig",
          "description": "MachineHealthCheckConfig defines the healthcheck timeouts for the node. The timeouts are configured by the user to overide the default healthchecks."
        },
        "machineManagementConfig": {
          "$ref": "#/definitions/v1MachineManagementConfig",
          "description": "MachineManagementConfig defines the management configurations for the node. Patching OS security updates etc can be configured by user."
        },
        "updateWorkerPoolsInParallel": {
          "description": "UpdateWorkerPoolsInParallel is used to decide if the update of workerpools happen in parallel. When this flag is false, the workerpools are updated sequentially.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1ClusterConfigEntity": {
      "properties": {
        "clusterMetaAttribute": {
          "description": "ClusterMetaAttribute can be used to set additional cluster metadata information.",
          "type": "string"
        },
        "controlPlaneHealthCheckTimeout": {
          "type": "string"
        },
        "hostClusterConfig": {
          "$ref": "#/definitions/v1HostClusterConfig"
        },
        "lifecycleConfig": {
          "$ref": "#/definitions/v1LifecycleConfig"
        },
        "location": {
          "$ref": "#/definitions/v1ClusterLocation"
        },
        "machineManagementConfig": {
          "$ref": "#/definitions/v1MachineManagementConfig"
        },
        "resources": {
          "$ref": "#/definitions/v1ClusterResourcesEntity"
        },
        "updateWorkerPoolsInParallel": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1ClusterConfigResponse": {
      "properties": {
        "hostClusterConfig": {
          "$ref": "#/definitions/v1HostClusterConfigResponse",
          "description": "HostClusterConfig defines the configuration entity of host clusters config entity"
        }
      },
      "type": "object"
    },
    "v1ClusterDefinitionEntity": {
      "description": "Cluster definition entity",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterDefinitionSpecEntity"
        }
      },
      "type": "object"
    },
    "v1ClusterDefinitionProfileEntity": {
      "description": "Cluster definition profile entity",
      "properties": {
        "packs": {
          "description": "Cluster profile packs array",
          "items": {
            "$ref": "#/definitions/v1PackValuesEntity"
          },
          "type": "array",
          "uniqueItems": true
        },
        "uid": {
          "description": "Cluster profile uid",
          "type": "string"
        }
      },
      "required": [
        "uid"
      ],
      "type": "object"
    },
    "v1ClusterDefinitionSpecEntity": {
      "description": "Cluster definition spec entity",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "profiles": {
          "description": "Cluster definition profiles",
          "items": {
            "$ref": "#/definitions/v1ClusterDefinitionProfileEntity"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "profiles",
        "cloudType"
      ],
      "type": "object"
    },
    "v1ClusterEdgeInstallerConfig": {
      "properties": {
        "installerDownloadLinks": {
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1ClusterFeatureActor": {
      "description": "Compliance Scan actor",
      "properties": {
        "actorType": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ClusterFeatureSchedule": {
      "description": "Cluster feature schedule",
      "properties": {
        "scheduledRunTime": {
          "type": "string"
        }
      }
    },
    "v1ClusterFips": {
      "properties": {
        "mode": {
          "$ref": "#/definitions/v1ClusterFipsMode"
        }
      }
    },
    "v1ClusterFipsMode": {
      "default": "none",
      "enum": [
        "full",
        "none",
        "partial",
        "unknown"
      ],
      "type": "string"
    },
    "v1ClusterGroup": {
      "description": "Cluster group information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterGroupSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterGroupStatus"
        }
      }
    },
    "v1ClusterGroupClusterRef": {
      "description": "Cluster group cluster reference",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "clusterUid": {
          "type": "string"
        }
      }
    },
    "v1ClusterGroupClustersConfig": {
      "description": "Clusters config of cluster group",
      "properties": {
        "endpointType": {
          "description": "Host cluster endpoint type",
          "enum": [
            "Ingress",
            "LoadBalancer"
          ],
          "type": "string"
        },
        "hostClustersConfig": {
          "items": {
            "$ref": "#/definitions/v1ClusterGroupHostClusterConfig"
          },
          "type": "array",
          "uniqueItems": true
        },
        "kubernetesDistroType": {
          "$ref": "#/definitions/v1ClusterKubernetesDistroType"
        },
        "limitConfig": {
          "$ref": "#/definitions/v1ClusterGroupLimitConfig"
        },
        "values": {
          "type": "string"
        }
      }
    },
    "v1ClusterGroupEntity": {
      "description": "Cluster group information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterGroupSpecEntity"
        }
      }
    },
    "v1ClusterGroupHostClusterConfig": {
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "endpointConfig": {
          "$ref": "#/definitions/v1HostClusterEndpointConfig",
          "description": "host cluster endpoint configuration"
        }
      }
    },
    "v1ClusterGroupHostClusterEntity": {
      "description": "Clusters and clusters config of cluster group",
      "properties": {
        "clusterRefs": {
          "items": {
            "$ref": "#/definitions/v1ClusterGroupClusterRef"
          },
          "type": "array",
          "uniqueItems": true
        },
        "clustersConfig": {
          "$ref": "#/definitions/v1ClusterGroupClustersConfig"
        }
      }
    },
    "v1ClusterGroupLimitConfig": {
      "description": "Cluster group limit config",
      "properties": {
        "cpu": {
          "description": "Deprecated. Use field cpuMilliCore",
          "format": "int32",
          "type": "integer"
        },
        "cpuMilliCore": {
          "description": "CPU in milli cores",
          "format": "int32",
          "type": "integer"
        },
        "memory": {
          "description": "Deprecated. Use field memoryMiB",
          "format": "int32",
          "type": "integer"
        },
        "memoryMiB": {
          "description": "Memory in MiB",
          "format": "int32",
          "type": "integer"
        },
        "overSubscription": {
          "description": "Over subscription percentage",
          "format": "int32",
          "type": "integer"
        },
        "storageGiB": {
          "description": "Storage in GiB",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1ClusterGroupResource": {
      "description": "Cluster group resource allocated and usage information",
      "properties": {
        "allocated": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "used": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1ClusterGroupSpec": {
      "description": "Cluster group specifications",
      "properties": {
        "clusterProfileTemplates": {
          "description": "ClusterProfileTemplate is a copy of the draft version or latest published version of the clusterprofileSpec. It consists of list of add on profiles at a cluster group level which will be enforced on all virtual cluster. ClusterProfileTemplate will be updated from the clusterprofile pointed by ClusterProfileRef",
          "items": {
            "$ref": "#/definitions/v1ClusterProfileTemplate"
          },
          "type": "array"
        },
        "clusterRefs": {
          "items": {
            "$ref": "#/definitions/v1ClusterGroupClusterRef"
          },
          "type": "array",
          "uniqueItems": true
        },
        "clustersConfig": {
          "$ref": "#/definitions/v1ClusterGroupClustersConfig"
        },
        "type": {
          "enum": [
            "hostCluster"
          ],
          "type": "string"
        }
      }
    },
    "v1ClusterGroupSpecEntity": {
      "description": "Cluster group specifications request entity",
      "properties": {
        "clusterRefs": {
          "items": {
            "$ref": "#/definitions/v1ClusterGroupClusterRef"
          },
          "type": "array",
          "uniqueItems": true
        },
        "clustersConfig": {
          "$ref": "#/definitions/v1ClusterGroupClustersConfig"
        },
        "profiles": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileEntity"
          },
          "type": "array"
        },
        "type": {
          "enum": [
            "hostCluster"
          ],
          "type": "string"
        }
      }
    },
    "v1ClusterGroupStatus": {
      "description": "Cluster group status",
      "properties": {
        "isActive": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1ClusterGroupSummary": {
      "description": "Cluster group summay",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterGroupSummarySpec"
        }
      }
    },
    "v1ClusterGroupSummarySpec": {
      "description": "Cluster group summay spec",
      "properties": {
        "clusterProfileTemplates": {
          "items": {
            "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
          },
          "type": "array"
        },
        "cpu": {
          "$ref": "#/definitions/v1ClusterGroupResource",
          "description": "Deprecated"
        },
        "endpointType": {
          "enum": [
            "Ingress",
            "LoadBalancer"
          ],
          "type": "string"
        },
        "hostClusters": {
          "items": {
            "$ref": "#/definitions/v1ObjectResReference"
          },
          "type": "array",
          "uniqueItems": true
        },
        "hostClustersCount": {
          "type": "integer",
          "x-omitempty": false
        },
        "memory": {
          "$ref": "#/definitions/v1ClusterGroupResource",
          "description": "Deprecated"
        },
        "scope": {
          "type": "string"
        },
        "virtualClustersCount": {
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "v1ClusterGroupsDeveloperCreditUsage": {
      "description": "Cluster group resource allocated and usage information",
      "properties": {
        "allocatedCredit": {
          "$ref": "#/definitions/v1DeveloperCredit"
        },
        "usedCredit": {
          "$ref": "#/definitions/v1DeveloperCredit"
        }
      }
    },
    "v1ClusterGroupsHostClusterMetadata": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1ObjectScopeEntity"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1ClusterGroupsHostClusterSummary": {
      "properties": {
        "summaries": {
          "items": {
            "$ref": "#/definitions/v1ClusterGroupSummary"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "summaries"
      ],
      "type": "object"
    },
    "v1ClusterHelmChart": {
      "description": "Cluster helm chart metadata",
      "properties": {
        "localName": {
          "type": "string"
        },
        "matchedRegistries": {
          "items": {
            "$ref": "#/definitions/v1ClusterHelmRegistry"
          },
          "type": "array",
          "uniqueItems": true
        },
        "name": {
          "type": "string"
        },
        "values": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ClusterHelmCharts": {
      "description": "Cluster helm charts metadata",
      "properties": {
        "charts": {
          "items": {
            "$ref": "#/definitions/v1ClusterHelmChart"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1ClusterHelmRegistry": {
      "description": "Cluster helm registry information",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1ClusterImport": {
      "properties": {
        "importLink": {
          "description": "import link to download and install ally-lite, palette-lite",
          "type": "string"
        },
        "isBrownfield": {
          "description": "Deprecated. Use the 'spec.clusterType'",
          "type": "boolean",
          "x-omitempty": false
        },
        "state": {
          "description": "cluster import status",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterKubeBenchLogStatus": {
      "description": "Cluster compliance scan KubeBench Log Status",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "message": {
          "type": "string"
        },
        "reports": {
          "additionalProperties": {
            "$ref": "#/definitions/v1KubeBenchReport"
          },
          "type": "object"
        },
        "requestUid": {
          "type": "string"
        },
        "scanTime": {
          "$ref": "#/definitions/v1ClusterScanTime"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterKubeHunterLogStatus": {
      "description": "Cluster compliance scan KubeHunter Log Status",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "message": {
          "type": "string"
        },
        "reports": {
          "additionalProperties": {
            "$ref": "#/definitions/v1KubeHunterReport"
          },
          "type": "object"
        },
        "requestUid": {
          "type": "string"
        },
        "scanTime": {
          "$ref": "#/definitions/v1ClusterScanTime"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterKubernetesDistroType": {
      "default": "k3s",
      "enum": [
        "k3s",
        "cncf_k8s"
      ],
      "type": "string"
    },
    "v1ClusterLocation": {
      "description": "Cluster location information",
      "properties": {
        "countryCode": {
          "description": "country code for cluster location",
          "type": "string"
        },
        "countryName": {
          "description": "country name for cluster location",
          "type": "string"
        },
        "geoLoc": {
          "$ref": "#/definitions/v1GeolocationLatlong"
        },
        "regionCode": {
          "description": "region code for cluster location",
          "type": "string"
        },
        "regionName": {
          "description": "region name for cluster location",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterLogFetcher": {
      "description": "Cluster Log Fetcher",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterLogFetcherSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterLogFetcherStatus"
        }
      }
    },
    "v1ClusterLogFetcherK8sRequest": {
      "description": "Cluster Log Fetcher K8s",
      "properties": {
        "labelSelector": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "namespaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1ClusterLogFetcherNodeRequest": {
      "description": "Cluster Log Fetcher Node Request",
      "properties": {
        "logs": {
          "description": "Array of logs",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1ClusterLogFetcherRequest": {
      "description": "Cluster Log Fetcher Request",
      "properties": {
        "duration": {
          "default": 10,
          "description": "Duration for which log is requested",
          "format": "int64",
          "type": "integer"
        },
        "k8s": {
          "$ref": "#/definitions/v1ClusterLogFetcherK8sRequest"
        },
        "mode": {
          "default": "cluster",
          "description": "Accepted Values - [\"cluster\", \"app\"]. if \"app\" then logs will be fetched from the virtual cluster",
          "enum": [
            "cluster",
            "app"
          ],
          "type": "string"
        },
        "noOfLines": {
          "default": 1000,
          "description": "No of lines of logs requested",
          "format": "int64",
          "type": "integer"
        },
        "node": {
          "$ref": "#/definitions/v1ClusterLogFetcherNodeRequest"
        }
      }
    },
    "v1ClusterLogFetcherSpec": {
      "description": "Cluster Log Fetcher Spec",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "log": {
          "type": "string"
        }
      }
    },
    "v1ClusterLogFetcherStatus": {
      "description": "Cluster Log Fetcher Status",
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterManifest": {
      "description": "Cluster manifest information",
      "properties": {
        "content": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1ClusterManifests": {
      "description": "Cluster manifests information",
      "properties": {
        "manifests": {
          "items": {
            "$ref": "#/definitions/v1ClusterManifest"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1ClusterMeta": {
      "description": "Active cluster meta",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "clusterType": {
          "type": "string"
        },
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "duration": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "projectName": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/v1ClusterState"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterMetaAttributeEntity": {
      "description": "Cluster additional metadata entity",
      "properties": {
        "clusterMetaAttribute": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterMetaSpecLocation": {
      "description": "Cluster location information",
      "properties": {
        "coordinates": {
          "items": {
            "format": "float64",
            "type": "number"
          },
          "type": "array"
        },
        "countryCode": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        },
        "regionCode": {
          "type": "string"
        },
        "regionName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterMetaStatusCost": {
      "description": "Cluster meta Cost information",
      "properties": {
        "total": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1ClusterMetaStatusHealth": {
      "description": "Cluster meta health information",
      "properties": {
        "isHeartBeatFailed": {
          "type": "boolean",
          "x-omitempty": false
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterMetaStatusUpdates": {
      "description": "Cluster meta updates information",
      "properties": {
        "isUpdatesPending": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1ClusterNamespace": {
      "description": "Cluster's namespace",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "pvcCount": {
          "format": "int32",
          "type": "number"
        }
      }
    },
    "v1ClusterNamespaceResource": {
      "description": "Cluster Namespace resource defintion",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterNamespaceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterNamespaceStatus"
        }
      },
      "type": "object"
    },
    "v1ClusterNamespaceResourceAllocation": {
      "description": "Cluster namespace resource allocation",
      "properties": {
        "cpuCores": {
          "exclusiveMinimum": true,
          "minimum": 0,
          "type": "number"
        },
        "memoryMiB": {
          "exclusiveMinimum": true,
          "minimum": 0,
          "type": "number"
        }
      }
    },
    "v1ClusterNamespaceResourceInputEntity": {
      "description": "Cluster Namespace resource defintion",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaUpdateEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterNamespaceSpec"
        }
      },
      "type": "object"
    },
    "v1ClusterNamespaceResources": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1ClusterNamespaceResource"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1ClusterNamespaceResourcesUpdateEntity": {
      "properties": {
        "namespaces": {
          "items": {
            "$ref": "#/definitions/v1ClusterNamespaceResourceInputEntity"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1ClusterNamespaceSpec": {
      "description": "Cluster namespace spec",
      "properties": {
        "isRegex": {
          "type": "boolean",
          "x-omitempty": false
        },
        "relatedObject": {
          "$ref": "#/definitions/v1RelatedObject"
        },
        "resourceAllocation": {
          "$ref": "#/definitions/v1ClusterNamespaceResourceAllocation"
        }
      }
    },
    "v1ClusterNamespaceStatus": {
      "description": "Cluster namespace status",
      "properties": {
        "errors": {
          "items": {
            "$ref": "#/definitions/v1ClusterResourceError"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1ClusterNamespaces": {
      "description": "Cluster's available namespaces",
      "properties": {
        "namespaces": {
          "items": {
            "$ref": "#/definitions/v1ClusterNamespace"
          },
          "type": "array"
        }
      }
    },
    "v1ClusterNotificationStatus": {
      "description": "Cluster notifications status",
      "properties": {
        "isAvailable": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1ClusterNotificationUpdateEntity": {
      "description": "Cluster input for notification update",
      "properties": {
        "profiles": {
          "items": {
            "$ref": "#/definitions/v1ClusterProfileNotificationUpdateEntity"
          },
          "type": "array",
          "uniqueItems": true
        },
        "spcApplySettings": {
          "$ref": "#/definitions/v1SpcApplySettings"
        }
      },
      "type": "object"
    },
    "v1ClusterPackManifestStatus": {
      "properties": {
        "condition": {
          "$ref": "#/definitions/v1ClusterCondition"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterPackStatus": {
      "properties": {
        "condition": {
          "$ref": "#/definitions/v1ClusterCondition"
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "manifests": {
          "items": {
            "$ref": "#/definitions/v1ClusterPackManifestStatus"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "profileUid": {
          "type": "string"
        },
        "services": {
          "items": {
            "$ref": "#/definitions/v1LoadBalancerService"
          },
          "type": "array"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterPreference": {
      "description": "cluster preference",
      "properties": {
        "archivalIntervalInHour": {
          "description": "clusters cleanup interval post deletion",
          "type": "integer"
        },
        "deletePeriodInHour": {
          "description": "clusters deleted before delete period are eligible for cleanup",
          "type": "integer"
        },
        "healthPollIntervalInMinutes": {
          "description": "clusters health poll interval",
          "maximum": 60,
          "minimum": 3,
          "type": "integer"
        },
        "monitorIntervalInMinutes": {
          "description": "clusters state and consistency monitor",
          "type": "integer"
        }
      }
    },
    "v1ClusterProfile": {
      "description": "ClusterProfile is the Schema for the clusterprofiles API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterProfileSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterProfileStatus"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileCloneEntity": {
      "description": "Cluster profile clone request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterProfileCloneMetaInputEntity"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileCloneMetaInputEntity": {
      "description": "Cluster profile clone metadata",
      "properties": {
        "name": {
          "description": "Cloned cluster profile name",
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/v1ClusterProfileCloneTarget"
        },
        "version": {
          "description": "Cloned cluster profile version",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1ClusterProfileCloneTarget": {
      "description": "Cluster profile clone meta input entity",
      "properties": {
        "projectUid": {
          "description": "Cloned cluster profile project uid",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/v1Scope"
        }
      },
      "required": [
        "scope"
      ],
      "type": "object"
    },
    "v1ClusterProfileEntity": {
      "description": "Cluster profile request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "template": {
              "$ref": "#/definitions/v1ClusterProfileTemplateDraft"
            },
            "variables": {
              "description": "List of unique variable fields defined for a cluster profile with schema constraints",
              "items": {
                "$ref": "#/definitions/v1Variable"
              },
              "type": "array",
              "uniqueItems": true
            },
            "version": {
              "description": "Cluster profile version",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileFilterSpec": {
      "description": "Cluster profile filter spec",
      "properties": {
        "environment": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "fips": {
          "$ref": "#/definitions/v1ClusterFipsMode"
        },
        "profileName": {
          "$ref": "#/definitions/v1FilterString"
        },
        "profileType": {
          "items": {
            "$ref": "#/definitions/v1ProfileType"
          },
          "type": "array",
          "uniqueItems": true
        },
        "scope": {
          "$ref": "#/definitions/v1ClusterProfileScope"
        },
        "tags": {
          "$ref": "#/definitions/v1FilterArray"
        },
        "version": {
          "$ref": "#/definitions/v1FilterVersionString"
        }
      }
    },
    "v1ClusterProfileFips": {
      "description": "Cluster profile fips compliance status",
      "properties": {
        "mode": {
          "$ref": "#/definitions/v1ClusterFipsMode"
        }
      }
    },
    "v1ClusterProfileImportEntity": {
      "description": "Cluster profile import request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterProfileMetadataImportEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterProfileSpecImportEntity"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileMetadata": {
      "description": "Cluster profile filter spec",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectEntity"
        },
        "spec": {
          "properties": {
            "cloudType": {
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1ClusterProfileMetadataImportEntity": {
      "description": "Cluster profile import metadata",
      "properties": {
        "description": {
          "description": "Cluster profile description",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cluster profile labels",
          "type": "object"
        },
        "name": {
          "description": "Cluster profile name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileNotificationUpdateEntity": {
      "description": "Cluster profile notification update request payload",
      "properties": {
        "packs": {
          "description": "Cluster profile packs array",
          "items": {
            "$ref": "#/definitions/v1PackManifestUpdateEntity"
          },
          "type": "array",
          "uniqueItems": true
        },
        "uid": {
          "description": "Cluster profile uid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterProfilePackConfigList": {
      "properties": {
        "items": {
          "description": "Cluster profile packs array",
          "items": {
            "$ref": "#/definitions/v1PackConfig"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1ClusterProfilePackManifests": {
      "description": "Cluster profile pack manifests",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackManifestsSpec"
        },
        "status": {
          "$ref": "#/definitions/v1PackSummaryStatus"
        }
      },
      "type": "object"
    },
    "v1ClusterProfilePackSummary": {
      "description": "Cluster profile packs summary about the deprecated, disabled, deleted packs count",
      "properties": {
        "deleted": {
          "description": "Total count of deleted packs in a cluster profile",
          "type": "number",
          "x-omitempty": false
        },
        "deprecated": {
          "description": "Total count of deprecated packs in a cluster profile",
          "type": "number",
          "x-omitempty": false
        },
        "disabled": {
          "description": "Total count of disabled packs in a cluster profile",
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1ClusterProfilePacksEntities": {
      "description": "List of cluster profile packs",
      "properties": {
        "items": {
          "description": "Cluster profile packs array",
          "items": {
            "$ref": "#/definitions/v1ClusterProfilePacksEntity"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1ClusterProfilePacksEntity": {
      "description": "Cluster profile packs object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackSummarySpec"
        },
        "status": {
          "$ref": "#/definitions/v1PackSummaryStatus"
        }
      },
      "type": "object"
    },
    "v1ClusterProfilePacksManifests": {
      "description": "Cluster profile pack manifests",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "packs": {
              "description": "Cluster profile packs array",
              "items": {
                "$ref": "#/definitions/v1ClusterProfilePackManifests"
              },
              "type": "array",
              "uniqueItems": true
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileScope": {
      "enum": [
        "system",
        "tenant",
        "project"
      ],
      "type": "string"
    },
    "v1ClusterProfileSortFields": {
      "enum": [
        "profileName",
        "environment",
        "profileType",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "type": "string",
      "x-nullable": true
    },
    "v1ClusterProfileSortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1ClusterProfileSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1ClusterProfileSpec": {
      "description": "ClusterProfileTemplate can be in draft mode, or published mode User only see the latest published template, and (or) the draft template User can apply either the draft version or the latest published version to a cluster when user create a draft version, just copy the Published template, increment the version, and keep changing the draft template without increment the draft version when user publish a draft, the version is fixed, and won't be able to make any modification on published template For each clusterprofile that has a published version, there will be a ClusterProfileArchive automatically created when user publish a draft, the published version will also be copied over to the corresponding ClusterProfileArchive it is just in case in the future for whatever reason we may want to expose earlier versions",
      "properties": {
        "draft": {
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "published": {
          "$ref": "#/definitions/v1ClusterProfileTemplate"
        },
        "version": {
          "type": "string"
        },
        "versions": {
          "description": "Cluster profile's list of all the versions",
          "items": {
            "$ref": "#/definitions/v1ClusterProfileVersion"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileSpecEntity": {
      "description": "Cluster profile update spec",
      "properties": {
        "version": {
          "description": "Cluster profile version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileSpecImportEntity": {
      "description": "Cluster profile import spec",
      "properties": {
        "template": {
          "$ref": "#/definitions/v1ClusterProfileTemplateImportEntity"
        },
        "variables": {
          "description": "List of unique variable fields defined for a cluster profile with schema constraints",
          "items": {
            "$ref": "#/definitions/v1Variable"
          },
          "type": "array",
          "uniqueItems": true
        },
        "version": {
          "description": "Cluster profile version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileStatus": {
      "description": "ClusterProfileStatus defines the observed state of ClusterProfile",
      "properties": {
        "hasUserMacros": {
          "description": "If it is true then profile pack values has a reference to user defined macros",
          "type": "boolean",
          "x-omitempty": false
        },
        "inUseClusterUids": {
          "description": "Deprecated. Use inUseClusters",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "inUseClusters": {
          "items": {
            "$ref": "#/definitions/v1ObjectResReference"
          },
          "type": "array"
        },
        "isPublished": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1ClusterProfileStatusSummary": {
      "description": "ClusterProfileStatusSummary defines the observed state of ClusterProfile",
      "properties": {
        "fips": {
          "$ref": "#/definitions/v1ClusterProfileFips"
        },
        "inUseClusterUids": {
          "description": "Deprecated. Use inUseClusters",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "inUseClusters": {
          "items": {
            "$ref": "#/definitions/v1ObjectEntity"
          },
          "type": "array"
        },
        "isPublished": {
          "type": "boolean",
          "x-omitempty": false
        },
        "pack": {
          "$ref": "#/definitions/v1ClusterProfilePackSummary"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileSummary": {
      "description": "Cluster profile summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "specSummary": {
          "description": "Cluster profile spec summary",
          "properties": {
            "draft": {
              "$ref": "#/definitions/v1ClusterProfileTemplateSummary"
            },
            "published": {
              "$ref": "#/definitions/v1ClusterProfileTemplateSummary"
            },
            "version": {
              "description": "Cluster profile's latest version",
              "type": "string"
            },
            "versions": {
              "description": "Cluster profile's list of all the versions",
              "items": {
                "$ref": "#/definitions/v1ClusterProfileVersion"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterProfileStatusSummary"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileTemplate": {
      "description": "ClusterProfileTemplate contains details of a clusterprofile definition",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "packServerRefs": {
          "description": "PackServerRefs is only used on Hubble side it is reference to pack registry servers which PackRef belongs to in hubble, pack server is a top level object, so use a reference to point to it packs within a clusterprofile can come from different pack servers, so this is an array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          },
          "type": "array"
        },
        "packServerSecret": {
          "description": "This secret is used only on Palette side use case is similar  to k8s image pull secret this single secret internally should contains all the pack servers in PackServerRefs if empty, means no credential is needed to access the pack server For spectro saas, Ally will set this field before pass to palette",
          "type": "string"
        },
        "packs": {
          "description": "Packs definitions here are final definitions. If ClonedFrom and ParamsOverwrite is present, then Packs are the final merge result of ClonedFrom and ParamsOverwrite So orchestration engine will just take the Packs and do the work, no need to worry about parameters merge",
          "items": {
            "$ref": "#/definitions/v1PackRef"
          },
          "type": "array"
        },
        "profileVersion": {
          "description": "version start from 1.0.0, matching the index of ClusterProfileSpec.Versions[] will be used by clusterSpec to identify which version is applied to the cluster",
          "type": "string"
        },
        "relatedObject": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "RelatedObject refers to the type of object(clustergroup, cluster or edgeHost) the cluster profile is associated with"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "description": "Deprecated. Use profileVersion",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileTemplateDraft": {
      "description": "Cluster profile template spec",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "packs": {
          "description": "Cluster profile packs array",
          "items": {
            "$ref": "#/definitions/v1PackManifestEntity"
          },
          "type": "array",
          "uniqueItems": true
        },
        "type": {
          "$ref": "#/definitions/v1ProfileType"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileTemplateImportEntity": {
      "description": "Cluster profile import template",
      "properties": {
        "cloudType": {
          "description": "Cluster profile cloud type",
          "type": "string"
        },
        "packs": {
          "description": "Cluster profile packs array",
          "items": {
            "$ref": "#/definitions/v1PackImportEntity"
          },
          "type": "array",
          "uniqueItems": true
        },
        "type": {
          "description": "Cluster profile type [ \"cluster\", \"infra\", \"add-on\", \"system\" ]",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileTemplateMeta": {
      "description": "Cluster profile template meta information",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "name": {
          "description": "Cluster profile name",
          "type": "string"
        },
        "packs": {
          "description": "Cluster profile packs array",
          "items": {
            "$ref": "#/definitions/v1PackRef"
          },
          "type": "array"
        },
        "scope": {
          "description": "scope or context(system, tenant or project)",
          "type": "string"
        },
        "type": {
          "description": "Cluster profile type [ \"cluster\", \"infra\", \"add-on\", \"system\" ]",
          "type": "string"
        },
        "uid": {
          "description": "Cluster profile uid",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileTemplateSummary": {
      "description": "Cluster profile template summary",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "packs": {
          "items": {
            "$ref": "#/definitions/v1PackRefSummary"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileTemplateUpdate": {
      "description": "Cluster profile template update spec",
      "properties": {
        "packs": {
          "description": "Cluster profile packs array",
          "items": {
            "$ref": "#/definitions/v1PackManifestUpdateEntity"
          },
          "type": "array",
          "uniqueItems": true
        },
        "type": {
          "$ref": "#/definitions/v1ProfileType"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileUpdateEntity": {
      "description": "Cluster profile update request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "description": "Cluster profile update spec",
          "properties": {
            "template": {
              "$ref": "#/definitions/v1ClusterProfileTemplateUpdate"
            },
            "version": {
              "description": "Cluster profile version",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileValidatorResponse": {
      "description": "Cluster profile validator response",
      "properties": {
        "packs": {
          "$ref": "#/definitions/v1ConstraintValidatorResponse"
        }
      },
      "type": "object"
    },
    "v1ClusterProfileVersion": {
      "description": "Cluster profile with version",
      "properties": {
        "uid": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ClusterProfiles": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1ClusterProfile"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1ClusterProfilesFilterSpec": {
      "description": "Spectro cluster filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ClusterProfileFilterSpec"
        },
        "sort": {
          "items": {
            "$ref": "#/definitions/v1ClusterProfileSortSpec"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1ClusterProfilesMetadata": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1ClusterProfileMetadata"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1ClusterProfilesSummary": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1ClusterProfileSummary"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1ClusterProxySpec": {
      "description": "cluster proxy config spec",
      "properties": {
        "caContainerMountPath": {
          "description": "Location to mount Proxy CA cert inside container",
          "type": "string"
        },
        "caHostPath": {
          "description": "Location for Proxy CA cert on host nodes",
          "type": "string"
        },
        "httpProxy": {
          "description": "URL for HTTP requests unless overridden by NoProxy",
          "type": "string"
        },
        "httpsProxy": {
          "description": "HTTPS requests unless overridden by NoProxy",
          "type": "string"
        },
        "noProxy": {
          "description": "NoProxy represents the NO_PROXY or no_proxy environment",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterRbac": {
      "description": "Cluster RBAC role binding defintion",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterRbacSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterRbacStatus"
        }
      },
      "type": "object"
    },
    "v1ClusterRbacBinding": {
      "description": "Cluster RBAC binding",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/v1ClusterRoleRef"
        },
        "subjects": {
          "items": {
            "$ref": "#/definitions/v1ClusterRbacSubjects"
          },
          "type": "array",
          "uniqueItems": true
        },
        "type": {
          "enum": [
            "RoleBinding",
            "ClusterRoleBinding"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterRbacEntity": {
      "properties": {
        "clusterRbac": {
          "description": "Cluster RBAC role bindings",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          },
          "type": "array"
        }
      }
    },
    "v1ClusterRbacInputEntity": {
      "description": "Cluster RBAC role binding defintion",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaUpdateEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterRbacSpec"
        }
      },
      "type": "object"
    },
    "v1ClusterRbacResourcesUpdateEntity": {
      "properties": {
        "rbacs": {
          "items": {
            "$ref": "#/definitions/v1ClusterRbacInputEntity"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1ClusterRbacSpec": {
      "description": "Cluster RBAC spec",
      "properties": {
        "bindings": {
          "items": {
            "$ref": "#/definitions/v1ClusterRbacBinding"
          },
          "type": "array",
          "uniqueItems": true
        },
        "relatedObject": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      },
      "type": "object"
    },
    "v1ClusterRbacStatus": {
      "description": "Cluster rbac status",
      "properties": {
        "errors": {
          "items": {
            "$ref": "#/definitions/v1ClusterResourceError"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1ClusterRbacSubjects": {
      "description": "Cluster role ref",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "type": {
          "enum": [
            "User",
            "Group",
            "ServiceAccount"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterRbacs": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1ClusterRbac"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1ClusterRefs": {
      "description": "Cluster Object References",
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          },
          "type": "array"
        }
      }
    },
    "v1ClusterRepaveSource": {
      "enum": [
        "user",
        "hubble",
        "palette",
        "stylus"
      ],
      "type": "string"
    },
    "v1ClusterRepaveState": {
      "default": "Pending",
      "enum": [
        "Pending",
        "Approved",
        "Reverted"
      ],
      "type": "string"
    },
    "v1ClusterRepaveStatus": {
      "description": "Cluster repave status",
      "properties": {
        "state": {
          "$ref": "#/definitions/v1ClusterRepaveState"
        }
      }
    },
    "v1ClusterResourceAllocation": {
      "description": "Workspace resource allocation",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "resourceAllocation": {
          "$ref": "#/definitions/v1WorkspaceResourceAllocation"
        }
      }
    },
    "v1ClusterResourceError": {
      "description": "Cluster resource error",
      "properties": {
        "msg": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        }
      }
    },
    "v1ClusterResources": {
      "properties": {
        "namespaces": {
          "description": "Cluster namespaces",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          },
          "type": "array"
        },
        "rbacs": {
          "description": "Cluster RBAC role bindings",
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ClusterResourcesEntity": {
      "properties": {
        "namespaces": {
          "items": {
            "$ref": "#/definitions/v1ClusterNamespaceResourceInputEntity"
          },
          "type": "array",
          "uniqueItems": true
        },
        "rbacs": {
          "items": {
            "$ref": "#/definitions/v1ClusterRbacInputEntity"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1ClusterRestore": {
      "description": "Cluster Restore",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterRestoreSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterRestoreStatus"
        }
      }
    },
    "v1ClusterRestoreConfig": {
      "description": "Cluster restore config",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "backupRequestUid": {
          "type": "string"
        },
        "destinationClusterUid": {
          "type": "string"
        },
        "includeClusterResources": {
          "type": "boolean"
        },
        "includeNamespaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "preserveNodePorts": {
          "type": "boolean"
        },
        "restorePVs": {
          "type": "boolean"
        }
      },
      "required": [
        "backupRequestUid",
        "backupName",
        "destinationClusterUid"
      ]
    },
    "v1ClusterRestoreSpec": {
      "description": "Cluster Restore Spec",
      "properties": {
        "clusterUid": {
          "type": "string"
        }
      }
    },
    "v1ClusterRestoreStatus": {
      "description": "Cluster Restore Status",
      "properties": {
        "clusterRestoreStatuses": {
          "items": {
            "$ref": "#/definitions/v1ClusterRestoreStatusMeta"
          },
          "type": "array"
        }
      }
    },
    "v1ClusterRestoreStatusMeta": {
      "description": "Cluster Restore Status Meta",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "backupName": {
          "type": "string"
        },
        "backupRequestUid": {
          "type": "string"
        },
        "restoreRequestUid": {
          "type": "string"
        },
        "restoreStatusMeta": {
          "$ref": "#/definitions/v1RestoreStatusMeta"
        },
        "sourceClusterRef": {
          "$ref": "#/definitions/v1ResourceReference"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterRoleRef": {
      "description": "Cluster role ref",
      "properties": {
        "kind": {
          "enum": [
            "Role",
            "ClusterRole"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterScanLogKubeBench": {
      "description": "Cluster compliance scan KubeBench Log",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterComplianceScanLogSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterKubeBenchLogStatus"
        }
      }
    },
    "v1ClusterScanLogKubeHunter": {
      "description": "Cluster compliance scan KubeHunter Log",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterComplianceScanLogSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterKubeHunterLogStatus"
        }
      }
    },
    "v1ClusterScanLogSonobuoy": {
      "description": "Cluster compliance scan Sonobuoy Log",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterComplianceScanLogSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterSonobuoyLogStatus"
        }
      }
    },
    "v1ClusterScanLogSyft": {
      "description": "Cluster Compliance Scan Syft Log",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterComplianceScanLogSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterSyftLogStatus"
        }
      }
    },
    "v1ClusterScanTime": {
      "description": "Cluster compliance scan Time",
      "properties": {
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1ClusterSearchInputSpec": {
      "properties": {
        "inputs": {
          "additionalProperties": {
            "$ref": "#/definitions/v1ClusterSearchInputSpecProperty"
          },
          "type": "object"
        }
      }
    },
    "v1ClusterSearchInputSpecProperty": {
      "properties": {
        "values": {
          "items": {
            "$ref": "#/definitions/v1ObjectEntity"
          },
          "type": "array",
          "x-omitempty": true
        }
      }
    },
    "v1ClusterSonobuoyLogStatus": {
      "description": "Cluster compliance scan Sonobuoy Log Status",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "message": {
          "type": "string"
        },
        "reports": {
          "additionalProperties": {
            "$ref": "#/definitions/v1SonobuoyReport"
          },
          "type": "object"
        },
        "requestUid": {
          "type": "string"
        },
        "scanTime": {
          "$ref": "#/definitions/v1ClusterScanTime"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterState": {
      "enum": [
        "Pending",
        "Provisioning",
        "Running",
        "Deleting",
        "Deleted",
        "Error",
        "Importing"
      ],
      "type": "string"
    },
    "v1ClusterSyftLogStatus": {
      "description": "Cluster compliance scan Syft Log Status",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "location": {
          "$ref": "#/definitions/v1ObjectEntity"
        },
        "message": {
          "type": "string"
        },
        "reports": {
          "items": {
            "$ref": "#/definitions/v1SyftReport"
          },
          "type": "array"
        },
        "requestUid": {
          "type": "string"
        },
        "scanContext": {
          "$ref": "#/definitions/v1SyftScanContext"
        },
        "scanTime": {
          "$ref": "#/definitions/v1ClusterScanTime"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ClusterType": {
      "default": "PureManage",
      "enum": [
        "PureManage",
        "PureAttach"
      ],
      "type": "string"
    },
    "v1ClusterUpgradeSettingsEntity": {
      "properties": {
        "spectroComponents": {
          "enum": [
            "lock",
            "unlock"
          ],
          "type": "string"
        }
      }
    },
    "v1ClusterUsageSummary": {
      "description": "Cluster usage summary",
      "properties": {
        "cpuCores": {
          "type": "number",
          "x-omitempty": false
        },
        "isAlloy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterVirtualMachine": {
      "description": "VirtualMachine handles the VirtualMachines that are not running\nor are in a stopped state\nThe VirtualMachine contains the template to create the\nVirtualMachineInstance. It also mirrors the running state of the created\nVirtualMachineInstance in its status.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1VmObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterVirtualMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterVirtualMachineStatus"
        }
      },
      "required": [
        "spec"
      ]
    },
    "v1ClusterVirtualMachineList": {
      "description": "VirtualMachineList is a list of virtual machines",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/v1ClusterVirtualMachine"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1VmListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1ClusterVirtualMachineSpec": {
      "description": "VirtualMachineSpec describes how the proper VirtualMachine should look like",
      "properties": {
        "dataVolumeTemplates": {
          "description": "dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference. DataVolumes in this list are dynamically created for the VirtualMachine and are tied to the VirtualMachine's life-cycle.",
          "items": {
            "$ref": "#/definitions/v1VmDataVolumeTemplateSpec"
          },
          "type": "array"
        },
        "instancetype": {
          "$ref": "#/definitions/v1VmInstancetypeMatcher"
        },
        "preference": {
          "$ref": "#/definitions/v1VmPreferenceMatcher"
        },
        "runStrategy": {
          "description": "Running state indicates the requested running state of the VirtualMachineInstance mutually exclusive with Running",
          "type": "string"
        },
        "running": {
          "description": "Running controls whether the associatied VirtualMachineInstance is created or not Mutually exclusive with RunStrategy",
          "type": "boolean"
        },
        "template": {
          "$ref": "#/definitions/v1VmVirtualMachineInstanceTemplateSpec"
        }
      },
      "required": [
        "template"
      ],
      "type": "object"
    },
    "v1ClusterVirtualMachineStatus": {
      "description": "VirtualMachineStatus represents the status returned by the controller to describe how the VirtualMachine is doing",
      "properties": {
        "conditions": {
          "description": "Hold the state information of the VirtualMachine and its VirtualMachineInstance",
          "items": {
            "$ref": "#/definitions/v1VmVirtualMachineCondition"
          },
          "type": "array"
        },
        "created": {
          "description": "Created indicates if the virtual machine is created in the cluster",
          "type": "boolean"
        },
        "memoryDumpRequest": {
          "$ref": "#/definitions/v1VmVirtualMachineMemoryDumpRequest"
        },
        "printableStatus": {
          "description": "PrintableStatus is a human readable, high-level representation of the status of the virtual machine",
          "type": "string"
        },
        "ready": {
          "description": "Ready indicates if the virtual machine is running and ready",
          "type": "boolean"
        },
        "restoreInProgress": {
          "description": "RestoreInProgress is the name of the VirtualMachineRestore currently executing",
          "type": "string"
        },
        "snapshotInProgress": {
          "description": "SnapshotInProgress is the name of the VirtualMachineSnapshot currently executing",
          "type": "string"
        },
        "startFailure": {
          "$ref": "#/definitions/v1VmVirtualMachineStartFailure"
        },
        "stateChangeRequests": {
          "description": "StateChangeRequests indicates a list of actions that should be taken on a VMI e.g. stop a specific VMI then start a new one.",
          "items": {
            "$ref": "#/definitions/v1VmVirtualMachineStateChangeRequest"
          },
          "type": "array"
        },
        "volumeRequests": {
          "description": "VolumeRequests indicates a list of volumes add or remove from the VMI template and hotplug on an active running VMI.",
          "items": {
            "$ref": "#/definitions/v1VmVirtualMachineVolumeRequest"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "volumeSnapshotStatuses": {
          "description": "VolumeSnapshotStatuses indicates a list of statuses whether snapshotting is supported by each volume.",
          "items": {
            "$ref": "#/definitions/v1VmVolumeSnapshotStatus"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-nullable": true
    },
    "v1ClusterVirtualPacksValue": {
      "description": "Virtual cluster packs value",
      "properties": {
        "distroType": {
          "type": "string"
        },
        "layer": {
          "type": "string"
        },
        "values": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterVirtualPacksValues": {
      "description": "Virtual cluster packs values",
      "properties": {
        "packs": {
          "items": {
            "$ref": "#/definitions/v1ClusterVirtualPacksValue"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkload": {
      "description": "Cluster workload summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterWorkloadSpec"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadCondition": {
      "description": "Cluster workload condition",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastUpdateTime": {
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadCronJob": {
      "description": "Cluster workload cronjob summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterWorkloadCronJobSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadCronJobStatus"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadCronJobSpec": {
      "description": "Cluster workload cronjob spec",
      "properties": {
        "schedule": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadCronJobStatus": {
      "description": "Cluster workload cronjob status",
      "properties": {
        "lastScheduleTime": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadCronJobs": {
      "description": "Cluster workload cronjobs summary",
      "properties": {
        "cronJobs": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadCronJob"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadDaemonSet": {
      "description": "Cluster workload daemonset summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadDaemonSetStatus"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadDaemonSetStatus": {
      "description": "Cluster workload daemonset status",
      "properties": {
        "available": {
          "format": "int32",
          "type": "integer"
        },
        "currentScheduled": {
          "format": "int32",
          "type": "integer"
        },
        "desiredScheduled": {
          "format": "int32",
          "type": "integer"
        },
        "misScheduled": {
          "format": "int32",
          "type": "integer"
        },
        "ready": {
          "format": "int32",
          "type": "integer"
        },
        "updatedScheduled": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadDaemonSets": {
      "description": "Cluster workload daemonset summary",
      "properties": {
        "daemonSets": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDaemonSet"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadDeployment": {
      "description": "Cluster workload deployment summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadDeploymentStatus"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadDeploymentStatus": {
      "description": "Cluster workload deployment status",
      "properties": {
        "replicas": {
          "$ref": "#/definitions/v1ClusterWorkloadReplicaStatus"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadDeployments": {
      "description": "Cluster workload deployments summary",
      "properties": {
        "deployments": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDeployment"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadJob": {
      "description": "Cluster workload job summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadJobStatus"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadJobStatus": {
      "description": "Cluster workload job status",
      "properties": {
        "completionTime": {
          "$ref": "#/definitions/v1Time"
        },
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadCondition"
          },
          "type": "array"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "succeeded": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadJobs": {
      "description": "Cluster workload jobs summary",
      "properties": {
        "jobs": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadJob"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadMetadata": {
      "description": "Cluster workload metadata",
      "properties": {
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "entity": {
          "$ref": "#/definitions/v1ClusterWorkloadRef"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "namespace": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadNamespace": {
      "description": "Cluster workload namespace summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadNamespaceStatus"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadNamespaceStatus": {
      "description": "Cluster workload namespace status",
      "properties": {
        "phase": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadNamespaces": {
      "description": "Cluster workload namespaces summary",
      "properties": {
        "namespaces": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadNamespace"
          },
          "type": "array"
        }
      }
    },
    "v1ClusterWorkloadPod": {
      "description": "Cluster workload pod summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadPodMetadata"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterWorkloadPodSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadPodStatus"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadPodContainer": {
      "description": "Cluster workload pod container",
      "properties": {
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/v1ClusterWorkloadPodContainerResources"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadPodContainerResource": {
      "description": "Cluster workload pod container resource",
      "properties": {
        "cpu": {
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        },
        "cpuUnit": {
          "type": "string"
        },
        "memory": {
          "format": "int64",
          "type": "integer",
          "x-omitempty": false
        },
        "memoryUnit": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadPodContainerResources": {
      "description": "Cluster workload pod container resources",
      "properties": {
        "limits": {
          "$ref": "#/definitions/v1ClusterWorkloadPodContainerResource"
        },
        "requests": {
          "$ref": "#/definitions/v1ClusterWorkloadPodContainerResource"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadPodContainerState": {
      "description": "Cluster workload pod container state",
      "properties": {
        "exitCode": {
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        },
        "finishedAt": {
          "$ref": "#/definitions/v1Time"
        },
        "reason": {
          "type": "string"
        },
        "startedAt": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadPodContainerStatus": {
      "description": "Cluster workload pod container status",
      "properties": {
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ready": {
          "type": "boolean",
          "x-omitempty": false
        },
        "restartCount": {
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        },
        "started": {
          "type": "boolean",
          "x-omitempty": false
        },
        "state": {
          "$ref": "#/definitions/v1ClusterWorkloadPodContainerState"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadPodMetadata": {
      "description": "Cluster workload pod metadata",
      "properties": {
        "associatedRefs": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadRef"
          },
          "type": "array"
        },
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "entity": {
          "$ref": "#/definitions/v1ClusterWorkloadRef"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "machineUid": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "nodename": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadPodSpec": {
      "description": "Cluster workload pod spec",
      "properties": {
        "containers": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPodContainer"
          },
          "type": "array"
        },
        "volumes": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPodVolume"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadPodStatus": {
      "description": "Cluster workload pod status",
      "properties": {
        "containers": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPodContainerStatus"
          },
          "type": "array"
        },
        "phase": {
          "type": "string"
        },
        "podIp": {
          "type": "string"
        },
        "qosClass": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadPodVolume": {
      "description": "Cluster workload pod volume",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadPods": {
      "description": "Cluster workload pods summary",
      "properties": {
        "pods": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPod"
          },
          "type": "array"
        }
      }
    },
    "v1ClusterWorkloadRef": {
      "description": "Cluster workload ref",
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadReplicaStatus": {
      "description": "Cluster workload replica status",
      "properties": {
        "available": {
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        },
        "ready": {
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        },
        "total": {
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        },
        "updated": {
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadRoleBinding": {
      "description": "Cluster workload rbac binding summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterRbacBinding"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadRoleBindings": {
      "description": "Cluster workload rbac bindings summary",
      "properties": {
        "bindings": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadRoleBinding"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadSpec": {
      "description": "Cluster workload spec",
      "properties": {
        "clusterroleBindings": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadRoleBinding"
          },
          "type": "array"
        },
        "cronJobs": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadCronJob"
          },
          "type": "array"
        },
        "daemonSets": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDaemonSet"
          },
          "type": "array"
        },
        "deployments": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDeployment"
          },
          "type": "array"
        },
        "jobs": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadJob"
          },
          "type": "array"
        },
        "pods": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPod"
          },
          "type": "array"
        },
        "roleBindings": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadRoleBinding"
          },
          "type": "array"
        },
        "statefulSets": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadStatefulSet"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadStatefulSet": {
      "description": "Cluster workload statefulset summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ClusterWorkloadMetadata"
        },
        "status": {
          "$ref": "#/definitions/v1ClusterWorkloadStatefulSetStatus"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadStatefulSetStatus": {
      "description": "Cluster workload statefulset status",
      "properties": {
        "replicas": {
          "$ref": "#/definitions/v1ClusterWorkloadReplicaStatus"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadStatefulSets": {
      "description": "Cluster workload statefulsets summary",
      "properties": {
        "statefulSets": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadStatefulSet"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadsFilter": {
      "description": "Cluster workloads filter",
      "properties": {
        "namespaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1ClusterWorkloadsSpec": {
      "description": "Cluster workloads spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ClusterWorkloadsFilter"
        }
      },
      "type": "object"
    },
    "v1ClustersInfo": {
      "description": "Active clusters information",
      "properties": {
        "clustersMeta": {
          "items": {
            "$ref": "#/definitions/v1ClusterMeta"
          },
          "type": "array",
          "uniqueItems": true
        },
        "totalActiveClusters": {
          "format": "int64",
          "type": "number"
        },
        "totalActiveGreenFieldClusters": {
          "format": "int64",
          "type": "number"
        },
        "totalActiveImportedClusters": {
          "format": "int64",
          "type": "number"
        },
        "totalClustersDeleted": {
          "format": "int64",
          "type": "number"
        },
        "totalClustersDeployed": {
          "format": "int64",
          "type": "number"
        }
      },
      "type": "object"
    },
    "v1ComplianceScanConfig": {
      "description": "Compliance Scan config",
      "properties": {
        "schedule": {
          "$ref": "#/definitions/v1ClusterFeatureSchedule"
        }
      }
    },
    "v1ComplianceScanDriverSpec": {
      "description": "Compliance Scan driver spec",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1ComplianceScanConfig"
        },
        "isClusterConfig": {
          "type": "boolean"
        }
      }
    },
    "v1ComputeMetrics": {
      "description": "Compute metrics",
      "properties": {
        "lastUpdatedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "limit": {
          "type": "number",
          "x-omitempty": false
        },
        "request": {
          "type": "number",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "x-omitempty": false
        },
        "unit": {
          "type": "string"
        },
        "usage": {
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1ComputeRate": {
      "description": "Compute estimated rate information",
      "properties": {
        "rate": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ConfigReverseProxy": {
      "description": "Describes the reverse proxy configuration",
      "properties": {
        "caCert": {
          "description": "Describes the ca certificate for system's reverse proxy",
          "type": "string"
        },
        "clientCert": {
          "description": "Describes the client certificate for system's reverse proxy",
          "type": "string"
        },
        "clientKey": {
          "description": "Describes the client certificate key for system's reverse proxy",
          "type": "string"
        },
        "port": {
          "description": "Describes the system's reverse proxy server port",
          "type": "integer"
        },
        "protocol": {
          "description": "Describes the system's reverse proxy server protocol. Possible values [https, http]",
          "enum": [
            "http",
            "https"
          ],
          "type": "string"
        },
        "server": {
          "description": "Describes the system's reverse proxy server",
          "type": "string"
        }
      }
    },
    "v1ConstraintError": {
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ConstraintValidatorResponse": {
      "description": "Constraint validator response",
      "properties": {
        "results": {
          "items": {
            "$ref": "#/definitions/v1ConstraintValidatorResult"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1ConstraintValidatorResult": {
      "description": "Constraint validator result",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "errors": {
          "items": {
            "$ref": "#/definitions/v1ConstraintError"
          },
          "type": "array",
          "uniqueItems": true
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ControlPlaneEndPoint": {
      "properties": {
        "ddnsSearchDomain": {
          "description": "DDNSSearchDomain is the search domain used for resolving IP addresses when the EndpointType is DDNS. This search domain is appended to the generated Hostname to obtain the complete DNS name for the endpoint. If Host is already a DDNS FQDN, DDNSSearchDomain is not required",
          "type": "string"
        },
        "host": {
          "description": "IP or FQDN(External/DDNS)",
          "type": "string"
        },
        "type": {
          "description": "VIP or External",
          "enum": [
            "VIP",
            "External",
            "DDNS"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ControlPlaneHealthCheckTimeoutEntity": {
      "properties": {
        "controlPlaneHealthCheckTimeout": {
          "description": "ControlPlaneHealthCheckTimeout is the timeout to check for ready state of the control plane nodes",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1CustomAccount": {
      "description": "Custom account information",
      "properties": {
        "apiVersion": {
          "description": "Cloud account api version",
          "type": "string"
        },
        "kind": {
          "description": "Cloud account kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1CustomCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      },
      "type": "object"
    },
    "v1CustomAccountEntity": {
      "description": "Custom account information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1CustomCloudAccount"
        }
      },
      "type": "object"
    },
    "v1CustomAccounts": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1CustomAccount"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1CustomCloudAccount": {
      "properties": {
        "credentials": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cloud account credentials",
          "type": "object"
        }
      },
      "required": [
        "credentials"
      ],
      "type": "object"
    },
    "v1CustomCloudClusterConfigEntity": {
      "description": "Custom cloud cluster config entity",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1CustomClusterConfig"
        }
      },
      "type": "object"
    },
    "v1CustomCloudConfig": {
      "description": "CustomCloudConfig is the Schema for the custom cloudconfigs API",
      "properties": {
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1CustomCloudConfigSpec"
        }
      },
      "type": "object"
    },
    "v1CustomCloudConfigSpec": {
      "description": "CustomCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "properties": {
        "cloudAccountRef": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "cloudAccountRef should point to the secret which contains CustomCloudAccount"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1CustomClusterConfig"
        },
        "machinePoolConfig": {
          "items": {
            "$ref": "#/definitions/v1CustomMachinePoolConfig"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1CustomCloudMetaEntity": {
      "description": "Custom cloud meta entity",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta",
          "description": "Custom cloud metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1CustomCloudMetaSpecEntity"
        }
      },
      "type": "object"
    },
    "v1CustomCloudMetaSpecEntity": {
      "description": "Custom cloud spec response entity",
      "properties": {
        "cloudCategory": {
          "$ref": "#/definitions/v1CloudCategory"
        },
        "displayName": {
          "description": "Custom cloud displayName",
          "type": "string"
        },
        "isManaged": {
          "description": "If the custom cloud is a managed cluster",
          "type": "boolean"
        },
        "logo": {
          "description": "Custom cloud logo",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1CustomCloudRateConfig": {
      "description": "Private cloud rate config",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "rateConfig": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        }
      }
    },
    "v1CustomCloudRequestEntity": {
      "description": "Custom cloud request entity",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity",
          "description": "Custom cloud metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1CustomCloudSpecEntity"
        }
      },
      "type": "object"
    },
    "v1CustomCloudSpecEntity": {
      "description": "Custom cloud request entity spec",
      "properties": {
        "cloudCategory": {
          "$ref": "#/definitions/v1CloudCategory"
        },
        "displayName": {
          "description": "Custom cloud displayName",
          "type": "string"
        },
        "isControlPlaneManaged": {
          "description": "If the custom cloud is a managed cluster",
          "type": "boolean"
        },
        "logo": {
          "description": "Custom cloud logo",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1CustomCloudType": {
      "properties": {
        "cloudCategory": {
          "$ref": "#/definitions/v1CloudCategory"
        },
        "cloudFamily": {
          "description": "Cloud grouping as family",
          "type": "string"
        },
        "displayName": {
          "description": "Custom cloudtype displayName",
          "type": "string"
        },
        "isCustom": {
          "description": "If it is a custom cloudtype",
          "type": "boolean",
          "x-omitempty": false
        },
        "isManaged": {
          "description": "If custom cloudtype is managed",
          "type": "boolean",
          "x-omitempty": false
        },
        "isVertex": {
          "description": "If cloud is support for Vertex env",
          "type": "boolean",
          "x-omitempty": false
        },
        "logo": {
          "description": "Custom cloudtype logo",
          "type": "string"
        },
        "name": {
          "description": "Custom cloudtype name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1CustomCloudTypeCloudAccountKeys": {
      "description": "Custom cloudType custom cloud account keys",
      "properties": {
        "keys": {
          "description": "Array of custom cloud type cloud account keys",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1CustomCloudTypeContentResponse": {
      "description": "Custom cloudType content response",
      "properties": {
        "yaml": {
          "description": "custom cloud type content",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1CustomCloudTypes": {
      "description": "Custom cloudType content response",
      "properties": {
        "cloudTypes": {
          "description": "Array of custom cloud types",
          "items": {
            "$ref": "#/definitions/v1CustomCloudType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1CustomClusterConfig": {
      "description": "Cluster level configuration for Custom cloud and applicable for all the machine pools",
      "properties": {
        "values": {
          "description": "YAML string for Cluster and CloudCluster",
          "type": "string"
        }
      },
      "required": [
        "values"
      ],
      "type": "object"
    },
    "v1CustomClusterConfigEntity": {
      "properties": {
        "location": {
          "$ref": "#/definitions/v1ClusterLocation"
        },
        "machineManagementConfig": {
          "$ref": "#/definitions/v1MachineManagementConfig"
        },
        "resources": {
          "$ref": "#/definitions/v1ClusterResourcesEntity"
        }
      },
      "type": "object"
    },
    "v1CustomInstanceType": {
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a custom machine's disk, in GiB",
          "format": "int32",
          "type": "integer"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a custom machine's memory, in MiB",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "numCPUs": {
          "description": "NumCPUs is the number in a custom machine",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1CustomMachine": {
      "description": "Custom cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1CustomMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      },
      "type": "object"
    },
    "v1CustomMachinePoolBaseConfigEntity": {
      "description": "Machine pool configuration for the custom cluster",
      "properties": {
        "additionalLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional labels to be part of the machine pool",
          "type": "object"
        },
        "isControlPlane": {
          "description": "Whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "taints": {
          "description": "control plane or worker taints",
          "items": {
            "$ref": "#/definitions/v1Taint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "useControlPlaneAsWorker": {
          "description": "If IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1CustomMachinePoolCloudConfigEntity": {
      "properties": {
        "values": {
          "description": "Machine pool configuration as yaml content",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1CustomMachinePoolConfig": {
      "properties": {
        "additionalLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "additionalLabels",
          "type": "object"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer"
        },
        "taints": {
          "description": "control plane or worker taints",
          "items": {
            "$ref": "#/definitions/v1Taint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        },
        "values": {
          "description": "YAML string for machine",
          "type": "string"
        }
      },
      "required": [
        "isControlPlane"
      ],
      "type": "object"
    },
    "v1CustomMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1CustomMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1CustomMachinePoolBaseConfigEntity"
        }
      },
      "required": [
        "cloudConfig"
      ],
      "type": "object"
    },
    "v1CustomMachineSpec": {
      "description": "Custom cloud VM definition spec",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "hostName": {
          "type": "string"
        },
        "imageId": {
          "type": "string"
        },
        "instanceType": {
          "$ref": "#/definitions/v1CustomInstanceType"
        },
        "nics": {
          "items": {
            "$ref": "#/definitions/v1CustomNic"
          },
          "type": "array"
        },
        "sshKeyName": {
          "type": "string"
        }
      }
    },
    "v1CustomMachines": {
      "description": "List of Custom machines",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1CustomMachine"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1CustomNic": {
      "description": "Custom network interface",
      "properties": {
        "index": {
          "format": "int8",
          "type": "integer"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "publicIp": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1DashboardWorkspace": {
      "description": "Workspace information",
      "properties": {
        "meta": {
          "$ref": "#/definitions/v1DashboardWorkspaceMeta"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1DashboardWorkspaceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1DashboardWorkspaceStatus"
        }
      }
    },
    "v1DashboardWorkspaceAllocation": {
      "description": "Workspace allocation",
      "properties": {
        "cpu": {
          "$ref": "#/definitions/v1DashboardWorkspaceResourceAllocation"
        },
        "memory": {
          "$ref": "#/definitions/v1DashboardWorkspaceResourceAllocation"
        }
      }
    },
    "v1DashboardWorkspaceClusterRef": {
      "description": "Workspace cluster reference",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1DashboardWorkspaceMeta": {
      "description": "Deprecated. Workspace meta data",
      "properties": {
        "clusterNames": {
          "description": "Deprecated. Use clusterRefs",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "clusterRefs": {
          "items": {
            "$ref": "#/definitions/v1DashboardWorkspaceClusterRef"
          },
          "type": "array",
          "uniqueItems": true
        },
        "creationTime": {
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "type": "string"
        },
        "namespaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1DashboardWorkspaceNamespaceAllocation": {
      "description": "Workspace namespace allocation",
      "properties": {
        "name": {
          "type": "string"
        },
        "total": {
          "$ref": "#/definitions/v1DashboardWorkspaceAllocation"
        }
      }
    },
    "v1DashboardWorkspaceQuota": {
      "description": "Workspace resource quota",
      "properties": {
        "resourceAllocation": {
          "$ref": "#/definitions/v1DashboardWorkspaceQuotaResourceAllocation"
        }
      }
    },
    "v1DashboardWorkspaceQuotaResourceAllocation": {
      "description": "Workspace quota resource allocation",
      "properties": {
        "cpu": {
          "exclusiveMinimum": true,
          "minimum": 0,
          "type": "number"
        },
        "memory": {
          "exclusiveMinimum": true,
          "minimum": 0,
          "type": "number"
        }
      }
    },
    "v1DashboardWorkspaceResourceAllocation": {
      "description": "Workspace resource allocation",
      "properties": {
        "allocated": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "usage": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1DashboardWorkspaceSpec": {
      "description": "Workspace spec summary",
      "properties": {
        "clusterRefs": {
          "items": {
            "$ref": "#/definitions/v1DashboardWorkspaceClusterRef"
          },
          "type": "array",
          "uniqueItems": true
        },
        "namespaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "quota": {
          "$ref": "#/definitions/v1DashboardWorkspaceQuota"
        }
      }
    },
    "v1DashboardWorkspaceStatus": {
      "description": "Workspace status",
      "properties": {
        "namespaces": {
          "items": {
            "$ref": "#/definitions/v1DashboardWorkspaceNamespaceAllocation"
          },
          "type": "array",
          "uniqueItems": true
        },
        "total": {
          "$ref": "#/definitions/v1DashboardWorkspaceAllocation"
        }
      }
    },
    "v1DashboardWorkspaces": {
      "properties": {
        "cpuUnit": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/v1DashboardWorkspace"
          },
          "type": "array",
          "uniqueItems": true
        },
        "memoryUnit": {
          "type": "string"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1DataSinkConfig": {
      "description": "Data sink",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1DataSinkSpec"
        }
      },
      "type": "object"
    },
    "v1DataSinkSpec": {
      "properties": {
        "auditDataSinks": {
          "items": {
            "$ref": "#/definitions/v1DataSinkableSpec"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1DataSinkableSpec": {
      "properties": {
        "cloudWatch": {
          "$ref": "#/definitions/v1CloudWatch"
        },
        "type": {
          "enum": [
            "cloudwatch"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1DatabaseTransferJob": {
      "description": "database transfer job details",
      "properties": {
        "backupStatus": {
          "$ref": "#/definitions/v1TransferJob"
        },
        "backupUid": {
          "type": "string"
        },
        "mode": {
          "enum": [
            "FileSystem",
            "Ftp"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1DatabaseTransferStatus": {
      "description": "database transfer status",
      "properties": {
        "backups": {
          "items": {
            "$ref": "#/definitions/v1DatabaseTransferJob"
          },
          "type": "array"
        },
        "isActive": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1DeleteMeta": {
      "description": "Properties to send back after deletion operation",
      "properties": {
        "count": {
          "format": "int64",
          "type": "integer"
        },
        "items": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      }
    },
    "v1DeletedMsg": {
      "description": "Deleted response with message",
      "properties": {
        "msg": {
          "type": "string"
        }
      }
    },
    "v1DeveloperCredit": {
      "description": "Credits allocated for each tenant/user",
      "properties": {
        "cpu": {
          "description": "cpu in cores",
          "format": "int32",
          "type": "number",
          "x-omitempty": false
        },
        "memoryGiB": {
          "description": "memory in GiB",
          "format": "int32",
          "type": "number",
          "x-omitempty": false
        },
        "storageGiB": {
          "description": "storage in GiB",
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        },
        "virtualClustersLimit": {
          "description": "number of active virtual clusters",
          "format": "int32",
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1DeviceSpec": {
      "description": "DeviceSpec defines the desired state of Device",
      "properties": {
        "archType": {
          "default": "amd64",
          "description": "Architecture type of the edge host",
          "enum": [
            "arm64",
            "amd64"
          ],
          "type": "string"
        },
        "cpu": {
          "$ref": "#/definitions/v1CPU"
        },
        "disks": {
          "items": {
            "$ref": "#/definitions/v1Disk"
          },
          "type": "array"
        },
        "gpus": {
          "items": {
            "$ref": "#/definitions/v1GPUDeviceSpec"
          },
          "type": "array"
        },
        "memory": {
          "$ref": "#/definitions/v1Memory"
        },
        "nics": {
          "items": {
            "$ref": "#/definitions/v1Nic"
          },
          "type": "array"
        },
        "os": {
          "$ref": "#/definitions/v1OS"
        }
      },
      "type": "object"
    },
    "v1Disk": {
      "properties": {
        "controller": {
          "type": "string"
        },
        "partitions": {
          "items": {
            "$ref": "#/definitions/v1Partition"
          },
          "type": "array"
        },
        "size": {
          "description": "Size in GB",
          "format": "int32",
          "type": "integer"
        },
        "vendor": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1DomainHost": {
      "description": "update domain host for application. RootDomain gets dervied from domain host url",
      "properties": {
        "host": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EcrAuthorizationRequestEntity": {
      "description": "Ecr registry credentials entity",
      "properties": {
        "awsCloudAccount": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "endpoint": {
          "description": "Endpoint url to make the request",
          "type": "string"
        },
        "isPrivate": {
          "description": "If it is public or private",
          "type": "boolean"
        },
        "region": {
          "description": "Name of the region",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EcrImageEntity": {
      "properties": {
        "name": {
          "description": "Image name",
          "type": "string"
        },
        "tag": {
          "description": "Image tag",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EcrImageValidateEntity": {
      "description": "Ecr registry image meta",
      "properties": {
        "authEntity": {
          "$ref": "#/definitions/v1EcrAuthorizationRequestEntity"
        },
        "imageTag": {
          "description": "Name of the image tag",
          "type": "string"
        },
        "images": {
          "description": "Ecr Image Entity",
          "items": {
            "$ref": "#/definitions/v1EcrImageEntity"
          },
          "type": "array"
        },
        "repoName": {
          "description": "Name of the repo",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EcrRegistry": {
      "description": "Ecr registry information",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EcrRegistrySpec"
        }
      },
      "type": "object"
    },
    "v1EcrRegistrySpec": {
      "description": "Ecr registry spec",
      "properties": {
        "baseContentPath": {
          "description": "OCI ecr registry content base path",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount"
        },
        "defaultRegion": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "providerType": {
          "default": "helm",
          "enum": [
            "helm",
            "pack"
          ],
          "type": "string"
        },
        "registryUid": {
          "description": "Ecr registry uid",
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "tls": {
          "$ref": "#/definitions/v1TlsConfiguration"
        }
      },
      "required": [
        "endpoint",
        "isPrivate"
      ],
      "type": "object"
    },
    "v1EdgeHost": {
      "description": "EdgeHost is the underlying appliance",
      "properties": {
        "disableAutoRegister": {
          "description": "Set to true if auto register is disabled for the device",
          "type": "boolean",
          "x-omitempty": false
        },
        "hostAddress": {
          "description": "HostAddress is a FQDN or IP address of the Host",
          "type": "string"
        },
        "hostAuthToken": {
          "description": "HostAuthToken to authorize auto registration",
          "type": "string",
          "x-omitempty": false
        },
        "hostChecksum": {
          "description": "HostChecksum is the checksum provided by the edge host, to be persisted in SaaS",
          "type": "string",
          "x-omitempty": false
        },
        "hostIdentity": {
          "$ref": "#/definitions/v1EdgeHostIdentity",
          "description": "HostIdentity is the identity to access the edge host"
        },
        "hostPairingKey": {
          "description": "HostPairingKey is the one-time pairing key to pair the edge host with the device registered in SaaS",
          "format": "password",
          "type": "string",
          "x-omitempty": false
        },
        "hostUid": {
          "description": "HostUid is the ID of the EdgeHost",
          "type": "string"
        },
        "macAddress": {
          "description": "Mac address of edgehost",
          "type": "string",
          "x-omitempty": false
        },
        "project": {
          "$ref": "#/definitions/v1ObjectEntity",
          "description": "ProjectUid where the edgehost will be placed during auto registration",
          "x-omitempty": false
        }
      },
      "required": [
        "hostUid",
        "hostAddress"
      ],
      "type": "object"
    },
    "v1EdgeHostCloudProperties": {
      "description": "Additional cloud properties of the edge host (applicable based on the cloud type)",
      "properties": {
        "vsphere": {
          "$ref": "#/definitions/v1EdgeHostVsphereCloudProperties"
        }
      },
      "type": "object"
    },
    "v1EdgeHostClusterEntity": {
      "properties": {
        "clusterUid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EdgeHostDevice": {
      "properties": {
        "aclmeta": {
          "$ref": "#/definitions/v1AclMeta"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeHostDeviceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1EdgeHostDeviceStatus"
        }
      }
    },
    "v1EdgeHostDeviceEntity": {
      "description": "Edge host device information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectTagsEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeHostDeviceSpecEntity"
        }
      },
      "type": "object"
    },
    "v1EdgeHostDeviceHostCheckSum": {
      "properties": {
        "hostCheckSum": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EdgeHostDeviceHostPairingKey": {
      "properties": {
        "hostPairingKey": {
          "format": "password",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EdgeHostDeviceMetaUpdateEntity": {
      "description": "Edge host device uid and name",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectTagsEntity"
        }
      },
      "type": "object"
    },
    "v1EdgeHostDeviceSpec": {
      "description": "EdgeHostDeviceSpec defines the desired state of EdgeHostDevice",
      "properties": {
        "cloudProperties": {
          "$ref": "#/definitions/v1EdgeHostCloudProperties"
        },
        "clusterProfileTemplates": {
          "items": {
            "$ref": "#/definitions/v1ClusterProfileTemplate"
          },
          "type": "array"
        },
        "device": {
          "$ref": "#/definitions/v1DeviceSpec"
        },
        "host": {
          "$ref": "#/definitions/v1EdgeHost"
        },
        "properties": {
          "$ref": "#/definitions/v1EdgeHostProperties"
        },
        "service": {
          "$ref": "#/definitions/v1ServiceSpec"
        },
        "type": {
          "description": "Deprecated. Cloudtype of the provisioned edge host",
          "enum": [
            "libvirt",
            "vsphere",
            "edge-native"
          ],
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EdgeHostDeviceSpecEntity": {
      "description": "Edge host device spec",
      "properties": {
        "archType": {
          "$ref": "#/definitions/v1ArchType"
        },
        "hostPairingKey": {
          "format": "password",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EdgeHostDeviceStatus": {
      "description": "EdgeHostDeviceStatus defines the observed state of EdgeHostDevice",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1EdgeHostHealth"
        },
        "inUseClusters": {
          "items": {
            "$ref": "#/definitions/v1ObjectEntity"
          },
          "type": "array"
        },
        "packs": {
          "items": {
            "$ref": "#/definitions/v1ClusterPackStatus"
          },
          "type": "array"
        },
        "profileStatus": {
          "$ref": "#/definitions/v1ProfileStatus"
        },
        "serviceAuthToken": {
          "type": "string"
        },
        "state": {
          "enum": [
            "ready",
            "unpaired",
            "in-use"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EdgeHostDevices": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1EdgeHostDevice"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1EdgeHostHealth": {
      "description": "EdgeHostHealth defines the desired health state of EdgeHostDevice",
      "properties": {
        "agentVersion": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "state": {
          "enum": [
            "healthy",
            "unhealthy"
          ],
          "type": "string"
        }
      }
    },
    "v1EdgeHostIdentity": {
      "properties": {
        "caCert": {
          "description": "CACert is the client CA certificate",
          "type": "string"
        },
        "mode": {
          "description": "Mode indicates a system or session connection to the host",
          "type": "string"
        },
        "socketPath": {
          "description": "SocketPath is an optional path to the socket on the host, if not using defaults",
          "type": "string"
        },
        "sshSecret": {
          "$ref": "#/definitions/v1EdgeHostSSHSecret",
          "description": "SSHSecret to the secret containing ssh-username"
        }
      }
    },
    "v1EdgeHostMeta": {
      "properties": {
        "archType": {
          "$ref": "#/definitions/v1ArchType"
        },
        "edgeHostType": {
          "enum": [
            "libvirt",
            "edge-native",
            "vsphere"
          ],
          "type": "string"
        },
        "healthState": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EdgeHostNetwork": {
      "description": "Network defines the network configuration for a virtual machine",
      "properties": {
        "networkName": {
          "description": "NetworkName of the network where this machine will be connected",
          "type": "string"
        },
        "networkType": {
          "description": "NetworkType  specifies the type of network",
          "enum": [
            "default",
            "bridge"
          ],
          "type": "string"
        }
      },
      "required": [
        "networkName",
        "networkType"
      ],
      "type": "object"
    },
    "v1EdgeHostProperties": {
      "description": "Additional properties of edge host",
      "properties": {
        "networks": {
          "items": {
            "$ref": "#/definitions/v1EdgeHostNetwork"
          },
          "type": "array"
        },
        "storagePools": {
          "items": {
            "$ref": "#/definitions/v1EdgeHostStoragePool"
          },
          "type": "array"
        }
      }
    },
    "v1EdgeHostSSHSecret": {
      "properties": {
        "name": {
          "description": "SSH secret name",
          "type": "string"
        },
        "privateKey": {
          "description": "Private Key to access the host",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EdgeHostSpecHost": {
      "description": "Host specifications",
      "properties": {
        "hostAddress": {
          "description": "HostAddress is a FQDN or IP address of the Host",
          "type": "string"
        },
        "macAddress": {
          "type": "string"
        }
      }
    },
    "v1EdgeHostState": {
      "enum": [
        "ready",
        "unpaired",
        "in-use"
      ],
      "type": "string"
    },
    "v1EdgeHostStoragePool": {
      "description": "StoragePool is the storage pool for the vm image",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1EdgeHostVsphereCloudProperties": {
      "description": "Vsphere cloud properties of edge host",
      "properties": {
        "datacenters": {
          "items": {
            "$ref": "#/definitions/v1VsphereCloudDatacenter"
          },
          "type": "array"
        }
      }
    },
    "v1EdgeHostsMeta": {
      "properties": {
        "edgeHosts": {
          "items": {
            "$ref": "#/definitions/v1EdgeHostMeta"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1EdgeHostsMetadata": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeHostsMetadataSpec"
        },
        "status": {
          "$ref": "#/definitions/v1EdgeHostsMetadataStatus"
        }
      },
      "type": "object"
    },
    "v1EdgeHostsMetadataFilter": {
      "description": "Edge host metadata spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1EdgeHostsMetadataFilterSpec"
        },
        "sort": {
          "items": {
            "$ref": "#/definitions/v1EdgeHostsMetadataSortSpec"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1EdgeHostsMetadataFilterSpec": {
      "description": "Edge hosts metadata filter spec",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1FilterString"
        },
        "states": {
          "items": {
            "$ref": "#/definitions/v1EdgeHostState"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1EdgeHostsMetadataSortFields": {
      "enum": [
        "name",
        "state",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "type": "string",
      "x-nullable": true
    },
    "v1EdgeHostsMetadataSortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1EdgeHostsMetadataSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1EdgeHostsMetadataSpec": {
      "properties": {
        "clusterProfileTemplates": {
          "items": {
            "$ref": "#/definitions/v1ProfileTemplateSummary"
          },
          "type": "array"
        },
        "device": {
          "$ref": "#/definitions/v1DeviceSpec"
        },
        "host": {
          "$ref": "#/definitions/v1EdgeHostSpecHost"
        },
        "projectMeta": {
          "$ref": "#/definitions/v1ProjectMeta"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EdgeHostsMetadataStatus": {
      "properties": {
        "health": {
          "$ref": "#/definitions/v1EdgeHostHealth"
        },
        "inUseClusters": {
          "items": {
            "$ref": "#/definitions/v1ObjectEntity"
          },
          "type": "array"
        },
        "state": {
          "$ref": "#/definitions/v1EdgeHostState"
        }
      },
      "type": "object"
    },
    "v1EdgeHostsMetadataSummary": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1EdgeHostsMetadata"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1EdgeHostsSearchSummary": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1EdgeHostsMetadata"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1EdgeHostsTags": {
      "properties": {
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1EdgeNativeCloudClusterConfigEntity": {
      "description": "EdgeNative cloud cluster config entity",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1EdgeNativeClusterConfig"
        }
      },
      "type": "object"
    },
    "v1EdgeNativeCloudConfig": {
      "description": "EdgeNativeCloudConfig is the Schema for the edgenativecloudconfigs API",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeNativeCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1EdgeNativeCloudConfigStatus"
        }
      },
      "type": "object"
    },
    "v1EdgeNativeCloudConfigSpec": {
      "description": "EdgeNativeCloudConfigSpec defines the desired state of EdgeNativeCloudConfig",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1EdgeNativeClusterConfig"
        },
        "machinePoolConfig": {
          "items": {
            "$ref": "#/definitions/v1EdgeNativeMachinePoolConfig"
          },
          "type": "array"
        }
      },
      "required": [
        "clusterConfig",
        "machinePoolConfig"
      ],
      "type": "object"
    },
    "v1EdgeNativeCloudConfigStatus": {
      "description": "EdgeNativeCloudConfigStatus defines the observed state of EdgeNativeCloudConfig",
      "properties": {
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "type": "array"
        },
        "nodeImage": {
          "type": "string"
        },
        "sourceImageId": {
          "description": "SourceImageId can be from packref's annotations or from pack.json",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EdgeNativeClusterConfig": {
      "description": "EdgeNativeClusterConfig definnes Edge Native Cluster specific Spec",
      "properties": {
        "controlPlaneEndpoint": {
          "$ref": "#/definitions/v1EdgeNativeControlPlaneEndPoint",
          "description": "ControlPlaneEndpoint is the control plane endpoint, which can be an IP or FQDN"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "overlayNetworkConfiguration": {
          "$ref": "#/definitions/v1EdgeNativeOverlayNetworkConfiguration",
          "description": "OverlayNetworkConfiguration is the configuration for the overlay network"
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys to access the vms as a 'spectro' user",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "staticIp": {
          "description": "StaticIP indicates if IP allocation type is static IP. DHCP is the default allocation type",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1EdgeNativeControlPlaneEndPoint": {
      "properties": {
        "ddnsSearchDomain": {
          "description": "DDNSSearchDomain is the search domain used for resolving IP addresses when the EndpointType is DDNS. This search domain is appended to the generated Hostname to obtain the complete DNS name for the endpoint. If Host is already a DDNS FQDN, DDNSSearchDomain is not required",
          "type": "string"
        },
        "host": {
          "description": "Host is FQDN(DDNS) or IP",
          "type": "string"
        },
        "type": {
          "description": "Type indicates DDNS or VIP",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EdgeNativeHost": {
      "description": "EdgeNativeHost is the underlying appliance",
      "properties": {
        "IsCandidateCaption": {
          "default": false,
          "description": "Is Edge host nominated as candidate",
          "type": "boolean",
          "x-omitempty": false
        },
        "caCert": {
          "description": "CACert for TLS connections",
          "type": "string"
        },
        "hostAddress": {
          "default": "",
          "description": "HostAddress is a FQDN or IP address of the Host",
          "type": "string"
        },
        "hostName": {
          "default": "",
          "description": "Qualified name of host",
          "type": "string"
        },
        "hostUid": {
          "default": "",
          "description": "HostUid is the ID of the EdgeHost",
          "type": "string"
        },
        "nic": {
          "$ref": "#/definitions/v1Nic",
          "description": "Edge native nic"
        },
        "nicName": {
          "description": "Deprecated. Edge host nic name",
          "type": "string"
        },
        "staticIP": {
          "description": "Deprecated. Edge host static IP",
          "type": "string"
        },
        "twoNodeCandidatePriority": {
          "description": "Set the edgehost candidate priority as primary or secondary, if the edgehost is nominated as two node candidate",
          "enum": [
            "primary",
            "secondary"
          ],
          "type": "string"
        }
      },
      "required": [
        "hostUid",
        "hostAddress"
      ],
      "type": "object"
    },
    "v1EdgeNativeInstanceType": {
      "description": "EdgeNativeInstanceType defines the instance configuration for a docker container node",
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a virtual machine's disk",
          "format": "int32",
          "type": "integer"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name is the instance name",
          "type": "string"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of CPUs",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1EdgeNativeMachine": {
      "description": "EdgeNative cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeNativeMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1EdgeNativeMachinePoolCloudConfigEntity": {
      "properties": {
        "edgeHosts": {
          "items": {
            "$ref": "#/definitions/v1EdgeNativeMachinePoolHostEntity"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "edgeHosts"
      ]
    },
    "v1EdgeNativeMachinePoolConfig": {
      "properties": {
        "additionalLabels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "AdditionalLabels",
          "type": "object"
        },
        "additionalTags": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object"
        },
        "hosts": {
          "items": {
            "$ref": "#/definitions/v1EdgeNativeHost"
          },
          "type": "array"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "format": "int32",
          "type": "integer"
        },
        "osType": {
          "description": "the os type for the pool, must be supported by the provider",
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer"
        },
        "taints": {
          "description": "control plane or worker taints",
          "items": {
            "$ref": "#/definitions/v1Taint"
          },
          "type": "array"
        },
        "updateStrategy": {
          "$ref": "#/definitions/v1UpdateStrategy",
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean"
        }
      },
      "required": [
        "hosts"
      ],
      "type": "object"
    },
    "v1EdgeNativeMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1EdgeNativeMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      },
      "type": "object"
    },
    "v1EdgeNativeMachinePoolHostEntity": {
      "properties": {
        "hostName": {
          "description": "Edge host name",
          "type": "string"
        },
        "hostUid": {
          "description": "Edge host id",
          "type": "string"
        },
        "nic": {
          "$ref": "#/definitions/v1Nic",
          "description": "Edge native nic"
        },
        "nicName": {
          "description": "Deprecated - Edge host nic name",
          "type": "string"
        },
        "staticIP": {
          "description": "Deprecated - Edge host static IP",
          "type": "string"
        },
        "twoNodeCandidatePriority": {
          "description": "Set the edgehost candidate priority as primary or secondary, if the edgehost is nominated as two node candidate",
          "enum": [
            "primary",
            "secondary"
          ],
          "type": "string"
        }
      },
      "required": [
        "hostUid"
      ]
    },
    "v1EdgeNativeMachineSpec": {
      "description": "EdgeNative cloud VM definition spec",
      "properties": {
        "edgeHostUid": {
          "type": "string"
        },
        "instanceType": {
          "$ref": "#/definitions/v1EdgeNativeInstanceType"
        },
        "nics": {
          "items": {
            "$ref": "#/definitions/v1EdgeNativeNic"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1EdgeNativeMachines": {
      "description": "EdgeNative machine list",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1EdgeNativeMachine"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1EdgeNativeNic": {
      "description": "Generic network interface",
      "properties": {
        "index": {
          "format": "int8",
          "type": "integer"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "publicIp": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EdgeNativeOverlayNetworkConfiguration": {
      "properties": {
        "cidr": {
          "description": "CIDR is the CIDR of the overlay network",
          "type": "string"
        },
        "enable": {
          "description": "Enable is a flag to enable overlay network",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1EdgeNativeTwoNodeCandidateEntity": {
      "properties": {
        "primaryEdgeHost": {
          "type": "string"
        },
        "secondaryEdgeHost": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EdgeServiceLogin": {
      "description": "System service login input",
      "properties": {
        "authToken": {
          "description": "authToken helps in two step verification for the authorization.",
          "type": "string"
        },
        "edgeHostUid": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "serviceVersion": {
          "type": "string"
        },
        "spectroClusterUid": {
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EdgeToken": {
      "description": "Edge token information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeTokenSpec"
        },
        "status": {
          "$ref": "#/definitions/v1EdgeTokenStatus"
        }
      },
      "type": "object"
    },
    "v1EdgeTokenActiveState": {
      "description": "Edge token active state",
      "properties": {
        "isActive": {
          "description": "Set to 'true', if the token is active",
          "type": "boolean"
        }
      }
    },
    "v1EdgeTokenEntity": {
      "description": "Edge token request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeTokenSpecEntity"
        }
      },
      "type": "object"
    },
    "v1EdgeTokenProject": {
      "description": "Edge token project information",
      "properties": {
        "name": {
          "description": "Project name",
          "type": "string"
        },
        "uid": {
          "description": "Project uid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EdgeTokenSpec": {
      "description": "Edge token specification",
      "properties": {
        "defaultProject": {
          "$ref": "#/definitions/v1EdgeTokenProject",
          "description": "Default project where the edgehost will be placed on the token authorization"
        },
        "expiry": {
          "$ref": "#/definitions/v1Time",
          "description": "Edge token expiry date"
        },
        "token": {
          "description": "Edge token",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EdgeTokenSpecEntity": {
      "description": "Edge token specification",
      "properties": {
        "defaultProjectUid": {
          "description": "Default project where the edgehost will be placed on the token authorization",
          "type": "string"
        },
        "expiry": {
          "$ref": "#/definitions/v1Time",
          "description": "Edge token expiry date"
        }
      },
      "type": "object"
    },
    "v1EdgeTokenSpecUpdate": {
      "description": "Edge token spec to be updated",
      "properties": {
        "defaultProjectUid": {
          "description": "Default project where the edgehost will be placed on the token authorization",
          "type": "string"
        },
        "expiry": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1EdgeTokenStatus": {
      "description": "Edge token status",
      "properties": {
        "isActive": {
          "description": "Set to 'true', if the token is active",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1EdgeTokenUpdate": {
      "description": "Edge token update request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EdgeTokenSpecUpdate"
        }
      },
      "type": "object"
    },
    "v1EdgeTokens": {
      "properties": {
        "items": {
          "description": "List of edge tokens",
          "items": {
            "$ref": "#/definitions/v1EdgeToken"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1EksAddon": {
      "description": "EksAddon represents a EKS addon",
      "properties": {
        "conflictResolution": {
          "description": "ConflictResolution is used to declare what should happen if there are parameter conflicts.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the addon",
          "type": "string"
        },
        "serviceAccountRoleARN": {
          "description": "ServiceAccountRoleArn is the ARN of an IAM role to bind to the addons service account",
          "type": "string"
        },
        "version": {
          "description": "Version is the version of the addon to use",
          "type": "string"
        }
      },
      "required": [
        "name",
        "version"
      ],
      "type": "object"
    },
    "v1EksCloudClusterConfigEntity": {
      "description": "EKS cloud cluster config entity",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1EksClusterConfig"
        }
      },
      "type": "object"
    },
    "v1EksCloudConfig": {
      "description": "EksCloudConfig is the Schema for the ekscloudconfigs API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1EksCloudConfigSpec"
        }
      },
      "type": "object"
    },
    "v1EksCloudConfigSpec": {
      "description": "EksCloudConfigSpec defines the cloud configuration input by user",
      "properties": {
        "cloudAccountRef": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "cloudAccountRef should point to the secret which contains EksCloudAccount"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1EksClusterConfig"
        },
        "fargateProfiles": {
          "items": {
            "$ref": "#/definitions/v1FargateProfile"
          },
          "type": "array"
        },
        "machinePoolConfig": {
          "items": {
            "$ref": "#/definitions/v1EksMachinePoolConfig"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1EksClusterConfig": {
      "description": "EksClusterConfig defines EKS specific config",
      "properties": {
        "addons": {
          "description": "Addons defines the EKS addons to enable with the EKS cluster. This may be required for brownfield clusters",
          "items": {
            "$ref": "#/definitions/v1EksAddon"
          },
          "type": "array"
        },
        "bastionDisabled": {
          "description": "BastionDisabled is the option to disable bastion node",
          "type": "boolean"
        },
        "controlPlaneLoadBalancer": {
          "description": "ControlPlaneLoadBalancer specifies how API server elb will be configured, this field is optional, not provided, \"\", default =\u003e \"Internet-facing\" \"Internet-facing\" =\u003e \"Internet-facing\" \"internal\" =\u003e \"internal\" For spectro saas setup we require to talk to the apiserver from our cluster so ControlPlaneLoadBalancer should be \"\", not provided or \"Internet-facing\"",
          "type": "string"
        },
        "encryptionConfig": {
          "$ref": "#/definitions/v1EncryptionConfig",
          "description": "EncryptionConfig specifies the encryption configuration for the cluster"
        },
        "endpointAccess": {
          "$ref": "#/definitions/v1EksClusterConfigEndpointAccess",
          "description": "Endpoints specifies access to this cluster's control plane endpoints"
        },
        "region": {
          "description": "The AWS Region the cluster lives in.",
          "type": "string"
        },
        "sshKeyName": {
          "description": "SSHKeyName specifies which EC2 SSH key can be used to access machines.",
          "type": "string"
        },
        "vpcId": {
          "description": "VPC Id to deploy cluster into should have one public and one private subnet for the the cluster creation, this field is optional, If VPC Id is not provided a fully managed VPC will be created",
          "type": "string"
        }
      },
      "required": [
        "region"
      ],
      "type": "object"
    },
    "v1EksClusterConfigEndpointAccess": {
      "description": "EndpointAccess specifies how control plane endpoints are accessible",
      "properties": {
        "private": {
          "description": "Private points VPC-internal control plane access to the private endpoint",
          "type": "boolean"
        },
        "privateCIDRs": {
          "description": "PrivateCIDRs specifies which blocks can access the private endpoint",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "public": {
          "description": "Public controls whether control plane endpoints are publicly accessible",
          "type": "boolean"
        },
        "publicCIDRs": {
          "description": "PublicCIDRs specifies which blocks can access the public endpoint",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1EksFargateProfiles": {
      "description": "Fargate profiles",
      "properties": {
        "fargateProfiles": {
          "items": {
            "$ref": "#/definitions/v1FargateProfile"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1EksMachineCloudConfigEntity": {
      "properties": {
        "awsLaunchTemplate": {
          "$ref": "#/definitions/v1AwsLaunchTemplate"
        },
        "azs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "capacityType": {
          "default": "on-demand",
          "description": "EC2 instance capacity type",
          "enum": [
            "on-demand",
            "spot"
          ],
          "type": "string"
        },
        "enableAwsLaunchTemplate": {
          "description": "flag to know if aws launch template is enabled",
          "type": "boolean"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "format": "int64",
          "maximum": 2000,
          "minimum": 1,
          "type": "integer"
        },
        "spotMarketOptions": {
          "$ref": "#/definitions/v1SpotMarketOptions",
          "description": "SpotMarketOptions allows users to configure instances to be run using AWS Spot instances."
        },
        "subnets": {
          "items": {
            "$ref": "#/definitions/v1EksSubnetEntity"
          },
          "type": "array"
        }
      }
    },
    "v1EksMachinePoolConfig": {
      "properties": {
        "additionalLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "additionalLabels",
          "type": "object"
        },
        "additionalTags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object"
        },
        "awsLaunchTemplate": {
          "$ref": "#/definitions/v1AwsLaunchTemplate"
        },
        "azs": {
          "description": "AZs is only used for dynamic placement",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "capacityType": {
          "default": "on-demand",
          "description": "EC2 instance capacity type",
          "enum": [
            "on-demand",
            "spot"
          ],
          "type": "string"
        },
        "enableAwsLaunchTemplate": {
          "description": "flag to know if aws launch template is enabled",
          "type": "boolean"
        },
        "instanceConfig": {
          "$ref": "#/definitions/v1InstanceConfig"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "format": "int32",
          "type": "integer"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "format": "int64",
          "type": "integer"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer"
        },
        "spotMarketOptions": {
          "$ref": "#/definitions/v1SpotMarketOptions",
          "description": "SpotMarketOptions allows users to configure instances to be run using AWS Spot instances."
        },
        "subnetIds": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"us-west-2d\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first private subnet from the AZ will be picked up for deployment",
          "type": "object"
        },
        "taints": {
          "description": "control plane or worker taints",
          "items": {
            "$ref": "#/definitions/v1Taint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updateStrategy": {
          "$ref": "#/definitions/v1UpdateStrategy",
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "isControlPlane"
      ],
      "type": "object"
    },
    "v1EksMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1EksMachineCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1EksSubnetEntity": {
      "properties": {
        "az": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1EncryptionConfig": {
      "description": "EncryptionConfig specifies the encryption configuration for the EKS clsuter.",
      "properties": {
        "isEnabled": {
          "description": "Is encryption configuration enabled for the cluster",
          "type": "boolean"
        },
        "provider": {
          "description": "Provider specifies the ARN or alias of the CMK (in AWS KMS)",
          "type": "string"
        },
        "resources": {
          "description": "Resources specifies the resources to be encrypted",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1Event": {
      "description": "Describes the component event details",
      "properties": {
        "involvedObject": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "Describes object involved in event generation",
          "type": "object"
        },
        "message": {
          "description": "Describes message associated with the event",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta",
          "type": "object"
        },
        "reason": {
          "description": "Describes the reason for the event",
          "type": "string"
        },
        "relatedObject": {
          "$ref": "#/definitions/v1EventRelatedObject",
          "description": "Describes object related to the event",
          "type": "object"
        },
        "severity": {
          "description": "Describes the gravitas for the event",
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/v1EventSource",
          "description": "Describes the origin for the event",
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1EventRelatedObject": {
      "description": "Object for which the event is related",
      "properties": {
        "kind": {
          "enum": [
            "spectrocluster",
            "edgehost"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1EventSource": {
      "description": "Describes the origin for the event",
      "properties": {
        "component": {
          "description": "Describes the component where event originated",
          "type": "string"
        },
        "host": {
          "description": "Describes the host where event originated",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Events": {
      "description": "An array of component events items",
      "properties": {
        "items": {
          "description": "Describes a list of returned component events",
          "items": {
            "$ref": "#/definitions/v1Event"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData",
          "description": "Describes the meta information about the component event lists"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1EventsObjectsEntity": {
      "properties": {
        "resourceType": {
          "type": "string"
        },
        "resourceUid": {
          "type": "string"
        }
      },
      "required": [
        "resourceType",
        "resourceUid"
      ],
      "type": "object"
    },
    "v1EventsRelatedObjectsEntity": {
      "properties": {
        "relatedObjectUids": {
          "description": "List of uids of the related object",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "relatedObjectUids"
      ],
      "type": "object"
    },
    "v1FargateProfile": {
      "description": "FargateProfile defines the desired state of FargateProfile",
      "properties": {
        "additionalTags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AdditionalTags is an optional set of tags to add to AWS resources managed by the AWS provider, in addition to the ones added by default.",
          "type": "object"
        },
        "name": {
          "description": "name specifies the profile name.",
          "type": "string"
        },
        "selectors": {
          "description": "Selectors specify fargate pod selectors.",
          "items": {
            "$ref": "#/definitions/v1FargateSelector"
          },
          "type": "array"
        },
        "subnetIds": {
          "description": "SubnetIDs specifies which subnets are used for the auto scaling group of this nodegroup.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1FargateSelector": {
      "description": "FargateSelector specifies a selector for pods that should run on this fargate pool",
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels specifies which pod labels this selector should match.",
          "type": "object"
        },
        "namespace": {
          "description": "Namespace specifies which namespace this selector should match.",
          "type": "string"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "v1Feature": {
      "description": "Feature response",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1FeatureSpec"
        }
      },
      "type": "object"
    },
    "v1FeatureFlagPing": {
      "properties": {
        "msg": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1FeatureSpec": {
      "description": "Feature spec",
      "properties": {
        "description": {
          "description": "Feature description",
          "type": "string"
        },
        "docLink": {
          "description": "Feature doc link",
          "type": "string"
        },
        "key": {
          "description": "Feature key",
          "type": "string"
        }
      }
    },
    "v1FeatureUpdate": {
      "description": "Feature update spec",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1FeatureUpdateSpec"
        }
      }
    },
    "v1FeatureUpdateSpec": {
      "description": "Feature update spec",
      "properties": {
        "description": {
          "description": "Feature description",
          "type": "string"
        },
        "docLink": {
          "description": "Feature doc link",
          "type": "string"
        }
      }
    },
    "v1Features": {
      "properties": {
        "items": {
          "description": "List of features",
          "items": {
            "$ref": "#/definitions/v1Feature"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1FileUploadResponse": {
      "description": "File upload response",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1FilterArray": {
      "properties": {
        "beginsWith": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "eq": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "ignoreCase": {
          "default": true,
          "type": "boolean"
        },
        "ne": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "v1FilterIntRange": {
      "properties": {
        "eq": {
          "format": "int32",
          "type": "integer",
          "x-nullable": true
        },
        "gt": {
          "format": "int32",
          "type": "integer",
          "x-nullable": true
        },
        "gte": {
          "format": "int32",
          "type": "integer",
          "x-nullable": true
        },
        "lt": {
          "format": "int32",
          "type": "integer",
          "x-nullable": true
        },
        "lte": {
          "format": "int32",
          "type": "integer",
          "x-nullable": true
        },
        "ne": {
          "format": "int32",
          "type": "integer",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "v1FilterMetadata": {
      "description": "Filter metadata object",
      "properties": {
        "filterType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1FilterNumberRange": {
      "properties": {
        "eq": {
          "type": "number",
          "x-nullable": true
        },
        "gt": {
          "type": "number",
          "x-nullable": true
        },
        "gte": {
          "type": "number",
          "x-nullable": true
        },
        "lt": {
          "type": "number",
          "x-nullable": true
        },
        "lte": {
          "type": "number",
          "x-nullable": true
        },
        "ne": {
          "type": "number",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "v1FilterString": {
      "properties": {
        "beginsWith": {
          "type": "string",
          "x-nullable": true
        },
        "contains": {
          "type": "string",
          "x-nullable": true
        },
        "eq": {
          "type": "string",
          "x-nullable": true
        },
        "ignoreCase": {
          "default": true,
          "type": "boolean"
        },
        "ne": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "v1FilterSummary": {
      "description": "Filter summary object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1FilterSummarySpec"
        }
      },
      "type": "object"
    },
    "v1FilterSummarySpec": {
      "properties": {
        "filterType": {
          "type": "string"
        }
      }
    },
    "v1FilterVersionString": {
      "properties": {
        "beginsWith": {
          "type": "string",
          "x-nullable": true
        },
        "eq": {
          "type": "string",
          "x-nullable": true
        },
        "gt": {
          "type": "string",
          "x-nullable": true
        },
        "lt": {
          "type": "string",
          "x-nullable": true
        },
        "ne": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "v1FiltersMetadata": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1FilterMetadata"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1FiltersSummary": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1FilterSummary"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1FipsSettings": {
      "description": "FIPS configuration",
      "properties": {
        "fipsClusterFeatureConfig": {
          "$ref": "#/definitions/v1NonFipsConfig"
        },
        "fipsClusterImportConfig": {
          "$ref": "#/definitions/v1NonFipsConfig"
        },
        "fipsPackConfig": {
          "$ref": "#/definitions/v1NonFipsConfig"
        }
      }
    },
    "v1FreemiumUsage": {
      "properties": {
        "usage": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1FreemiumUsageLimit": {
      "properties": {
        "activeClusters": {
          "type": "integer",
          "x-omitempty": false
        },
        "overageUsage": {
          "type": "number",
          "x-omitempty": false
        },
        "usage": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1GPUConfig": {
      "properties": {
        "addresses": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Addresses is a map of PCI device entry name to its addresses.\nExample entry would be \"11:00.0 VGA compatible controller [0300]: NVIDIA\nCorporation Device [10de:1eb1] (rev a1)\"- \u003e 0000_11_00_0\" The address is\nBDF (Bus Device Function) identifier format seperated by underscores. The\nfirst 4 bits are almost always 0000. In the above example 11 is Bus, 00\nis Device,0 is function. The values of these addreses are expected in hexadecimal\nformat\n",
          "type": "object"
        },
        "deviceModel": {
          "description": "DeviceModel is the model of GPU, for a given vendor, for eg., TU104GL [Tesla T4]",
          "type": "string"
        },
        "numGPUs": {
          "description": "NumGPUs is the number of GPUs",
          "format": "int32",
          "type": "integer"
        },
        "vendorName": {
          "description": "VendorName is the GPU vendor, for eg., NVIDIA or AMD",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1GPUDeviceSpec": {
      "properties": {
        "addresses": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Addresses is a map of PCI device entry name to its addresses.\nExample entry would be \"11:00.0 VGA compatible controller [0300]: NVIDIA\nCorporation Device [10de:1eb1] (rev a1)\"- \u003e 0000_11_00_0\" The address is\nBDF (Bus Device Function) identifier format seperated by underscores. The\nfirst 4 bits are almost always 0000. In the above example 11 is Bus, 00\nis Device,0 is function. The values of these addreses are expected in hexadecimal\nformat\n",
          "type": "object"
        },
        "model": {
          "description": "Model is the model of GPU, for a given vendor, for eg., TU104GL [Tesla T4]",
          "type": "string"
        },
        "vendor": {
          "description": "Vendor is the GPU vendor, for eg., NVIDIA or AMD",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1GcpAccount": {
      "description": "GCP account information",
      "properties": {
        "apiVersion": {
          "description": "Cloud account api version",
          "type": "string"
        },
        "kind": {
          "description": "Cloud account kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GcpAccountSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      },
      "type": "object"
    },
    "v1GcpAccountEntity": {
      "description": "GCP account information",
      "properties": {
        "apiVersion": {
          "description": "Cloud account api version",
          "type": "string"
        },
        "kind": {
          "description": "Cloud account kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GcpAccountEntitySpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      },
      "type": "object"
    },
    "v1GcpAccountEntitySpec": {
      "properties": {
        "jsonCredentials": {
          "description": "Gcp cloud account json credentials",
          "type": "string"
        },
        "jsonCredentialsFileUid": {
          "description": "Reference of the credentials stored in the file",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1GcpAccountNameValidateSpec": {
      "description": "Gcp cloud account name validate spec",
      "properties": {
        "bucketName": {
          "description": "Bucket name in the GCP",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/v1GcpAccountValidateSpec"
        },
        "projectId": {
          "description": "ProjectId in the GCP",
          "type": "string"
        }
      },
      "required": [
        "credentials",
        "bucketName"
      ],
      "type": "object"
    },
    "v1GcpAccountSpec": {
      "properties": {
        "jsonCredentials": {
          "description": "Gcp cloud account json credentials",
          "type": "string"
        },
        "jsonCredentialsFileName": {
          "description": "Reference of the credentials stored in the file",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1GcpAccountValidateSpec": {
      "description": "Gcp cloud account entity which takes json credentials or reference to the file where credentials are stored",
      "properties": {
        "jsonCredentials": {
          "description": "Gcp cloud account json credentials",
          "type": "string"
        },
        "jsonCredentialsFileUid": {
          "description": "Reference of the credentials stored in the file",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1GcpAccounts": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1GcpAccount"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1GcpCloudAccountValidateEntity": {
      "description": "Gcp cloud account spec",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1GcpAccountValidateSpec"
        }
      },
      "type": "object"
    },
    "v1GcpCloudClusterConfigEntity": {
      "description": "Gcp cloud cluster config entity",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1GcpClusterConfig"
        }
      },
      "type": "object"
    },
    "v1GcpCloudConfig": {
      "description": "GcpCloudConfig is the Schema for the gcpcloudconfigs API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GcpCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1GcpCloudConfigStatus"
        }
      },
      "type": "object"
    },
    "v1GcpCloudConfigSpec": {
      "description": "GcpCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "properties": {
        "cloudAccountRef": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "cloudAccountRef should point to the secret which contains GcpCloudAccount"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1GcpClusterConfig"
        },
        "machinePoolConfig": {
          "items": {
            "$ref": "#/definitions/v1GcpMachinePoolConfig"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1GcpCloudConfigStatus": {
      "description": "GcpCloudConfigStatus defines the observed state of GcpCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "conditions": {
          "description": "spectroAnsibleProvisioner: should be added only once, subsequent recocile will use the same provisioner SpectroAnsiblePacker bool `json:\"spectroAnsiblePacker,omitempty\"`",
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "type": "array"
        },
        "images": {
          "$ref": "#/definitions/v1GcpImage",
          "description": "Images array items should be 1-to-1 mapping to Spec.MachinePoolConfig"
        },
        "isAddonLayer": {
          "description": "addon layers present in spc",
          "type": "boolean"
        },
        "roleDigest": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "this map will be for ansible roles present in each pack",
          "type": "object"
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1GcpClusterConfig": {
      "description": "Cluster level configuration for gcp cloud and applicable for all the machine pools",
      "properties": {
        "managedClusterConfig": {
          "$ref": "#/definitions/v1GcpManagedClusterConfig"
        },
        "network": {
          "description": "NetworkName if empty would create VPC Network in auto mode. If provided, custom VPC network will be used",
          "type": "string"
        },
        "project": {
          "description": "Name of the project in which cluster is to be deployed",
          "type": "string"
        },
        "region": {
          "description": "GCP region for the cluster",
          "type": "string"
        }
      },
      "required": [
        "project",
        "region"
      ],
      "type": "object"
    },
    "v1GcpImage": {
      "description": "Refers to GCP image",
      "properties": {
        "name": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1GcpImageUrlEntity": {
      "description": "Gcp image url entity",
      "properties": {
        "imageFamily": {
          "description": "The name of the image family to which this image belongs",
          "type": "string"
        },
        "imageUrl": {
          "description": "Server-defined URL for the resource",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1GcpInstanceTypes": {
      "description": "Retrieves a list of GCP instance types",
      "properties": {
        "instanceTypes": {
          "description": "List of GCP instance types",
          "items": {
            "$ref": "#/definitions/v1InstanceType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1GcpMachine": {
      "description": "GCP cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GcpMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      },
      "type": "object"
    },
    "v1GcpMachinePoolCloudConfigEntity": {
      "properties": {
        "azs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instanceType": {
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "Size of root volume in GB. Default is 30GB",
          "format": "int64",
          "type": "integer"
        },
        "subnet": {
          "description": "Subnet specifies the subnetwork to use for given instance. If not specified, the first subnet from the cluster region and network is used",
          "type": "string"
        },
        "subnets": {
          "items": {
            "$ref": "#/definitions/v1GcpSubnetEntity"
          },
          "type": "array"
        }
      },
      "required": [
        "instanceType"
      ],
      "type": "object"
    },
    "v1GcpMachinePoolConfig": {
      "properties": {
        "additionalLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "additionalLabels",
          "type": "object"
        },
        "additionalTags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object"
        },
        "azs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instanceConfig": {
          "$ref": "#/definitions/v1InstanceConfig"
        },
        "instanceType": {
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "format": "int32",
          "type": "integer"
        },
        "rootDeviceSize": {
          "description": "Size of root volume in GB. Default is 30GB",
          "format": "int64",
          "type": "integer"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer"
        },
        "subnet": {
          "description": "Subnet specifies the subnetwork to use for given instance. If not specified, the first subnet from the cluster region and network is used",
          "type": "string"
        },
        "subnetIds": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"us-west-2d\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first private subnet from the AZ will be picked up for deployment",
          "type": "object"
        },
        "taints": {
          "description": "control plane or worker taints",
          "items": {
            "$ref": "#/definitions/v1Taint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updateStrategy": {
          "$ref": "#/definitions/v1UpdateStrategy",
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean"
        }
      },
      "required": [
        "isControlPlane",
        "instanceType"
      ],
      "type": "object"
    },
    "v1GcpMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1GcpMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      },
      "required": [
        "cloudConfig"
      ],
      "type": "object"
    },
    "v1GcpMachineSpec": {
      "description": "GCP cloud VM definition spec",
      "properties": {
        "image": {
          "type": "string"
        },
        "instanceConfig": {
          "$ref": "#/definitions/v1InstanceConfig"
        },
        "instanceType": {
          "type": "string"
        },
        "nics": {
          "items": {
            "$ref": "#/definitions/v1GcpNic"
          },
          "type": "array"
        },
        "project": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "rootDeviceSize": {
          "format": "int64",
          "type": "integer"
        },
        "zone": {
          "type": "string"
        }
      },
      "required": [
        "instanceType"
      ],
      "type": "object"
    },
    "v1GcpMachines": {
      "description": "GCP machine list",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1GcpMachine"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1GcpManagedClusterConfig": {
      "description": "GCP managed cluster config",
      "properties": {
        "enableAutoPilot": {
          "description": "EnableAutopilot indicates whether to enable autopilot for this GKE cluster",
          "type": "boolean"
        },
        "location": {
          "description": "Can be Region or Zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1GcpNetwork": {
      "description": "GCP network enity is a virtual version of a physical network",
      "properties": {
        "name": {
          "description": "GCP network name",
          "type": "string"
        },
        "subnets": {
          "description": "List of GCP subnet",
          "items": {
            "$ref": "#/definitions/v1GcpSubnet"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1GcpNetworks": {
      "description": "List of GCP networks",
      "properties": {
        "networks": {
          "items": {
            "$ref": "#/definitions/v1GcpNetwork"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1GcpNic": {
      "description": "GCP network interface",
      "properties": {
        "index": {
          "format": "int8",
          "type": "integer"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "publicIp": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1GcpProject": {
      "description": "GCP project organizes all Google Cloud resources",
      "properties": {
        "id": {
          "description": "GCP project id",
          "type": "string"
        },
        "name": {
          "description": "GCP project name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1GcpProjects": {
      "description": "List of GCP Projects",
      "properties": {
        "projects": {
          "description": "List of GCP Projects",
          "items": {
            "$ref": "#/definitions/v1GcpProject"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1GcpRegion": {
      "description": "Geographical region made up of zones where you can host your GCP resources",
      "properties": {
        "name": {
          "description": "GCP region name",
          "type": "string"
        },
        "status": {
          "description": "GCP region status",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1GcpRegions": {
      "description": "List of GCP Regions",
      "properties": {
        "regions": {
          "items": {
            "$ref": "#/definitions/v1GcpRegion"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1GcpStorageConfig": {
      "description": "GCP storage config object",
      "properties": {
        "bucketName": {
          "description": "GCP storage bucket name",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/v1.GcpAccountEntitySpec",
          "description": "GCP cloud account credentials"
        },
        "projectId": {
          "description": "GCP project id",
          "type": "string"
        }
      },
      "required": [
        "bucketName",
        "credentials"
      ],
      "type": "object"
    },
    "v1GcpStorageTypes": {
      "description": "List of GCP storage types",
      "properties": {
        "storageTypes": {
          "items": {
            "$ref": "#/definitions/v1StorageType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1GcpSubnet": {
      "description": "Subnets are regional resources, and have IP address ranges associated with them",
      "properties": {
        "id": {
          "description": "GCP subnet id",
          "type": "string"
        },
        "name": {
          "description": "GCP subnet name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1GcpSubnetEntity": {
      "properties": {
        "az": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1GcpZone": {
      "description": "A zone is a deployment area for Google Cloud resources within a region",
      "properties": {
        "name": {
          "description": "GCP zone name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1GcpZones": {
      "description": "List of GCP zones",
      "properties": {
        "zones": {
          "items": {
            "$ref": "#/definitions/v1GcpZone"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1GenericCloudClusterConfigEntity": {
      "description": "Generic cloud cluster config entity",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1GenericClusterConfig"
        }
      },
      "type": "object"
    },
    "v1GenericCloudConfig": {
      "description": "Generic CloudConfig for all cloud types",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GenericCloudConfigSpec"
        }
      }
    },
    "v1GenericCloudConfigSpec": {
      "description": "Generic CloudConfig spec for all cloud types",
      "properties": {
        "cloudAccountRef": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "Cloud account reference is optional and dynamically handled based on the kind"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1GenericClusterConfig"
        },
        "edgeHostRefs": {
          "description": "Appliances (Edge Host) uids",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          },
          "type": "array"
        },
        "machinePoolConfig": {
          "items": {
            "$ref": "#/definitions/v1GenericMachinePoolConfig"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1GenericClusterConfig": {
      "description": "Generic cluster config",
      "properties": {
        "instanceType": {
          "$ref": "#/definitions/v1GenericInstanceType"
        },
        "region": {
          "description": "cluster region information",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1GenericInstanceType": {
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a virtual machine's disk, in GiB",
          "format": "int32",
          "type": "integer"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of virtual processors in a virtual machine",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1GenericMachine": {
      "description": "Generic cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1GenericMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1GenericMachinePoolConfig": {
      "properties": {
        "instanceType": {
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "Size of root volume in GB. Default is 30GB",
          "format": "int64",
          "type": "integer"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean"
        }
      },
      "required": [
        "isControlPlane"
      ],
      "type": "object"
    },
    "v1GenericMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1GenericClusterConfig"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      }
    },
    "v1GenericMachineSpec": {
      "description": "Generic cloud VM definition spec",
      "properties": {
        "hostName": {
          "type": "string"
        },
        "imageId": {
          "type": "string"
        },
        "instanceType": {
          "$ref": "#/definitions/v1GenericInstanceType"
        },
        "nics": {
          "items": {
            "$ref": "#/definitions/v1GenericNic"
          },
          "type": "array"
        },
        "sshKeyName": {
          "type": "string"
        }
      }
    },
    "v1GenericMachines": {
      "description": "Generic machine list",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1GenericMachine"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1GenericNic": {
      "description": "Generic network interface",
      "properties": {
        "index": {
          "format": "int8",
          "type": "integer"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "publicIp": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1GeolocationLatlong": {
      "description": "Geolocation Latlong entity",
      "properties": {
        "latitude": {
          "description": "Latitude of a resource",
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "longitude": {
          "description": "Longitude of a resource",
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1GitRepoFileContent": {
      "properties": {
        "content": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1GrpcClientMonitoringData": {
      "properties": {
        "clientUid": {
          "type": "string"
        },
        "receivedBroadcastCount": {
          "type": "integer"
        },
        "receivedPublishedCount": {
          "type": "integer"
        },
        "sentBroadcastCount": {
          "type": "integer"
        },
        "sentPublishedCount": {
          "type": "integer"
        },
        "subjects": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1GrpcConfiguration": {
      "description": "Describes the response that contains the grpc configuration to establish connection",
      "properties": {
        "preferredServer": {
          "$ref": "#/definitions/v1GrpcEndpoint"
        },
        "servers": {
          "items": {
            "$ref": "#/definitions/v1GrpcEndpoint"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1GrpcEndpoint": {
      "properties": {
        "endpoint": {
          "description": "Describes the URL where the client has to connect to the grpc server",
          "type": "string"
        },
        "tls": {
          "description": "Describes the Grpc tls config which client will use to make a request to the grpc server",
          "properties": {
            "caCert": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            },
            "insecureSkipVerify": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1GrpcServerMonitoringData": {
      "properties": {
        "clients": {
          "additionalProperties": {
            "$ref": "#/definitions/v1GrpcClientMonitoringData"
          },
          "type": "object"
        },
        "isError": {
          "type": "boolean"
        },
        "messageLogs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "subjects": {
          "additionalProperties": {
            "$ref": "#/definitions/v1GrpcSubjectMonitoringData"
          },
          "type": "object"
        },
        "totalClients": {
          "type": "integer"
        },
        "totalSubjects": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1GrpcServersMonitoringData": {
      "properties": {
        "servers": {
          "additionalProperties": {
            "$ref": "#/definitions/v1GrpcServerMonitoringData"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1GrpcSubjectMonitoringData": {
      "properties": {
        "broadcastCount": {
          "type": "integer"
        },
        "clients": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "publishedCount": {
          "type": "integer"
        },
        "subject": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1HealthCheck": {
      "properties": {
        "isHealthy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1HealthLocks": {
      "properties": {
        "expiredLocks": {
          "items": {
            "$ref": "#/definitions/v1Lock"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1HealthPing": {
      "properties": {
        "msg": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1HelmChartOption": {
      "description": "If chart options are provided then the specified chart is validated first and synced immediately. If the specified chart is not found in the specified registry then creation is cancelled.",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1HelmRegistries": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1HelmRegistry"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1HelmRegistriesSummary": {
      "description": "Helm Registries Summary",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1HelmRegistrySummary"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1HelmRegistry": {
      "description": "Helm registry information",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1HelmRegistrySpec"
        },
        "status": {
          "$ref": "#/definitions/v1HelmRegistryStatus"
        }
      },
      "type": "object"
    },
    "v1HelmRegistryCreateOption": {
      "description": "Helm registry create options",
      "properties": {
        "charts": {
          "items": {
            "$ref": "#/definitions/v1HelmChartOption"
          },
          "type": "array",
          "uniqueItems": true
        },
        "skipSync": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1HelmRegistryEntity": {
      "description": "Helm registry information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1HelmRegistrySpecEntity"
        }
      },
      "type": "object"
    },
    "v1HelmRegistrySpec": {
      "description": "Helm registry credentials spec",
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "endpoint": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        },
        "registryUid": {
          "description": "Helm registry uid",
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      },
      "required": [
        "endpoint",
        "auth"
      ],
      "type": "object"
    },
    "v1HelmRegistrySpecEntity": {
      "description": "Helm registry credentials spec",
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "createOption": {
          "$ref": "#/definitions/v1HelmRegistryCreateOption"
        },
        "endpoint": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      },
      "required": [
        "endpoint",
        "auth"
      ],
      "type": "object"
    },
    "v1HelmRegistrySpecSummary": {
      "description": "Helm Registry spec summary",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean",
          "x-omitempty": false
        },
        "scope": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1HelmRegistryStatus": {
      "description": "Status of the helm registry",
      "properties": {
        "helmSyncStatus": {
          "$ref": "#/definitions/v1RegistrySyncStatus"
        }
      },
      "type": "object"
    },
    "v1HelmRegistryStatusSummary": {
      "description": "Helm registry status summary",
      "properties": {
        "sync": {
          "$ref": "#/definitions/v1RegistrySyncStatus"
        }
      }
    },
    "v1HelmRegistrySummary": {
      "description": "Helm Registry summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1HelmRegistrySpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1HelmRegistryStatusSummary"
        }
      },
      "type": "object"
    },
    "v1HostClusterConfig": {
      "properties": {
        "clusterEndpoint": {
          "$ref": "#/definitions/v1HostClusterEndpoint",
          "description": "host cluster configuration"
        },
        "clusterGroup": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "cluster group reference"
        },
        "hostCluster": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "host cluster reference"
        },
        "isHostCluster": {
          "default": false,
          "description": "is enabled as host cluster",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1HostClusterConfigEntity": {
      "properties": {
        "hostClusterConfig": {
          "$ref": "#/definitions/v1HostClusterConfig"
        }
      },
      "type": "object"
    },
    "v1HostClusterConfigResponse": {
      "properties": {
        "clusterGroup": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "cluster group reference"
        }
      }
    },
    "v1HostClusterEndpoint": {
      "properties": {
        "config": {
          "$ref": "#/definitions/v1HostClusterEndpointConfig"
        },
        "type": {
          "description": "is enabled as host cluster",
          "enum": [
            "Ingress",
            "LoadBalancer"
          ],
          "type": "string"
        }
      }
    },
    "v1HostClusterEndpointConfig": {
      "properties": {
        "ingressConfig": {
          "$ref": "#/definitions/v1IngressConfig"
        },
        "loadBalancerConfig": {
          "$ref": "#/definitions/v1LoadBalancerConfig"
        }
      }
    },
    "v1HttpPatch": {
      "properties": {
        "from": {
          "description": "A path to the pointer from which reference will be taken",
          "type": "string"
        },
        "op": {
          "description": "The operation to be performed",
          "enum": [
            "add",
            "remove",
            "replace",
            "move",
            "copy"
          ],
          "type": "string"
        },
        "path": {
          "description": "A path to the pointer on which operation will be done",
          "type": "string"
        },
        "value": {
          "description": "The value to be used within the operations.",
          "type": "object"
        }
      },
      "required": [
        "op",
        "path"
      ],
      "type": "object"
    },
    "v1HubbleInfo": {
      "properties": {
        "apiEndpoint": {
          "type": "string"
        },
        "apiPort": {
          "type": "string"
        },
        "natsEndpoint": {
          "type": "string"
        },
        "uiEndpoint": {
          "type": "string"
        },
        "uiPort": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1IPPool": {
      "description": "IPPool defines static IPs available. Gateway, Prefix, Nameserver, if defined, will be default values for all Pools",
      "properties": {
        "gateway": {
          "description": "Gateway is the gateway ip address",
          "type": "string"
        },
        "nameserver": {
          "$ref": "#/definitions/v1Nameserver",
          "description": "Nameserver provide information for dns resolvation"
        },
        "pools": {
          "description": "Pools contains the list of IP addresses pools",
          "items": {
            "$ref": "#/definitions/v1Pool"
          },
          "type": "array"
        },
        "prefix": {
          "description": "Prefix is the mask of the network as integer (max 128)",
          "format": "int32",
          "type": "integer"
        },
        "uid": {
          "description": "UID is the UID of this IPPool, used by Hubble",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1IdentityProvider": {
      "description": "Describes a predefined Identity Provider (IDP)",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1IdentityProviders": {
      "description": "Describes a list of predefined Identity Provider (IDP)",
      "items": {
        "$ref": "#/definitions/v1IdentityProvider"
      },
      "type": "array",
      "uniqueItems": true
    },
    "v1ImportClusterConfig": {
      "properties": {
        "importMode": {
          "description": "If the importMode is empty then cluster is imported with full permission mode. By default importMode is empty and cluster is imported in full permission mode.",
          "enum": [
            "read-only"
          ],
          "type": "string"
        },
        "proxy": {
          "$ref": "#/definitions/v1ClusterProxySpec",
          "description": "Cluster proxy settings"
        }
      },
      "type": "object"
    },
    "v1ImportEdgeHostConfig": {
      "properties": {
        "edgeHostUid": {
          "description": "Deprecated. Use 'edgeHostUids' field",
          "type": "string"
        },
        "edgeHostUids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1InfraLBConfig": {
      "properties": {
        "apiServerLB": {
          "$ref": "#/definitions/v1LoadBalancerSpec",
          "description": "APIServerLB is the configuration for the control-plane load balancer."
        }
      },
      "type": "object"
    },
    "v1IngressConfig": {
      "description": "Ingress configuration for exposing the virtual cluster's kube-apiserver",
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "v1InstallerStatus": {
      "description": "Spectro cluster installer status",
      "properties": {
        "clusterMigration": {
          "$ref": "#/definitions/v1SpectroClusterMigration"
        },
        "clusterState": {
          "type": "string"
        },
        "endpoint": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1InstanceConfig": {
      "properties": {
        "category": {
          "type": "string"
        },
        "cpuSet": {
          "format": "int64",
          "type": "integer"
        },
        "diskGiB": {
          "format": "int64",
          "type": "integer"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of virtual processors in a virtual machine",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1InstanceCost": {
      "description": "Instance cost entity",
      "properties": {
        "price": {
          "description": "Array of cloud instance price",
          "items": {
            "$ref": "#/definitions/v1InstancePrice"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1InstancePrice": {
      "description": "Cloud instance price",
      "properties": {
        "onDemand": {
          "description": "OnDemand price of instance",
          "format": "double",
          "type": "number"
        },
        "os": {
          "description": "Os associated with instance price. Allowed values - [linux, windows]",
          "enum": [
            "linux",
            "windows"
          ],
          "type": "string"
        },
        "spot": {
          "description": "Spot price of instance",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "v1InstanceType": {
      "description": "Cloud Instance type details",
      "properties": {
        "category": {
          "description": "Category of instance type",
          "type": "string",
          "x-go-name": "Category"
        },
        "cost": {
          "$ref": "#/definitions/v1InstanceCost"
        },
        "cpu": {
          "description": "Cpu of instance type",
          "format": "double",
          "type": "number",
          "x-go-name": "Cpu"
        },
        "gpu": {
          "description": "Gpu of instance type",
          "format": "double",
          "type": "number",
          "x-go-name": "Gpu"
        },
        "memory": {
          "description": "Memory of instance type",
          "format": "double",
          "type": "number",
          "x-go-name": "Memory"
        },
        "nonSupportedZones": {
          "description": "Non supported zones of the instance in a particular region",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "price": {
          "description": "Price of instance type",
          "format": "double",
          "type": "number",
          "x-go-name": "Price"
        },
        "supportedArchitectures": {
          "description": "Supported architecture of the instance",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "Type of instance type",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "type": "object"
    },
    "v1Invoice": {
      "description": "Invoice object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1InvoiceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1InvoiceStatus"
        }
      }
    },
    "v1InvoiceBillingPeriod": {
      "description": "Invoice billing period object",
      "properties": {
        "end": {
          "$ref": "#/definitions/v1Time"
        },
        "start": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1InvoiceCredits": {
      "description": "Invoice credits object",
      "properties": {
        "alloyFreeCredits": {
          "description": "Credits allocated for import clusters",
          "format": "int64",
          "type": "number"
        },
        "pureFreeCredits": {
          "description": "Credits allocated for managed clusters",
          "format": "int64",
          "type": "number"
        }
      }
    },
    "v1InvoicePlan": {
      "description": "Invoice plan object",
      "properties": {
        "freeCredits": {
          "description": "List of free credits",
          "items": {
            "$ref": "#/definitions/v1InvoicePlanCredit"
          },
          "type": "array"
        },
        "plantype": {
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ],
          "type": "string"
        },
        "slaCredits": {
          "description": "List of SLA credits",
          "items": {
            "$ref": "#/definitions/v1InvoicePlanCredit"
          },
          "type": "array"
        }
      }
    },
    "v1InvoicePlanCredit": {
      "description": "Invoice plan credit object",
      "properties": {
        "planCredit": {
          "$ref": "#/definitions/v1PlanCredit"
        },
        "totalCpuCoreHours": {
          "description": "Total used cpu core hours",
          "format": "int64",
          "type": "number"
        }
      }
    },
    "v1InvoiceProduct": {
      "description": "Product invoice object",
      "properties": {
        "alloy": {
          "$ref": "#/definitions/v1InvoiceProductData"
        },
        "pure": {
          "$ref": "#/definitions/v1InvoiceProductData"
        }
      }
    },
    "v1InvoiceProductData": {
      "description": "Product invoice data",
      "properties": {
        "allocatedCredits": {
          "description": "Allocated credits",
          "format": "int64",
          "type": "number"
        },
        "amount": {
          "description": "Total amount",
          "format": "float64",
          "type": "number"
        },
        "billableCredits": {
          "description": "Credits to be billed",
          "format": "float64",
          "type": "number"
        },
        "breachedCredits": {
          "description": "Credits that are exceeds the allocated credits",
          "format": "float64",
          "type": "number"
        },
        "discount": {
          "description": "Applied discount",
          "format": "int64",
          "type": "number"
        },
        "freeCredits": {
          "description": "Allocated free credits",
          "format": "int64",
          "type": "number"
        },
        "overageLimitPercentage": {
          "description": "Allowed overage limit in percentage",
          "format": "int8",
          "type": "number"
        },
        "tierName": {
          "description": "Tier name",
          "type": "string"
        },
        "tierPrice": {
          "description": "Tier price",
          "format": "float64",
          "type": "number"
        },
        "totalUsedCredits": {
          "description": "Total used credits",
          "format": "float64",
          "type": "number"
        },
        "usedCredits": {
          "description": "Used credits",
          "format": "float64",
          "type": "number"
        }
      }
    },
    "v1InvoiceProject": {
      "description": "Invoice project object",
      "properties": {
        "amount": {
          "description": "Billing amount for the project",
          "format": "float64",
          "type": "number"
        },
        "projectName": {
          "description": "Name of the project",
          "type": "string"
        },
        "projectUid": {
          "description": "Project identifier",
          "type": "string"
        },
        "usage": {
          "$ref": "#/definitions/v1ProjectUsage",
          "description": "Usage by the project"
        }
      }
    },
    "v1InvoiceRetryRequest": {
      "description": "Retry invoice request object",
      "properties": {
        "customerId": {
          "description": "Customer invoice uid",
          "type": "string"
        },
        "invoiceUid": {
          "description": "Invoice uid",
          "type": "string"
        },
        "paymentMethodId": {
          "description": "Payment method uid",
          "type": "string"
        }
      }
    },
    "v1InvoiceSpec": {
      "description": "Invoice specification",
      "properties": {
        "address": {
          "$ref": "#/definitions/v1Address"
        },
        "billingPeriod": {
          "$ref": "#/definitions/v1InvoiceBillingPeriod"
        },
        "credits": {
          "$ref": "#/definitions/v1InvoiceCredits"
        },
        "envType": {
          "description": "Environment type [Trial,MonthlyOnDemand,AnnualSubscription,OnPrem]",
          "type": "string"
        },
        "month": {
          "$ref": "#/definitions/v1Time",
          "description": "Month for which invoice is generated"
        },
        "paymentUnit": {
          "enum": [
            "usd"
          ],
          "type": "string"
        },
        "plan": {
          "$ref": "#/definitions/v1InvoicePlan"
        }
      }
    },
    "v1InvoiceState": {
      "description": "Invoice state object",
      "properties": {
        "paymentMsg": {
          "description": "Payment status message",
          "type": "string"
        },
        "state": {
          "enum": [
            "Paid",
            "PaymentPending",
            "PaymentInProgress",
            "PaymentFailed"
          ],
          "type": "string"
        },
        "timestamp": {
          "$ref": "#/definitions/v1Time",
          "description": "Time on which the state has been updated"
        }
      }
    },
    "v1InvoiceStatus": {
      "description": "Invoice Status",
      "properties": {
        "billableAmount": {
          "description": "Total billable amount",
          "format": "float64",
          "type": "number"
        },
        "productInvoice": {
          "$ref": "#/definitions/v1InvoiceProduct"
        },
        "projects": {
          "description": "List of project invoices",
          "items": {
            "$ref": "#/definitions/v1InvoiceProject"
          },
          "type": "array"
        },
        "states": {
          "description": "List of invoice states",
          "items": {
            "$ref": "#/definitions/v1InvoiceState"
          },
          "type": "array",
          "uniqueItems": true
        },
        "stripeInvoiceId": {
          "description": "Stripe invoice uid",
          "type": "string"
        }
      }
    },
    "v1Invoices": {
      "description": "List of invoices",
      "properties": {
        "invoices": {
          "items": {
            "$ref": "#/definitions/v1Invoice"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "invoices"
      ],
      "type": "object"
    },
    "v1IpPoolEntity": {
      "description": "IP Pool entity definition",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "pool": {
              "$ref": "#/definitions/v1Pool"
            },
            "priavetGatewayUid": {
              "type": "string"
            },
            "restrictToSingleCluster": {
              "description": "if true, restricts this IP pool to be used by single cluster at any time",
              "type": "boolean",
              "x-omitempty": false
            }
          },
          "type": "object"
        },
        "status": {
          "$ref": "#/definitions/v1IpPoolStatus"
        }
      },
      "type": "object"
    },
    "v1IpPoolInputEntity": {
      "description": "IP Pool input entity definition",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "pool": {
              "$ref": "#/definitions/v1Pool"
            },
            "restrictToSingleCluster": {
              "description": "if true, restricts this IP pool to be used by single cluster at any time",
              "type": "boolean"
            }
          },
          "required": [
            "pool"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1IpPoolStatus": {
      "description": "IP Pool status",
      "properties": {
        "allottedIps": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "associatedClusters": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "inUse": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1IpPools": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1IpPoolEntity"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1JWKResponse": {
      "properties": {
        "alg": {
          "description": "The \"alg\" (algorithm) parameter identifies the algorithm intended for use with the key",
          "type": "string"
        },
        "e": {
          "type": "string"
        },
        "key_ops": {
          "description": "The \"key_ops\" (key operations) parameter identifies the operation(s) for which the key is intended to be used",
          "type": "string"
        },
        "kid": {
          "description": "The \"kid\" (key ID) parameter is used to match a specific key",
          "type": "string"
        },
        "kty": {
          "description": "The \"kty\" (key type) parameter identifies the cryptographic algorithm family used with the key, such as \"RSA\" or \"EC\"",
          "type": "string"
        },
        "n": {
          "type": "string"
        },
        "use": {
          "description": "The \"use\" (public key use) parameter identifies the intended use of the public key",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1JWKSetResponse": {
      "properties": {
        "keys": {
          "description": "The value of the \"keys\" parameter is an array of JWK values",
          "items": {
            "$ref": "#/definitions/v1JWKResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1JetAuthKey": {
      "properties": {
        "authKey": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1JetAuthKeyResponse": {
      "properties": {
        "authKey": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1JetServiceLogin": {
      "description": "jet service login input",
      "properties": {
        "authKey": {
          "description": "authToken helps in two step verification for the authorization.",
          "type": "string"
        },
        "edgeHostUid": {
          "type": "string"
        },
        "hostClusterUid": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "jetUid": {
          "type": "string"
        },
        "overlordUid": {
          "type": "string"
        },
        "serviceVersion": {
          "type": "string"
        },
        "spectroClusterUid": {
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1KubeBenchEntity": {
      "description": "KubeBench response",
      "properties": {
        "reports": {
          "additionalProperties": {
            "$ref": "#/definitions/v1KubeBenchReportEntity"
          },
          "type": "object"
        },
        "requestUid": {
          "type": "string"
        },
        "status": {
          "enum": [
            "Completed",
            "InProgress",
            "Failed",
            "Initiated"
          ],
          "type": "string"
        }
      },
      "required": [
        "requestUid",
        "status",
        "reports"
      ]
    },
    "v1KubeBenchLog": {
      "description": "Compliance Scan KubeBench Log",
      "properties": {
        "description": {
          "type": "string"
        },
        "expected": {
          "type": "string"
        },
        "remediation": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "testId": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1KubeBenchLogEntity": {
      "description": "KubeBench log",
      "properties": {
        "description": {
          "type": "string"
        },
        "expected": {
          "type": "string"
        },
        "remediation": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "testId": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1KubeBenchReport": {
      "description": "Compliance Scan KubeBench Report",
      "properties": {
        "fail": {
          "format": "int32",
          "type": "integer"
        },
        "info": {
          "format": "int32",
          "type": "integer"
        },
        "logs": {
          "items": {
            "$ref": "#/definitions/v1KubeBenchLog"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "pass": {
          "format": "int32",
          "type": "integer"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string"
        },
        "warn": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1KubeBenchReportEntity": {
      "description": "KubeBench report",
      "properties": {
        "fail": {
          "format": "int32",
          "type": "integer"
        },
        "info": {
          "format": "int32",
          "type": "integer"
        },
        "logs": {
          "items": {
            "$ref": "#/definitions/v1KubeBenchLogEntity"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "pass": {
          "format": "int32",
          "type": "integer"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string"
        },
        "warn": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1KubeHunterEntity": {
      "description": "KubeHunter response",
      "properties": {
        "reports": {
          "additionalProperties": {
            "$ref": "#/definitions/v1KubeHunterReportEntity"
          },
          "type": "object"
        },
        "requestUid": {
          "type": "string"
        },
        "status": {
          "enum": [
            "Completed",
            "InProgress",
            "Failed",
            "Initiated"
          ],
          "type": "string"
        }
      },
      "required": [
        "requestUid",
        "status",
        "reports"
      ]
    },
    "v1KubeHunterLog": {
      "description": "Compliance Scan KubeHunter Log",
      "properties": {
        "description": {
          "type": "string"
        },
        "evidence": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "testId": {
          "type": "string"
        },
        "vulnerability": {
          "type": "string"
        }
      }
    },
    "v1KubeHunterLogEntity": {
      "description": "KubeHunter log",
      "properties": {
        "description": {
          "type": "string"
        },
        "evidence": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "testId": {
          "type": "string"
        },
        "vulnerability": {
          "type": "string"
        }
      }
    },
    "v1KubeHunterReport": {
      "description": "Compliance Scan KubeHunter Report",
      "properties": {
        "logs": {
          "items": {
            "$ref": "#/definitions/v1KubeHunterLog"
          },
          "type": "array"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        },
        "vulnerabilites": {
          "$ref": "#/definitions/v1KubeHunterVulnerabilities"
        }
      }
    },
    "v1KubeHunterReportEntity": {
      "description": "KubeHunter report",
      "properties": {
        "logs": {
          "items": {
            "$ref": "#/definitions/v1KubeHunterLogEntity"
          },
          "type": "array"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        },
        "vulnerabilities": {
          "$ref": "#/definitions/v1KubeHunterVulnerabilityDataEntity"
        }
      }
    },
    "v1KubeHunterVulnerabilities": {
      "description": "Compliance Scan KubeHunter Vulnerabilities",
      "properties": {
        "high": {
          "format": "int32",
          "type": "integer"
        },
        "low": {
          "format": "int32",
          "type": "integer"
        },
        "medium": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1KubeHunterVulnerabilityDataEntity": {
      "description": "KubeHunter vulnerability data",
      "properties": {
        "high": {
          "format": "int32",
          "type": "integer"
        },
        "low": {
          "format": "int32",
          "type": "integer"
        },
        "medium": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1KubeMeta": {
      "description": "Spectro cluster kube meta",
      "properties": {
        "hasKubeConfig": {
          "type": "boolean",
          "x-omitempty": false
        },
        "hasKubeConfigClient": {
          "type": "boolean",
          "x-omitempty": false
        },
        "hasManifest": {
          "type": "boolean",
          "x-omitempty": false
        },
        "kubernetesVersion": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1LibvirtCloudClusterConfigEntity": {
      "description": "Libvirt cloud cluster config entity",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1LibvirtClusterConfig"
        }
      },
      "type": "object"
    },
    "v1LibvirtCloudConfig": {
      "description": "LibvirtCloudConfig is the Schema for the libvirtcloudconfigs API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1LibvirtCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1LibvirtCloudConfigStatus"
        }
      },
      "type": "object"
    },
    "v1LibvirtCloudConfigSpec": {
      "description": "LibvirtCloudConfigSpec defines the desired state of LibvirtCloudConfig",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1LibvirtClusterConfig"
        },
        "machinePoolConfig": {
          "items": {
            "$ref": "#/definitions/v1LibvirtMachinePoolConfig"
          },
          "type": "array"
        }
      },
      "required": [
        "clusterConfig",
        "machinePoolConfig"
      ],
      "type": "object"
    },
    "v1LibvirtCloudConfigStatus": {
      "properties": {
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "type": "array"
        },
        "nodeImages": {
          "description": "NodeImages are the list of images generated on all the LibvirtHosts",
          "items": {
            "$ref": "#/definitions/v1LibvirtImage"
          },
          "type": "array"
        },
        "sourceImageId": {
          "description": "SourceImageId can be from packref's annotations or from pack.json",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1LibvirtClusterConfig": {
      "properties": {
        "controlPlaneEndpoint": {
          "$ref": "#/definitions/v1LibvirtControlPlaneEndPoint",
          "description": "ControlPlaneEndpoint is the control plane endpoint, which can be an IP or FQDN"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys to access the vms as a 'spectro' user",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "staticIp": {
          "description": "StaticIP indicates if IP allocation type is static IP. DHCP is the default allocation type",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1LibvirtControlPlaneEndPoint": {
      "properties": {
        "ddnsSearchDomain": {
          "description": "DDNSSearchDomain is the search domain used for resolving IP addresses when the EndpointType is DDNS. This search domain is appended to the generated Hostname to obtain the complete DNS name for the endpoint. If Host is already a DDNS FQDN, DDNSSearchDomain is not required",
          "type": "string"
        },
        "host": {
          "description": "Host is FQDN(DDNS) or IP",
          "type": "string"
        },
        "type": {
          "description": "Type indicates DDNS or VIP",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1LibvirtDiskSpec": {
      "properties": {
        "dataStoragePool": {
          "description": "DataStoragePool is the storage pool from which additional disks are assigned",
          "type": "string"
        },
        "managed": {
          "description": "Managed indicates if the disk is a persistent or not. By default its false indicating all disks are ephemeral.",
          "type": "boolean"
        },
        "sizeInGB": {
          "description": "SizeInGB is the target size in GB of the disk to be added",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "sizeInGB"
      ],
      "type": "object"
    },
    "v1LibvirtHostIdentity": {
      "properties": {
        "caCert": {
          "description": "CACert is the client CA certificate",
          "type": "string"
        },
        "mode": {
          "description": "Mode indicates a system or session connection to the host",
          "type": "string"
        },
        "socketPath": {
          "description": "SocketPath is an optional path to the socket on the host, if not using defaults",
          "type": "string"
        },
        "sshSecret": {
          "$ref": "#/definitions/v1EdgeHostSSHSecret",
          "description": "SSHSecrets to the secret containing ssh-username"
        }
      },
      "type": "object"
    },
    "v1LibvirtImage": {
      "description": "LibvirtImage is the Image generated on the LibvirtHost",
      "properties": {
        "hostID": {
          "description": "HostID is the ID of the LibvirtHost",
          "type": "string"
        },
        "imageName": {
          "description": "ImageName is the name of the Libvirt image",
          "type": "string"
        },
        "storagePool": {
          "description": "StoragePool is the name of the storagePool where is image is located",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1LibvirtInstanceType": {
      "description": "LibvirtInstanceType defines the instance configuration for a virtual machine",
      "properties": {
        "cpuPassthroughSpec": {
          "$ref": "#/definitions/v1CPUPassthroughSpec",
          "description": "Defines CPU Passthrough Spec. A not null value enables CPU Passthrough for the libvirt domain. Further cache passthrough can be enabled with the CPU passthrough spec."
        },
        "cpuset": {
          "description": "CPUSet defines cpuset for an instance which allows allocation specific set of cpus E.g  cpuset=\"1-4,^3,6\" See https://libvirt.org/formatdomain.html#cpu-allocation",
          "type": "string"
        },
        "gpuConfig": {
          "$ref": "#/definitions/v1GPUConfig",
          "description": "GPU configuration"
        },
        "memoryInMB": {
          "description": "MemoryinMB is the memory in megabytes",
          "format": "int32",
          "type": "integer"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of CPUs",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "numCPUs",
        "memoryInMB"
      ],
      "type": "object"
    },
    "v1LibvirtMachine": {
      "description": "Libvirt cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1LibvirtMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      }
    },
    "v1LibvirtMachinePoolCloudConfigEntity": {
      "properties": {
        "instanceType": {
          "$ref": "#/definitions/v1LibvirtInstanceType"
        },
        "nonRootDisksInGB": {
          "description": "NonRootDisksInGB is the list of additional disks, if required, in GB",
          "items": {
            "$ref": "#/definitions/v1LibvirtDiskSpec"
          },
          "type": "array"
        },
        "placements": {
          "description": "Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster",
          "items": {
            "$ref": "#/definitions/v1LibvirtPlacementEntity"
          },
          "type": "array",
          "uniqueItems": true
        },
        "rootDiskInGB": {
          "description": "RootDiskInGB is the size of a vm's root disk, in GiB",
          "format": "int32",
          "type": "integer"
        },
        "xslTemplate": {
          "description": "XSLTemplate defines a base64-encoded raw xsl template which will be included in the machine definition",
          "type": "string"
        }
      },
      "required": [
        "instanceType",
        "placements",
        "rootDiskInGB"
      ]
    },
    "v1LibvirtMachinePoolConfig": {
      "properties": {
        "additionalLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "additionalLabels",
          "type": "object"
        },
        "additionalTags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object"
        },
        "instanceType": {
          "$ref": "#/definitions/v1LibvirtInstanceType",
          "description": "InstanceType defines the instance configuration of the vms in the machine pool"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "format": "int32",
          "type": "integer"
        },
        "nonRootDisksInGB": {
          "description": "NonRootDisksInGB is the list of additional disks, if required, in GB",
          "items": {
            "$ref": "#/definitions/v1LibvirtDiskSpec"
          },
          "type": "array"
        },
        "placements": {
          "description": "Placements defines the configurations of the failureDomains(hosts) for the machine pool",
          "items": {
            "$ref": "#/definitions/v1LibvirtPlacementConfig"
          },
          "type": "array"
        },
        "rootDiskInGB": {
          "description": "RootDiskInGB is the size of a vm's root disk, in GB",
          "format": "int32",
          "type": "integer"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer"
        },
        "taints": {
          "description": "control plane or worker taints",
          "items": {
            "$ref": "#/definitions/v1Taint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updateStrategy": {
          "$ref": "#/definitions/v1UpdateStrategy",
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean"
        },
        "xslTemplate": {
          "description": "XSLTemplate defines a base64-encoded raw xsl template which will be included in the machine definition",
          "type": "string"
        }
      },
      "required": [
        "instanceType",
        "placements",
        "rootDiskInGB"
      ],
      "type": "object"
    },
    "v1LibvirtMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1LibvirtMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      },
      "type": "object"
    },
    "v1LibvirtMachineSpec": {
      "description": "libvirt cloud VM definition spec",
      "properties": {
        "disks": {
          "items": {
            "$ref": "#/definitions/v1LibvirtDiskSpec"
          },
          "type": "array"
        },
        "edgeHostUid": {
          "type": "string"
        },
        "failureDomain": {
          "type": "string"
        },
        "imageName": {
          "type": "string"
        },
        "instanceType": {
          "$ref": "#/definitions/v1LibvirtInstanceType"
        },
        "nics": {
          "items": {
            "$ref": "#/definitions/v1LibvirtNicSpec"
          },
          "type": "array"
        },
        "targetStoragePool": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1LibvirtMachines": {
      "description": "Libvirt machine list",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1LibvirtMachine"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1LibvirtNetworkSpec": {
      "description": "LibvirtNetworkSpec defines the network configuration for a virtual machine",
      "properties": {
        "networkName": {
          "description": "NetworkName of the libvirt network where this machine will be connected",
          "type": "string"
        },
        "networkType": {
          "description": "NetworkType  specifies the type of network",
          "enum": [
            "default",
            "bridge"
          ],
          "type": "string"
        }
      },
      "required": [
        "networkName",
        "networkType"
      ],
      "type": "object"
    },
    "v1LibvirtNicSpec": {
      "description": "Libvirt network interface",
      "properties": {
        "index": {
          "format": "int8",
          "type": "integer"
        },
        "macAddress": {
          "type": "string"
        },
        "privateIPs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "macAddress"
      ],
      "type": "object"
    },
    "v1LibvirtPlacementConfig": {
      "properties": {
        "dataStoragePool": {
          "description": "DataStoragePool is the storage pool from which additional disks are assigned",
          "type": "string"
        },
        "gpuDevices": {
          "description": "GPU Devices is the list of LibvirtHost GPU devices, to be used for this placement",
          "items": {
            "$ref": "#/definitions/v1GPUDeviceSpec"
          },
          "type": "array"
        },
        "hostAddress": {
          "description": "HostAddress is a FQDN or IP address of the LibvirtHost",
          "type": "string"
        },
        "hostIdentity": {
          "$ref": "#/definitions/v1LibvirtHostIdentity",
          "description": "HostIdentity is the identity to access the LibvirtHost"
        },
        "hostUid": {
          "description": "HostUid is the ID of the LibvirtHost",
          "type": "string"
        },
        "networks": {
          "description": "Networks defines the network specifications of the vms in the machine pool",
          "items": {
            "$ref": "#/definitions/v1LibvirtNetworkSpec"
          },
          "type": "array"
        },
        "sourceStoragePool": {
          "description": "SourceStoragePool is the storage pool for the vm image",
          "type": "string"
        },
        "targetStoragePool": {
          "description": "TargetStoragePool is the optional storage pool from which additional disks are assigned. If not specified, the sourceStoragePool is also used as the targetStoragePool",
          "type": "string"
        }
      },
      "required": [
        "hostUid",
        "hostAddress",
        "networks",
        "sourceStoragePool"
      ],
      "type": "object"
    },
    "v1LibvirtPlacementEntity": {
      "description": "Libvirt placement config",
      "properties": {
        "dataStoragePool": {
          "type": "string"
        },
        "gpuDevices": {
          "description": "GPUDevices defines an array of gpu device for a specific edge host. This will be overridden by edge host GPU devices if configured during registration.",
          "items": {
            "$ref": "#/definitions/v1GPUDeviceSpec"
          },
          "type": "array"
        },
        "hostUid": {
          "type": "string"
        },
        "networks": {
          "items": {
            "$ref": "#/definitions/v1LibvirtNetworkSpec"
          },
          "type": "array"
        },
        "sourceStoragePool": {
          "type": "string"
        },
        "targetStoragePool": {
          "type": "string"
        }
      },
      "required": [
        "hostUid"
      ],
      "type": "object"
    },
    "v1LifecycleConfig": {
      "properties": {
        "pause": {
          "default": false,
          "description": "enable pause life cycle config",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1LifecycleConfigEntity": {
      "properties": {
        "lifecycleConfig": {
          "$ref": "#/definitions/v1LifecycleConfig"
        }
      },
      "type": "object"
    },
    "v1LifecycleStatus": {
      "properties": {
        "msg": {
          "description": "error or success msg of lifecycle",
          "type": "string"
        },
        "status": {
          "description": "lifecycle status",
          "enum": [
            "Pausing",
            "Paused",
            "Resuming",
            "Running",
            "Error"
          ],
          "type": "string"
        }
      }
    },
    "v1ListMetaData": {
      "description": "ListMeta describes metadata for the resource listing",
      "properties": {
        "continue": {
          "description": "Next token for the pagination. Next token is equal to empty string indicates end of result set.",
          "type": "string",
          "x-omitempty": false
        },
        "count": {
          "description": "Total count of the resources which might change during pagination based on the resources addition or deletion",
          "type": "integer",
          "x-omitempty": false
        },
        "limit": {
          "description": "Number of records feteched",
          "type": "integer",
          "x-omitempty": false
        },
        "offset": {
          "description": "The next offset for the pagination. Starting index for which next request will be placed.",
          "type": "integer",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1LoadBalancerConfig": {
      "description": "Load balancer configuration for exposing the virtual cluster's kube-apiserver",
      "properties": {
        "externalIPs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "externalTrafficPolicy": {
          "type": "string"
        },
        "loadBalancerSourceRanges": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "v1LoadBalancerService": {
      "properties": {
        "host": {
          "description": "IP or Host from svc.Status.LoadBalancerStatus.Ingress",
          "type": "string"
        },
        "name": {
          "description": "name of the loadbalancer service",
          "type": "string"
        },
        "ports": {
          "description": "port this service exposed",
          "items": {
            "$ref": "#/definitions/v1ServicePort"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1LoadBalancerSpec": {
      "description": "LoadBalancerSpec defines an Azure load balancer.",
      "properties": {
        "apiServerLBStaticIP": {
          "type": "string"
        },
        "ipAllocationMethod": {
          "default": "Dynamic",
          "enum": [
            "Static",
            "Dynamic"
          ],
          "type": "string"
        },
        "privateDNSName": {
          "type": "string"
        },
        "type": {
          "default": "Public",
          "description": "Load Balancer type",
          "enum": [
            "Internal",
            "Public"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1LocationType": {
      "default": "s3",
      "description": "Location type",
      "enum": [
        "s3",
        "gcp",
        "minio"
      ],
      "type": "string"
    },
    "v1Lock": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta",
          "type": "object",
          "x-omitempty": false
        },
        "spec": {
          "properties": {
            "expireAt": {
              "$ref": "#/definitions/v1Time",
              "x-omitempty": false
            },
            "key": {
              "type": "string",
              "x-omitempty": false
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1Locks": {
      "items": {
        "$ref": "#/definitions/v1Lock"
      },
      "type": "array",
      "uniqueItems": true
    },
    "v1Login": {
      "description": "Login input",
      "properties": {
        "emailId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1LoginBannerSettings": {
      "properties": {
        "Message": {
          "description": "Login banner message displayed to the user",
          "type": "string",
          "x-omitempty": false
        },
        "isEnabled": {
          "description": "Set to 'true' if login banner has to be displayed for user",
          "type": "boolean",
          "x-omitempty": false
        },
        "title": {
          "description": "Banner title displayed to the user",
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1LoginResponse": {
      "description": "Returns the allowed login method and information with the organization details",
      "properties": {
        "appEnv": {
          "description": "Describes the env type. Possible values [ saas, self-hosted, quick-start, enterprise, airgap]",
          "type": "string"
        },
        "authType": {
          "description": "Describes the default mode of authentication. Possible values [password, sso]",
          "enum": [
            "password",
            "sso"
          ],
          "type": "string"
        },
        "orgName": {
          "description": "Organization name.",
          "type": "string"
        },
        "redirectUrl": {
          "description": "Describes the default redirect Url for authentication. If authType is sso, it will have tenant configured saml/oidc idp url else it will be users organization url",
          "type": "string",
          "x-omitempty": false
        },
        "rootDomain": {
          "description": "Describes the domain url on which the saas is available",
          "type": "string"
        },
        "securityMode": {
          "description": "Describes which security mode is enabled",
          "type": "string"
        },
        "ssoLogins": {
          "$ref": "#/definitions/v1SsoLogins",
          "description": "Just Inside. Describes the allowed social logins"
        },
        "totalTenants": {
          "description": "Describes the total number of tenant present in the system",
          "format": "int64",
          "type": "number"
        }
      },
      "type": "object"
    },
    "v1LogoutResponse": {
      "description": "Logout response specifying the redirect url",
      "properties": {
        "redirectUrl": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1MaasAccount": {
      "description": "Maas cloud account information",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1MaasCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      },
      "type": "object"
    },
    "v1MaasAccounts": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1MaasAccount"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1MaasCloudAccount": {
      "properties": {
        "apiEndpoint": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        },
        "preferredSubnets": {
          "description": "list of preferred subnets order in the list reflects order in which subnets will be selected for ip address selection in apiserver dns endpoint this way user can specify external or preferable subnet \"10.11.130.0/24,10.10.10.0/24\"",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "apiKey",
        "apiEndpoint"
      ],
      "type": "object"
    },
    "v1MaasCloudClusterConfigEntity": {
      "description": "Maas cloud cluster config entity",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1MaasClusterConfig"
        }
      },
      "type": "object"
    },
    "v1MaasCloudConfig": {
      "description": "MaasCloudConfig is the Schema for the maascloudconfigs API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1MaasCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1MaasCloudConfigStatus"
        }
      },
      "type": "object"
    },
    "v1MaasCloudConfigSpec": {
      "description": "MaasCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "properties": {
        "cloudAccountRef": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "cloudAccountRef should point to the secret which contains MaasCloudAccount"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1MaasClusterConfig"
        },
        "machinePoolConfig": {
          "items": {
            "$ref": "#/definitions/v1MaasMachinePoolConfig"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1MaasCloudConfigStatus": {
      "description": "MaasCloudConfigStatus defines the observed state of MaasCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "type": "array"
        },
        "isAddonLayer": {
          "description": "addon layers present in spc",
          "type": "boolean"
        },
        "nodeImage": {
          "$ref": "#/definitions/v1MaasImage"
        },
        "roleDigest": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object"
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1MaasClusterConfig": {
      "description": "Cluster level configuration for MAAS cloud and applicable for all the machine pools",
      "properties": {
        "domain": {
          "description": "Domain name of the cluster to be provisioned",
          "type": "string"
        },
        "sshKeys": {
          "description": "SSH keys specifies a list of ssh authorized keys for the 'spectro' user",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "domain"
      ],
      "type": "object"
    },
    "v1MaasDomain": {
      "description": "Maas domain",
      "properties": {
        "name": {
          "description": "Name of Maas domain",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MaasDomains": {
      "description": "List of Maas domains",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1MaasDomain"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1MaasImage": {
      "description": "Name of the image",
      "properties": {
        "name": {
          "description": "full path of the image template location it contains datacenter/folder/templatename etc eg: /mydc/vm/template/spectro/workerpool-1-centos",
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MaasInstanceType": {
      "properties": {
        "minCPU": {
          "description": "Minimum CPU cores",
          "format": "int32",
          "type": "integer"
        },
        "minMemInMB": {
          "description": "Minimum memory in MiB",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1MaasMachine": {
      "description": "Maas cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1MaasMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      },
      "type": "object"
    },
    "v1MaasMachineConfigEntity": {
      "properties": {
        "azs": {
          "description": "for control plane pool, this will be the failure domains for kcp",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instanceType": {
          "$ref": "#/definitions/v1MaasInstanceType"
        },
        "resourcePool": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MaasMachinePoolCloudConfigEntity": {
      "properties": {
        "azs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instanceType": {
          "$ref": "#/definitions/v1MaasInstanceType"
        },
        "resourcePool": {
          "description": "the resource pool",
          "type": "string"
        },
        "tags": {
          "description": "Tags in maas environment",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "instanceType",
        "resourcePool"
      ],
      "type": "object"
    },
    "v1MaasMachinePoolConfig": {
      "properties": {
        "additionalLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "additionalLabels",
          "type": "object"
        },
        "additionalTags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object"
        },
        "azs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instanceType": {
          "$ref": "#/definitions/v1MaasInstanceType",
          "description": "InstanceType defines the required CPU, Memory"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "format": "int32",
          "type": "integer"
        },
        "resourcePool": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer"
        },
        "tags": {
          "description": "Tags in maas environment",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "taints": {
          "description": "control plane or worker taints",
          "items": {
            "$ref": "#/definitions/v1Taint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updateStrategy": {
          "$ref": "#/definitions/v1UpdateStrategy",
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean"
        }
      },
      "required": [
        "instanceType"
      ],
      "type": "object"
    },
    "v1MaasMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1MaasMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      },
      "required": [
        "cloudConfig"
      ],
      "type": "object"
    },
    "v1MaasMachineSpec": {
      "description": "Maas cloud VM definition spec",
      "properties": {
        "az": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "nics": {
          "items": {
            "$ref": "#/definitions/v1MaasNic"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1MaasMachines": {
      "description": "List of MAAS machines",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1MaasMachine"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1MaasNic": {
      "description": "Maas network interface",
      "properties": {
        "index": {
          "format": "int8",
          "type": "integer"
        },
        "privateIPs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "publicIp": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MaasPool": {
      "description": "Maas pool",
      "properties": {
        "description": {
          "description": "Description of Maas domain",
          "type": "string"
        },
        "name": {
          "description": "Name of Maas pool",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MaasPools": {
      "description": "List of Maas pools",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1MaasPool"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1MaasSubnet": {
      "description": "Maas subnet",
      "properties": {
        "id": {
          "description": "Id of Maas subnet",
          "type": "integer"
        },
        "name": {
          "description": "Name of Maas subnet",
          "type": "string"
        },
        "space": {
          "description": "Space associated with Maas subnet",
          "type": "string"
        },
        "vlans": {
          "$ref": "#/definitions/v1MaasVlan"
        }
      },
      "type": "object"
    },
    "v1MaasSubnets": {
      "description": "List of Maas subnets",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1MaasSubnet"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1MaasTag": {
      "description": "Maas tag",
      "properties": {
        "comment": {
          "description": "Comment on Maas tag",
          "type": "string"
        },
        "definition": {
          "description": "Definition of Maas tag",
          "type": "string"
        },
        "kernelOpts": {
          "description": "Kernel Opts on Maas tag",
          "type": "string"
        },
        "name": {
          "description": "Name of Maas tag",
          "type": "string"
        },
        "resourceUri": {
          "description": "Description of Maas tag",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MaasTags": {
      "description": "List of Maas tags",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1MaasTag"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1MaasVlan": {
      "description": "Maas vlan entity",
      "properties": {
        "fabric": {
          "description": "Fabric associated with Maas Vlan",
          "type": "string"
        },
        "id": {
          "description": "Id of Maas Vlan",
          "type": "integer"
        },
        "name": {
          "description": "Name of Maas Vlan",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MaasZone": {
      "description": "Maas zone",
      "properties": {
        "description": {
          "description": "Description of Maas domain",
          "type": "string"
        },
        "name": {
          "description": "Name of Maas zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MaasZones": {
      "description": "List of Maas zones",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1MaasZone"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1MachineCertificate": {
      "description": "K8 Certificates for control plane nodes",
      "properties": {
        "certificateAuthorities": {
          "description": "Applicable certificate authorities",
          "items": {
            "$ref": "#/definitions/v1CertificateAuthority"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MachineCertificates": {
      "description": "K8 Certificates for all the cluster's control plane nodes",
      "properties": {
        "machineCertificates": {
          "items": {
            "$ref": "#/definitions/v1MachineCertificate"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1MachineHealth": {
      "description": "Machine health state",
      "properties": {
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1MachineHealthCondition"
          },
          "type": "array"
        },
        "lastHeartBeatTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MachineHealthCheckConfig": {
      "properties": {
        "healthCheckMaxUnhealthy": {
          "description": "HealthCheckMaxUnhealthy is the value above which, if current nodes are unhealthy remediation will not be triggered Can be an absolute int64 number or a percentage string Default value is 100%, i.e by default it is disabled",
          "type": "string"
        },
        "networkReadyHealthCheckDuration": {
          "description": "NetworkReadyHealthCheckDuration is the timeout to check for the network availability. If the network is not available in the given available time, beyond the timeout check a node will be killed and a new node will be created. Default time is 10m",
          "type": "string"
        },
        "nodeReadyHealthCheckDuration": {
          "description": "NodeReadyHealthCheckDuration is the timeout to check for the node ready state. If the node is not ready within the time out set, the node will be deleted and a new node will be launched. Default time is 10m",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MachineHealthCondition": {
      "description": "Machine health condition",
      "properties": {
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MachineMaintenance": {
      "properties": {
        "action": {
          "description": "Machine maintenance mode action",
          "enum": [
            "cordon",
            "uncordon"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MachineMaintenanceStatus": {
      "description": "Machine maintenance status",
      "properties": {
        "action": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MachineManagementConfig": {
      "properties": {
        "osPatchConfig": {
          "$ref": "#/definitions/v1OsPatchConfig",
          "description": "OS patch config contains properties to patch node os with latest security packages. \nIf OsPatchConfig is not provided then node os will not be patched with latest security updates.\nNote: For edge based cluster (like edge-native type) the osPatchConfig is NOT applicable, the values will be ignored.\n"
        }
      },
      "type": "object"
    },
    "v1MachinePoolConfigEntity": {
      "description": "Machine pool configuration for the cluster",
      "properties": {
        "additionalLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional labels to be part of the machine pool",
          "type": "object"
        },
        "additionalTags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object"
        },
        "isControlPlane": {
          "description": "Whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "Labels for this machine pool, example: control-plane/worker, gpu, windows",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "Max size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "minSize": {
          "description": "Min size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "format": "int32",
          "type": "integer"
        },
        "size": {
          "description": "Size of the pool, number of nodes/machines",
          "format": "int32",
          "type": "integer"
        },
        "taints": {
          "description": "control plane or worker taints",
          "items": {
            "$ref": "#/definitions/v1Taint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updateStrategy": {
          "$ref": "#/definitions/v1UpdateStrategy",
          "description": "Rolling update strategy for this machine pool if not specified, will use ScaleOut"
        },
        "useControlPlaneAsWorker": {
          "description": "If IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "name",
        "size",
        "labels"
      ],
      "type": "object"
    },
    "v1MachinePoolMeta": {
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "healthy": {
          "description": "number of healthy machines",
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        },
        "infraProfileTemplate": {
          "$ref": "#/definitions/v1ClusterProfileTemplateMeta",
          "description": "InfraClusterProfile contains OS/Kernel for this NodePool"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "maintenanceMode": {
          "description": "number of machines under maintenance",
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1MachinePoolProperties": {
      "description": "Machine pool specific properties",
      "properties": {
        "archType": {
          "$ref": "#/definitions/v1ArchType",
          "description": "Architecture type of the pool. Default value is 'amd64'",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1MachinePoolRate": {
      "description": "Machine pool estimated rate information",
      "properties": {
        "name": {
          "type": "string"
        },
        "nodesCount": {
          "format": "int32",
          "type": "integer"
        },
        "rate": {
          "$ref": "#/definitions/v1CloudRate"
        }
      },
      "type": "object"
    },
    "v1MachinePoolsMachineUids": {
      "properties": {
        "machinePools": {
          "additionalProperties": {
            "$ref": "#/definitions/v1MachineUids"
          },
          "type": "object"
        }
      }
    },
    "v1MachineUids": {
      "properties": {
        "machineUids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "v1Macro": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1Macros": {
      "properties": {
        "macros": {
          "items": {
            "$ref": "#/definitions/v1Macro"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1ManagedDisk": {
      "properties": {
        "storageAccountType": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Manifest": {
      "description": "Manifest object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ManifestPublishedSpec"
        }
      }
    },
    "v1ManifestData": {
      "description": "Published manifest object",
      "properties": {
        "content": {
          "description": "Manifest content in yaml",
          "type": "string"
        },
        "digest": {
          "description": "Manifest digest",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ManifestEntities": {
      "properties": {
        "items": {
          "description": "Manifests array",
          "items": {
            "$ref": "#/definitions/v1ManifestEntity"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1ManifestEntity": {
      "description": "Manifest object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ManifestSpec"
        }
      }
    },
    "v1ManifestInputEntity": {
      "description": "Manifest request payload",
      "properties": {
        "content": {
          "description": "Manifest content",
          "type": "string"
        },
        "name": {
          "description": "Manifest name",
          "type": "string"
        }
      }
    },
    "v1ManifestPublishedSpec": {
      "description": "Manifest spec",
      "properties": {
        "published": {
          "$ref": "#/definitions/v1ManifestData"
        }
      }
    },
    "v1ManifestRefInputEntities": {
      "description": "Pack manifests input params",
      "properties": {
        "manifests": {
          "description": "Pack manifests array",
          "items": {
            "$ref": "#/definitions/v1ManifestRefInputEntity"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1ManifestRefInputEntity": {
      "description": "Manifest request payload",
      "properties": {
        "content": {
          "description": "Manifest content in yaml",
          "type": "string"
        },
        "uid": {
          "description": "Manifest uid",
          "type": "string"
        }
      }
    },
    "v1ManifestRefUpdateEntity": {
      "description": "Manifest update request payload",
      "properties": {
        "content": {
          "description": "Manifest content in yaml",
          "type": "string"
        },
        "name": {
          "description": "Manifest name",
          "type": "string"
        },
        "uid": {
          "description": "Manifest uid",
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "v1ManifestSpec": {
      "description": "Manifest spec",
      "properties": {
        "draft": {
          "$ref": "#/definitions/v1ManifestData"
        },
        "published": {
          "$ref": "#/definitions/v1ManifestData"
        }
      },
      "type": "object"
    },
    "v1ManifestSummary": {
      "description": "Manifest object",
      "properties": {
        "content": {
          "description": "Manifest content in yaml",
          "type": "string"
        },
        "name": {
          "description": "Manifest name",
          "type": "string"
        },
        "uid": {
          "description": "Manifest uid",
          "type": "string"
        }
      }
    },
    "v1Memory": {
      "properties": {
        "sizeInMB": {
          "description": "memory size in bytes",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1MetricAggregation": {
      "description": "Aggregation values",
      "properties": {
        "avg": {
          "type": "number",
          "x-omitempty": false
        },
        "count": {
          "format": "int64",
          "type": "number",
          "x-omitempty": false
        },
        "max": {
          "type": "number",
          "x-omitempty": false
        },
        "min": {
          "type": "number",
          "x-omitempty": false
        },
        "sum": {
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1MetricMetadata": {
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MetricPoint": {
      "description": "Metric Info",
      "properties": {
        "avg": {
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "max": {
          "type": "number"
        },
        "min": {
          "type": "number"
        },
        "sum": {
          "type": "number"
        },
        "timestamp": {
          "format": "int64",
          "type": "number"
        },
        "value": {
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1MetricTimeSeries": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1Metrics"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1MetricTimeSeriesList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1MetricsList"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1Metrics": {
      "properties": {
        "aggregation": {
          "$ref": "#/definitions/v1MetricAggregation"
        },
        "kind": {
          "type": "string"
        },
        "points": {
          "items": {
            "$ref": "#/definitions/v1MetricPoint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "unit": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MetricsList": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1MetricMetadata"
        },
        "metrics": {
          "items": {
            "$ref": "#/definitions/v1Metrics"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1MfaAuthenticationExtensions": {
      "additionalProperties": {
        "type": "object"
      },
      "type": "object"
    },
    "v1MfaAuthenticatorSelection": {
      "properties": {
        "authenticatorAttachment": {
          "type": "string"
        },
        "requireResidentKey": {
          "type": "boolean"
        },
        "residentKey": {
          "type": "string"
        },
        "userVerification": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MfaConveyancePreference": {
      "enum": [
        "none",
        "indirect",
        "direct",
        "enterprise"
      ],
      "type": "string"
    },
    "v1MfaCredentialCreationRequest": {
      "properties": {
        "_type": {
          "type": "string"
        },
        "authenticatorAttachment": {
          "type": "string"
        },
        "clientExtensionResults": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "deviceName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "rawId": {
          "$ref": "#/definitions/URLEncodedBase64"
        },
        "response": {
          "properties": {
            "attestationObject": {
              "$ref": "#/definitions/URLEncodedBase64"
            },
            "clientDataJSON": {
              "$ref": "#/definitions/URLEncodedBase64"
            },
            "transports": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "transports": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1MfaCredentialDescriptor": {
      "properties": {
        "attestationType": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/urlEncodedBase64"
        },
        "transports": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MfaCredentialParameter": {
      "properties": {
        "alg": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MfaDeviceMeta": {
      "properties": {
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "deviceName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MfaDeviceName": {
      "properties": {
        "deviceName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MfaDevices": {
      "items": {
        "$ref": "#/definitions/v1MfaDeviceMeta"
      },
      "type": "array"
    },
    "v1MfaLoginStart": {
      "properties": {
        "publicKey": {
          "$ref": "#/definitions/v1MfaPublicKeyCredentialRequestOptions"
        }
      },
      "type": "object"
    },
    "v1MfaPublicKeyCredentialCreationOptions": {
      "properties": {
        "attestation": {
          "$ref": "#/definitions/v1MfaConveyancePreference"
        },
        "authenticatorSelection": {
          "$ref": "#/definitions/v1MfaAuthenticatorSelection"
        },
        "challenge": {
          "$ref": "#/definitions/URLEncodedBase64"
        },
        "excludeCredentials": {
          "items": {
            "$ref": "#/definitions/v1MfaCredentialDescriptor"
          },
          "type": "array"
        },
        "extensions": {
          "$ref": "#/definitions/v1MfaAuthenticationExtensions"
        },
        "pubKeyCredParams": {
          "items": {
            "$ref": "#/definitions/v1MfaCredentialParameter"
          },
          "type": "array"
        },
        "rp": {
          "$ref": "#/definitions/v1MfaRelyingPartyEntity"
        },
        "timeout": {
          "type": "integer"
        },
        "user": {
          "$ref": "#/definitions/v1MfaUserEntity"
        }
      },
      "type": "object"
    },
    "v1MfaPublicKeyCredentialRequestOptions": {
      "properties": {
        "allowCredentials": {
          "items": {
            "$ref": "#/definitions/v1MfaCredentialDescriptor"
          },
          "type": "array"
        },
        "challenge": {
          "$ref": "#/definitions/urlEncodedBase64"
        },
        "extensions": {
          "$ref": "#/definitions/v1MfaAuthenticationExtensions"
        },
        "rpId": {
          "type": "string"
        },
        "timeout": {
          "type": "integer"
        },
        "userVerification": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MfaRegistrationStart": {
      "properties": {
        "publicKey": {
          "$ref": "#/definitions/v1MfaPublicKeyCredentialCreationOptions"
        }
      },
      "type": "object"
    },
    "v1MfaRelyingPartyEntity": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MfaUserEntity": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "object"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MgmtApp": {
      "description": "Spectro application management data",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1MgmtAppSpec"
        },
        "status": {
          "$ref": "#/definitions/v1MgmtAppStatus"
        }
      },
      "type": "object"
    },
    "v1MgmtAppContainersState": {
      "properties": {
        "running": {
          "properties": {
            "startedAt": {
              "$ref": "#/definitions/v1Time"
            }
          },
          "type": "object"
        },
        "terminated": {
          "properties": {
            "exitCode": {
              "type": "integer"
            },
            "finishedAt": {
              "$ref": "#/definitions/v1Time"
            },
            "reason": {
              "type": "string"
            },
            "signal": {
              "type": "integer"
            },
            "startedAt": {
              "$ref": "#/definitions/v1Time"
            }
          },
          "type": "object"
        },
        "waiting": {
          "properties": {
            "reason": {
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1MgmtAppContainersStatus": {
      "properties": {
        "isHealthy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "numberOfRestarts": {
          "type": "integer"
        },
        "state": {
          "$ref": "#/definitions/v1MgmtAppContainersState"
        }
      },
      "type": "object"
    },
    "v1MgmtAppCronJobStatus": {
      "properties": {
        "isHealthy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "lastScheduleTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastSuccessfulRunTime": {
          "$ref": "#/definitions/v1Time"
        },
        "messages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "pods": {
          "additionalProperties": {
            "$ref": "#/definitions/v1MgmtAppPodsStatus"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1MgmtAppEnvHealthStatus": {
      "properties": {
        "isHealthy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "messages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "namespaces": {
          "additionalProperties": {
            "$ref": "#/definitions/v1MgmtAppNameSpaceStatus"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1MgmtAppHealth": {
      "properties": {
        "isHealthy": {
          "type": "boolean"
        },
        "podHealth": {
          "items": {
            "$ref": "#/definitions/v1MgmtPodHealth"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1MgmtAppNameSpaceStatus": {
      "properties": {
        "cronJobs": {
          "additionalProperties": {
            "$ref": "#/definitions/v1MgmtAppCronJobStatus"
          },
          "type": "object"
        },
        "deployments": {
          "additionalProperties": {
            "$ref": "#/definitions/v1MgmtAppObjectStatus"
          },
          "type": "object"
        },
        "isHealthy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "messages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "statefulSets": {
          "additionalProperties": {
            "$ref": "#/definitions/v1MgmtAppObjectStatus"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1MgmtAppObjectStatus": {
      "properties": {
        "availableReplicas": {
          "type": "integer"
        },
        "creationTime": {
          "$ref": "#/definitions/v1Time"
        },
        "desiredReplicaCount": {
          "type": "integer"
        },
        "isHealthy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "messages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "pods": {
          "additionalProperties": {
            "$ref": "#/definitions/v1MgmtAppPodsStatus"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1MgmtAppPodsStatus": {
      "properties": {
        "containers": {
          "additionalProperties": {
            "$ref": "#/definitions/v1MgmtAppContainersStatus"
          },
          "type": "object"
        },
        "isHealthy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "messages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "phase": {
          "type": "string"
        },
        "pvcs": {
          "additionalProperties": {
            "$ref": "#/definitions/v1MgmtAppPvcStatus"
          },
          "type": "object"
        },
        "reason": {
          "type": "string"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "type": "object"
    },
    "v1MgmtAppPvcStatus": {
      "properties": {
        "claimName": {
          "type": "string"
        },
        "creationTime": {
          "$ref": "#/definitions/v1Time"
        },
        "isHealthy": {
          "type": "boolean",
          "x-omitempty": false
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MgmtAppSpec": {
      "description": "spectro application management specifications",
      "properties": {
        "appEnv": {
          "type": "string"
        },
        "cloudType": {
          "type": "string"
        },
        "installedVersion": {
          "type": "string"
        },
        "latestVersion": {
          "type": "string"
        },
        "spectroClusterUid": {
          "type": "string"
        }
      }
    },
    "v1MgmtAppStatus": {
      "description": "spectro application management status",
      "properties": {
        "appVersions": {
          "items": {
            "$ref": "#/definitions/v1AppVersion"
          },
          "type": "array",
          "uniqueItems": true
        },
        "isFailed": {
          "type": "boolean",
          "x-omitempty": false
        },
        "message": {
          "type": "string"
        },
        "messageLogs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "state": {
          "type": "string"
        },
        "upgradeHistory": {
          "items": {
            "$ref": "#/definitions/v1SpectroMgmtUpgrade"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1MgmtAppUpgrade": {
      "properties": {
        "spec": {
          "properties": {
            "currentVersion": {
              "type": "string",
              "x-omitempty": false
            },
            "previousVersion": {
              "type": "string",
              "x-omitempty": false
            },
            "toBeUpgradedVersion": {
              "type": "string",
              "x-omitempty": false
            }
          },
          "type": "object"
        },
        "status": {
          "properties": {
            "action": {
              "type": "string",
              "x-omitempty": false
            },
            "states": {
              "properties": {
                "imageUpdate": {
                  "$ref": "#/definitions/v1MgmtUpgradeState",
                  "x-omitempty": false,
                  "x-order": 1
                },
                "spectroClusterUpdate": {
                  "$ref": "#/definitions/v1MgmtUpgradeState",
                  "x-omitempty": false,
                  "x-order": 0
                },
                "spectroServiceResume": {
                  "$ref": "#/definitions/v1MgmtUpgradeState",
                  "x-omitempty": false,
                  "x-order": 4
                },
                "spectroVersionConfigMapUpdate": {
                  "$ref": "#/definitions/v1MgmtUpgradeState",
                  "x-omitempty": false,
                  "x-order": 3
                },
                "spectroVersionServiceSuspend": {
                  "$ref": "#/definitions/v1MgmtUpgradeState",
                  "x-omitempty": false,
                  "x-order": 2
                }
              },
              "type": "object"
            },
            "upgradeStatus": {
              "type": "string",
              "x-omitempty": false
            },
            "versionHistory": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-omitempty": false
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1MgmtAppVersion": {
      "description": "spectro application management version",
      "properties": {
        "version": {
          "properties": {
            "appEnv": {
              "type": "string"
            },
            "cloudType": {
              "type": "string"
            },
            "installedVersion": {
              "type": "string"
            },
            "latestVersion": {
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    },
    "v1MgmtBackupSpec": {
      "description": "backup spec",
      "properties": {
        "backupUid": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        },
        "modeUid": {
          "type": "string"
        },
        "proxy": {
          "description": "proxy information if applicable",
          "type": "string"
        },
        "scheduleTime": {
          "$ref": "#/definitions/v1Time"
        },
        "scheduleType": {
          "default": "Automated",
          "enum": [
            "OnDemand",
            "Automated"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MgmtDbCollectionIndexInfo": {
      "description": "Database info",
      "properties": {
        "key": {
          "additionalProperties": {
            "type": "integer"
          }
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MgmtDbCollectionInfo": {
      "description": "Database info",
      "properties": {
        "count": {
          "type": "integer"
        },
        "indexes": {
          "items": {
            "$ref": "#/definitions/v1MgmtDbCollectionIndexInfo"
          },
          "type": "array"
        },
        "isCapped": {
          "type": "boolean"
        },
        "isReadOnly": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "storageSize": {
          "type": "integer"
        },
        "totalIndexSize": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1MgmtDbHealth": {
      "properties": {
        "databases": {
          "items": {
            "$ref": "#/definitions/v1MgmtDbInfo"
          },
          "type": "array"
        },
        "totalIndexSize": {
          "type": "integer"
        },
        "totalSize": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1MgmtDbInfo": {
      "description": "Database info",
      "properties": {
        "collections": {
          "items": {
            "$ref": "#/definitions/v1MgmtDbCollectionInfo"
          },
          "type": "array"
        },
        "isEmpty": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "totalIndexSize": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1MgmtDeleteBackupFtpEntity": {
      "description": "delete backups based on retention period",
      "properties": {
        "fileTransferConfig": {
          "$ref": "#/definitions/v1MgmtFileTransferFtpEntity"
        },
        "retentionPeriod": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1MgmtDeleteBackupS3Entity": {
      "description": "delete backups based on retention period",
      "properties": {
        "fileTransferConfig": {
          "$ref": "#/definitions/v1MgmtFileTransferS3Entity"
        },
        "retentionPeriod": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1MgmtErrLog": {
      "properties": {
        "ref": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/v1MgmtErrSpec"
        }
      },
      "type": "object"
    },
    "v1MgmtErrLogs": {
      "items": {
        "$ref": "#/definitions/v1MgmtErrLog"
      },
      "type": "array",
      "uniqueItems": true
    },
    "v1MgmtErrSpec": {
      "properties": {
        "causes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "data": {
          "type": "string"
        },
        "debug": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "errCode": {
          "type": "string"
        },
        "errMsg": {
          "type": "string"
        },
        "stackTraces": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "userCtx": {
          "properties": {
            "projectUid": {
              "type": "string"
            },
            "serviceResUid": {
              "type": "string"
            },
            "tenantUid": {
              "type": "string"
            },
            "userUid": {
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1MgmtFileTransferFtpEntity": {
      "description": "file transfer details",
      "properties": {
        "backupSpec": {
          "$ref": "#/definitions/v1MgmtBackupSpec"
        },
        "ftp": {
          "$ref": "#/definitions/v1MgmtFtpConfig"
        }
      },
      "type": "object"
    },
    "v1MgmtFileTransferS3Entity": {
      "description": "file transfer details",
      "properties": {
        "backupSpec": {
          "$ref": "#/definitions/v1MgmtBackupSpec"
        },
        "s3": {
          "$ref": "#/definitions/v1MgmtS3Config"
        }
      },
      "type": "object"
    },
    "v1MgmtFtpConfig": {
      "description": "ftp config",
      "properties": {
        "directory": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "server": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MgmtHash": {
      "properties": {
        "hash": {
          "type": "string"
        }
      },
      "required": [
        "hash"
      ],
      "type": "object"
    },
    "v1MgmtListBackupFtpEntity": {
      "description": "list ftp backups",
      "properties": {
        "fileTransferConfig": {
          "$ref": "#/definitions/v1MgmtFileTransferFtpEntity"
        }
      },
      "type": "object"
    },
    "v1MgmtListBackupS3Entity": {
      "description": "list s3 backups",
      "properties": {
        "fileTransferConfig": {
          "$ref": "#/definitions/v1MgmtFileTransferS3Entity"
        }
      },
      "type": "object"
    },
    "v1MgmtMigrateEntity": {
      "description": "SystemAdmin",
      "properties": {
        "db": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "isServiceRecord": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "uri": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MgmtMigrationStatuses": {
      "description": "SystemAdmin",
      "properties": {
        "finishTime": {
          "$ref": "#/definitions/v1Time"
        },
        "folderName": {
          "type": "string"
        },
        "isCompleted": {
          "type": "boolean"
        },
        "message": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string",
          "x-omitempty": false
        },
        "status": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1MgmtMsgBrokerReinitStatus": {
      "properties": {
        "failures": {
          "items": {
            "$ref": "#/definitions/v1MgmtMsgBrokerReinitStatusEntity"
          },
          "type": "array"
        },
        "success": {
          "items": {
            "$ref": "#/definitions/v1MgmtMsgBrokerReinitStatusEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1MgmtMsgBrokerReinitStatusEntity": {
      "properties": {
        "account": {
          "type": "string"
        },
        "isSuccess": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MgmtPodHealth": {
      "description": "SystemAdmin",
      "properties": {
        "isHealthy": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MgmtS3Config": {
      "description": "s3 config",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "bucket": {
          "type": "string"
        },
        "directory": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MgmtUpgradeState": {
      "properties": {
        "description": {
          "type": "string",
          "x-omitempty": false
        },
        "details": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-omitempty": false
        },
        "endTimestamp": {
          "$ref": "#/definitions/v1Time",
          "x-omitempty": false
        },
        "isCompleted": {
          "type": "boolean",
          "x-omitempty": false
        },
        "message": {
          "type": "string",
          "x-omitempty": false
        },
        "startTimestamp": {
          "$ref": "#/definitions/v1Time",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1MonthlyUsage": {
      "description": "Monthly usage object",
      "properties": {
        "month": {
          "$ref": "#/definitions/v1Time",
          "description": "Month of usage"
        },
        "tenantUsages": {
          "description": "List of tenants usage",
          "items": {
            "$ref": "#/definitions/v1TenantUsage"
          },
          "type": "array",
          "uniqueItems": true
        },
        "usedAlloyCredits": {
          "description": "Credits used by imported clusters",
          "format": "float64",
          "type": "number"
        },
        "usedPureCredits": {
          "description": "Credits used by managed clusters",
          "format": "float64",
          "type": "number"
        }
      }
    },
    "v1MsgBrokerConnection": {
      "properties": {
        "account": {
          "type": "string"
        },
        "accountUid": {
          "type": "string"
        },
        "cid": {
          "type": "integer"
        },
        "cluster": {
          "properties": {
            "addr": {
              "type": "string"
            },
            "authTimeout": {
              "type": "integer"
            },
            "clusterPort": {
              "type": "integer"
            },
            "urls": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "cpu": {
          "type": "number"
        },
        "duplicationCount": {
          "type": "integer"
        },
        "iP": {
          "type": "string"
        },
        "idle": {
          "type": "string"
        },
        "inBytes": {
          "type": "integer"
        },
        "inMsgs": {
          "type": "integer"
        },
        "lang": {
          "type": "string"
        },
        "lastActivity": {
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "type": "string"
        },
        "outBytes": {
          "type": "integer"
        },
        "outMsgs": {
          "type": "integer"
        },
        "pendingBytes": {
          "type": "integer"
        },
        "port": {
          "type": "integer"
        },
        "rtt": {
          "type": "string"
        },
        "start": {
          "$ref": "#/definitions/v1Time"
        },
        "subscriptionList": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "subscriptions": {
          "type": "integer"
        },
        "tLSCipherSuite": {
          "type": "string"
        },
        "tLSVersion": {
          "type": "string"
        },
        "uptime": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MsgBrokerConnectionList": {
      "items": {
        "$ref": "#/definitions/v1MsgBrokerConnection"
      },
      "type": "array"
    },
    "v1MsgBrokerConnections": {
      "properties": {
        "connections": {
          "items": {
            "$ref": "#/definitions/v1MsgBrokerConnection"
          },
          "type": "array",
          "uniqueItems": true
        },
        "limit": {
          "type": "integer"
        },
        "now": {
          "$ref": "#/definitions/v1Time"
        },
        "numOfConnections": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "serverId": {
          "type": "string"
        },
        "totalConnections": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1MsgBrokerHealth": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta",
          "type": "object"
        },
        "spec": {
          "$ref": "#/definitions/v1MsgBrokerNodesHealthSpec",
          "type": "object"
        },
        "status": {
          "$ref": "#/definitions/v1MsgBrokerNodesHealthStatus",
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1MsgBrokerNodeHealth": {
      "properties": {
        "allyPublishersByTenant": {
          "additionalProperties": {
            "$ref": "#/definitions/v1MsgBrokerConnectionList"
          },
          "type": "object"
        },
        "duplicateSubscribersCount": {
          "additionalProperties": {
            "type": "integer"
          },
          "type": "object"
        },
        "hubbleSubscribersByService": {
          "additionalProperties": {
            "$ref": "#/definitions/v1MsgBrokerConnectionList"
          },
          "type": "object"
        },
        "hubbleSubscribersByTenant": {
          "additionalProperties": {
            "$ref": "#/definitions/v1MsgBrokerConnectionList"
          },
          "type": "object"
        },
        "hubbleSubscribersByType": {
          "additionalProperties": {
            "$ref": "#/definitions/v1MsgBrokerConnectionList"
          },
          "type": "object"
        },
        "nodeId": {
          "type": "string"
        },
        "subscriberWithAbnormalRTT": {
          "$ref": "#/definitions/v1MsgBrokerConnectionList"
        },
        "subscribersWithAbnormalSubscriptions": {
          "$ref": "#/definitions/v1MsgBrokerConnectionList"
        },
        "uniqueSubscribers": {
          "type": "integer"
        },
        "unrecognizedClients": {
          "$ref": "#/definitions/v1MsgBrokerConnectionList"
        }
      },
      "type": "object"
    },
    "v1MsgBrokerNodeHealthSpec": {
      "properties": {
        "connections": {
          "$ref": "#/definitions/v1MsgBrokerConnections",
          "type": "object"
        },
        "nodeId": {
          "type": "string"
        },
        "routes": {
          "$ref": "#/definitions/v1MsgBrokerRoutes",
          "type": "object"
        },
        "variables": {
          "$ref": "#/definitions/v1MsgBrokerVariables",
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1MsgBrokerNodesHealthSpec": {
      "properties": {
        "nodes": {
          "items": {
            "$ref": "#/definitions/v1MsgBrokerNodeHealthSpec"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1MsgBrokerNodesHealthStatus": {
      "properties": {
        "nodes": {
          "items": {
            "$ref": "#/definitions/v1MsgBrokerNodeHealth"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1MsgBrokerRoutes": {
      "properties": {
        "numRoutes": {
          "type": "integer"
        },
        "routes": {
          "items": {
            "$ref": "#/definitions/v1NatsRoute"
          },
          "type": "array"
        },
        "serverId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MsgBrokerVariables": {
      "properties": {
        "authRequired": {
          "type": "boolean"
        },
        "authTimeout": {
          "type": "integer"
        },
        "cluster": {
          "properties": {
            "addr": {
              "type": "string"
            },
            "authTimeout": {
              "type": "integer"
            },
            "clusterPort": {
              "type": "integer"
            },
            "urls": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "configLoadTime": {
          "$ref": "#/definitions/v1Time"
        },
        "connectUrls": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "connections": {
          "type": "integer"
        },
        "cores": {
          "type": "integer"
        },
        "cpu": {
          "type": "number"
        },
        "gitCommit": {
          "type": "string"
        },
        "go": {
          "type": "string"
        },
        "gomaxprocs": {
          "type": "integer"
        },
        "host": {
          "type": "string"
        },
        "httpHost": {
          "type": "string"
        },
        "httpPort": {
          "type": "integer"
        },
        "inBytes": {
          "type": "integer"
        },
        "inMsgs": {
          "type": "integer"
        },
        "leafNodes": {
          "type": "integer"
        },
        "maxConnections": {
          "type": "integer"
        },
        "maxControlLine": {
          "type": "integer"
        },
        "maxPayload": {
          "type": "integer"
        },
        "maxPending": {
          "type": "integer"
        },
        "mem": {
          "type": "integer"
        },
        "now": {
          "$ref": "#/definitions/v1Time"
        },
        "outBytes": {
          "type": "integer"
        },
        "outMsgs": {
          "type": "integer"
        },
        "pingInterval": {
          "type": "integer"
        },
        "pingMax": {
          "type": "integer"
        },
        "port": {
          "type": "integer"
        },
        "proto": {
          "type": "integer"
        },
        "remotes": {
          "type": "integer"
        },
        "routes": {
          "type": "integer"
        },
        "serverId": {
          "type": "string"
        },
        "serverName": {
          "type": "string"
        },
        "slowConsumers": {
          "type": "integer"
        },
        "start": {
          "$ref": "#/definitions/v1Time"
        },
        "subscriptions": {
          "type": "integer"
        },
        "tlsRequired": {
          "type": "boolean"
        },
        "tlsTimeout": {
          "type": "integer"
        },
        "totalConnections": {
          "type": "integer"
        },
        "uptime": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "writeDeadline": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1MsgSubscriber": {
      "description": "Message subscriber request",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Nameserver": {
      "description": "Nameserver define search domains and nameserver addresses",
      "properties": {
        "addresses": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "search": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1NatsConfiguration": {
      "description": "Describes the response that contains the nats configuration to establish credentials",
      "properties": {
        "connectionString": {
          "description": "Describes the preCalculated connection string, can be used directly to make connection",
          "type": "string"
        },
        "enableTls": {
          "description": "Describes the NATs application option to use a TLS based custom dialer. Its enabled when external Certificate is used over the existing one.",
          "type": "boolean"
        },
        "insecureTls": {
          "description": "Describes the NATs tls option to skip verifying the client certificate",
          "type": "boolean"
        },
        "password": {
          "description": "Describes the NATs user's password",
          "type": "string"
        },
        "scheme": {
          "description": "Describes the NATs protocol for the connection. Eg- 'tls', 'nats'",
          "type": "string"
        },
        "tlsCertificate": {
          "description": "Describes the NATs tls certificate used for making a secure connection",
          "type": "string"
        },
        "tlsKey": {
          "description": "Describes the NATs tls certificate key used for making a secure connection",
          "type": "string"
        },
        "urls": {
          "description": "Describes the URLs of the nats nodes used in nats HA setup where the client will connect",
          "type": "string"
        },
        "userName": {
          "description": "Describes the NATs user name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1NatsCredentialRequest": {
      "description": "Describes the request for resource's nats credential",
      "properties": {
        "clusterUid": {
          "description": "Deprecated. please use resourceUid",
          "type": "string"
        },
        "isSystem": {
          "description": "Describes if its a system request",
          "type": "boolean"
        },
        "resourceUid": {
          "description": "Describes the resource for which credentials has to be fetched",
          "type": "string"
        },
        "serviceName": {
          "description": "Describes the service for which credentials has to be fetched. Possible values [ally, jet]",
          "enum": [
            "ally",
            "jet"
          ],
          "type": "string"
        },
        "tenantUid": {
          "description": "Describes the tenant of the resource",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1NatsCredentials": {
      "description": "Describes the response that contains the nats credentials",
      "properties": {
        "allowedPublisher": {
          "description": "Describes the subject on which client is allowed to publish",
          "type": "string"
        },
        "allowedSubcriber": {
          "description": "Describes the subject on which client is allowed to subscribe",
          "type": "string"
        },
        "jwt": {
          "description": "Describes the jwt token which will be used as an credential for the nats",
          "type": "string"
        },
        "seed": {
          "description": "Describes the seed for the jwt",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1NatsRoute": {
      "properties": {
        "didSolicit": {
          "type": "boolean"
        },
        "inBytes": {
          "type": "integer"
        },
        "inMsgs": {
          "type": "integer"
        },
        "isConfigured": {
          "type": "boolean"
        },
        "outBytes": {
          "type": "integer"
        },
        "outMsgs": {
          "type": "integer"
        },
        "pendingSize": {
          "type": "integer"
        },
        "port": {
          "type": "integer"
        },
        "remoteId": {
          "type": "string"
        },
        "rid": {
          "type": "integer"
        },
        "rtt": {
          "type": "string"
        },
        "subscriptions": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1NestedCloudConfigStatus": {
      "description": "Defines the status of virtual cloud config",
      "properties": {
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "isAddonLayer": {
          "description": "addon layers present in spc",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1Nic": {
      "properties": {
        "dns": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "gateway": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        },
        "macAddr": {
          "type": "string"
        },
        "nicName": {
          "type": "string"
        },
        "subnet": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1NodesAutoRemediationSettings": {
      "properties": {
        "disableNodesAutoRemediation": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isEnabled": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1NonFipsConfig": {
      "description": "Non-FIPS configuration",
      "properties": {
        "mode": {
          "default": "nonFipsDisabled",
          "description": "enable or disable the non FIPS complaint",
          "enum": [
            "nonFipsEnabled",
            "nonFipsDisabled"
          ],
          "type": "string"
        }
      }
    },
    "v1Notification": {
      "description": "Describes event notification and action definition",
      "properties": {
        "action": {
          "$ref": "#/definitions/v1NotificationAction",
          "description": "Describes actions for the notification",
          "type": "object"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta",
          "type": "object"
        },
        "relatedObject": {
          "$ref": "#/definitions/v1RelatedObject",
          "type": "object"
        },
        "source": {
          "$ref": "#/definitions/v1NotificationSource",
          "description": "Describes origin info for the notification",
          "type": "object"
        },
        "type": {
          "description": "Describes type of notification. Possible values [NotificationPackUpdate, NotificationPackRegistryUpdate, NotificationNone]",
          "enum": [
            "NotificationPackUpdate",
            "NotificationPackRegistryUpdate",
            "NotificationNone"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1NotificationAction": {
      "description": "Describes actions for the notification",
      "properties": {
        "ack": {
          "description": "Describes the acknowledgement status for the notification",
          "type": "boolean",
          "x-omitempty": false
        },
        "actionMessage": {
          "description": "Describes information related to notification action",
          "type": "string"
        },
        "actionType": {
          "description": "Describes action type for the notification. Possible Values [NotifyActionPacksUpdate, NotifyActionClusterProfileUpdate, NotifyActionPackRegistryUpdate, NotifyActionClusterUpdate, NotifyActionNone]",
          "enum": [
            "NotifyActionPacksUpdate",
            "NotifyActionClusterProfileUpdate",
            "NotifyActionPackRegistryUpdate",
            "NotifyActionClusterUpdate",
            "NotifyActionNone"
          ],
          "type": "string"
        },
        "events": {
          "additionalProperties": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "description": "Describes the events happened for the notifications",
          "type": "object"
        },
        "isDone": {
          "description": "Describes the \"Done\" status for the notification",
          "type": "boolean",
          "x-omitempty": false
        },
        "isInfo": {
          "description": "Describes the notification as a information",
          "type": "boolean",
          "x-omitempty": false
        },
        "link": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1NotificationEvent": {
      "description": "Describes notification event details",
      "properties": {
        "component": {
          "description": "Describes component of notification event",
          "type": "string"
        },
        "digest": {
          "description": "Describes notification event digest",
          "type": "string"
        },
        "message": {
          "description": "Describes a information for the notification event",
          "type": "string"
        },
        "meta": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Describes a event messages with meta digest as the key",
          "type": "object"
        },
        "type": {
          "description": "Describes notification event type",
          "enum": [
            "NotificationPackSync",
            "NotificationClusterProfileSync"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1NotificationSource": {
      "description": "Describes origin info for the notification",
      "properties": {
        "component": {
          "description": "Describes component where notification originated",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Notifications": {
      "description": "Describe a list of generated notifications",
      "properties": {
        "items": {
          "description": "Describe a list of generated notifications",
          "items": {
            "$ref": "#/definitions/v1Notification"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData",
          "description": "Describes the meta information about the notification lists"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1OS": {
      "properties": {
        "family": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ObjectEntity": {
      "description": "Object identity meta",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object"
        },
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time",
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/v1Time",
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object"
        },
        "lastModifiedTimestamp": {
          "$ref": "#/definitions/v1Time",
          "description": "LastModifiedTimestamp is a timestamp representing the server time when this object was last modified. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ObjectMetaInputEntity": {
      "description": "ObjectMeta input entity for object creation",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ObjectMetaInputEntitySchema": {
      "description": "Resource metadata",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      },
      "required": [
        "metadata"
      ],
      "type": "object"
    },
    "v1ObjectMetaUpdateEntity": {
      "description": "ObjectMeta update entity with uid as input",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "properties": {
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ObjectResReference": {
      "description": "Object resource reference",
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "projectUid": {
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ObjectScopeEntity": {
      "description": "Object scope identity meta",
      "properties": {
        "name": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ObjectTagsEntity": {
      "description": "Object identity meta with tags",
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OciImageRegistry": {
      "description": "Oci Image Registry",
      "properties": {
        "baseContentPath": {
          "description": "baseContentPath is the root path for the registry content",
          "type": "string"
        },
        "caCert": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "insecureSkipVerify": {
          "type": "boolean"
        },
        "mirrorRegistries": {
          "description": "mirrorRegistries contains the array of image sources like gcr.io, ghcr.io, docker.io",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OciRegistries": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1OciRegistry"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1OciRegistry": {
      "description": "Oci registry information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1OciRegistrySpec"
        },
        "status": {
          "$ref": "#/definitions/v1OciRegistryStatusSummary"
        }
      },
      "type": "object"
    },
    "v1OciRegistryAuth": {
      "description": "Auth credentials of the oci registry",
      "properties": {
        "password": {
          "description": "Password in the credentials",
          "format": "password",
          "type": "string"
        },
        "username": {
          "description": "Username in the credentials",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OciRegistryEntity": {
      "description": "Oci registry credentials",
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "defaultRegion": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "providerType": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OciRegistrySpec": {
      "description": "Image registry spec",
      "properties": {
        "defaultRegion": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "providerType": {
          "type": "string"
        },
        "registryType": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OciRegistryStatusSummary": {
      "description": "OCI registry status summary",
      "properties": {
        "sync": {
          "$ref": "#/definitions/v1RegistrySyncStatus"
        }
      }
    },
    "v1OidcAuth": {
      "properties": {
        "oidcToken": {
          "type": "string"
        },
        "org": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OidcAuthLogin": {
      "properties": {
        "emailId": {
          "type": "string"
        },
        "password": {
          "format": "password",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OidcAuthorizationTokenResponse": {
      "properties": {
        "access_token": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "error_description": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer"
        },
        "id_token": {
          "type": "string"
        },
        "raw": {
          "type": "object"
        },
        "refresh_token": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OidcIssuerTls": {
      "properties": {
        "caCertificateBase64": {
          "type": "string",
          "x-omitempty": false
        },
        "insecureSkipVerify": {
          "default": false,
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1OidcLogins": {
      "description": "loginsDetails",
      "properties": {
        "systemLogins": {
          "items": {
            "$ref": "#/definitions/v1SsoLogin"
          },
          "type": "array",
          "uniqueItems": true
        },
        "tenantLogin": {
          "properties": {
            "authType": {
              "type": "string"
            },
            "redirectUrl": {
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1OidcRefreshToken": {
      "description": "oidc request with token",
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OpenIDProviderMetadataResponse": {
      "properties": {
        "authorization_endpoint": {
          "description": "REQUIRED. URL of the OP's OAuth 2.0 Authorization Endpoint",
          "type": "string"
        },
        "claims_supported": {
          "description": "RECOMMENDED. JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for",
          "type": "string"
        },
        "id_token_signing_alg_values_supported": {
          "description": "REQUIRED. JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT",
          "type": "object"
        },
        "issuer": {
          "description": "REQUIRED. URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier",
          "type": "string"
        },
        "jwks_uri": {
          "description": "REQUIRED. URL of the OP's JSON Web Key Set [JWK] document.",
          "type": "string"
        },
        "registration_endpoint": {
          "description": "RECOMMENDED. URL of the OP's Dynamic Client Registration Endpoint",
          "type": "string"
        },
        "response_types_supported": {
          "description": "REQUIRED. JSON array containing a list of the OAuth 2.0 response_type values that this OP supports",
          "type": "string"
        },
        "scopes_supported": {
          "description": "RECOMMENDED. JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports",
          "type": "string"
        },
        "subject_types_supported": {
          "description": "REQUIRED. JSON array containing a list of the Subject Identifier types that this OP supports",
          "type": "string"
        },
        "token_endpoint": {
          "description": "URL of the OP's OAuth 2.0 Token Endpoint",
          "type": "string"
        },
        "userinfo_endpoint": {
          "description": "RECOMMENDED. URL of the OP's UserInfo Endpoint",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OpenStackAccount": {
      "description": "OpenStack account information",
      "properties": {
        "apiVersion": {
          "description": "Cloud account api version",
          "type": "string"
        },
        "kind": {
          "description": "Cloud account kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1OpenStackCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      },
      "type": "object"
    },
    "v1OpenStackAccounts": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1OpenStackAccount"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1OpenStackAz": {
      "description": "OpenStack az entity",
      "properties": {
        "name": {
          "description": "Name of OpenStack az",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OpenStackAzs": {
      "description": "List of OpenStack azs",
      "properties": {
        "azs": {
          "items": {
            "$ref": "#/definitions/v1OpenStackAz"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "azs"
      ],
      "type": "object"
    },
    "v1OpenStackCloudAccount": {
      "description": "auth-url,project,username,password,domain,cacert etc",
      "properties": {
        "caCert": {
          "description": "Ca cert for OpenStack",
          "type": "string"
        },
        "defaultDomain": {
          "description": "Default Domain name",
          "type": "string"
        },
        "defaultProject": {
          "description": "Default Project name",
          "type": "string"
        },
        "identityEndpoint": {
          "description": "Identity endpoint for OpenStack",
          "type": "string"
        },
        "insecure": {
          "description": "For self signed certs in IdentityEndpoint",
          "type": "boolean"
        },
        "parentRegion": {
          "description": "Parent region of OpenStack",
          "type": "string"
        },
        "password": {
          "description": "Password of OpenStack account",
          "type": "string"
        },
        "username": {
          "description": "Username of OpenStack account",
          "type": "string"
        }
      },
      "required": [
        "identityEndpoint",
        "username",
        "password"
      ],
      "type": "object"
    },
    "v1OpenStackCloudClusterConfigEntity": {
      "description": "Openstack cloud cluster config entity",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1OpenStackClusterConfig"
        }
      },
      "type": "object"
    },
    "v1OpenStackCloudConfig": {
      "description": "OpenStackCloudConfig is the Schema for the OpenStackcloudconfigs API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1OpenStackCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1OpenStackCloudConfigStatus"
        }
      },
      "type": "object"
    },
    "v1OpenStackCloudConfigSpec": {
      "description": "OpenStackCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "properties": {
        "cloudAccountRef": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "cloudAccountRef should point to the secret which contains OpenStackCloudAccount"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1OpenStackClusterConfig"
        },
        "machinePoolConfig": {
          "items": {
            "$ref": "#/definitions/v1OpenStackMachinePoolConfig"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1OpenStackCloudConfigStatus": {
      "description": "OpenStackCloudConfigStatus defines the observed state of OpenStackCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "properties": {
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "type": "array"
        },
        "nodeImage": {
          "type": "string"
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1OpenStackClusterConfig": {
      "description": "Cluster level configuration for OpenStack cloud and applicable for all the machine pools",
      "properties": {
        "bastionDisabled": {
          "description": "Create bastion node option we have earlier supported creation of bastion by default",
          "type": "boolean"
        },
        "dnsNameservers": {
          "description": "DNSNameservers is the list of nameservers for OpenStack Subnet being created. Set this value when you need create a new network/subnet while the access through DNS is required.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "domain": {
          "$ref": "#/definitions/v1OpenStackResource"
        },
        "network": {
          "$ref": "#/definitions/v1OpenStackResource",
          "description": "For static placement"
        },
        "nodeCidr": {
          "description": "For dynamic provision NodeCIDR is the OpenStack Subnet to be created. Cluster actuator will create a network, a subnet with NodeCIDR, and a router connected to this subnet. If you leave this empty, no network will be created.",
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/v1OpenStackResource"
        },
        "region": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "subnet": {
          "$ref": "#/definitions/v1OpenStackResource"
        }
      },
      "type": "object"
    },
    "v1OpenStackDomain": {
      "description": "OpenStack domain. A Domain is a collection of projects, users, and roles",
      "properties": {
        "description": {
          "description": "Description is the description of the Domain",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique ID of the domain",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the domain",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OpenStackFlavor": {
      "description": "OpenStack flavor entity. Flavor represent (virtual) hardware configurations for server resources",
      "properties": {
        "disk": {
          "description": "Disk is the amount of root disk, measured in GB",
          "type": "integer"
        },
        "ephemeral": {
          "description": "Ephemeral is the amount of ephemeral disk space, measured in GB",
          "type": "integer"
        },
        "id": {
          "description": "ID is the flavor's unique ID",
          "type": "string"
        },
        "memory": {
          "description": "Amount of memory, measured in MB",
          "type": "integer"
        },
        "name": {
          "description": "Name is the name of the flavor",
          "type": "string"
        },
        "vcpus": {
          "description": "VCPUs indicates how many (virtual) CPUs are available for this flavor",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1OpenStackFlavors": {
      "description": "List of OpenStack flavours",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1OpenStackFlavor"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1OpenStackKeypair": {
      "description": "OpenStack keypair. KeyPair is an SSH key known to the OpenStack Cloud that is available to be injected into servers",
      "properties": {
        "name": {
          "description": "Name is used to refer to this keypair from other services within this region",
          "type": "string"
        },
        "publicKey": {
          "description": "PublicKey is the public key from this pair, in OpenSSH format",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OpenStackKeypairs": {
      "description": "List of OpenStack keypairs",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1OpenStackKeypair"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1OpenStackMachine": {
      "description": "OpenStack cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1OpenStackMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      },
      "type": "object"
    },
    "v1OpenStackMachineConfigEntity": {
      "properties": {
        "azs": {
          "description": "for control plane pool, this will be the failure domains for kcp",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "flavorConfig": {
          "$ref": "#/definitions/v1OpenstackFlavorConfig"
        }
      },
      "required": [
        "flavorConfig"
      ],
      "type": "object"
    },
    "v1OpenStackMachinePoolCloudConfigEntity": {
      "properties": {
        "azs": {
          "description": "for control plane pool, this will be the failure domains for kcp",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "diskGiB": {
          "description": "Root disk size",
          "format": "int32",
          "type": "integer"
        },
        "flavorConfig": {
          "$ref": "#/definitions/v1OpenstackFlavorConfig"
        },
        "subnet": {
          "$ref": "#/definitions/v1OpenStackResource"
        }
      },
      "required": [
        "flavorConfig"
      ],
      "type": "object"
    },
    "v1OpenStackMachinePoolConfig": {
      "properties": {
        "additionalLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "additionalLabels",
          "type": "object"
        },
        "additionalTags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object"
        },
        "azs": {
          "description": "for control plane pool, this will be the failure domains for kcp",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "diskGiB": {
          "description": "DiskGiB is used to configure rootVolume, the volume metadata to boot from",
          "format": "int32",
          "type": "integer"
        },
        "flavor": {
          "description": "Openstack flavor name, only return argument",
          "type": "string"
        },
        "flavorConfig": {
          "$ref": "#/definitions/v1OpenstackFlavorConfig",
          "description": "Openstack flavor configuration, input argument"
        },
        "image": {
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "format": "int32",
          "type": "integer"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer"
        },
        "subnet": {
          "$ref": "#/definitions/v1OpenStackResource"
        },
        "taints": {
          "description": "control plane or worker taints",
          "items": {
            "$ref": "#/definitions/v1Taint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updateStrategy": {
          "$ref": "#/definitions/v1UpdateStrategy",
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean"
        }
      },
      "required": [
        "flavorConfig"
      ],
      "type": "object"
    },
    "v1OpenStackMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1OpenStackMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      },
      "required": [
        "cloudConfig"
      ],
      "type": "object"
    },
    "v1OpenStackMachineSpec": {
      "description": "OpenStack cloud VM definition spec",
      "properties": {
        "az": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "instanceType": {
          "$ref": "#/definitions/v1GenericInstanceType",
          "description": "Instance flavor of the machine with cpu and memory info"
        },
        "nics": {
          "items": {
            "$ref": "#/definitions/v1OpenStackNic"
          },
          "type": "array"
        },
        "projectId": {
          "type": "string"
        },
        "securityGroups": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sshKeyName": {
          "type": "string"
        }
      },
      "required": [
        "instanceType",
        "nics"
      ],
      "type": "object"
    },
    "v1OpenStackMachines": {
      "description": "OpenStack machine list",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1OpenStackMachine"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1OpenStackNetwork": {
      "description": "OpenStack network",
      "properties": {
        "description": {
          "description": "Description of OpenStack network",
          "type": "string"
        },
        "id": {
          "description": "Id of OpenStack network",
          "type": "string"
        },
        "name": {
          "description": "Name of OpenStack network",
          "type": "string"
        },
        "subnets": {
          "description": "Subnets associated with OpenStack network",
          "items": {
            "$ref": "#/definitions/v1OpenStackSubnet"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1OpenStackNetworks": {
      "description": "List of OpenStack networks",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1OpenStackNetwork"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1OpenStackNic": {
      "description": "OpenStack network interface",
      "properties": {
        "index": {
          "format": "int8",
          "type": "integer"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "networkName"
      ],
      "type": "object"
    },
    "v1OpenStackProject": {
      "description": "Project represents an OpenStack Identity Project",
      "properties": {
        "description": {
          "description": "Description is the description of the project",
          "type": "string"
        },
        "domainId": {
          "description": "DomainID is the domain ID the project belongs to",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique ID of the project",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the project",
          "type": "string"
        },
        "parentProjectId": {
          "description": "ParentID is the parent_id of the project",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OpenStackProjects": {
      "description": "Array of OpenStack projects",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1OpenStackProject"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1OpenStackRegion": {
      "description": "OpenStack region entity",
      "properties": {
        "description": {
          "description": "Description of OpenStack region",
          "type": "string"
        },
        "id": {
          "description": "Id of OpenStack region",
          "type": "string"
        },
        "parentRegionId": {
          "description": "Parent region id of OpenStack region",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OpenStackRegions": {
      "description": "List of OpenStack regions and domains",
      "properties": {
        "domains": {
          "description": "List of OpenStack domains",
          "items": {
            "$ref": "#/definitions/v1OpenStackDomain"
          },
          "type": "array",
          "uniqueItems": true
        },
        "regions": {
          "description": "List of OpenStack regions",
          "items": {
            "$ref": "#/definitions/v1OpenStackRegion"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "regions",
        "domains"
      ],
      "type": "object"
    },
    "v1OpenStackResource": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OpenStackSubnet": {
      "description": "OpenStack subnet entity",
      "properties": {
        "description": {
          "description": "Description for the network",
          "type": "string"
        },
        "id": {
          "description": "UUID for the network",
          "type": "string"
        },
        "name": {
          "description": "Human-readable name for the network. Might not be unique",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OpenstackFlavorConfig": {
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a virtual machine's disk, in GiB.",
          "format": "int32",
          "type": "integer"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB.",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "Openstack flavor name",
          "type": "string"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of virtual processors in a virtual machine.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ]
    },
    "v1OrgState": {
      "description": "Org state",
      "properties": {
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Organization": {
      "description": "Describes user's organization details",
      "properties": {
        "authType": {
          "description": "Describes user's enabled authorization mode",
          "type": "string"
        },
        "name": {
          "description": "Describes user's organization name",
          "type": "string"
        },
        "redirectUrl": {
          "description": "Describes user's organization authentication url",
          "type": "string"
        },
        "ssoLogins": {
          "$ref": "#/definitions/v1SsoLogins",
          "description": "Describes a list of allowed social logins for the organization"
        }
      },
      "type": "object"
    },
    "v1Organizations": {
      "description": "Returns a list of user's organizations details and login methods",
      "properties": {
        "organizations": {
          "description": "Describes a list of user's organization",
          "items": {
            "$ref": "#/definitions/v1Organization"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1OsPatchConfig": {
      "properties": {
        "onDemandPatchAfter": {
          "$ref": "#/definitions/v1Time",
          "description": "OnDemandPatchAfter is the desired time for one time on-demand patch"
        },
        "patchOnBoot": {
          "description": "PatchOnBoot indicates need to do patch when node first boot up, only once",
          "type": "boolean",
          "x-omitempty": false
        },
        "rebootIfRequired": {
          "description": "Reboot once the OS patch is applied",
          "type": "boolean",
          "x-omitempty": false
        },
        "schedule": {
          "description": "The schedule at which security patches will be applied to OS. Schedule should be in Cron format, see https://en.wikipedia.org/wiki/Cron for more help.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OsPatchEntity": {
      "properties": {
        "osPatchConfig": {
          "$ref": "#/definitions/v1OsPatchConfig"
        }
      },
      "type": "object"
    },
    "v1OsType": {
      "default": "Linux",
      "enum": [
        "Linux",
        "Windows"
      ],
      "type": "string"
    },
    "v1OverloadSpec": {
      "description": "Overload spec",
      "properties": {
        "cloudAccountUid": {
          "type": "string",
          "x-omitempty": false
        },
        "ipAddress": {
          "type": "string"
        },
        "ipPools": {
          "items": {
            "$ref": "#/definitions/v1IpPoolEntity"
          },
          "type": "array"
        },
        "isSelfHosted": {
          "type": "boolean"
        },
        "isSystem": {
          "type": "boolean"
        },
        "spectroClusterUid": {
          "type": "string",
          "x-omitempty": false
        },
        "tenantUid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OverloadStatus": {
      "description": "Overload status",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1SpectroClusterHealthStatus"
        },
        "isActive": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isReady": {
          "type": "boolean",
          "x-omitempty": false
        },
        "kubectlCommands": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "notifications": {
          "$ref": "#/definitions/v1ClusterNotificationStatus"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OverloadVsphereOva": {
      "description": "Overload ova details",
      "properties": {
        "location": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1Overlord": {
      "description": "Overlord defintiion",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1OverloadSpec"
        },
        "status": {
          "$ref": "#/definitions/v1OverloadStatus"
        }
      },
      "type": "object"
    },
    "v1OverlordMaasAccountCreate": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1MaasCloudAccount"
        },
        "name": {
          "description": "Name for the private gateway \u0026 cloud account",
          "type": "string"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordMaasAccountEntity": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1MaasCloudAccount"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordMaasCloudConfig": {
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1MaasClusterConfig"
        },
        "clusterProfiles": {
          "description": "Cluster profiles pack configuration for private gateway cluster",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileEntity"
          },
          "type": "array"
        },
        "clusterSettings": {
          "$ref": "#/definitions/v1ClusterConfigEntity",
          "description": "clusterSettings is the generic configuration related to a cluster like OS patch, Rbac, Namespace allocation"
        },
        "machineConfig": {
          "$ref": "#/definitions/v1MaasMachineConfigEntity"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1OverlordManifest": {
      "description": "overlord manifest",
      "properties": {
        "manifest": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1OverlordMigrateEntity": {
      "properties": {
        "sourceUid": {
          "type": "string"
        },
        "targetUid": {
          "type": "string"
        }
      }
    },
    "v1OverlordOpenStackAccountCreate": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1OpenStackCloudAccount"
        },
        "name": {
          "description": "Name for the private gateway \u0026 cloud account",
          "type": "string"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordOpenStackAccountEntity": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1OpenStackCloudAccount"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordOpenStackCloudConfig": {
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1OpenStackClusterConfig"
        },
        "clusterProfiles": {
          "description": "Cluster profiles pack configuration for private gateway cluster",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileEntity"
          },
          "type": "array"
        },
        "clusterSettings": {
          "$ref": "#/definitions/v1ClusterConfigEntity",
          "description": "clusterSettings is the generic configuration related to a cluster like OS patch, Rbac, Namespace allocation"
        },
        "machineConfig": {
          "$ref": "#/definitions/v1OpenStackMachineConfigEntity"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1OverlordVsphereAccountCreate": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1VsphereCloudAccount"
        },
        "name": {
          "description": "Name for the private gateway \u0026 cloud account",
          "type": "string"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordVsphereAccountEntity": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1VsphereCloudAccount"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1OverlordVsphereCloudConfig": {
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1VsphereOverlordClusterConfigEntity"
        },
        "clusterProfiles": {
          "description": "Cluster profiles pack configuration for private gateway cluster",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileEntity"
          },
          "type": "array"
        },
        "clusterSettings": {
          "$ref": "#/definitions/v1ClusterConfigEntity",
          "description": "clusterSettings is the generic configuration related to a cluster like OS patch, Rbac, Namespace allocation"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1Overlords": {
      "description": "Array of Overlords",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1Overlord"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1PackConfig": {
      "description": "Pack configuration",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1PackConfigSpec"
        }
      },
      "type": "object"
    },
    "v1PackConfigSpec": {
      "properties": {
        "associatedObject": {
          "type": "string"
        },
        "isValuesOverridden": {
          "type": "boolean",
          "x-omitempty": false
        },
        "manifests": {
          "items": {
            "$ref": "#/definitions/v1PackManifestRef"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "packUid": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "values": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1PackDependency": {
      "description": "Pack template dependency",
      "properties": {
        "layer": {
          "description": "Pack template dependency pack layer",
          "type": "string"
        },
        "name": {
          "description": "Pack template dependency pack name",
          "type": "string"
        },
        "readOnly": {
          "description": "If true then dependency pack values can't be overridden",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1PackDependencyMeta": {
      "description": "Pack dependency metadata",
      "properties": {
        "displayName": {
          "description": "Pack display name",
          "type": "string"
        },
        "logoUrl": {
          "description": "Pack logo url",
          "type": "string"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "registryUid": {
          "description": "Pack registry uid",
          "type": "string"
        },
        "uid": {
          "description": "Pack uid",
          "type": "string"
        },
        "version": {
          "description": "Pack version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1PackEntity": {
      "description": "Pack object",
      "properties": {
        "layer": {
          "description": "Pack layer",
          "type": "string"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "tag": {
          "description": "Pack tag",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "uid": {
          "description": "Pack uid",
          "type": "string"
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        }
      },
      "required": [
        "uid",
        "name"
      ],
      "type": "object"
    },
    "v1PackFilterSpec": {
      "description": "Packs filter spec",
      "properties": {
        "addOnSubType": {
          "description": "Pack add-on sub type such as monitoring, db etc",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "addOnType": {
          "description": "Pack add-on type such as logging, monitoring, security etc",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "displayName": {
          "$ref": "#/definitions/v1FilterString"
        },
        "environment": {
          "description": "Pack supported cloud types",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "isFips": {
          "description": "isFips compliant",
          "type": "boolean"
        },
        "layer": {
          "description": "Pack layer",
          "items": {
            "$ref": "#/definitions/v1PackLayer"
          },
          "type": "array",
          "uniqueItems": true
        },
        "name": {
          "$ref": "#/definitions/v1FilterString"
        },
        "registryUid": {
          "description": "Pack registry uid",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "source": {
          "description": "The source filter describes the creation origin/source of the pack. Ex. source can be \"spectrocloud\" or \"community\"",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "state": {
          "description": "Pack state such as deprecated or disabled",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "type": {
          "description": "Pack type",
          "items": {
            "$ref": "#/definitions/v1PackType"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1PackImportEntity": {
      "description": "Pack import request payload",
      "properties": {
        "layer": {
          "description": "Pack layer [ \"os\", \"k8s\", \"cni\", \"csi\", \"addon\" ]",
          "type": "string"
        },
        "manifests": {
          "description": "Pack manifests array",
          "items": {
            "$ref": "#/definitions/v1PackManifestImportEntity"
          },
          "type": "array"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "registry": {
          "$ref": "#/definitions/v1PackRegistryImportEntity"
        },
        "tag": {
          "description": "Pack version tag",
          "type": "string"
        },
        "type": {
          "description": "Pack type [ \"spectro\", \"helm\", \"manifest\", \"oci\" ]",
          "type": "string"
        },
        "values": {
          "description": "Pack values are the customizable configurations for the pack",
          "type": "string"
        },
        "version": {
          "description": "Pack version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1PackInputEntity": {
      "description": "Pack request payload",
      "properties": {
        "pack": {
          "$ref": "#/definitions/v1PackManifestEntity"
        }
      }
    },
    "v1PackLayer": {
      "enum": [
        "kernel",
        "os",
        "k8s",
        "cni",
        "csi",
        "addon"
      ],
      "type": "string"
    },
    "v1PackManifestEntity": {
      "description": "Pack request payload",
      "properties": {
        "layer": {
          "description": "Pack layer",
          "type": "string"
        },
        "manifests": {
          "description": "Pack manifests are additional content as part of the profile",
          "items": {
            "$ref": "#/definitions/v1ManifestInputEntity"
          },
          "type": "array"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "registryUid": {
          "description": "Pack registry uid",
          "type": "string"
        },
        "tag": {
          "description": "Pack tag",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "uid": {
          "description": "Pack uid",
          "type": "string"
        },
        "values": {
          "description": "Pack values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1PackManifestImportEntity": {
      "description": "Pack manifest import objct",
      "properties": {
        "content": {
          "description": "Pack manifest content in yaml",
          "type": "string"
        },
        "name": {
          "description": "Pack manifest name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1PackManifestRef": {
      "properties": {
        "digest": {
          "type": "string"
        },
        "isOverridden": {
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        },
        "parentUid": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1PackManifestUpdateEntity": {
      "description": "Pack input entity with values to overwrite and manifests for the intial creation",
      "properties": {
        "layer": {
          "description": "Pack layer",
          "type": "string"
        },
        "manifests": {
          "description": "Pack manifests are additional content as part of the profile",
          "items": {
            "$ref": "#/definitions/v1ManifestRefUpdateEntity"
          },
          "type": "array"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "registryUid": {
          "description": "Pack registry uid",
          "type": "string"
        },
        "tag": {
          "description": "Pack tag",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "uid": {
          "description": "Pack uid",
          "type": "string"
        },
        "values": {
          "description": "Pack values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1PackManifests": {
      "properties": {
        "items": {
          "description": "Manifests array",
          "items": {
            "$ref": "#/definitions/v1Manifest"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1PackManifestsSpec": {
      "description": "Pack manifests spec",
      "properties": {
        "addonType": {
          "description": "Pack add-on type such as logging, monitoring, security etc",
          "type": "string"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Pack annotations is used to allow pack to add more arbitrary configurations",
          "type": "object"
        },
        "cloudTypes": {
          "description": "Pack supported cloud types",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "digest": {
          "description": "Pack digest",
          "type": "string"
        },
        "displayName": {
          "description": "Pack display name",
          "type": "string"
        },
        "eol": {
          "description": "Pack end of life, date format: yyyy-MM-dd",
          "type": "string"
        },
        "group": {
          "description": "Pack group",
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1PackLayer"
        },
        "logoUrl": {
          "description": "Pack logo url",
          "type": "string"
        },
        "manifests": {
          "description": "Pack manifests are additional content as part of the cluster profile",
          "items": {
            "$ref": "#/definitions/v1ManifestSummary"
          },
          "type": "array"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "presets": {
          "description": "Pack presets are the set of configurations applied on user selection of presets",
          "items": {
            "$ref": "#/definitions/v1PackPreset"
          },
          "type": "array"
        },
        "registryUid": {
          "description": "Pack registry uid",
          "type": "string"
        },
        "schema": {
          "description": "Pack schema contains constraints such as data type, format, hints for the pack values",
          "items": {
            "$ref": "#/definitions/v1PackSchema"
          },
          "type": "array"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "values": {
          "description": "Pack values",
          "type": "string"
        },
        "version": {
          "description": "Pack version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1PackMetadata": {
      "description": "Pack metadata object",
      "properties": {
        "apiVersion": {
          "description": "Pack api version",
          "type": "string"
        },
        "kind": {
          "description": "Pack kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackMetadataSpec"
        }
      },
      "type": "object"
    },
    "v1PackMetadataList": {
      "description": "List of packs metadata",
      "properties": {
        "items": {
          "description": "Packs metadata array",
          "items": {
            "$ref": "#/definitions/v1PackMetadata"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1PackMetadataSpec": {
      "description": "Pack metadata spec",
      "properties": {
        "addonSubType": {
          "description": "Pack add-on sub type such as monitoring, db etc",
          "type": "string"
        },
        "addonType": {
          "description": "Pack add-on type such as logging, monitoring, security etc",
          "type": "string"
        },
        "cloudTypes": {
          "description": "Pack supported cloud types",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "displayName": {
          "description": "Pack display name",
          "type": "string"
        },
        "group": {
          "description": "Pack group",
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1PackLayer"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "registries": {
          "description": "Pack registries array",
          "items": {
            "$ref": "#/definitions/v1RegistryPackMetadata"
          },
          "type": "array"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        }
      },
      "type": "object"
    },
    "v1PackParamsEntity": {
      "description": "Pack params request payload",
      "properties": {
        "references": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1PackPreset": {
      "description": "PackPreset defines the preset pack values",
      "properties": {
        "add": {
          "type": "string",
          "x-omitempty": false
        },
        "displayName": {
          "type": "string",
          "x-omitempty": false
        },
        "group": {
          "type": "string",
          "x-omitempty": false
        },
        "name": {
          "type": "string",
          "x-omitempty": false
        },
        "remove": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1PackReadme": {
      "properties": {
        "readme": {
          "description": "Readme describes the documentation of the specified pack",
          "type": "string"
        }
      }
    },
    "v1PackRef": {
      "description": "PackRef server/name:tag to point to a pack PackRef is used when construct a ClusterProfile PackSpec is used for UI to render the parameters form ClusterProfile will not know inner details of a pack ClusterProfile only contain pack name:tag, and the param values user entered for it",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is used to allow packref to add more arbitrary information one example is to add git reference for values.yaml",
          "type": "object"
        },
        "digest": {
          "description": "digest is used to specify the version should be installed by palette when pack upgrade available, change this digest to trigger upgrade",
          "type": "string"
        },
        "inValidReason": {
          "type": "string"
        },
        "isInvalid": {
          "description": "pack is invalid when the associated tag is deleted from the registry",
          "type": "boolean"
        },
        "layer": {
          "enum": [
            "kernel",
            "os",
            "k8s",
            "cni",
            "csi",
            "addon"
          ],
          "type": "string"
        },
        "logo": {
          "description": "path to the pack logo",
          "type": "string"
        },
        "manifests": {
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          },
          "type": "array"
        },
        "name": {
          "description": "pack name",
          "type": "string"
        },
        "packUid": {
          "description": "PackUID is Hubble packUID, not palette Pack.UID It is used by Hubble only.",
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "params passed as env variables to be consumed at installation time",
          "type": "object"
        },
        "presets": {
          "items": {
            "$ref": "#/definitions/v1PackPreset"
          },
          "type": "array"
        },
        "registryUid": {
          "description": "pack registry uid",
          "type": "string"
        },
        "schema": {
          "items": {
            "$ref": "#/definitions/v1PackSchema"
          },
          "type": "array"
        },
        "server": {
          "description": "pack registry server or helm repo",
          "type": "string"
        },
        "tag": {
          "description": "pack tag",
          "type": "string"
        },
        "type": {
          "description": "type of the pack",
          "enum": [
            "spectro",
            "helm",
            "manifest"
          ],
          "type": "string"
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        },
        "version": {
          "description": "pack version",
          "type": "string"
        }
      },
      "required": [
        "layer",
        "name"
      ],
      "type": "object"
    },
    "v1PackRefSummary": {
      "description": "Pack ref summary",
      "properties": {
        "addonType": {
          "type": "string"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "displayName": {
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1PackLayer"
        },
        "logoUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "packUid": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1PackRefSummaryResponse": {
      "description": "Pack summary response",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackRefSummarySpec"
        }
      },
      "type": "object"
    },
    "v1PackRefSummarySpec": {
      "description": "Pack summary spec",
      "properties": {
        "macros": {
          "$ref": "#/definitions/v1PackResolvedValues"
        },
        "pack": {
          "$ref": "#/definitions/v1PackSummarySpec"
        },
        "registry": {
          "$ref": "#/definitions/v1RegistryMetadata"
        }
      }
    },
    "v1PackRegistries": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1PackRegistry"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1PackRegistriesSummary": {
      "description": "Pack Registries Summary",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1PackRegistrySummary"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1PackRegistry": {
      "description": "Pack registry information",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackRegistrySpec"
        },
        "status": {
          "$ref": "#/definitions/v1PackRegistryStatus"
        }
      },
      "type": "object"
    },
    "v1PackRegistryImportEntity": {
      "description": "Pack registry import entity",
      "properties": {
        "matchingRegistries": {
          "items": {
            "$ref": "#/definitions/v1PackRegistryMetadata"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/v1PackRegistryMetadata"
        }
      },
      "type": "object"
    },
    "v1PackRegistryMetadata": {
      "description": "Pack registry metadata",
      "properties": {
        "isPrivate": {
          "description": "If true then pack registry is private and is not accessible for the pack sync",
          "type": "boolean",
          "x-omitempty": false
        },
        "kind": {
          "description": "Pack registry kind [ \"pack\", \"helm\", \"oci\" ]",
          "type": "string"
        },
        "name": {
          "description": "Pack registry name",
          "type": "string"
        },
        "providerType": {
          "description": "OCI registry provider type [ \"helm\", \"pack\", \"zarf\" ]",
          "type": "string"
        },
        "uid": {
          "description": "Pack registry uid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1PackRegistrySpec": {
      "description": "Pack registry credentials spec",
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "private": {
          "type": "boolean",
          "x-omitempty": false
        },
        "registryUid": {
          "description": "Pack registry uid",
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      },
      "required": [
        "endpoint",
        "auth"
      ],
      "type": "object"
    },
    "v1PackRegistrySpecSummary": {
      "description": "Pack Registry spec summary",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "private": {
          "type": "boolean",
          "x-omitempty": false
        },
        "scope": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1PackRegistryStatus": {
      "description": "Status of the pack registry",
      "properties": {
        "packSyncStatus": {
          "$ref": "#/definitions/v1RegistrySyncStatus"
        }
      },
      "type": "object"
    },
    "v1PackRegistryStatusSummary": {
      "description": "Pack registry status summary",
      "properties": {
        "sync": {
          "$ref": "#/definitions/v1RegistrySyncStatus"
        }
      },
      "type": "object"
    },
    "v1PackRegistrySummary": {
      "description": "Pack Registry summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackRegistrySpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1PackRegistryStatusSummary"
        }
      },
      "type": "object"
    },
    "v1PackResolvedValues": {
      "description": "Pack resolved values",
      "properties": {
        "resolved": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Pack resolved values map",
          "type": "object"
        }
      }
    },
    "v1PackSchema": {
      "description": "PackSchema defines the schema definition, hints for the pack values",
      "properties": {
        "format": {
          "type": "string",
          "x-omitempty": false
        },
        "hints": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-omitempty": false
        },
        "listOptions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-omitempty": false
        },
        "name": {
          "type": "string",
          "x-omitempty": false
        },
        "readonly": {
          "type": "boolean",
          "x-omitempty": false
        },
        "regex": {
          "type": "string",
          "x-omitempty": false
        },
        "required": {
          "type": "boolean",
          "x-omitempty": false
        },
        "type": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1PackSortFields": {
      "description": "Packs sort by fields",
      "enum": [
        "name",
        "type",
        "layer",
        "addOnType",
        "displayName"
      ],
      "type": "string",
      "x-nullable": true
    },
    "v1PackSortSpec": {
      "description": "Packs sort spec",
      "properties": {
        "field": {
          "$ref": "#/definitions/v1PackSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1PackSummaries": {
      "description": "List of packs",
      "properties": {
        "items": {
          "description": "Packs array",
          "items": {
            "$ref": "#/definitions/v1PackSummary"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1PackSummary": {
      "description": "Pack summary object",
      "properties": {
        "apiVersion": {
          "description": "Pack api version",
          "type": "string"
        },
        "kind": {
          "description": "Pack kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PackSummarySpec"
        },
        "status": {
          "$ref": "#/definitions/v1PackSummaryStatus"
        }
      },
      "type": "object"
    },
    "v1PackSummarySpec": {
      "description": "Pack object",
      "properties": {
        "addonSubType": {
          "description": "Pack add-on sub type such as monitoring, db etc",
          "type": "string"
        },
        "addonType": {
          "description": "Pack add-on type such as logging, monitoring, security etc",
          "type": "string"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Pack annotations is used to allow pack to add more arbitrary configurations",
          "type": "object"
        },
        "cloudTypes": {
          "description": "Pack supported cloud types",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "digest": {
          "description": "Pack digest",
          "type": "string"
        },
        "displayName": {
          "description": "Pack display name",
          "type": "string"
        },
        "eol": {
          "description": "Pack end of life, date format: yyyy-MM-dd",
          "type": "string"
        },
        "group": {
          "description": "Pack group",
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1PackLayer"
        },
        "logoUrl": {
          "description": "Pack logo url",
          "type": "string"
        },
        "manifests": {
          "description": "Pack manifests are additional content as part of the cluster profile",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          },
          "type": "array"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "presets": {
          "description": "Pack presets are the set of configurations applied on user selection of presets",
          "items": {
            "$ref": "#/definitions/v1PackPreset"
          },
          "type": "array"
        },
        "registryUid": {
          "description": "Pack registry uid",
          "type": "string"
        },
        "schema": {
          "description": "Pack schema contains constraints such as data type, format, hints for the pack values",
          "items": {
            "$ref": "#/definitions/v1PackSchema"
          },
          "type": "array"
        },
        "template": {
          "$ref": "#/definitions/v1PackTemplate"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "values": {
          "description": "Pack values",
          "type": "string"
        },
        "version": {
          "description": "Pack version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1PackSummaryStatus": {
      "description": "Pack status",
      "type": "object"
    },
    "v1PackTagEntity": {
      "description": "Pack object",
      "properties": {
        "addonSubType": {
          "description": "Pack add-on sub type such as monitoring, db etc",
          "type": "string"
        },
        "addonType": {
          "description": "Pack add-on type such as logging, monitoring, security etc",
          "type": "string"
        },
        "cloudTypes": {
          "description": "Pack supported cloud types",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "displayName": {
          "description": "Pack display name",
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1PackLayer"
        },
        "logoUrl": {
          "description": "Pack logo url",
          "type": "string"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "packValues": {
          "description": "Pack values array",
          "items": {
            "$ref": "#/definitions/v1PackUidValues"
          },
          "type": "array"
        },
        "registryUid": {
          "description": "Pack registry uid",
          "type": "string"
        },
        "tags": {
          "description": "Pack version tags array",
          "items": {
            "$ref": "#/definitions/v1PackTags"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1PackTags": {
      "properties": {
        "group": {
          "description": "Pack group",
          "type": "string"
        },
        "packUid": {
          "description": "Pack uid",
          "type": "string"
        },
        "parentTags": {
          "description": "Pack version parent tags",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tag": {
          "description": "Pack version tag",
          "type": "string"
        },
        "version": {
          "description": "Pack version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1PackTemplate": {
      "description": "Pack template configuration",
      "properties": {
        "manifest": {
          "description": "Pack template manifest content",
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/v1PackTemplateParameters"
        },
        "values": {
          "description": "Pack template values",
          "type": "string"
        }
      }
    },
    "v1PackTemplateParameter": {
      "description": "Pack template parameter",
      "properties": {
        "description": {
          "description": "Pack template parameter description",
          "type": "string"
        },
        "displayName": {
          "description": "Pack template parameter display name",
          "type": "string"
        },
        "format": {
          "description": "Pack template parameter format",
          "type": "string"
        },
        "hidden": {
          "description": "Pack template parameter hidden flag, if true then the parameter is hidden in the UI",
          "type": "boolean"
        },
        "listOptions": {
          "description": "Pack template parameter list options as string array",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "Pack template parameter name",
          "type": "string"
        },
        "optional": {
          "description": "Pack template parameter optional flag, if true then the parameter value is not mandatory",
          "type": "boolean"
        },
        "options": {
          "additionalProperties": {
            "$ref": "#/definitions/v1PackTemplateParameterOption",
            "type": "object"
          },
          "description": "Pack template parameter options array",
          "type": "object"
        },
        "readOnly": {
          "description": "Pack template parameter readonly flag, if true then the parameter value can't be overridden",
          "type": "boolean"
        },
        "regex": {
          "description": "Pack template parameter regex, if set then parameter value must match with specified regex",
          "type": "string"
        },
        "targetKey": {
          "description": "Pack template parameter target key which is mapped to the key defined in the pack values",
          "type": "string"
        },
        "type": {
          "description": "Pack template parameter data type",
          "type": "string"
        },
        "value": {
          "description": "Pack template parameter value",
          "type": "string"
        }
      }
    },
    "v1PackTemplateParameterOption": {
      "description": "Pack template parameter option",
      "properties": {
        "dependencies": {
          "description": "Pack template parameter dependencies",
          "items": {
            "$ref": "#/definitions/v1PackDependency"
          },
          "type": "array"
        },
        "description": {
          "description": "Pack template parameter description",
          "type": "string"
        },
        "label": {
          "description": "Pack template parameter label",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1PackTemplateParameters": {
      "description": "Pack template parameters",
      "properties": {
        "inputParameters": {
          "description": "Pack template input parameters array",
          "items": {
            "$ref": "#/definitions/v1PackTemplateParameter"
          },
          "type": "array"
        },
        "outputParameters": {
          "description": "Pack template output parameters array",
          "items": {
            "$ref": "#/definitions/v1PackTemplateParameter"
          },
          "type": "array"
        }
      }
    },
    "v1PackType": {
      "default": "spectro",
      "enum": [
        "spectro",
        "helm",
        "manifest",
        "oci"
      ],
      "type": "string"
    },
    "v1PackUidValues": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Pack annotations is used to allow pack to add more arbitrary configurations",
          "type": "object"
        },
        "dependencies": {
          "description": "Pack dependencies array",
          "items": {
            "$ref": "#/definitions/v1PackDependencyMeta"
          },
          "type": "array"
        },
        "packUid": {
          "description": "Pack uid",
          "type": "string"
        },
        "presets": {
          "description": "Pack presets are the set of configurations applied on user selection of presets",
          "items": {
            "$ref": "#/definitions/v1PackPreset"
          },
          "type": "array"
        },
        "readme": {
          "description": "Readme describes the documentation of the specified pack",
          "type": "string"
        },
        "schema": {
          "description": "Pack schema contains constraints such as data type, format, hints for the pack values",
          "items": {
            "$ref": "#/definitions/v1PackSchema"
          },
          "type": "array"
        },
        "template": {
          "$ref": "#/definitions/v1PackTemplate"
        },
        "values": {
          "description": "Pack values represents the values.yaml used as input parameters",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1PackUpdateEntity": {
      "description": "Pack update request payload",
      "properties": {
        "pack": {
          "$ref": "#/definitions/v1PackEntity"
        }
      }
    },
    "v1PackValuesEntity": {
      "description": "Pack values entity to refer the existing pack for the values override",
      "properties": {
        "manifests": {
          "description": "Pack manifests are additional content as part of the profile",
          "items": {
            "$ref": "#/definitions/v1ManifestRefUpdateEntity"
          },
          "type": "array"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "tag": {
          "description": "Pack version tag",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "values": {
          "description": "Pack values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1PacksFilterSpec": {
      "description": "Packs filter spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1PackFilterSpec"
        },
        "sort": {
          "items": {
            "$ref": "#/definitions/v1PackSortSpec"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1PairingCode": {
      "description": "Pairing code response",
      "properties": {
        "pairingCode": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Partition": {
      "properties": {
        "fileSystemType": {
          "type": "string"
        },
        "freeSpace": {
          "format": "int32",
          "type": "integer"
        },
        "mountPoint": {
          "type": "string"
        },
        "totalSpace": {
          "format": "int32",
          "type": "integer"
        },
        "usedSpace": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1PasswordsBlockListEntity": {
      "description": "List of block listed passwords",
      "properties": {
        "passwords": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1PaymentIntent": {
      "description": "Payment setup object",
      "properties": {
        "clientSecret": {
          "description": "Payment client secret",
          "type": "string"
        },
        "paymentIntentId": {
          "description": "Payment intent id",
          "type": "string"
        },
        "status": {
          "description": "Status of payment intent",
          "type": "string"
        }
      }
    },
    "v1PaymentMethod": {
      "description": "Payment method object",
      "properties": {
        "card": {
          "$ref": "#/definitions/v1Card"
        },
        "customerId": {
          "description": "Customer uid",
          "type": "string"
        },
        "firstName": {
          "description": "First name of the user",
          "type": "string"
        },
        "lastName": {
          "description": "Last name of the user",
          "type": "string"
        },
        "paymentMethodId": {
          "description": "Payment method uid",
          "type": "string"
        }
      }
    },
    "v1PaymentMethods": {
      "description": "Payment Method list",
      "properties": {
        "defaultPaymentMethod": {
          "description": "Default payment method",
          "type": "string"
        },
        "paymentMethods": {
          "description": "List of payment method",
          "items": {
            "$ref": "#/definitions/v1PaymentMethod"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1PaymentPlan": {
      "description": "Stripe price detail object",
      "properties": {
        "billingScheme": {
          "description": "Billing scheme",
          "type": "string"
        },
        "currency": {
          "description": "Unit of currency",
          "type": "string"
        },
        "id": {
          "description": "Stripe payment plan id",
          "type": "string"
        },
        "name": {
          "description": "Name of the stripe plan",
          "type": "string"
        },
        "productId": {
          "description": "Product identifier",
          "type": "string"
        },
        "type": {
          "description": "Type of payment plan",
          "type": "string"
        },
        "unitAmount": {
          "description": "Unit amount for the product",
          "format": "int64",
          "type": "number"
        }
      }
    },
    "v1PaymentPlans": {
      "description": "Payment plan object model",
      "properties": {
        "stripePlanDetails": {
          "description": "List of Stripe plan details",
          "items": {
            "$ref": "#/definitions/v1PaymentPlan"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "stripePlanDetails"
      ],
      "type": "object"
    },
    "v1PaymentSecrets": {
      "description": "payment secrets",
      "properties": {
        "publishableKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "v1PaymentSubscription": {
      "description": "Payment subscription object",
      "properties": {
        "customerId": {
          "description": "Customer uid",
          "type": "string"
        },
        "paymentIntent": {
          "$ref": "#/definitions/v1PaymentIntent",
          "description": "Payment intent"
        },
        "paymentMethodIds": {
          "description": "List of payment method uids",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "planType": {
          "description": "Plan type",
          "type": "string"
        },
        "priceId": {
          "description": "Price uid",
          "type": "string"
        },
        "subscriptionId": {
          "description": "Subscription uid",
          "type": "string"
        },
        "subscriptionState": {
          "description": "Plan subscription state",
          "type": "string"
        }
      }
    },
    "v1PcgSelfHostedParams": {
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1PcgServiceKubectlCommands": {
      "description": "Array of kubectl commands",
      "properties": {
        "kubectlCommands": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "overlordUid": {
          "type": "string"
        }
      },
      "required": [
        "kubectlCommands"
      ],
      "type": "object"
    },
    "v1PcgsSummary": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1Overlord"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1Permission": {
      "description": "Permission information",
      "properties": {
        "name": {
          "type": "string"
        },
        "permissions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "scope": {
          "$ref": "#/definitions/v1Scope"
        }
      },
      "type": "object"
    },
    "v1Permissions": {
      "description": "Array of permissions",
      "items": {
        "$ref": "#/definitions/v1Permission"
      },
      "type": "array"
    },
    "v1Plan": {
      "description": "Plan",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1PlanSpec"
        },
        "status": {
          "$ref": "#/definitions/v1PlanStatus"
        }
      }
    },
    "v1PlanAddFreeCreditUpdate": {
      "description": "Plan add free credit update entity",
      "properties": {
        "credit": {
          "$ref": "#/definitions/v1PlanCreditEntity"
        }
      }
    },
    "v1PlanAddSlaCreditUpdate": {
      "description": "Plan add sla credit update entity",
      "properties": {
        "credit": {
          "$ref": "#/definitions/v1PlanCreditEntity"
        }
      }
    },
    "v1PlanChangeUpdate": {
      "description": "Plan change update entity",
      "properties": {
        "expiry": {
          "$ref": "#/definitions/v1Time",
          "description": "plan expiry time"
        },
        "isPaymentGateway": {
          "type": "boolean"
        },
        "planLimit": {
          "$ref": "#/definitions/v1PlanLimit"
        },
        "start": {
          "$ref": "#/definitions/v1Time",
          "description": "plan start time"
        },
        "tierPrice": {
          "$ref": "#/definitions/v1TierPrice"
        },
        "type": {
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "start",
        "expiry"
      ]
    },
    "v1PlanCost": {
      "description": "Plan Cost",
      "properties": {
        "discount": {
          "format": "float",
          "type": "number",
          "x-omitempty": false
        },
        "price": {
          "format": "float",
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1PlanCpuCoreHoursUsages": {
      "properties": {
        "hourlyUsages": {
          "items": {
            "$ref": "#/definitions/v1ResourceUsage"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1PlanCredit": {
      "description": "Plan Credit",
      "properties": {
        "cpuCoreHours": {
          "format": "int64",
          "type": "number",
          "x-omitempty": false
        },
        "creditUid": {
          "type": "string"
        },
        "expiry": {
          "$ref": "#/definitions/v1Time",
          "description": "credit expiry time"
        },
        "name": {
          "type": "string"
        },
        "start": {
          "$ref": "#/definitions/v1Time",
          "description": "credit start time"
        },
        "type": {
          "enum": [
            "Pure",
            "Alloy"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "v1PlanCreditEntity": {
      "description": "Plan Credit entity for create/update request",
      "properties": {
        "cpuCoreHours": {
          "format": "int64",
          "type": "number",
          "x-omitempty": false
        },
        "expiry": {
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "type": "string"
        },
        "start": {
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "enum": [
            "Pure",
            "Alloy"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "v1PlanCreditUpdate": {
      "description": "Plan credit update entity",
      "properties": {
        "credit": {
          "$ref": "#/definitions/v1PlanCreditEntity"
        }
      }
    },
    "v1PlanExpiry": {
      "description": "Plan expiry",
      "properties": {
        "expiry": {
          "$ref": "#/definitions/v1Time",
          "description": "plan expiry time"
        }
      },
      "required": [
        "expiry"
      ]
    },
    "v1PlanLimit": {
      "description": "Monthly Plan Limit",
      "properties": {
        "alloy": {
          "$ref": "#/definitions/v1PlanLimitSpec"
        },
        "isOnDemand": {
          "description": "is onDemand plan and has no limit",
          "type": "boolean",
          "x-omitempty": false
        },
        "isUnlimited": {
          "description": "is unlimited cpu core hours",
          "type": "boolean",
          "x-omitempty": false
        },
        "pure": {
          "$ref": "#/definitions/v1PlanLimitSpec"
        }
      }
    },
    "v1PlanLimitSpec": {
      "description": "Monthly Plan Limit spec",
      "properties": {
        "cpuCoreHours": {
          "description": "cpu cores hours",
          "format": "int64",
          "type": "integer",
          "x-omitempty": false
        },
        "overageLimitPercentage": {
          "default": 25,
          "description": "overage limit in percentage",
          "format": "int8",
          "type": "integer",
          "x-omitempty": false
        },
        "warnLimitPercentage": {
          "default": 90,
          "description": "warning limit in percentage",
          "format": "int8",
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "v1PlanLimitUpdate": {
      "description": "Plan limit change update entity",
      "properties": {
        "planLimit": {
          "$ref": "#/definitions/v1PlanLimit"
        }
      },
      "required": [
        "planLimit"
      ]
    },
    "v1PlanMonthlyUsage": {
      "description": "Plan monthly usage entity",
      "properties": {
        "dailyUsages": {
          "items": {
            "$ref": "#/definitions/v1ResourceUsage"
          },
          "type": "array",
          "uniqueItems": true
        },
        "month": {
          "$ref": "#/definitions/v1Time",
          "description": "usage month"
        },
        "planLimit": {
          "$ref": "#/definitions/v1PlanLimit"
        },
        "planType": {
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ],
          "type": "string"
        },
        "planUid": {
          "type": "string"
        },
        "totalMonthlyUsage": {
          "$ref": "#/definitions/v1TotalResourceUsage"
        }
      }
    },
    "v1PlanMonthlyUsages": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1PlanMonthlyUsage"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1PlanRenewal": {
      "description": "Plan Renewal",
      "properties": {
        "expiry": {
          "$ref": "#/definitions/v1Time",
          "description": "credit expiry time"
        },
        "planLimit": {
          "$ref": "#/definitions/v1PlanLimit"
        },
        "start": {
          "$ref": "#/definitions/v1Time",
          "description": "credit start time"
        },
        "type": {
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "start",
        "expiry"
      ]
    },
    "v1PlanRenewalUpdate": {
      "description": "Plan add renawal update entity",
      "properties": {
        "renewal": {
          "$ref": "#/definitions/v1PlanRenewal"
        }
      }
    },
    "v1PlanSpec": {
      "description": "Plan specifications",
      "properties": {
        "cost": {
          "$ref": "#/definitions/v1PlanCost"
        },
        "developerCredits": {
          "$ref": "#/definitions/v1DeveloperCredit"
        },
        "expiry": {
          "$ref": "#/definitions/v1Time",
          "description": "plan expiry time"
        },
        "freeCredits": {
          "items": {
            "$ref": "#/definitions/v1PlanCredit"
          },
          "type": "array"
        },
        "planLimit": {
          "$ref": "#/definitions/v1PlanLimit"
        },
        "renewal": {
          "$ref": "#/definitions/v1PlanRenewal"
        },
        "slaCredits": {
          "items": {
            "$ref": "#/definitions/v1PlanCredit"
          },
          "type": "array"
        },
        "start": {
          "$ref": "#/definitions/v1Time",
          "description": "plan start time"
        },
        "tierPricing": {
          "$ref": "#/definitions/v1TierPrice"
        },
        "type": {
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "start",
        "expiry"
      ]
    },
    "v1PlanStatus": {
      "properties": {
        "changeLogs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1Plans": {
      "description": "Array of Plans",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1Plan"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1PlansUsageComputeSpec": {
      "description": "Plans usage compute spec",
      "properties": {
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "tenantUids": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1PodAntiAffinity": {
      "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/v1VmWeightedPodAffinityTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "items": {
            "$ref": "#/definitions/v1VmPodAffinityTerm"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1Pool": {
      "description": "Pool defines IP ranges or with CIDR for available IPs Gateway, Prefix and Nameserver if provided, will overwrite values in IPPool",
      "properties": {
        "end": {
          "description": "End is the last IP address that can be rendered. It is used as a validation that the rendered IP is in bound.",
          "type": "string"
        },
        "gateway": {
          "description": "Gateway is the gateway ip address",
          "type": "string"
        },
        "nameserver": {
          "$ref": "#/definitions/v1Nameserver",
          "description": "Nameserver provide information for dns resolvation"
        },
        "prefix": {
          "description": "Prefix is the mask of the network as integer (max 128)",
          "format": "int32",
          "type": "integer"
        },
        "start": {
          "description": "Start is the first ip address that can be rendered",
          "type": "string"
        },
        "subnet": {
          "description": "Subnet is used to validate that the rendered IP is in bounds. eg: 192.168.0.0/24 If Start value is not given, start value is derived from the subnet ip incremented by 1 (start value is `192.168.0.1` for subnet `192.168.0.0/24`)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1PriceRange": {
      "description": "tier price range",
      "properties": {
        "discount": {
          "format": "int64",
          "type": "number"
        },
        "startFrom": {
          "format": "float64",
          "type": "number"
        },
        "unitAmount": {
          "format": "float64",
          "type": "number"
        },
        "upTo": {
          "format": "float64",
          "type": "number"
        },
        "upToInfinity": {
          "type": "boolean"
        }
      }
    },
    "v1PrivateCloudRateConfig": {
      "description": "Private cloud rate config",
      "properties": {
        "cpuUnitPricePerHour": {
          "format": "float64",
          "type": "number"
        },
        "gpuUnitPricePerHour": {
          "format": "float64",
          "type": "number"
        },
        "memoryUnitPriceGiBPerHour": {
          "format": "float64",
          "type": "number"
        },
        "storageUnitPriceGiBPerHour": {
          "format": "float64",
          "type": "number"
        }
      }
    },
    "v1ProductUsage": {
      "description": "Product usage",
      "properties": {
        "alloyUsage": {
          "$ref": "#/definitions/v1SystemProductUsage"
        },
        "pureUsage": {
          "$ref": "#/definitions/v1SystemProductUsage"
        }
      }
    },
    "v1ProfileMetaEntity": {
      "description": "Cluster profile metadata request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1ClusterProfileSpecEntity"
        }
      },
      "required": [
        "metadata"
      ],
      "type": "object"
    },
    "v1ProfileResolvedValues": {
      "description": "Cluster profile resolved pack values",
      "properties": {
        "resolved": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cluster profile pack resolved values",
          "type": "object"
        },
        "uid": {
          "description": "Cluster profile uid",
          "type": "string"
        }
      }
    },
    "v1ProfileStatus": {
      "properties": {
        "hasUserMacros": {
          "description": "If it is true then profile pack values has a reference to user defined macros",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1ProfileTemplateSummary": {
      "description": "Edge host clusterprofile template summary",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "packs": {
          "items": {
            "$ref": "#/definitions/v1PackRefSummary"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ProfileType": {
      "default": "cluster",
      "enum": [
        "cluster",
        "infra",
        "add-on",
        "system"
      ],
      "type": "string"
    },
    "v1Project": {
      "description": "Project information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ProjectSpec"
        },
        "status": {
          "$ref": "#/definitions/v1ProjectStatus"
        }
      },
      "type": "object"
    },
    "v1ProjectActiveAppDeployment": {
      "description": "Active app deployment",
      "properties": {
        "appRef": {
          "$ref": "#/definitions/v1ObjectEntity"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ProjectActiveAppDeployments": {
      "description": "Active app deployment",
      "properties": {
        "apps": {
          "items": {
            "$ref": "#/definitions/v1ProjectActiveAppDeployment"
          },
          "type": "array"
        },
        "count": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1ProjectActiveCluster": {
      "description": "Active clusters",
      "properties": {
        "clusterRef": {
          "$ref": "#/definitions/v1ObjectEntity"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ProjectActiveClusters": {
      "description": "Active clusters",
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/v1ProjectActiveCluster"
          },
          "type": "array"
        },
        "count": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1ProjectActiveResources": {
      "description": "Active project resources",
      "properties": {
        "appDeployments": {
          "$ref": "#/definitions/v1ProjectActiveAppDeployments"
        },
        "clusters": {
          "$ref": "#/definitions/v1ProjectActiveClusters"
        },
        "virtualClusters": {
          "$ref": "#/definitions/v1ProjectActiveClusters"
        }
      },
      "type": "object"
    },
    "v1ProjectAlertComponent": {
      "description": "Project alert component",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "supportedChannels": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ProjectAlertComponents": {
      "description": "Supported project alerts component",
      "properties": {
        "components": {
          "items": {
            "$ref": "#/definitions/v1ProjectAlertComponent"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ProjectCleanUpStatus": {
      "description": "Project cleanup status",
      "properties": {
        "cleanedResources": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "msg": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ProjectCleanup": {
      "description": "Project delete request payload",
      "properties": {
        "deletingClusterDurationThresholdInMin": {
          "format": "int32",
          "type": "integer"
        },
        "provisioningClusterDurationThresholdInMin": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1ProjectClusterSettings": {
      "properties": {
        "nodesAutoRemediationSetting": {
          "$ref": "#/definitions/v1NodesAutoRemediationSettings"
        },
        "tenantClusterSettings": {
          "$ref": "#/definitions/v1TenantClusterSettings"
        }
      }
    },
    "v1ProjectEntity": {
      "description": "Project information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ProjectEntitySpec"
        }
      },
      "type": "object"
    },
    "v1ProjectEntitySpec": {
      "description": "Project specifications",
      "properties": {
        "logoUid": {
          "type": "string"
        },
        "teams": {
          "items": {
            "$ref": "#/definitions/v1TeamRoleMap"
          },
          "type": "array",
          "uniqueItems": true
        },
        "users": {
          "items": {
            "$ref": "#/definitions/v1UserRoleMap"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1ProjectFilterSortFields": {
      "enum": [
        "name",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "type": "string",
      "x-nullable": true
    },
    "v1ProjectFilterSortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1ProjectFilterSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1ProjectFilterSpec": {
      "description": "Project filter spec",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1FilterString"
        }
      }
    },
    "v1ProjectMeta": {
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ProjectMetadata": {
      "description": "Project metadata",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectEntity"
        }
      }
    },
    "v1ProjectPatch": {
      "items": {
        "$ref": "#/definitions/v1HttpPatch"
      },
      "type": "array"
    },
    "v1ProjectResourceUsage": {
      "description": "project resource usage",
      "properties": {
        "alloyCpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        },
        "project": {
          "$ref": "#/definitions/v1ProjectMeta"
        },
        "pureCpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1ProjectRolesEntity": {
      "properties": {
        "projects": {
          "items": {
            "$ref": "#/definitions/v1UidRoleSummary"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ProjectRolesPatch": {
      "properties": {
        "projects": {
          "items": {
            "properties": {
              "projectUid": {
                "type": "string"
              },
              "roles": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ProjectSpec": {
      "description": "Project specifications",
      "properties": {
        "alerts": {
          "items": {
            "$ref": "#/definitions/v1Alert"
          },
          "type": "array",
          "uniqueItems": true
        },
        "logoUrl": {
          "type": "string"
        },
        "teams": {
          "items": {
            "$ref": "#/definitions/v1TeamRoleMap"
          },
          "type": "array",
          "uniqueItems": true
        },
        "users": {
          "items": {
            "$ref": "#/definitions/v1UserRoleMap"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1ProjectSpecSummary": {
      "properties": {
        "logoUrl": {
          "type": "string"
        },
        "teams": {
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          },
          "type": "array"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ProjectStatus": {
      "description": "Project status",
      "properties": {
        "cleanUpStatus": {
          "$ref": "#/definitions/v1ProjectCleanUpStatus"
        },
        "isDisabled": {
          "type": "boolean"
        }
      }
    },
    "v1ProjectStatusSummary": {
      "description": "Project status summary",
      "properties": {
        "clustersHealth": {
          "$ref": "#/definitions/v1SpectroClustersHealth"
        },
        "status": {
          "$ref": "#/definitions/v1ProjectStatus"
        },
        "usage": {
          "$ref": "#/definitions/v1ProjectUsageSummary"
        }
      },
      "type": "object"
    },
    "v1ProjectSummary": {
      "description": "Project summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "specSummary": {
          "$ref": "#/definitions/v1ProjectSpecSummary",
          "description": "Project spec summary"
        },
        "status": {
          "$ref": "#/definitions/v1ProjectStatusSummary",
          "description": "Project status summary"
        }
      },
      "type": "object"
    },
    "v1ProjectTeamsEntity": {
      "properties": {
        "teams": {
          "items": {
            "$ref": "#/definitions/v1TeamRoleMap"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1ProjectUsage": {
      "description": "Project usage object",
      "properties": {
        "alloy": {
          "$ref": "#/definitions/v1ProjectUsageData"
        },
        "pure": {
          "$ref": "#/definitions/v1ProjectUsageData"
        }
      }
    },
    "v1ProjectUsageData": {
      "description": "Project usage data object",
      "properties": {
        "amount": {
          "description": "Billing amount for the project",
          "format": "float64",
          "type": "number"
        },
        "tierPrice": {
          "description": "Tier price based on the usage",
          "format": "float64",
          "type": "number"
        },
        "usedCredits": {
          "description": "Project used credits",
          "format": "float64",
          "type": "number"
        }
      }
    },
    "v1ProjectUsageSummary": {
      "description": "Project usage summary",
      "properties": {
        "alloyCpuCores": {
          "type": "number",
          "x-omitempty": false
        },
        "clusters": {
          "items": {
            "$ref": "#/definitions/v1ClusterUsageSummary"
          },
          "type": "array"
        },
        "pureCpuCores": {
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1ProjectUsersEntity": {
      "properties": {
        "users": {
          "items": {
            "$ref": "#/definitions/v1UserRoleMap"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1Projects": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1Project"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1ProjectsFilterSpec": {
      "description": "Project filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ProjectFilterSpec"
        },
        "sort": {
          "items": {
            "$ref": "#/definitions/v1ProjectFilterSortSpec"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1ProjectsMetadata": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1ProjectMetadata"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1ProjectsSummary": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1ProjectSummary"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1ProjectsWorkspaces": {
      "description": "List projects and its workspaces",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "workspaces": {
          "items": {
            "$ref": "#/definitions/v1WorkspacesRoles"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1PublicCloudRateConfig": {
      "description": "Public cloud rate config",
      "properties": {
        "computeOptimized": {
          "$ref": "#/definitions/v1CloudInstanceRateConfig"
        },
        "memoryOptimized": {
          "$ref": "#/definitions/v1CloudInstanceRateConfig"
        }
      }
    },
    "v1RateConfig": {
      "description": "Rate config",
      "properties": {
        "aws": {
          "$ref": "#/definitions/v1PublicCloudRateConfig"
        },
        "azure": {
          "$ref": "#/definitions/v1PublicCloudRateConfig"
        },
        "custom": {
          "items": {
            "$ref": "#/definitions/v1CustomCloudRateConfig"
          },
          "type": "array",
          "uniqueItems": true
        },
        "edge": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "edgeNative": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "gcp": {
          "$ref": "#/definitions/v1PublicCloudRateConfig"
        },
        "generic": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "libvirt": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "maas": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "openstack": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        },
        "vsphere": {
          "$ref": "#/definitions/v1PrivateCloudRateConfig"
        }
      }
    },
    "v1RegistriesMetadata": {
      "description": "Pack Registries Metadata",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1RegistryMetadata"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1RegistryAuth": {
      "description": "Auth credentials of the registry",
      "properties": {
        "password": {
          "format": "password",
          "type": "string"
        },
        "tls": {
          "$ref": "#/definitions/v1TlsConfiguration"
        },
        "token": {
          "format": "password",
          "type": "string"
        },
        "type": {
          "enum": [
            "noAuth",
            "basic",
            "token"
          ],
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1RegistryConf": {
      "description": "Registry configuration",
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "endpoint": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1RegistryConfigEntity": {
      "description": "Registry configuration entity",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1RegistryConfiguration"
        }
      },
      "type": "object"
    },
    "v1RegistryConfiguration": {
      "description": "Registry configuration",
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1RegistryAuth"
        },
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1RegistryMetadata": {
      "description": "Registry meta",
      "properties": {
        "isDefault": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isPrivate": {
          "type": "boolean",
          "x-omitempty": false
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1RegistryPackMetadata": {
      "description": "Registry metadata information",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Pack annotations is used to allow pack to add more arbitrary configurations",
          "type": "object"
        },
        "latestPackUid": {
          "description": "Latest pack uid",
          "type": "string"
        },
        "latestVersion": {
          "description": "Pack latest version",
          "type": "string"
        },
        "logoUrl": {
          "description": "Pack logo url",
          "type": "string"
        },
        "name": {
          "description": "Pack registry name",
          "type": "string"
        },
        "scope": {
          "description": "Pack registry scope",
          "type": "string"
        },
        "uid": {
          "description": "Pack registry uid",
          "type": "string"
        }
      }
    },
    "v1RegistrySyncStatus": {
      "description": "Status of the registry sync",
      "properties": {
        "lastRunTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastSyncedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1RelatedObject": {
      "description": "Object for which the resource is related",
      "properties": {
        "kind": {
          "enum": [
            "spectrocluster",
            "machine",
            "cloudconfig",
            "clusterprofile",
            "pack",
            "appprofile",
            "appdeployment",
            "edgehost"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ReleaseDescription": {
      "description": "spectro application management release description",
      "properties": {
        "details": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ReleaseVersion": {
      "description": "spectro application management release version information",
      "properties": {
        "date": {
          "$ref": "#/definitions/v1Time"
        },
        "description": {
          "type": "string"
        },
        "releaseNotes": {
          "items": {
            "$ref": "#/definitions/v1ReleaseDescription"
          },
          "type": "array"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ResourceCloudCostSummary": {
      "description": "Resource cloud cost summary information",
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/v1CloudCostDataPoint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "entity": {
          "$ref": "#/definitions/v1ResourceReference"
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalCloudCost"
        }
      },
      "type": "object"
    },
    "v1ResourceConsumption": {
      "description": "Resource consumption information",
      "properties": {
        "associatedResources": {
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          },
          "type": "array"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/v1ResourceConsumptionDataPoint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "entity": {
          "$ref": "#/definitions/v1ResourceReference"
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalConsumptionData"
        }
      },
      "type": "object"
    },
    "v1ResourceConsumptionData": {
      "description": "Resource cosumption data",
      "properties": {
        "cpu": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "memory": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1ResourceConsumptionDataPoint": {
      "description": "Resource cosumption data point",
      "properties": {
        "allotted": {
          "$ref": "#/definitions/v1ResourceConsumptionData"
        },
        "timestamp": {
          "format": "int64",
          "type": "number"
        },
        "usage": {
          "$ref": "#/definitions/v1ResourceConsumptionData"
        }
      },
      "type": "object"
    },
    "v1ResourceConsumptionFilter": {
      "description": "Resource consumption filter",
      "properties": {
        "clouds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "clusters": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "includeControlPlaneMachines": {
          "type": "boolean"
        },
        "includeMasterMachines": {
          "description": "Deprecated. Use includeControlPlaneMachines",
          "type": "boolean"
        },
        "namespaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "projects": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "workspaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1ResourceConsumptionOptions": {
      "description": "Resource consumption options",
      "properties": {
        "enableSummaryView": {
          "default": true,
          "type": "boolean"
        },
        "groupBy": {
          "default": "namespace",
          "enum": [
            "tenant",
            "project",
            "workspace",
            "cluster",
            "namespace",
            "cloud"
          ],
          "type": "string"
        },
        "period": {
          "default": 60,
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1ResourceConsumptionSpec": {
      "description": "Resource consumption spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ResourceConsumptionFilter"
        },
        "options": {
          "$ref": "#/definitions/v1ResourceConsumptionOptions"
        }
      },
      "type": "object"
    },
    "v1ResourceCost": {
      "description": "Resource Cost information",
      "properties": {
        "cloud": {
          "$ref": "#/definitions/v1CloudCost"
        },
        "total": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1ResourceCostDataPoint": {
      "description": "Resource cost data point",
      "properties": {
        "cpu": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "memory": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "storage": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "timestamp": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1ResourceCostSummary": {
      "description": "Resource cost summary information",
      "properties": {
        "associatedResources": {
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          },
          "type": "array"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/v1ResourceCostDataPoint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "entity": {
          "$ref": "#/definitions/v1ResourceReference"
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalCost"
        }
      },
      "type": "object"
    },
    "v1ResourceCostSummaryFilter": {
      "description": "Resource cost summary filter",
      "properties": {
        "clouds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "clusters": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "includeControlPlaneMachines": {
          "type": "boolean"
        },
        "includeMasterMachines": {
          "description": "Deprecated. Use includeControlPlaneMachines",
          "type": "boolean"
        },
        "namespaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "projects": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "workspaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1ResourceCostSummaryOptions": {
      "description": "Resource cost summary options",
      "properties": {
        "enableSummaryView": {
          "default": true,
          "type": "boolean"
        },
        "groupBy": {
          "default": "cluster",
          "enum": [
            "tenant",
            "project",
            "workspace",
            "cluster",
            "namespace",
            "deployment",
            "cloud"
          ],
          "type": "string"
        },
        "period": {
          "default": 60,
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1ResourceCostSummarySpec": {
      "description": "Resource cost summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ResourceCostSummaryFilter"
        },
        "options": {
          "$ref": "#/definitions/v1ResourceCostSummaryOptions"
        }
      },
      "type": "object"
    },
    "v1ResourceEntity": {
      "properties": {
        "checks": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "data": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1ResourceGroup": {
      "description": "Azure resource Group is a container that holds related resources for an Azure solution",
      "properties": {
        "id": {
          "description": "The ID of the resource group",
          "type": "string"
        },
        "location": {
          "description": "The location of the resource group. It cannot be changed after the resource group has been created",
          "type": "string"
        },
        "name": {
          "description": "The type of the resource group",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ResourceLimitType": {
      "enum": [
        "user",
        "project",
        "apiKey",
        "team",
        "role",
        "cloudaccount",
        "clusterprofile",
        "workspace",
        "registry",
        "privategateway",
        "location",
        "certificate",
        "macro",
        "sshkey",
        "alert",
        "spectrocluster",
        "edgehost",
        "appprofile",
        "appdeployment",
        "edgetoken",
        "clustergroup",
        "filter",
        "systemadmin"
      ],
      "type": "string"
    },
    "v1ResourceReference": {
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "required": [
        "uid"
      ],
      "type": "object"
    },
    "v1ResourceRoles": {
      "properties": {
        "resourceRoles": {
          "items": {
            "$ref": "#/definitions/v1ResourceRolesEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ResourceRolesEntity": {
      "properties": {
        "filterRefs": {
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          },
          "type": "array"
        },
        "projectUids": {
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          },
          "type": "array"
        },
        "roles": {
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          },
          "type": "array"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ResourceRolesUpdateEntity": {
      "properties": {
        "filterRefs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "projectUids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ResourceTotalCloudCost": {
      "description": "Resource total cloud cost information",
      "properties": {
        "compute": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "storage": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "total": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1ResourceTotalConsumptionData": {
      "description": "Resource total cosumption data",
      "properties": {
        "allotted": {
          "$ref": "#/definitions/v1ResourceConsumptionData"
        },
        "usage": {
          "$ref": "#/definitions/v1ResourceConsumptionData"
        }
      },
      "type": "object"
    },
    "v1ResourceTotalCost": {
      "description": "Resource total cost information",
      "properties": {
        "cpu": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "memory": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "storage": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "total": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1ResourceUsage": {
      "description": "ResourceUsage",
      "properties": {
        "projects": {
          "items": {
            "$ref": "#/definitions/v1ProjectResourceUsage"
          },
          "type": "array",
          "uniqueItems": true
        },
        "timestamp": {
          "$ref": "#/definitions/v1Time",
          "description": "resource usage time"
        },
        "totalAlloyCpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        },
        "totalPureCpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1ResourceUsageDataPoint": {
      "description": "Resource usage data point",
      "properties": {
        "baremetal": {
          "$ref": "#/definitions/v1ResourceUsageMeteringDataPoint"
        },
        "cpu": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "edgehost": {
          "$ref": "#/definitions/v1ResourceUsageMeteringDataPoint"
        },
        "memory": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "timestamp": {
          "format": "int64",
          "type": "number"
        }
      },
      "type": "object"
    },
    "v1ResourceUsageMeteringDataPoint": {
      "description": "min and max count for machines \u0026 edgehost for the given period",
      "properties": {
        "activeEdgehosts": {
          "format": "int64",
          "type": "number"
        },
        "activeMachines": {
          "format": "int64",
          "type": "number"
        },
        "maxEdgehosts": {
          "format": "int64",
          "type": "number"
        },
        "maxMachines": {
          "format": "int64",
          "type": "number"
        }
      },
      "type": "object"
    },
    "v1ResourceUsageSummary": {
      "description": "Resource usage summary information",
      "properties": {
        "associatedResources": {
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          },
          "type": "array"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/v1ResourceUsageDataPoint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "entity": {
          "$ref": "#/definitions/v1ResourceReference"
        }
      },
      "type": "object"
    },
    "v1ResourceUsageSummaryFilter": {
      "description": "Resource usage summary filter",
      "properties": {
        "clouds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "clusters": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "includeControlPlaneMachines": {
          "type": "boolean"
        },
        "includeMasterMachines": {
          "description": "Deprecated. Use includeControlPlaneMachines",
          "type": "boolean"
        },
        "namespaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "pods": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "projects": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "workload": {
          "$ref": "#/definitions/v1ResourceWorkloadFilter"
        },
        "workspaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1ResourceUsageSummaryOptions": {
      "description": "Resource usage summary options",
      "properties": {
        "enableSummaryView": {
          "default": true,
          "type": "boolean"
        },
        "groupBy": {
          "default": "cluster",
          "enum": [
            "tenant",
            "project",
            "workspace",
            "cluster",
            "namespace",
            "deployment",
            "statefulset",
            "daemonset",
            "pod",
            "cloud"
          ],
          "type": "string"
        },
        "includeMeteringInfo": {
          "default": false,
          "type": "boolean"
        },
        "period": {
          "default": 60,
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1ResourceUsageSummarySpec": {
      "description": "Resource usage summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1ResourceUsageSummaryFilter"
        },
        "options": {
          "$ref": "#/definitions/v1ResourceUsageSummaryOptions"
        }
      },
      "type": "object"
    },
    "v1ResourceWorkloadFilter": {
      "description": "Workload resource filter",
      "properties": {
        "names": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "type": {
          "default": "all",
          "enum": [
            "deployment",
            "statefulset",
            "daemonset",
            "all"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Resources": {
      "properties": {
        "resources": {
          "additionalProperties": {
            "$ref": "#/definitions/v1ResourceEntity",
            "type": "object"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1ResourcesCloudCostSummary": {
      "description": "Resources cloud cost summary information",
      "properties": {
        "resources": {
          "items": {
            "$ref": "#/definitions/v1ResourceCloudCostSummary"
          },
          "type": "array"
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalCloudCost"
        }
      },
      "type": "object"
    },
    "v1ResourcesConsumption": {
      "description": "Resources consumption information",
      "properties": {
        "cpuUnit": {
          "type": "string"
        },
        "memoryUnit": {
          "type": "string"
        },
        "resources": {
          "items": {
            "$ref": "#/definitions/v1ResourceConsumption"
          },
          "type": "array"
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalConsumptionData"
        }
      },
      "type": "object"
    },
    "v1ResourcesCostSummary": {
      "description": "Resources cost summary information",
      "properties": {
        "resources": {
          "items": {
            "$ref": "#/definitions/v1ResourceCostSummary"
          },
          "type": "array"
        },
        "total": {
          "$ref": "#/definitions/v1ResourceTotalCost"
        }
      },
      "type": "object"
    },
    "v1ResourcesUsageSummary": {
      "description": "Resources usage summary information",
      "properties": {
        "cpuUnit": {
          "type": "string"
        },
        "memoryUnit": {
          "type": "string"
        },
        "resources": {
          "items": {
            "$ref": "#/definitions/v1ResourceUsageSummary"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1RestoreStatusMeta": {
      "description": "Restore  status meta",
      "properties": {
        "isSucceeded": {
          "type": "boolean"
        },
        "msg": {
          "type": "string"
        },
        "restoreTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1Role": {
      "description": "Role",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1RoleSpec"
        },
        "status": {
          "$ref": "#/definitions/v1RoleStatus"
        }
      }
    },
    "v1RoleClone": {
      "description": "Role clone specifications",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1RoleCloneMetadata"
        }
      }
    },
    "v1RoleCloneMetadata": {
      "description": "Role clone metadata",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1RolePatch": {
      "items": {
        "$ref": "#/definitions/v1HttpPatch"
      },
      "type": "array"
    },
    "v1RoleSpec": {
      "description": "Role specifications",
      "properties": {
        "permissions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "scope": {
          "$ref": "#/definitions/v1Scope"
        },
        "type": {
          "enum": [
            "system",
            "user"
          ],
          "type": "string"
        }
      }
    },
    "v1RoleStatus": {
      "description": "Role status",
      "properties": {
        "isEnabled": {
          "description": "Specifies if role account is enabled/disabled",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1Roles": {
      "description": "Array of Roles",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1Role"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1S3StorageConfig": {
      "description": "S3 storage config object",
      "properties": {
        "bucketName": {
          "description": "S3 storage bucket name",
          "type": "string"
        },
        "caCert": {
          "description": "CA Certificate",
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/v1AwsCloudAccount",
          "description": "AWS cloud account credentials"
        },
        "region": {
          "description": "AWS region name",
          "type": "string"
        },
        "s3ForcePathStyle": {
          "default": true,
          "type": "boolean"
        },
        "s3Url": {
          "description": "Custom hosted S3 URL",
          "type": "string"
        },
        "useRestic": {
          "default": true,
          "description": "Set to 'true', to use Restic plugin for the backup",
          "type": "boolean"
        }
      },
      "required": [
        "bucketName",
        "region",
        "credentials"
      ],
      "type": "object"
    },
    "v1SchedulerJob": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta",
          "type": "object",
          "x-omitempty": false
        },
        "spec": {
          "properties": {
            "cycles": {
              "type": "integer",
              "x-omitempty": false
            },
            "interval": {
              "type": "integer",
              "x-omitempty": false
            }
          },
          "type": "object"
        },
        "status": {
          "properties": {
            "cycleNumber": {
              "type": "integer",
              "x-omitempty": false
            },
            "error": {
              "type": "string",
              "x-omitempty": false
            },
            "forceNextRun": {
              "type": "boolean",
              "x-omitempty": false
            },
            "isActive": {
              "type": "boolean",
              "x-omitempty": false
            },
            "isDisabled": {
              "type": "boolean",
              "x-omitempty": false
            },
            "isLocked": {
              "type": "boolean",
              "x-omitempty": false
            },
            "lastRunTime": {
              "$ref": "#/definitions/v1Time",
              "x-omitempty": false
            },
            "lastSuccessfulRunTime": {
              "$ref": "#/definitions/v1Time",
              "x-omitempty": false
            },
            "nextRunTime": {
              "$ref": "#/definitions/v1Time",
              "x-omitempty": false
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SchedulerJobs": {
      "items": {
        "$ref": "#/definitions/v1SchedulerJob"
      },
      "type": "array",
      "uniqueItems": true
    },
    "v1SchedulerJobsHealth": {
      "items": {
        "$ref": "#/definitions/v1SchedulerJob"
      },
      "type": "array",
      "uniqueItems": true
    },
    "v1Scope": {
      "enum": [
        "system",
        "tenant",
        "project",
        "resource"
      ],
      "type": "string"
    },
    "v1SearchFilterBoolCondition": {
      "properties": {
        "value": {
          "type": "boolean"
        }
      }
    },
    "v1SearchFilterCondition": {
      "properties": {
        "bool": {
          "$ref": "#/definitions/v1SearchFilterBoolCondition"
        },
        "date": {
          "$ref": "#/definitions/v1SearchFilterDateCondition"
        },
        "float": {
          "$ref": "#/definitions/v1SearchFilterFloatCondition"
        },
        "int": {
          "$ref": "#/definitions/v1SearchFilterIntegerCondition"
        },
        "keyValue": {
          "$ref": "#/definitions/v1SearchFilterKeyValueCondition"
        },
        "string": {
          "$ref": "#/definitions/v1SearchFilterStringCondition"
        }
      }
    },
    "v1SearchFilterConjunctionOperator": {
      "enum": [
        "and",
        "or"
      ],
      "type": "string",
      "x-nullable": true
    },
    "v1SearchFilterDateCondition": {
      "properties": {
        "match": {
          "$ref": "#/definitions/v1SearchFilterDateConditionMatch"
        },
        "negation": {
          "type": "boolean"
        },
        "operator": {
          "$ref": "#/definitions/v1SearchFilterDateOperator"
        }
      }
    },
    "v1SearchFilterDateConditionMatch": {
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/v1SearchFilterConjunctionOperator"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/v1Time"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1SearchFilterDateOperator": {
      "enum": [
        "eq",
        "gt",
        "gte",
        "lt",
        "lte",
        "range"
      ],
      "type": "string"
    },
    "v1SearchFilterFloatCondition": {
      "properties": {
        "match": {
          "$ref": "#/definitions/v1SearchFilterFloatConditionMatch"
        },
        "negation": {
          "type": "boolean"
        },
        "operator": {
          "$ref": "#/definitions/v1SearchFilterIntegerOperator"
        }
      }
    },
    "v1SearchFilterFloatConditionMatch": {
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/v1SearchFilterConjunctionOperator"
        },
        "values": {
          "items": {
            "format": "float64",
            "type": "number"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1SearchFilterGroup": {
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/v1SearchFilterConjunctionOperator"
        },
        "filters": {
          "items": {
            "$ref": "#/definitions/v1SearchFilterItem"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1SearchFilterIntegerCondition": {
      "properties": {
        "match": {
          "$ref": "#/definitions/v1SearchFilterIntegerConditionMatch"
        },
        "negation": {
          "type": "boolean"
        },
        "operator": {
          "$ref": "#/definitions/v1SearchFilterIntegerOperator"
        }
      }
    },
    "v1SearchFilterIntegerConditionMatch": {
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/v1SearchFilterConjunctionOperator"
        },
        "values": {
          "items": {
            "type": "integer"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1SearchFilterIntegerOperator": {
      "enum": [
        "eq",
        "gt",
        "gte",
        "lt",
        "lte"
      ],
      "type": "string"
    },
    "v1SearchFilterItem": {
      "properties": {
        "condition": {
          "$ref": "#/definitions/v1SearchFilterCondition"
        },
        "property": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1SearchFilterPropertyType"
        }
      }
    },
    "v1SearchFilterKeyValueCondition": {
      "properties": {
        "ignoreCase": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        },
        "match": {
          "$ref": "#/definitions/v1SearchFilterKeyValueConditionMatch"
        },
        "negation": {
          "type": "boolean"
        },
        "operator": {
          "$ref": "#/definitions/v1SearchFilterStringOperator"
        }
      }
    },
    "v1SearchFilterKeyValueConditionMatch": {
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/v1SearchFilterConjunctionOperator"
        },
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1SearchFilterKeyValueOperator": {
      "enum": [
        "eq"
      ],
      "type": "string"
    },
    "v1SearchFilterPropertyType": {
      "enum": [
        "string",
        "int",
        "float",
        "bool",
        "date",
        "keyValue"
      ],
      "type": "string"
    },
    "v1SearchFilterSchemaSpec": {
      "properties": {
        "schema": {
          "$ref": "#/definitions/v1SearchFilterSchemaSpecProperties"
        }
      }
    },
    "v1SearchFilterSchemaSpecEnumValue": {
      "properties": {
        "displayValue": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1SearchFilterSchemaSpecProperties": {
      "properties": {
        "properties": {
          "items": {
            "$ref": "#/definitions/v1SearchFilterSchemaSpecProperty"
          },
          "type": "array"
        }
      }
    },
    "v1SearchFilterSchemaSpecProperty": {
      "properties": {
        "default": {
          "type": "string",
          "x-order": 6
        },
        "displayName": {
          "type": "string",
          "x-order": 2
        },
        "enum": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-omitempty": true,
          "x-order": 4
        },
        "enumValues": {
          "items": {
            "$ref": "#/definitions/v1SearchFilterSchemaSpecEnumValue"
          },
          "type": "array",
          "x-omitempty": true,
          "x-order": 5
        },
        "hideDisplay": {
          "type": "boolean",
          "x-order": 1
        },
        "maxFloatVal": {
          "format": "float64",
          "type": "number",
          "x-order": 10
        },
        "maxIntVal": {
          "format": "int32",
          "type": "integer",
          "x-order": 8
        },
        "minFloatVal": {
          "format": "float64",
          "type": "number",
          "x-order": 9
        },
        "minIntVal": {
          "format": "int32",
          "type": "integer",
          "x-order": 7
        },
        "name": {
          "type": "string",
          "x-order": 0
        },
        "type": {
          "type": "string",
          "x-order": 3
        }
      }
    },
    "v1SearchFilterSortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1SearchSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1SearchFilterSpec": {
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/v1SearchFilterConjunctionOperator"
        },
        "filterGroups": {
          "items": {
            "$ref": "#/definitions/v1SearchFilterGroup"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1SearchFilterStringCondition": {
      "properties": {
        "ignoreCase": {
          "type": "boolean"
        },
        "match": {
          "$ref": "#/definitions/v1SearchFilterStringConditionMatch"
        },
        "negation": {
          "type": "boolean"
        },
        "operator": {
          "$ref": "#/definitions/v1SearchFilterStringOperator"
        }
      }
    },
    "v1SearchFilterStringConditionMatch": {
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/v1SearchFilterConjunctionOperator"
        },
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1SearchFilterStringOperator": {
      "enum": [
        "eq",
        "contains",
        "beginsWith"
      ],
      "type": "string"
    },
    "v1SearchFilterSummarySpec": {
      "description": "Spectro cluster search filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1SearchFilterSpec"
        },
        "sort": {
          "items": {
            "$ref": "#/definitions/v1SearchFilterSortSpec"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1SearchSortFields": {
      "enum": [
        "environment",
        "clusterName",
        "clusterState",
        "healthState",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "type": "string",
      "x-nullable": true
    },
    "v1SectroClusterK8sDashboardUrl": {
      "description": "Service version information",
      "properties": {
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ServiceEncryptionKey": {
      "description": "Returns the data encryption key for the session",
      "properties": {
        "encryptionKey": {
          "description": "Encryption key to be used to decrypt the encrypted data in the response",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ServiceImage": {
      "description": "Service image entity",
      "properties": {
        "buildId": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ServiceManifest": {
      "description": "Service manifest information",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ServiceManifestSpec"
        }
      },
      "type": "object"
    },
    "v1ServiceManifestSpec": {
      "properties": {
        "manifests": {
          "items": {
            "$ref": "#/definitions/v1GitRepoFileContent"
          },
          "type": "array",
          "uniqueItems": true
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ServicePort": {
      "properties": {
        "port": {
          "description": "The port that will be exposed by this service.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "type": "string"
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "v1ServiceSpec": {
      "description": "ServiceSpec defines the specification of service registering edge",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ServiceVersion": {
      "description": "Service version information",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1ServiceVersionSpec"
        }
      },
      "type": "object"
    },
    "v1ServiceVersionSpec": {
      "properties": {
        "latestVersion": {
          "$ref": "#/definitions/v1GitRepoFileContent"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ServicesImages": {
      "properties": {
        "serviceImages": {
          "items": {
            "$ref": "#/definitions/v1ServiceImage"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1SonobuoyEntity": {
      "description": "Sonobuoy response",
      "properties": {
        "reports": {
          "additionalProperties": {
            "$ref": "#/definitions/v1SonobuoyReportEntity"
          },
          "type": "object"
        },
        "requestUid": {
          "type": "string"
        },
        "status": {
          "enum": [
            "Completed",
            "InProgress",
            "Failed",
            "Initiated"
          ],
          "type": "string"
        }
      },
      "required": [
        "requestUid",
        "status",
        "reports"
      ]
    },
    "v1SonobuoyLog": {
      "description": "Compliance Scan Sonobuoy Log",
      "properties": {
        "description": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "output": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1SonobuoyLogEntity": {
      "description": "Sonobuoy log",
      "properties": {
        "description": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "output": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1SonobuoyReport": {
      "description": "Compliance Scan Sonobuoy Report",
      "properties": {
        "fail": {
          "format": "int32",
          "type": "integer"
        },
        "logs": {
          "items": {
            "$ref": "#/definitions/v1SonobuoyLog"
          },
          "type": "array"
        },
        "node": {
          "type": "string"
        },
        "pass": {
          "format": "int32",
          "type": "integer"
        },
        "plugin": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "total": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1SonobuoyReportEntity": {
      "description": "Sonobuoy report",
      "properties": {
        "fail": {
          "format": "int32",
          "type": "integer"
        },
        "logs": {
          "items": {
            "$ref": "#/definitions/v1SonobuoyLogEntity"
          },
          "type": "array"
        },
        "node": {
          "type": "string"
        },
        "pass": {
          "format": "int32",
          "type": "integer"
        },
        "plugin": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "total": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1SortOrder": {
      "default": "asc",
      "enum": [
        "asc",
        "desc"
      ],
      "type": "string"
    },
    "v1SpcApply": {
      "properties": {
        "actionType": {
          "enum": [
            "DownloadAndInstall",
            "DownloadAndInstallLater"
          ],
          "type": "string"
        },
        "canBeApplied": {
          "description": "If it is true then Agent can apply the changes to the palette",
          "type": "boolean",
          "x-omitempty": false
        },
        "crdDigest": {
          "type": "string"
        },
        "lastModifiedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "patchAppliedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "spcHash": {
          "type": "string"
        },
        "spcInfraHash": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpcApplySettings": {
      "properties": {
        "actionType": {
          "enum": [
            "DownloadAndInstall",
            "DownloadAndInstallLater"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpcPatchTimeEntity": {
      "properties": {
        "clusterHash": {
          "type": "string"
        },
        "patchTime": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "type": "object"
    },
    "v1SpectroAppMgmtUpgrade": {
      "description": "Spectro application management upgrade information",
      "properties": {
        "profiles": {
          "items": {
            "$ref": "#/definitions/v1ClusterProfileNotificationUpdateEntity"
          },
          "type": "array",
          "uniqueItems": true
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "version"
      ],
      "type": "object"
    },
    "v1SpectroAwsClusterEntity": {
      "description": "AWS cluster request payload for create and update",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1AwsClusterConfig"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1ClusterConfigEntity",
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac"
            },
            "clusterType": {
              "$ref": "#/definitions/v1ClusterType"
            },
            "machinepoolconfig": {
              "items": {
                "$ref": "#/definitions/v1AwsMachinePoolConfigEntity"
              },
              "type": "array"
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              },
              "type": "array"
            }
          },
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroAwsClusterImportEntity": {
      "description": "Spectro AWS cluster import request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroAwsClusterRateEntity": {
      "description": "Spectro AWS cluster request payload for estimating rate",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1AwsClusterConfig"
        },
        "machinepoolconfig": {
          "items": {
            "$ref": "#/definitions/v1AwsMachinePoolConfigEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroAzureClusterEntity": {
      "description": "Azure cluster request payload for create and update",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1AzureClusterConfig"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1ClusterConfigEntity",
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac"
            },
            "machinepoolconfig": {
              "items": {
                "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
              },
              "type": "array"
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              },
              "type": "array"
            }
          },
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroAzureClusterImportEntity": {
      "description": "Spectro Azure cluster import request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroAzureClusterRateEntity": {
      "description": "Spectro Azure cluster request payload for estimating rate",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1AzureClusterConfig"
        },
        "machinepoolconfig": {
          "items": {
            "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroCluster": {
      "description": "SpectroCluster is the Schema for the spectroclusters API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SpectroClusterSpec"
        },
        "status": {
          "$ref": "#/definitions/v1SpectroClusterStatus"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterActiveAppDeployment": {
      "description": "Active app deployment",
      "properties": {
        "appRef": {
          "$ref": "#/definitions/v1ObjectEntity"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterActiveCluster": {
      "description": "Active clusters",
      "properties": {
        "clusterRef": {
          "$ref": "#/definitions/v1ObjectEntity"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterActiveResources": {
      "description": "Active cluster resources",
      "properties": {
        "appDeployments": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterActiveAppDeployment"
          },
          "type": "array"
        },
        "clusters": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterActiveCluster"
          },
          "type": "array"
        },
        "virtualClusters": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterActiveCluster"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterAddOnService": {
      "description": "Spectro cluster addon service",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterAddOnServiceSummary": {
      "description": "Spectro cluster status summary",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterAssetEntity": {
      "description": "Cluster asset",
      "properties": {
        "spec": {
          "properties": {
            "frpKubeconfig": {
              "type": "string"
            },
            "kubeconfig": {
              "type": "string"
            },
            "kubeconfigclient": {
              "type": "string"
            },
            "manifest": {
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterAssetFrpKubeConfig": {
      "description": "Cluster asset Frp Kube Config",
      "properties": {
        "frpKubeconfig": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterAssetKubeConfig": {
      "description": "Cluster asset Kube Config",
      "properties": {
        "kubeconfig": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterAssetKubeConfigClient": {
      "description": "Cluster asset Kube Config Client",
      "properties": {
        "kubeconfigclient": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterAssetManifest": {
      "description": "Cluster asset",
      "properties": {
        "manifest": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterCloudCost": {
      "description": "Spectro cluster cloud cost information",
      "properties": {
        "cost": {
          "$ref": "#/definitions/v1ResourceCost"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/v1CloudCostDataPoint"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterCloudCostSummaryFilter": {
      "description": "Spectro cluster cloud cost summary filter",
      "properties": {
        "clouds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "projects": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "workspaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1SpectroClusterCloudCostSummaryOptions": {
      "description": "Spectro cluster cloud cost summary options",
      "properties": {
        "groupBy": {
          "default": "project",
          "enum": [
            "tenant",
            "project",
            "cloud",
            "cluster"
          ],
          "type": "string"
        },
        "period": {
          "default": 1440,
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterCloudCostSummarySpec": {
      "description": "Spectro cluster cloud cost summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1SpectroClusterCloudCostSummaryFilter"
        },
        "options": {
          "$ref": "#/definitions/v1SpectroClusterCloudCostSummaryOptions"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterCost": {
      "description": "Spectro cluster cost information",
      "properties": {
        "cloud": {
          "$ref": "#/definitions/v1SpectroClusterCloudCost"
        },
        "cost": {
          "$ref": "#/definitions/v1ResourceCost"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterCostSummary": {
      "properties": {
        "cluster": {
          "$ref": "#/definitions/v1SpectroClusterCost"
        },
        "endTime": {
          "$ref": "#/definitions/v1Time"
        },
        "period": {
          "format": "int32",
          "type": "integer"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterFilterSpec": {
      "description": "Spectro cluster filter spec",
      "properties": {
        "cloudAccounts": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "clusterName": {
          "$ref": "#/definitions/v1FilterString"
        },
        "clusterProfiles": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "clusterState": {
          "$ref": "#/definitions/v1ClusterState",
          "description": "Deprecated. Use clusterStates"
        },
        "clusterStates": {
          "items": {
            "$ref": "#/definitions/v1ClusterState"
          },
          "type": "array",
          "uniqueItems": true
        },
        "cpuUsage": {
          "$ref": "#/definitions/v1FilterIntRange"
        },
        "environment": {
          "description": "Deprecated. Use environments",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "environments": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "healthState": {
          "default": "all",
          "enum": [
            "all",
            "Healthy",
            "UnHealthy"
          ],
          "type": "string"
        },
        "isDeleted": {
          "default": false,
          "type": "boolean"
        },
        "isHostCluster": {
          "default": false,
          "type": "boolean",
          "x-omitempty": false
        },
        "memoryUsage": {
          "$ref": "#/definitions/v1FilterNumberRange"
        },
        "metricPeriod": {
          "default": 60,
          "description": "Metric period in minutes defines latest metrics by period",
          "format": "int32",
          "type": "integer"
        },
        "projectUids": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "tags": {
          "$ref": "#/definitions/v1FilterArray"
        }
      }
    },
    "v1SpectroClusterHealthCheck": {
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SpectroClusterHealthCheckSpec",
          "type": "object"
        },
        "status": {
          "$ref": "#/definitions/v1SpectroClusterHealthCheckStatus",
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterHealthCheckSpec": {
      "properties": {
        "name": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "ownerName": {
          "type": "string"
        },
        "ownerUid": {
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterHealthCheckStatus": {
      "properties": {
        "machineHealthChecks": {
          "items": {
            "$ref": "#/definitions/v1HealthCheck"
          },
          "type": "array"
        },
        "msgBrokerHealthChecks": {
          "items": {
            "$ref": "#/definitions/v1HealthCheck"
          },
          "type": "array"
        },
        "spectroClusterHealthChecks": {
          "items": {
            "$ref": "#/definitions/v1HealthCheck"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterHealthCondition": {
      "description": "Spectro cluster health condition",
      "properties": {
        "message": {
          "type": "string"
        },
        "relatedObject": {
          "$ref": "#/definitions/v1RelatedObject",
          "type": "object"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterHealthStatus": {
      "description": "Spectro cluster health status",
      "properties": {
        "agentVersion": {
          "type": "string"
        },
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterHealthCondition"
          },
          "type": "array",
          "uniqueItems": true
        },
        "lastHeartBeatTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterKubeCtlRedirect": {
      "description": "Active resources of tenant",
      "properties": {
        "redirectUri": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterLocationInputEntity": {
      "description": "Cluster location",
      "properties": {
        "location": {
          "$ref": "#/definitions/v1ClusterLocation"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterMetaSummary": {
      "description": "Spectro cluster meta summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "specSummary": {
          "description": "Spectro cluster meta summary",
          "properties": {
            "archType": {
              "description": "Architecture type of the cluster",
              "items": {
                "default": "amd64",
                "enum": [
                  "arm64",
                  "amd64"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudRegion": {
              "type": "string"
            },
            "cloudType": {
              "type": "string"
            },
            "clusterType": {
              "type": "string"
            },
            "importMode": {
              "type": "string"
            },
            "location": {
              "$ref": "#/definitions/v1ClusterMetaSpecLocation"
            },
            "projectMeta": {
              "$ref": "#/definitions/v1ProjectMeta"
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "status": {
          "description": "Spectro cluster meta status summary",
          "properties": {
            "cost": {
              "$ref": "#/definitions/v1ClusterMetaStatusCost"
            },
            "fips": {
              "$ref": "#/definitions/v1ClusterFips"
            },
            "health": {
              "$ref": "#/definitions/v1ClusterMetaStatusHealth"
            },
            "state": {
              "type": "string"
            },
            "updates": {
              "$ref": "#/definitions/v1ClusterMetaStatusUpdates"
            }
          }
        }
      },
      "type": "object"
    },
    "v1SpectroClusterMetadataFilterSpec": {
      "description": "Spectro cluster filter spec",
      "properties": {
        "environment": {
          "type": "string"
        },
        "includeVirtual": {
          "default": false,
          "type": "boolean"
        },
        "isAlloy": {
          "default": false,
          "description": "isAlloy is renamed to isImported",
          "type": "boolean"
        },
        "isImportReadOnly": {
          "default": true,
          "type": "boolean"
        },
        "isImported": {
          "default": false,
          "type": "boolean"
        },
        "name": {
          "$ref": "#/definitions/v1FilterString"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1SpectroClusterMetadataSpec": {
      "description": "Spectro cluster metadata spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1SpectroClusterMetadataFilterSpec"
        },
        "sort": {
          "enum": [
            "environment",
            "state",
            "name"
          ],
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "v1SpectroClusterMetrics": {
      "description": "Spectro cluster metrics",
      "properties": {
        "cpu": {
          "$ref": "#/definitions/v1ComputeMetrics"
        },
        "memory": {
          "$ref": "#/definitions/v1ComputeMetrics"
        }
      }
    },
    "v1SpectroClusterMigration": {
      "description": "Spectro cluster migration status",
      "properties": {
        "database": {
          "$ref": "#/definitions/v1MgmtMigrationStatuses"
        },
        "state": {
          "type": "string",
          "x-omitempty": false
        },
        "tenant": {
          "$ref": "#/definitions/v1SpectroTenantMigration"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterOidcClaims": {
      "properties": {
        "Email": {
          "type": "string",
          "x-omitempty": false
        },
        "FirstName": {
          "type": "string",
          "x-omitempty": false
        },
        "LastName": {
          "type": "string",
          "x-omitempty": false
        },
        "SpectroTeam": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SpectroClusterOidcIssuerTlsSpec": {
      "properties": {
        "caCertificateBase64": {
          "type": "string",
          "x-omitempty": false
        },
        "insecureSkipVerify": {
          "default": false,
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SpectroClusterOidcSpec": {
      "properties": {
        "clientId": {
          "type": "string",
          "x-omitempty": false
        },
        "clientSecret": {
          "type": "string",
          "x-omitempty": false
        },
        "issuerTls": {
          "$ref": "#/definitions/v1SpectroClusterOidcIssuerTlsSpec"
        },
        "issuerUrl": {
          "description": "the issuer is the URL identifier for the service",
          "type": "string",
          "x-omitempty": false
        },
        "requiredClaims": {
          "$ref": "#/definitions/v1SpectroClusterOidcClaims"
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SpectroClusterPackCondition": {
      "properties": {
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "enum": [
            "ReadyForInstall",
            "Installed",
            "Ready",
            "Error",
            "UpgradeAvailable",
            "WaitingForOtherLayers"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterPackConfigList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1PackConfig"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1SpectroClusterPackDiff": {
      "description": "Cluster pack difference",
      "properties": {
        "current": {
          "$ref": "#/definitions/v1PackRef"
        },
        "diffConfigKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "target": {
          "$ref": "#/definitions/v1PackRef"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterPackProperties": {
      "description": "Cluster pack properties response",
      "properties": {
        "yaml": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SpectroClusterPackStatusEntity": {
      "properties": {
        "condition": {
          "$ref": "#/definitions/v1SpectroClusterPackCondition",
          "description": "Pack deployment status conditions"
        },
        "endTime": {
          "$ref": "#/definitions/v1Time",
          "description": "Pack deployment end time"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "profileUid": {
          "description": "Cluster profile uid",
          "type": "string"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time",
          "description": "Pack deployment start time"
        },
        "type": {
          "$ref": "#/definitions/v1PackType"
        },
        "version": {
          "description": "pack version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterPacksEntity": {
      "description": "Cluster entity for pack refs validate",
      "properties": {
        "profiles": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterPacksStatusEntity": {
      "properties": {
        "packs": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterPackStatusEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterPolicies": {
      "description": "Cluster policies",
      "properties": {
        "backupPolicy": {
          "$ref": "#/definitions/v1ClusterBackupConfig"
        },
        "scanPolicy": {
          "$ref": "#/definitions/v1ClusterComplianceScheduleConfig"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterProfile": {
      "description": "Cluster profile response",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SpectroClusterProfileSpec"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterProfileEntity": {
      "description": "Cluster profile request payload",
      "properties": {
        "packValues": {
          "description": "Cluster profile packs array",
          "items": {
            "$ref": "#/definitions/v1PackValuesEntity"
          },
          "type": "array",
          "uniqueItems": true
        },
        "replaceWithProfile": {
          "description": "Cluster profile uid to be replaced with new profile",
          "type": "string"
        },
        "uid": {
          "description": "Cluster profile uid",
          "type": "string"
        },
        "variables": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterVariable"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterProfileList": {
      "properties": {
        "profiles": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfile"
          },
          "type": "array"
        }
      },
      "required": [
        "profiles"
      ],
      "type": "object"
    },
    "v1SpectroClusterProfileSpec": {
      "description": "Cluster profile spec response",
      "properties": {
        "cloudType": {
          "description": "Cluster profile cloud type",
          "type": "string"
        },
        "packs": {
          "description": "Cluster profile packs array",
          "items": {
            "$ref": "#/definitions/v1ClusterProfilePacksEntity"
          },
          "type": "array",
          "uniqueItems": true
        },
        "relatedObject": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "RelatedObject refers to the type of object(clustergroup, cluster or edgeHost) the cluster profile is associated with"
        },
        "type": {
          "description": "Cluster profile type [ \"cluster\", \"infra\", \"add-on\", \"system\" ]",
          "type": "string"
        },
        "version": {
          "description": "Cluster profile version",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterProfileUpdates": {
      "properties": {
        "profiles": {
          "items": {
            "$ref": "#/definitions/v1ClusterProfileTemplate"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1SpectroClusterProfileValidatorResponse": {
      "description": "Cluster profile validator response",
      "properties": {
        "packs": {
          "$ref": "#/definitions/v1ConstraintValidatorResponse"
        },
        "uid": {
          "description": "Cluster profile uid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterProfiles": {
      "properties": {
        "profiles": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileEntity"
          },
          "type": "array"
        },
        "spcApplySettings": {
          "$ref": "#/definitions/v1SpcApplySettings"
        }
      },
      "required": [
        "profiles"
      ],
      "type": "object"
    },
    "v1SpectroClusterProfilesDeleteEntity": {
      "properties": {
        "profileUids": {
          "description": "Cluster's profile uid list",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1SpectroClusterProfilesPacksManifests": {
      "properties": {
        "profiles": {
          "items": {
            "$ref": "#/definitions/v1ClusterProfilePacksManifests"
          },
          "type": "array"
        }
      },
      "required": [
        "profiles"
      ],
      "type": "object"
    },
    "v1SpectroClusterProfilesParamReferenceEntity": {
      "description": "Cluster profiles param reference entity",
      "properties": {
        "references": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1SpectroClusterProfilesResolvedValues": {
      "description": "Cluster profiles resolved values response",
      "properties": {
        "profiles": {
          "items": {
            "$ref": "#/definitions/v1ProfileResolvedValues"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1SpectroClusterProjectCleanedResource": {
      "description": "List of cleaned project spectro cluster resources",
      "properties": {
        "resources": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterProjectCleanupValidateEntity": {
      "description": "Cluster duration thresholds",
      "properties": {
        "deletingClusterDurationThresholdInMin": {
          "format": "int32",
          "type": "integer"
        },
        "provisioningClusterDurationThresholdInMin": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterRate": {
      "description": "Cluster estimated rate information",
      "properties": {
        "machinePools": {
          "items": {
            "$ref": "#/definitions/v1MachinePoolRate"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "rate": {
          "$ref": "#/definitions/v1TotalClusterRate"
        },
        "resourceMetadata": {
          "$ref": "#/definitions/v1CloudResourceMetadata"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterRepave": {
      "description": "Spectro cluster repave status information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SpectroClusterRepaveSpec"
        },
        "status": {
          "$ref": "#/definitions/v1SpectroClusterRepaveStatus"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterRepaveReason": {
      "description": "Cluster repave reason description",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "pack": {
          "$ref": "#/definitions/v1SpectroClusterPackDiff"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterRepaveSpec": {
      "properties": {
        "reasons": {
          "description": "Spectro cluster repave reasons",
          "items": {
            "$ref": "#/definitions/v1SpectroClusterRepaveReason"
          },
          "type": "array"
        },
        "source": {
          "$ref": "#/definitions/v1ClusterRepaveSource"
        },
        "spectroClusterUid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterRepaveStatus": {
      "properties": {
        "message": {
          "type": "string"
        },
        "repaveTransitionTime": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "$ref": "#/definitions/v1ClusterRepaveState"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterRepaveValidationResponse": {
      "description": "Cluster repave validation response",
      "properties": {
        "isRepaveRequired": {
          "description": "If true then the pack changes can cause cluster repave",
          "type": "boolean",
          "x-omitempty": false
        },
        "reasons": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterRepaveReason"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterRevision": {
      "description": "Revision specification details for a cluster",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SpectroClusterSpec"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterRevisionMeta": {
      "description": "Revision spec uid along with the creationTimestamp for the revision",
      "properties": {
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "uid": {
          "description": "The unique id of the spc revision document",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterRevisionMetaList": {
      "properties": {
        "spcRevisions": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterRevisionMeta"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterSortFields": {
      "enum": [
        "environment",
        "clusterName",
        "healthState",
        "creationTimestamp",
        "lastModifiedTimestamp"
      ],
      "type": "string",
      "x-nullable": true
    },
    "v1SpectroClusterSortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1SpectroClusterSortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1SpectroClusterSpec": {
      "description": "SpectroClusterSpec defines the desired state of SpectroCluster",
      "properties": {
        "cloudConfigRef": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "CloudConfigRef point to the cloud configuration for the cluster, input by user Ref types are: AwsCloudConfig/VsphereCloudConfig/BaremetalConfig/ etc this user config will be used to generate cloud specific cluster/machine spec for cluster-api For VM, it will contain information needed to launch VMs, like cloud account, instance type For BM, it will contain actual baremetal machines"
        },
        "cloudType": {
          "type": "string"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1ClusterConfig",
          "description": "ClusterConfig is the configuration related to a general cluster. Configuration related to the health of the cluster."
        },
        "clusterProfileTemplates": {
          "description": "When a cluster created from a clusterprofile at t1, ClusterProfileTemplate is a copy of the draft version or latest published version of the clusterprofileSpec.clusterprofileTemplate then clusterprofile may evolve to v2 at t2, but before user decide to upgrade the cluster, it will stay as it is when user decide to upgrade, clusterProfileTemplate will be updated from the clusterprofile pointed by ClusterProfileRef",
          "items": {
            "$ref": "#/definitions/v1ClusterProfileTemplate"
          },
          "type": "array"
        },
        "clusterType": {
          "enum": [
            "PureManage",
            "AlloyMonitor",
            "AlloyAssist",
            "AlloyExtend"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterState": {
      "description": "Spectrocluster state entity",
      "properties": {
        "state": {
          "description": "Spectrocluster state",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterStatus": {
      "description": "SpectroClusterStatus",
      "properties": {
        "abortTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "addOnServices": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterAddOnService"
          },
          "type": "array"
        },
        "apiEndpoints": {
          "items": {
            "$ref": "#/definitions/v1APIEndpoint"
          },
          "type": "array"
        },
        "clusterImport": {
          "$ref": "#/definitions/v1ClusterImport"
        },
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "type": "array"
        },
        "fips": {
          "$ref": "#/definitions/v1ClusterFips"
        },
        "location": {
          "$ref": "#/definitions/v1ClusterLocation"
        },
        "packs": {
          "items": {
            "$ref": "#/definitions/v1ClusterPackStatus"
          },
          "type": "array"
        },
        "profileStatus": {
          "$ref": "#/definitions/v1ProfileStatus"
        },
        "repave": {
          "$ref": "#/definitions/v1ClusterRepaveStatus"
        },
        "services": {
          "items": {
            "$ref": "#/definitions/v1LoadBalancerService"
          },
          "type": "array"
        },
        "spcApply": {
          "$ref": "#/definitions/v1SpcApply"
        },
        "state": {
          "description": "current operational state",
          "type": "string"
        },
        "upgrades": {
          "items": {
            "$ref": "#/definitions/v1Upgrades"
          },
          "type": "array"
        },
        "virtual": {
          "$ref": "#/definitions/v1Virtual"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterStatusEntity": {
      "description": "Spectrocluster status entity",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1SpectroClusterState"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterSummary": {
      "description": "Spectro cluster summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "specSummary": {
          "description": "Spectro cluster spec summary",
          "properties": {
            "archTypes": {
              "description": "Architecture type of the cluster",
              "items": {
                "$ref": "#/definitions/v1ArchType"
              },
              "type": "array"
            },
            "cloudAccountMeta": {
              "$ref": "#/definitions/v1CloudAccountMeta"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1CloudConfigMeta"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1ClusterConfigResponse"
            },
            "clusterProfileTemplate": {
              "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
            },
            "clusterProfileTemplates": {
              "items": {
                "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
              },
              "type": "array"
            },
            "projectMeta": {
              "$ref": "#/definitions/v1ProjectMeta"
            }
          },
          "type": "object"
        },
        "status": {
          "description": "Spectro cluster status summary",
          "properties": {
            "clusterImport": {
              "$ref": "#/definitions/v1ClusterImport"
            },
            "cost": {
              "$ref": "#/definitions/v1ResourceCost"
            },
            "fips": {
              "$ref": "#/definitions/v1ClusterFips"
            },
            "health": {
              "$ref": "#/definitions/v1SpectroClusterHealthStatus"
            },
            "hourlyRate": {
              "$ref": "#/definitions/v1ResourceCost"
            },
            "location": {
              "$ref": "#/definitions/v1ClusterMetaSpecLocation"
            },
            "metrics": {
              "$ref": "#/definitions/v1SpectroClusterMetrics"
            },
            "notifications": {
              "$ref": "#/definitions/v1ClusterNotificationStatus"
            },
            "repave": {
              "$ref": "#/definitions/v1ClusterRepaveStatus"
            },
            "state": {
              "type": "string"
            },
            "virtual": {
              "$ref": "#/definitions/v1Virtual"
            }
          }
        }
      },
      "type": "object"
    },
    "v1SpectroClusterSummarySpec": {
      "description": "Spectro cluster filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1SpectroClusterFilterSpec"
        },
        "sort": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterSortSpec"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1SpectroClusterUidStatusSummary": {
      "description": "Spectro cluster status summary",
      "properties": {
        "abortTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "addOnServices": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterAddOnServiceSummary"
          },
          "type": "array"
        },
        "apiEndpoints": {
          "items": {
            "$ref": "#/definitions/v1APIEndpoint"
          },
          "type": "array"
        },
        "clusterImport": {
          "$ref": "#/definitions/v1ClusterImport"
        },
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "type": "array"
        },
        "cost": {
          "$ref": "#/definitions/v1ResourceCost"
        },
        "fips": {
          "$ref": "#/definitions/v1ClusterFips"
        },
        "health": {
          "$ref": "#/definitions/v1SpectroClusterHealthStatus"
        },
        "hourlyRate": {
          "$ref": "#/definitions/v1ResourceCost"
        },
        "kubeMeta": {
          "$ref": "#/definitions/v1KubeMeta"
        },
        "location": {
          "$ref": "#/definitions/v1ClusterMetaSpecLocation"
        },
        "metrics": {
          "$ref": "#/definitions/v1SpectroClusterMetrics"
        },
        "notifications": {
          "$ref": "#/definitions/v1ClusterNotificationStatus"
        },
        "packs": {
          "items": {
            "$ref": "#/definitions/v1ClusterPackStatus"
          },
          "type": "array"
        },
        "services": {
          "items": {
            "$ref": "#/definitions/v1LoadBalancerService"
          },
          "type": "array"
        },
        "spcApply": {
          "$ref": "#/definitions/v1SpcApply"
        },
        "state": {
          "description": "current operational state",
          "type": "string"
        },
        "upgrades": {
          "items": {
            "$ref": "#/definitions/v1Upgrades"
          },
          "type": "array"
        },
        "virtual": {
          "$ref": "#/definitions/v1Virtual"
        },
        "workspaces": {
          "items": {
            "$ref": "#/definitions/v1ResourceReference"
          },
          "type": "array"
        }
      }
    },
    "v1SpectroClusterUidSummary": {
      "description": "Spectro cluster summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "description": "Spectro cluster spec summary",
          "properties": {
            "archTypes": {
              "description": "Architecture types of the cluster",
              "items": {
                "$ref": "#/definitions/v1ArchType"
              },
              "type": "array"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1CloudConfigMeta"
            },
            "cloudaccount": {
              "$ref": "#/definitions/v1CloudAccountMeta"
            },
            "clusterProfileTemplate": {
              "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
            },
            "clusterProfileTemplates": {
              "items": {
                "$ref": "#/definitions/v1ClusterProfileTemplateMeta"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "status": {
          "$ref": "#/definitions/v1SpectroClusterUidStatusSummary"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterUidUpgrades": {
      "description": "Cluster status upgrades",
      "properties": {
        "upgrades": {
          "items": {
            "$ref": "#/definitions/v1Upgrades"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroClusterVMCloneEntity": {
      "properties": {
        "annotationFilters": {
          "description": "Annotation filters",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "cloneName": {
          "description": "Cloning Virtual machine's name",
          "type": "string"
        },
        "labelFilters": {
          "description": "Label filters",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "newMacAddresses": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "NewMacAddresses manually sets that target interfaces' mac addresses. The key is the interface name and the value is the new mac address. If this field is not specified, a new MAC address will be generated automatically, as for any interface that is not included in this map",
          "type": "object"
        },
        "newSMBiosSerial": {
          "description": "NewSMBiosSerial manually sets that target's SMbios serial. If this field is not specified, a new serial will be generated automatically.",
          "type": "string"
        }
      },
      "required": [
        "cloneName"
      ],
      "type": "object"
    },
    "v1SpectroClusterValidatorResponse": {
      "description": "Cluster validator response",
      "properties": {
        "machinePools": {
          "$ref": "#/definitions/v1ConstraintValidatorResponse"
        },
        "profiles": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterProfileValidatorResponse"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1SpectroClusterVariable": {
      "description": "Variable with value which will be used within the packs of cluster profile",
      "properties": {
        "name": {
          "description": "Variable name",
          "type": "string"
        },
        "value": {
          "description": "Actual value of the variable to be used within the cluster",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1SpectroClusters": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1SpectroCluster"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1SpectroClustersAgentsNotifyEntity": {
      "description": "SpectroClusters for which agents has to be notified",
      "properties": {
        "clusterUids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "notifyAllClusters": {
          "type": "boolean"
        }
      }
    },
    "v1SpectroClustersCostComputeSpec": {
      "description": "Cluster's cost compute spec",
      "properties": {
        "clusterUids": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "type": "object"
    },
    "v1SpectroClustersHealth": {
      "description": "Spectro Clusters health data",
      "properties": {
        "errored": {
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        },
        "healthy": {
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        },
        "running": {
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        },
        "unhealthy": {
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SpectroClustersMetadata": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1ObjectMeta"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1SpectroClustersMetadataSearch": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterMetaSummary"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1SpectroClustersSummary": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1SpectroClusterSummary"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1SpectroClustersUsageComputeSpec": {
      "description": "Cluster's usage compute spec",
      "properties": {
        "clusterUids": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "type": "object"
    },
    "v1SpectroCustomClusterEntity": {
      "description": "Custom cluster request payload for create and update",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1CustomClusterConfig"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1CustomClusterConfigEntity",
              "description": "General cluster configuration like patching settings, namespace resource allocation, rbac"
            },
            "clusterType": {
              "$ref": "#/definitions/v1ClusterType"
            },
            "machinepoolconfig": {
              "items": {
                "$ref": "#/definitions/v1CustomMachinePoolConfigEntity"
              },
              "type": "array"
            },
            "profiles": {
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              },
              "type": "array"
            }
          },
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroEdgeNativeClusterEntity": {
      "description": "EdgeNative cluster create or update request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "cloudConfig": {
              "$ref": "#/definitions/v1EdgeNativeClusterConfig"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1ClusterConfigEntity",
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac"
            },
            "machinepoolconfig": {
              "items": {
                "$ref": "#/definitions/v1EdgeNativeMachinePoolConfigEntity"
              },
              "type": "array"
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroEdgeNativeClusterImportEntity": {
      "description": "Spectro EdgeNative cluster import request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroEdgeNativeClusterRateEntity": {
      "description": "Edge-native cluster request payload for estimating rate",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1EdgeNativeClusterConfig"
        },
        "machinepoolconfig": {
          "items": {
            "$ref": "#/definitions/v1EdgeNativeMachinePoolConfigEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroEksClusterEntity": {
      "description": "Spectro EKS cluster request payload for create and update",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1EksClusterConfig"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1ClusterConfigEntity",
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac"
            },
            "fargateProfiles": {
              "items": {
                "$ref": "#/definitions/v1FargateProfile"
              },
              "type": "array"
            },
            "machinepoolconfig": {
              "items": {
                "$ref": "#/definitions/v1EksMachinePoolConfigEntity"
              },
              "type": "array"
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              },
              "type": "array"
            }
          },
          "required": [
            "cloudAccountUid",
            "cloudConfig"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroEksClusterRateEntity": {
      "description": "Spectro EKS cluster request payload for estimating rate",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1EksClusterConfig"
        },
        "machinepoolconfig": {
          "items": {
            "$ref": "#/definitions/v1EksMachinePoolConfigEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroGcpClusterEntity": {
      "description": "GCP cluster request payload for create and update",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1GcpClusterConfig"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1ClusterConfigEntity",
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac"
            },
            "machinepoolconfig": {
              "items": {
                "$ref": "#/definitions/v1GcpMachinePoolConfigEntity"
              },
              "type": "array"
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              },
              "type": "array"
            }
          },
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroGcpClusterImportEntity": {
      "description": "Spectro GCP cluster import request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroGcpClusterRateEntity": {
      "description": "Gcp cluster request payload for estimating rate",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1GcpClusterConfig"
        },
        "machinepoolconfig": {
          "items": {
            "$ref": "#/definitions/v1GcpMachinePoolConfigEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroGenericClusterImportEntity": {
      "description": "Spectro generic cluster import request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            },
            "edgeConfig": {
              "$ref": "#/definitions/v1ImportEdgeHostConfig"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroGenericClusterRateEntity": {
      "description": "Generic cluster request payload for estimating rate",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1GenericClusterConfig"
        },
        "machinepoolconfig": {
          "items": {
            "$ref": "#/definitions/v1GenericMachinePoolConfigEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroInstallerEntity": {
      "description": "Spectro installer entity for create",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "privateGatewayUid": {
              "type": "string"
            },
            "spectroClusterUid": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "status": {
          "$ref": "#/definitions/v1InstallerStatus"
        }
      },
      "type": "object"
    },
    "v1SpectroInstallerInputEntity": {
      "description": "Spectro installer entity for create",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      },
      "type": "object"
    },
    "v1SpectroInstallerStatus": {
      "description": "spectro installer status",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1InstallerStatus"
        }
      },
      "type": "object"
    },
    "v1SpectroInstallers": {
      "description": "List Spectro installers",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1SpectroInstallerEntity"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "type": "object"
    },
    "v1SpectroLibvirtClusterEntity": {
      "description": "Libvirt cluster request payload for create and update",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "cloudConfig": {
              "$ref": "#/definitions/v1LibvirtClusterConfig"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1ClusterConfigEntity",
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac"
            },
            "machinepoolconfig": {
              "items": {
                "$ref": "#/definitions/v1LibvirtMachinePoolConfigEntity"
              },
              "type": "array"
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroLibvirtClusterImportEntity": {
      "description": "Spectro Libvirt cluster import request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroLibvirtClusterRateEntity": {
      "description": "libvirt cluster request payload for estimating rate",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1LibvirtClusterConfig"
        },
        "machinepoolconfig": {
          "items": {
            "$ref": "#/definitions/v1LibvirtMachinePoolConfigEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroMaasClusterEntity": {
      "description": "Spectro Maas cluster request payload for create and update",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1MaasClusterConfig"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1ClusterConfigEntity",
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac"
            },
            "machinepoolconfig": {
              "items": {
                "$ref": "#/definitions/v1MaasMachinePoolConfigEntity"
              },
              "type": "array"
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              },
              "type": "array"
            }
          },
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroMaasClusterImportEntity": {
      "description": "Spectro maas cluster import request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroMaasClusterRateEntity": {
      "description": "Maas cluster request payload for estimating rate",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1MaasClusterConfig"
        },
        "machinepoolconfig": {
          "items": {
            "$ref": "#/definitions/v1MaasMachinePoolConfigEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroMgmt": {
      "description": "Spectro management data",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SpectroMgmtSpec"
        },
        "status": {
          "$ref": "#/definitions/v1SpectroMgmtStatus"
        }
      },
      "type": "object"
    },
    "v1SpectroMgmtSpec": {
      "description": "spectro management specifications",
      "properties": {
        "installerMode": {
          "type": "string"
        },
        "spectroClusterUid": {
          "type": "string"
        },
        "targetVersion": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1SpectroMgmtStatus": {
      "description": "spectro management status information",
      "properties": {
        "appVersions": {
          "items": {
            "$ref": "#/definitions/v1AppVersion"
          },
          "type": "array",
          "uniqueItems": true
        },
        "isFailed": {
          "type": "boolean",
          "x-omitempty": false
        },
        "lastUpdatedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "type": "string"
        },
        "messageLogs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "state": {
          "type": "string"
        },
        "upgradeHistory": {
          "items": {
            "$ref": "#/definitions/v1SpectroMgmtUpgrade"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1SpectroMgmtUpgrade": {
      "description": "spectro management upgrade logs",
      "properties": {
        "upgradeTime": {
          "$ref": "#/definitions/v1Time"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1SpectroMgmtUpgradePack": {
      "description": "Spectro application management cluster upgrade pack information",
      "properties": {
        "diffMessage": {
          "description": "Spectro application management cluster pack difference message",
          "type": "string"
        },
        "layer": {
          "description": "Spectro application management cluster pack layer type",
          "type": "string"
        },
        "name": {
          "description": "Spectro application management cluster pack name",
          "type": "string"
        },
        "registryUid": {
          "description": "Spectro application management cluster pack registry unique identifier",
          "type": "string"
        },
        "type": {
          "description": "Spectro application management cluster pack type",
          "type": "string"
        },
        "uid": {
          "description": "Spectro application management cluster pack unique identifier",
          "type": "string"
        },
        "values": {
          "description": "Spectro application management cluster pack values",
          "type": "string"
        },
        "version": {
          "description": "Spectro application management cluster pack version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroMgmtUpgradeProfile": {
      "description": "Spectro application management cluster upgrade pack information",
      "properties": {
        "packs": {
          "description": "Spectro application management cluster upgrade packs",
          "items": {
            "$ref": "#/definitions/v1SpectroMgmtUpgradePack"
          },
          "type": "array"
        },
        "uid": {
          "description": "Spectro application management cluster profile unique identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroMgmtUpgradeProfiles": {
      "description": "Spectro application management cluster information",
      "properties": {
        "profiles": {
          "description": "Spectro application management cluster profiles",
          "items": {
            "$ref": "#/definitions/v1SpectroMgmtUpgradeProfile"
          },
          "type": "array"
        },
        "version": {
          "description": "Spectro application management cluster version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroMgmtUpgradeSpc": {
      "description": "Spectro application management cluster upgrade profiles",
      "properties": {
        "current": {
          "$ref": "#/definitions/v1SpectroMgmtUpgradeProfiles"
        },
        "target": {
          "$ref": "#/definitions/v1SpectroMgmtUpgradeProfiles"
        }
      },
      "type": "object"
    },
    "v1SpectroOpenStackClusterEntity": {
      "description": "OpenStack cluster request payload for create and update",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1OpenStackClusterConfig"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1ClusterConfigEntity",
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac"
            },
            "machinepoolconfig": {
              "items": {
                "$ref": "#/definitions/v1OpenStackMachinePoolConfigEntity"
              },
              "type": "array"
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              },
              "type": "array"
            }
          },
          "required": [
            "cloudAccountUid",
            "cloudConfig"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroOpenStackClusterImportEntity": {
      "description": "Spectro OpenStack cluster import request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroOpenStackClusterRateEntity": {
      "description": "Openstack cluster request payload for estimating rate",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1OpenStackClusterConfig"
        },
        "machinepoolconfig": {
          "items": {
            "$ref": "#/definitions/v1OpenStackMachinePoolConfigEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroTenantClusterMigration": {
      "description": "Spectro tenant cluster migration status",
      "properties": {
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpectroTenantMigration": {
      "description": "Spectro tenant migration status",
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/v1SpectroTenantClusterMigration"
          },
          "type": "array",
          "uniqueItems": true
        },
        "state": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SpectroTencentClusterEntity": {
      "description": "Tencent cluster request payload for create and update",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1TencentClusterConfig"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1ClusterConfigEntity",
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac"
            },
            "machinepoolconfig": {
              "items": {
                "$ref": "#/definitions/v1TencentMachinePoolConfigEntity"
              },
              "type": "array"
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              },
              "type": "array"
            }
          },
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroTencentClusterRateEntity": {
      "description": "Spectro Tencent cluster request payload for estimating rate",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1TencentClusterConfig"
        },
        "machinepoolconfig": {
          "items": {
            "$ref": "#/definitions/v1TencentMachinePoolConfigEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpectroVirtualClusterEntity": {
      "description": "Spectro virtual cluster request payload for create and update",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "cloudConfig": {
              "$ref": "#/definitions/v1VirtualClusterConfig"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1ClusterConfigEntity",
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac"
            },
            "machinepoolconfig": {
              "items": {
                "$ref": "#/definitions/v1VirtualMachinePoolConfigEntity"
              },
              "type": "array"
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              },
              "type": "array"
            }
          },
          "required": [
            "cloudType",
            "clusterConfig"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroVsphereClusterEntity": {
      "description": "vSphere cluster request payload for create and update",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "properties": {
            "cloudAccountUid": {
              "description": "Cloud account uid to be used for cluster provisioning",
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1VsphereClusterConfigEntity"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1ClusterConfigEntity",
              "description": "General cluster configuration like health, patching settings, namespace resource allocation, rbac"
            },
            "edgeHostUid": {
              "description": "Appliance (Edge Host) uid for Edge env",
              "type": "string"
            },
            "machinepoolconfig": {
              "items": {
                "$ref": "#/definitions/v1VsphereMachinePoolConfigEntity"
              },
              "type": "array"
            },
            "policies": {
              "$ref": "#/definitions/v1SpectroClusterPolicies"
            },
            "profiles": {
              "items": {
                "$ref": "#/definitions/v1SpectroClusterProfileEntity"
              },
              "type": "array"
            }
          },
          "required": [
            "cloudConfig"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroVsphereClusterImportEntity": {
      "description": "Spectro Vsphere cluster import request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "properties": {
            "clusterConfig": {
              "$ref": "#/definitions/v1ImportClusterConfig"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SpectroVsphereClusterRateEntity": {
      "description": "Vsphere cluster request payload for estimating rate",
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1VsphereClusterConfigEntity"
        },
        "machinepoolconfig": {
          "items": {
            "$ref": "#/definitions/v1VsphereMachinePoolConfigEntity"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1SpotMarketOptions": {
      "description": "SpotMarketOptions defines the options available to a user when configuring Machines to run on Spot instances. Most users should provide an empty struct.",
      "properties": {
        "maxPrice": {
          "description": "MaxPrice defines the maximum price the user is willing to pay for Spot VM instances",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SpotVMOptions": {
      "description": "SpotVMOptions defines the options relevant to running the Machine on Spot VMs",
      "properties": {
        "maxPrice": {
          "description": "MaxPrice defines the maximum price the user is willing to pay for Spot VM instances",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SsoLogin": {
      "description": "Describes the allowed sso login details",
      "properties": {
        "displayName": {
          "description": "Describes the display name for the sso login",
          "type": "string"
        },
        "logo": {
          "description": "Describes the url path for the sso login",
          "type": "string"
        },
        "name": {
          "description": "Describes the processed name for the sso login",
          "type": "string"
        },
        "redirectUri": {
          "description": "Describes the sso login url for the authentication",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SsoLogins": {
      "description": "Describes the allowed sso logins",
      "items": {
        "$ref": "#/definitions/v1SsoLogin"
      },
      "type": "array",
      "uniqueItems": true
    },
    "v1StorageAccount": {
      "description": "Azure storage account provides a unique namespace for your Azure resources",
      "properties": {
        "id": {
          "description": "Fully qualified resource ID for the resource",
          "type": "string"
        },
        "kind": {
          "description": "The kind of the resource",
          "type": "string"
        },
        "location": {
          "description": "The geo-location where the resource lives",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1StorageAccountEntity": {
      "description": "Azure storage account entity",
      "properties": {
        "id": {
          "description": "Azure storage account id",
          "type": "string"
        },
        "name": {
          "description": "Azure storage account name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1StorageContainer": {
      "description": "Azure storage container organizes a set of blobs, similar to a directory in a file system",
      "properties": {
        "id": {
          "description": "Fully qualified resource ID for the resource.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource",
          "type": "string"
        },
        "type": {
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\"",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1StorageCost": {
      "description": "Cloud storage cost",
      "properties": {
        "discountedUsage": {
          "description": "Cloud storage upper limit which is free.",
          "type": "string"
        },
        "price": {
          "description": "Array of cloud storage range prices",
          "items": {
            "$ref": "#/definitions/v1StoragePrice"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1StoragePrice": {
      "description": "Cloud storage price within an upper limit.",
      "properties": {
        "limit": {
          "description": "Upper limit of cloud storage usage",
          "type": "string"
        },
        "price": {
          "description": "Price of cloud storage type",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1StorageRate": {
      "description": "Storage estimated rate information",
      "properties": {
        "iops": {
          "format": "float64",
          "type": "number"
        },
        "rate": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "sizeGB": {
          "format": "float64",
          "type": "number"
        },
        "throughput": {
          "format": "float64",
          "type": "number"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1StorageType": {
      "description": "Cloud cloud Storage type details",
      "properties": {
        "cost": {
          "$ref": "#/definitions/v1StorageCost"
        },
        "iopsCost": {
          "$ref": "#/definitions/v1StorageCost"
        },
        "kind": {
          "description": "kind of storage type",
          "type": "string"
        },
        "name": {
          "description": "Name of the storage type",
          "type": "string"
        },
        "throughputCost": {
          "$ref": "#/definitions/v1StorageCost"
        }
      },
      "type": "object"
    },
    "v1StripeKey": {
      "description": "Stripe key object",
      "properties": {
        "publishKey": {
          "description": "Publish stripe key",
          "type": "string"
        }
      }
    },
    "v1Subnet": {
      "properties": {
        "cidrBlock": {
          "description": "CidrBlock is the CIDR block to be used when the provider creates a managed Vnet.",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "securityGroupName": {
          "description": "Network Security Group(NSG) to be attached to subnet. NSG for a control plane subnet, should allow inbound to port 6443, as port 6443 is used by kubeadm to bootstrap the control planes",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Subscription": {
      "description": "Azure Subscription Type",
      "properties": {
        "authorizationSource": {
          "description": "The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct and Management",
          "type": "string"
        },
        "displayName": {
          "description": "The subscription display name",
          "type": "string"
        },
        "state": {
          "description": "The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.",
          "type": "string"
        },
        "subscriptionId": {
          "description": "The subscription ID",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SyftDependency": {
      "description": "Compliance Scan Syft Dependency",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1SyftDependencyEntity": {
      "description": "Syft dependency",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1SyftEntity": {
      "description": "Syft response",
      "properties": {
        "report": {
          "$ref": "#/definitions/v1SyftReportEntity"
        },
        "requestUid": {
          "type": "string"
        },
        "status": {
          "enum": [
            "Completed",
            "InProgress",
            "Failed",
            "Initiated"
          ],
          "type": "string"
        }
      },
      "required": [
        "requestUid",
        "status",
        "report"
      ]
    },
    "v1SyftImageContext": {
      "description": "Compliance Scan Syft Image Context",
      "properties": {
        "containerName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "podName": {
          "type": "string"
        }
      }
    },
    "v1SyftReport": {
      "description": "Compliance Scan Syft Report",
      "properties": {
        "dependencies": {
          "items": {
            "$ref": "#/definitions/v1SyftDependency"
          },
          "type": "array"
        },
        "image": {
          "type": "string"
        },
        "imageContexts": {
          "items": {
            "$ref": "#/definitions/v1SyftImageContext"
          },
          "type": "array"
        },
        "isSBOMExist": {
          "type": "boolean"
        },
        "state": {
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        },
        "vulnerabilities": {
          "items": {
            "$ref": "#/definitions/v1SyftVulnerability"
          },
          "type": "array"
        },
        "vulnerabilitySummary": {
          "$ref": "#/definitions/v1SyftVulnerabilitySummary"
        }
      }
    },
    "v1SyftReportEntity": {
      "description": "Syft report",
      "properties": {
        "batchNo": {
          "format": "int32",
          "type": "integer"
        },
        "batchSize": {
          "format": "int32",
          "type": "integer"
        },
        "dependencies": {
          "items": {
            "$ref": "#/definitions/v1SyftDependencyEntity"
          },
          "type": "array"
        },
        "image": {
          "type": "string"
        },
        "imageContexts": {
          "items": {
            "$ref": "#/definitions/v1SyftImageContext"
          },
          "type": "array"
        },
        "sbom": {
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        },
        "vulnerabilities": {
          "items": {
            "$ref": "#/definitions/v1SyftVulnerabilityEntity"
          },
          "type": "array"
        },
        "vulnerabilitySummary": {
          "$ref": "#/definitions/v1SyftVulnerabilitySummaryEntity"
        }
      }
    },
    "v1SyftScanContext": {
      "description": "Compliance Scan Syft Context",
      "properties": {
        "format": {
          "type": "string"
        },
        "labelSelector": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "podName": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "v1SyftVulnerability": {
      "description": "Compliance Scan Syft Vulnerability",
      "properties": {
        "fixedIn": {
          "type": "string"
        },
        "installed": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vulnerability": {
          "type": "string"
        }
      }
    },
    "v1SyftVulnerabilityEntity": {
      "description": "Syft vulnerability",
      "properties": {
        "fixedIn": {
          "type": "string"
        },
        "installed": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vulnerability": {
          "type": "string"
        }
      }
    },
    "v1SyftVulnerabilitySummary": {
      "description": "Compliance Scan Syft Vulnerability Summary",
      "properties": {
        "critical": {
          "format": "int32",
          "type": "integer"
        },
        "high": {
          "format": "int32",
          "type": "integer"
        },
        "low": {
          "format": "int32",
          "type": "integer"
        },
        "medium": {
          "format": "int32",
          "type": "integer"
        },
        "negligible": {
          "format": "int32",
          "type": "integer"
        },
        "unknown": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1SyftVulnerabilitySummaryEntity": {
      "description": "Syft vulnerability summary",
      "properties": {
        "critical": {
          "format": "int32",
          "type": "integer"
        },
        "high": {
          "format": "int32",
          "type": "integer"
        },
        "low": {
          "format": "int32",
          "type": "integer"
        },
        "medium": {
          "format": "int32",
          "type": "integer"
        },
        "negligible": {
          "format": "int32",
          "type": "integer"
        },
        "unknown": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "v1SysLogin": {
      "description": "System admin login input",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "password": {
          "format": "password",
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SysUserToken": {
      "description": "Auth token response",
      "properties": {
        "Authorization": {
          "type": "string"
        },
        "IsEmailSet": {
          "type": "boolean",
          "x-omitempty": false
        },
        "IsEmailVerified": {
          "type": "boolean",
          "x-omitempty": false
        },
        "IsMfa": {
          "type": "boolean",
          "x-omitempty": false
        },
        "IsPasswordReset": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SystemAdmin": {
      "description": "System Admin information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SystemAdministratorSpec"
        },
        "status": {
          "$ref": "#/definitions/v1SystemAdministratorStatus"
        }
      },
      "type": "object"
    },
    "v1SystemAdminActivation": {
      "description": "System Administrator Activation Specification",
      "properties": {
        "expiry": {
          "$ref": "#/definitions/v1Time"
        },
        "link": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemAdminEntity": {
      "description": "System Admin information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1SystemAdministratorSpec"
        }
      },
      "type": "object"
    },
    "v1SystemAdminMfa": {
      "description": "System Administrator MFA configuration",
      "properties": {
        "devices": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemAdminProfile": {
      "description": "System Administrator Profile Entity",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1SystemAdminProfileSpec"
        }
      },
      "type": "object"
    },
    "v1SystemAdminProfileSpec": {
      "description": "System Administrator Profile Specification",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemAdministratorSpec": {
      "description": "System Administrator Entity Specification",
      "properties": {
        "adminType": {
          "enum": [
            "AccountAdmin",
            "OperationAdmin"
          ],
          "type": "string"
        },
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "mfa": {
          "$ref": "#/definitions/v1SystemAdminMfa",
          "type": "string"
        }
      },
      "required": [
        "firstName",
        "lastName",
        "emailId",
        "adminType"
      ],
      "type": "object"
    },
    "v1SystemAdministratorStatus": {
      "description": "System Administrator Status",
      "properties": {
        "activation": {
          "$ref": "#/definitions/v1SystemAdminActivation"
        },
        "createdBy": {
          "type": "string"
        },
        "lastPasswordUpdate": {
          "$ref": "#/definitions/v1Time"
        },
        "lastSignIn": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemAdmins": {
      "description": "List of System Admin information's",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1SystemAdmin"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1SystemAwsAccount": {
      "description": "SystemAdmin",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemAwsSpec"
        }
      },
      "type": "object"
    },
    "v1SystemAwsImage": {
      "description": "SystemAdmin",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemAwsImageSpec"
        }
      },
      "type": "object"
    },
    "v1SystemAwsImageSpec": {
      "description": "system aws account specifications",
      "properties": {
        "goldenImageRegion": {
          "type": "string"
        }
      }
    },
    "v1SystemAwsSpec": {
      "description": "system aws account specifications",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "v1SystemAwsStsAccount": {
      "description": "System AWS Gov account specifications",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "v1SystemAzureAccount": {
      "description": "SystemAdmin",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemAzureSpec"
        }
      },
      "type": "object"
    },
    "v1SystemAzureSpec": {
      "description": "system azure account specifications",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "v1SystemAzureStorage": {
      "description": "SystemAdmin",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemAzureStorageSpec"
        }
      },
      "type": "object"
    },
    "v1SystemAzureStorageSpec": {
      "description": "system aws account specifications",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "container": {
          "type": "string"
        },
        "storageName": {
          "type": "string"
        }
      }
    },
    "v1SystemBackupConfigSpec": {
      "description": "system backup config spec",
      "properties": {
        "ftp": {
          "$ref": "#/definitions/v1SystemFtpSpec"
        },
        "hourOfTheDay": {
          "type": "integer",
          "x-omitempty": false
        },
        "interval": {
          "type": "integer",
          "x-omitempty": false
        },
        "retentionPeriod": {
          "type": "integer",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SystemBackupFtpConfigSpec": {
      "description": "system backup config spec",
      "properties": {
        "backupSpec": {
          "$ref": "#/definitions/v1SystemBackupSpec"
        },
        "ftp": {
          "$ref": "#/definitions/v1SystemFtpSpec"
        }
      },
      "type": "object"
    },
    "v1SystemBackupS3ConfigSpec": {
      "description": "system backup config spec",
      "properties": {
        "backupSpec": {
          "$ref": "#/definitions/v1SystemBackupSpec"
        },
        "s3": {
          "$ref": "#/definitions/v1SystemS3Spec"
        }
      },
      "type": "object"
    },
    "v1SystemBackupSpec": {
      "description": "system backup config spec",
      "properties": {
        "hourOfTheDay": {
          "type": "integer",
          "x-omitempty": false
        },
        "interval": {
          "type": "integer",
          "x-omitempty": false
        },
        "retentionPeriod": {
          "type": "integer",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SystemCertificateSpec": {
      "description": "system smtp config spec",
      "properties": {
        "caCert": {
          "type": "string"
        },
        "crt": {
          "type": "string"
        },
        "insecureSkipVerify": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemCertificatesSpec": {
      "description": "system certificate in base64 format",
      "properties": {
        "caCertificateBase64": {
          "type": "string",
          "x-omitempty": false
        },
        "certificateBase64": {
          "type": "string",
          "x-omitempty": false
        },
        "insecureSkipVerify": {
          "type": "boolean",
          "x-omitempty": false
        },
        "keyBase64": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SystemConfigAuth": {
      "description": "System config auth",
      "properties": {
        "enforceServiceAuthToken": {
          "type": "boolean",
          "x-omitempty": false
        },
        "enforceTlsVerify": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1SystemConfigCluster": {
      "description": "System config cluster",
      "properties": {
        "stableEndpointAccess": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1SystemConfigDomainCertificatesSpec": {
      "description": "system domain and its certificate config spec",
      "properties": {
        "certificates": {
          "$ref": "#/definitions/v1SystemCertificatesSpec"
        },
        "rootDomain": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemConfigDomainSpec": {
      "description": "system domain config spec",
      "properties": {
        "apiServer": {
          "type": "string"
        },
        "derivedApiServer": {
          "type": "string"
        },
        "derivedRootDomain": {
          "type": "string"
        },
        "rootDomain": {
          "type": "string"
        },
        "urlProtocol": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemConfigStoreEntity": {
      "properties": {
        "key": {
          "type": "string",
          "x-omitempty": false
        },
        "value": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "v1SystemCryptoData": {
      "description": "SystemAdmin",
      "properties": {
        "input": {
          "type": "string"
        },
        "result": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemCryptoInput": {
      "description": "SystemAdmin",
      "properties": {
        "input": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemEdgeImage": {
      "description": "SystemAdmin",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemEdgeImageSpec"
        }
      },
      "type": "object"
    },
    "v1SystemEdgeImageSpec": {
      "description": "system edge account specifications",
      "properties": {
        "caCert": {
          "type": "string"
        },
        "imagesHostEndpoint": {
          "type": "string"
        },
        "insecureSkipVerify": {
          "type": "boolean"
        }
      }
    },
    "v1SystemEdgeNativeImage": {
      "description": "SystemAdmin",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemEdgeNativeImageSpec"
        }
      },
      "type": "object"
    },
    "v1SystemEdgeNativeImageSpec": {
      "description": "system edge-native account specifications",
      "properties": {
        "caCert": {
          "type": "string"
        },
        "imagesHostEndpoint": {
          "type": "string"
        },
        "insecureSkipVerify": {
          "type": "boolean"
        },
        "stylusImagesEndpoint": {
          "type": "string"
        }
      }
    },
    "v1SystemFeature": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SystemFeaturesSpec"
        }
      },
      "type": "object"
    },
    "v1SystemFeatures": {
      "properties": {
        "items": {
          "description": "List of system features",
          "items": {
            "$ref": "#/definitions/v1SystemFeature"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1SystemFeaturesOperation": {
      "properties": {
        "isAllowed": {
          "description": "Flag which specifies if feature is allowed or not",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SystemFeaturesSpec": {
      "properties": {
        "description": {
          "description": "Feature description",
          "type": "string"
        },
        "docLink": {
          "description": "Feature doc link",
          "type": "string"
        },
        "isAllowed": {
          "description": "Flag which specifies if feature is allowed or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "key": {
          "description": "Unique Feature key",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemFtpSpec": {
      "description": "system ftp config spec",
      "properties": {
        "dir": {
          "type": "string",
          "x-omitempty": false
        },
        "password": {
          "type": "string",
          "x-omitempty": false
        },
        "server": {
          "type": "string",
          "x-omitempty": false
        },
        "username": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SystemGcpAccount": {
      "description": "SystemAdmin",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemGcpSpec"
        }
      },
      "type": "object"
    },
    "v1SystemGcpImage": {
      "description": "SystemAdmin",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemGcpImageSpec"
        }
      },
      "type": "object"
    },
    "v1SystemGcpImageSpec": {
      "description": "system gcp account specifications",
      "properties": {
        "imageProject": {
          "type": "string"
        }
      }
    },
    "v1SystemGcpSpec": {
      "description": "system gcp account specifications",
      "properties": {
        "json": {
          "type": "string"
        }
      }
    },
    "v1SystemGitAuthSpec": {
      "description": "system git auth account specifications",
      "properties": {
        "_type": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "username": {
          "$ref": "#/definitions/v1SystemGitAuthSpec"
        }
      }
    },
    "v1SystemGithubSsoSpec": {
      "description": "system sso github config spec",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecretKey": {
          "type": "string"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "logoUrl": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SystemKubectlSpec": {
      "description": "system web kubectl config spec",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "isEnabled": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1SystemLibvirtImage": {
      "description": "SystemAdmin",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemLibvirtImageSpec"
        }
      },
      "type": "object"
    },
    "v1SystemLibvirtImageSpec": {
      "description": "system libvirt account specifications",
      "properties": {
        "caCert": {
          "type": "string"
        },
        "imagesHostEndpoint": {
          "type": "string"
        },
        "insecureSkipVerify": {
          "type": "boolean"
        }
      }
    },
    "v1SystemLoggerSpec": {
      "description": "system logger config spec",
      "properties": {
        "format": {
          "type": "string"
        },
        "level": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemMaasImage": {
      "description": "SystemAdmin",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemMaasImageSpec"
        }
      },
      "type": "object"
    },
    "v1SystemMaasImageSpec": {
      "description": "system maas account specifications",
      "properties": {
        "caCert": {
          "type": "string"
        },
        "imagesHostEndpoint": {
          "type": "string"
        },
        "insecureSkipVerify": {
          "type": "boolean"
        }
      }
    },
    "v1SystemOciImageRegistry": {
      "description": "system web kubectl config spec",
      "properties": {
        "baseContentPath": {
          "type": "string"
        },
        "caCert": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "insecureSkipVerify": {
          "type": "boolean"
        },
        "mirrorRegistries": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemOidcClaims": {
      "properties": {
        "Email": {
          "type": "string",
          "x-omitempty": false
        },
        "FirstName": {
          "type": "string",
          "x-omitempty": false
        },
        "LastName": {
          "type": "string",
          "x-omitempty": false
        },
        "SpectroTeam": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SystemOidcClientSpec": {
      "description": "system sso oidc config spec",
      "properties": {
        "callbackUrl": {
          "type": "string",
          "x-omitempty": false
        },
        "clientId": {
          "type": "string",
          "x-omitempty": false
        },
        "clientSecret": {
          "type": "string",
          "x-omitempty": false
        },
        "isEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "issuerUrl": {
          "description": "the issuer is the URL identifier for the service",
          "type": "string",
          "x-omitempty": false
        },
        "logoUrl": {
          "type": "string",
          "x-omitempty": false
        },
        "requiredClaims": {
          "$ref": "#/definitions/v1SystemOidcClaims"
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SystemOpenstackImage": {
      "description": "SystemAdmin",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemOpenstackImageSpec"
        }
      },
      "type": "object"
    },
    "v1SystemOpenstackImageSpec": {
      "description": "system openstack account specifications",
      "properties": {
        "imagesHostEndpoint": {
          "type": "string"
        }
      }
    },
    "v1SystemPasswordPolicySpec": {
      "description": "system password policy",
      "properties": {
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "expiryDurationInDays": {
          "type": "integer"
        },
        "firstReminderInDays": {
          "type": "integer"
        },
        "isRegex": {
          "type": "boolean"
        },
        "minLength": {
          "type": "integer"
        },
        "minNumOfBlockLetters": {
          "type": "integer"
        },
        "minNumOfDigits": {
          "type": "integer"
        },
        "minNumOfSmallLetters": {
          "type": "integer"
        },
        "minNumOfSpecialCharacters": {
          "type": "integer"
        },
        "regex": {
          "type": "string"
        },
        "reminderFrequency": {
          "type": "integer"
        },
        "updateTimestamp": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "type": "object"
    },
    "v1SystemPlan": {
      "description": "system plan",
      "properties": {
        "freeCredits": {
          "items": {
            "$ref": "#/definitions/v1SystemPlanCredit"
          },
          "type": "array"
        },
        "planLimit": {
          "$ref": "#/definitions/v1SystemPlanLimit"
        },
        "slaCredits": {
          "items": {
            "$ref": "#/definitions/v1SystemPlanCredit"
          },
          "type": "array"
        },
        "systemStartDate": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1SystemPlanCredit": {
      "description": "Plan Credit",
      "properties": {
        "cpuCoreHours": {
          "format": "int64",
          "type": "number",
          "x-omitempty": false
        },
        "creditUid": {
          "type": "string"
        },
        "expiry": {
          "$ref": "#/definitions/v1Time",
          "description": "credit expiry time"
        },
        "name": {
          "type": "string"
        },
        "start": {
          "$ref": "#/definitions/v1Time",
          "description": "credit start time"
        },
        "type": {
          "enum": [
            "Pure",
            "Alloy"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "v1SystemPlanLimit": {
      "description": "System Monthly Plan Limit",
      "properties": {
        "alloy": {
          "$ref": "#/definitions/v1SystemPlanLimitSpec"
        },
        "isUnlimited": {
          "description": "is unlimited cpu core hours",
          "type": "boolean",
          "x-omitempty": false
        },
        "pure": {
          "$ref": "#/definitions/v1SystemPlanLimitSpec"
        }
      }
    },
    "v1SystemPlanLimitSpec": {
      "description": "Monthly Plan Limit spec",
      "properties": {
        "cpuCoreHours": {
          "description": "cpu cores hours",
          "format": "int64",
          "type": "integer",
          "x-omitempty": false
        },
        "overageLimitPercentage": {
          "default": 25,
          "description": "overage limit in percentage",
          "format": "int8",
          "type": "integer",
          "x-omitempty": false
        },
        "warnLimitPercentage": {
          "default": 90,
          "description": "warning limit in percentage",
          "format": "int8",
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "v1SystemPlanLimitUpdate": {
      "description": "System Plan limit change update entity",
      "properties": {
        "planLimit": {
          "$ref": "#/definitions/v1SystemPlanLimit"
        }
      }
    },
    "v1SystemProductUsage": {
      "description": "Yearly usage",
      "properties": {
        "allocatedCredits": {
          "description": "Allocated credits",
          "format": "int64",
          "type": "number"
        },
        "breachedCredits": {
          "description": "Credits exceeded the allocated and free credits",
          "format": "float64",
          "type": "number"
        },
        "freeSlaCredits": {
          "description": "Free allocated SLA credits",
          "format": "int64",
          "type": "number"
        },
        "usedCredits": {
          "description": "Used credits",
          "format": "float64",
          "type": "number"
        }
      }
    },
    "v1SystemProxySpec": {
      "description": "system proxy config spec",
      "properties": {
        "httpProxy": {
          "type": "string"
        },
        "httpsProxy": {
          "type": "string"
        },
        "noProxy": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemRateLimit": {
      "description": "system rate-limit",
      "properties": {
        "isActive": {
          "type": "boolean"
        }
      }
    },
    "v1SystemRegistry": {
      "description": "Registry configuration",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1RegistryConf"
        }
      },
      "type": "object"
    },
    "v1SystemResourceLimit": {
      "properties": {
        "kind": {
          "$ref": "#/definitions/v1ResourceLimitType",
          "type": "string",
          "x-omitempty": false
        },
        "limit": {
          "format": "int64",
          "type": "number",
          "x-omitempty": false
        },
        "maxLimit": {
          "format": "int64",
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1SystemResourceLimits": {
      "description": "System resource limits. Supported resources keys are 'user','project','apiKey','team','role','cloudaccount','clusterprofile','workspace','registry','privategateway','location','certificate','macro','sshkey','alert','spectrocluster','edgehost'.",
      "properties": {
        "resources": {
          "items": {
            "$ref": "#/definitions/v1SystemResourceLimit"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1SystemRetentionPolicy": {
      "description": "system retention policy",
      "properties": {
        "retentionPeriod": {
          "type": "integer",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SystemReverseProxy": {
      "description": "system config reverse proxy",
      "properties": {
        "caCert": {
          "type": "string"
        },
        "clientCert": {
          "type": "string"
        },
        "clientKey": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "protocol": {
          "enum": [
            "http",
            "https"
          ],
          "type": "string"
        },
        "server": {
          "type": "string"
        },
        "vHostPort": {
          "type": "integer"
        }
      }
    },
    "v1SystemS3Spec": {
      "description": "system backup s3 storage config spec",
      "properties": {
        "accessKey": {
          "type": "string",
          "x-omitempty": false
        },
        "bucket": {
          "type": "string",
          "x-omitempty": false
        },
        "folder": {
          "type": "string",
          "x-omitempty": false
        },
        "region": {
          "type": "string",
          "x-omitempty": false
        },
        "secretKey": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1SystemScarSpec": {
      "description": "system scar config spec",
      "properties": {
        "baseContentPath": {
          "type": "string"
        },
        "caCert": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "insecureVerify": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemScarValidationResponse": {
      "description": "system proxy config spec",
      "properties": {
        "spectroVersion": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemSecurityMode": {
      "description": "System service mode",
      "properties": {
        "securityMode": {
          "type": "string"
        }
      }
    },
    "v1SystemServiceLogin": {
      "description": "System service login input",
      "properties": {
        "authToken": {
          "description": "authToken helps in two step verification for the authorization.",
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "overlordUid": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "serviceVersion": {
          "type": "string"
        },
        "spectroClusterUid": {
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemSmtpSpec": {
      "description": "system smtp config spec",
      "properties": {
        "fromEmailId": {
          "type": "string"
        },
        "insecureSkipVerifyTls": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        },
        "smtpPort": {
          "type": "integer"
        },
        "smtpServer": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemSsoAuthSpec": {
      "description": "system sso config spec",
      "properties": {
        "github": {
          "$ref": "#/definitions/v1SystemGithubSsoSpec"
        },
        "oidcAuthSpecs": {
          "additionalProperties": {
            "$ref": "#/definitions/v1SystemOidcClientSpec"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1SystemSsoSpec": {
      "description": "system sso config spec",
      "properties": {
        "acsUrlRoot": {
          "type": "string"
        },
        "acsUrlScheme": {
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        },
        "audienceUrl": {
          "type": "string"
        },
        "authSpec": {
          "$ref": "#/definitions/v1SystemSsoAuthSpec"
        },
        "entityId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemStartDate": {
      "description": "system start date",
      "properties": {
        "systemStartDate": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1SystemStorageS3ConfigSpec": {
      "description": "system storage s3 config spec",
      "properties": {
        "isEnabled": {
          "type": "boolean"
        },
        "retentionPolicy": {
          "$ref": "#/definitions/v1SystemRetentionPolicy"
        },
        "s3": {
          "$ref": "#/definitions/v1SystemS3Spec"
        }
      },
      "type": "object"
    },
    "v1SystemTencentAccount": {
      "description": "SystemAdmin",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemTencentSpec"
        }
      },
      "type": "object"
    },
    "v1SystemTencentSpec": {
      "description": "system tencent account specifications",
      "properties": {
        "secretId": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "v1SystemTimeseriesMetrics": {
      "description": "system timeseries metrics config",
      "properties": {
        "archivalInterval": {
          "type": "integer"
        },
        "batchInterval": {
          "type": "integer"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "retentionPeriod": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1SystemTimeseriesSpec": {
      "description": "system timeseries config spec",
      "properties": {
        "machine": {
          "$ref": "#/definitions/v1SystemTimeseriesMetrics"
        },
        "pod": {
          "$ref": "#/definitions/v1SystemTimeseriesMetrics"
        }
      },
      "type": "object"
    },
    "v1SystemUsage": {
      "description": "System usage billing object",
      "properties": {
        "planLimit": {
          "$ref": "#/definitions/v1PlanLimit"
        },
        "usageBillingPeriod": {
          "$ref": "#/definitions/v1InvoiceBillingPeriod"
        },
        "yearlyUsages": {
          "description": "List of every year system usage",
          "items": {
            "$ref": "#/definitions/v1YearlyUsage"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1SystemUserMe": {
      "description": "User information wrt permissions",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1SystemUserSpec"
        },
        "status": {
          "$ref": "#/definitions/v1SystemUserMeStatus"
        }
      },
      "type": "object"
    },
    "v1SystemUserMeStatus": {
      "description": "User status with permissions",
      "properties": {
        "isEmailSet": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isEmailVerified": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isMfaEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isPasswordReset": {
          "type": "boolean",
          "x-omitempty": false
        },
        "lastEmailUpdateTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastEmailVerifiedTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastLoginTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastPasswordUpdateTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1SystemUserSpec": {
      "description": "User specifications",
      "properties": {
        "adminType": {
          "description": "Admin type",
          "type": "string"
        },
        "emailId": {
          "description": "System User's email id",
          "type": "string"
        }
      }
    },
    "v1SystemVersionInfo": {
      "description": "system version info",
      "properties": {
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1SystemVsphereImage": {
      "description": "SystemAdmin",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1SystemVsphereImageSpec"
        }
      },
      "type": "object"
    },
    "v1SystemVsphereImageSpec": {
      "description": "system vsphere account specifications",
      "properties": {
        "caCert": {
          "type": "string"
        },
        "imagesHostEndpoint": {
          "type": "string"
        },
        "insecureSkipVerify": {
          "type": "boolean"
        },
        "overlordOvaLocation": {
          "type": "string"
        }
      }
    },
    "v1TagFilter": {
      "description": "Tag Filter create spec",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1TagFilterSpec"
        }
      },
      "type": "object"
    },
    "v1TagFilterGroup": {
      "properties": {
        "conjunction": {
          "$ref": "#/definitions/v1SearchFilterConjunctionOperator"
        },
        "filters": {
          "items": {
            "$ref": "#/definitions/v1TagFilterItem"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1TagFilterItem": {
      "properties": {
        "key": {
          "type": "string"
        },
        "negation": {
          "type": "boolean"
        },
        "operator": {
          "$ref": "#/definitions/v1SearchFilterKeyValueOperator"
        },
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1TagFilterSpec": {
      "description": "Filter create spec",
      "properties": {
        "filterGroup": {
          "$ref": "#/definitions/v1TagFilterGroup"
        }
      },
      "type": "object"
    },
    "v1TagFilterSummary": {
      "description": "Filter summary object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TagFilterSpec"
        }
      },
      "type": "object"
    },
    "v1Taint": {
      "description": "Taint",
      "properties": {
        "effect": {
          "enum": [
            "NoSchedule",
            "PreferNoSchedule",
            "NoExecute"
          ],
          "type": "string"
        },
        "key": {
          "description": "The taint key to be applied to a node",
          "type": "string"
        },
        "timeAdded": {
          "$ref": "#/definitions/v1Time"
        },
        "value": {
          "description": "The taint value corresponding to the taint key.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Team": {
      "description": "Team information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TeamSpec"
        },
        "status": {
          "$ref": "#/definitions/v1TeamStatus"
        }
      },
      "type": "object"
    },
    "v1TeamPatch": {
      "items": {
        "$ref": "#/definitions/v1HttpPatch"
      },
      "type": "array"
    },
    "v1TeamRoleMap": {
      "properties": {
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "teamId": {
          "type": "string"
        }
      }
    },
    "v1TeamSpec": {
      "description": "Team specifications",
      "properties": {
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "sources": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "users": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1TeamSpecSummary": {
      "properties": {
        "emailId": {
          "type": "string"
        },
        "projects": {
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          },
          "type": "array"
        },
        "roles": {
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          },
          "type": "array"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1TeamStatus": {
      "description": "Team status",
      "type": "object"
    },
    "v1TeamSummary": {
      "description": "Team summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TeamSpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1TeamStatus"
        }
      },
      "type": "object"
    },
    "v1TeamSummarySortFields": {
      "enum": [
        "name",
        "creationTimestamp"
      ],
      "type": "string",
      "x-nullable": true
    },
    "v1TeamSummarySortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1TeamSummarySortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1TeamTenantRolesEntity": {
      "properties": {
        "roles": {
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1TeamTenantRolesUpdate": {
      "properties": {
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1Teams": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1Team"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1TeamsBatch": {
      "items": {
        "$ref": "#/definitions/v1Team"
      },
      "type": "array",
      "uniqueItems": true
    },
    "v1TeamsFilterSpec": {
      "description": "Teams filter spec",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1FilterString"
        }
      }
    },
    "v1TeamsMetadata": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1ObjectEntity"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1TeamsSummary": {
      "description": "Deprecated, Use v1UsersSummaryList - Returns User summary",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1TeamSummary"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1TeamsSummaryList": {
      "description": "Returns Team summary",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1TeamSummary"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1TeamsSummarySpec": {
      "description": "Teams filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1TeamsFilterSpec"
        },
        "sort": {
          "items": {
            "$ref": "#/definitions/v1TeamSummarySortSpec"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1Tenant": {
      "description": "Tenant",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TenantSpec"
        },
        "status": {
          "$ref": "#/definitions/v1TenantStatus"
        }
      },
      "type": "object"
    },
    "v1TenantActivate": {
      "description": "Activate/Deactivate tenant",
      "properties": {
        "isActive": {
          "default": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1TenantActivity": {
      "description": "Active tenant and clusters data",
      "properties": {
        "clustersInfo": {
          "$ref": "#/definitions/v1ClustersInfo"
        },
        "org": {
          "type": "string"
        },
        "planType": {
          "type": "string"
        },
        "totalProjects": {
          "format": "int64",
          "type": "number"
        },
        "totalUsers": {
          "format": "int64",
          "type": "number"
        },
        "uid": {
          "type": "string"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/v1UserActivityInfo"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1TenantAddressPatch": {
      "description": "Tenant Address",
      "properties": {
        "address": {
          "$ref": "#/definitions/v1Address"
        }
      },
      "type": "object"
    },
    "v1TenantAssetCert": {
      "description": "tenant cert",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1Cert"
        }
      },
      "type": "object"
    },
    "v1TenantAssetCerts": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1TenantAssetCert"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1TenantBasicEntity": {
      "description": "Tenant Basic param",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1TenantCleanUpStatus": {
      "description": "Tenant CleanUp Status",
      "properties": {
        "cleanUpError": {
          "type": "string"
        },
        "cleanUpStages": {
          "type": "string"
        },
        "cleanUpTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "cleanedResources": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isCompleted": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isInProgress": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1TenantClusterSettings": {
      "properties": {
        "nodesAutoRemediationSetting": {
          "$ref": "#/definitions/v1NodesAutoRemediationSettings"
        }
      }
    },
    "v1TenantContractSpec": {
      "description": "Tenant contract settings",
      "properties": {
        "acceptedTime": {
          "$ref": "#/definitions/v1Time",
          "description": "If the contract is accepted offline, set the accepted time"
        },
        "isAccepted": {
          "description": "If the contract is accepted offline, then set this field to true",
          "type": "boolean"
        },
        "isRequired": {
          "description": "Is the contract required, for on-prem installation it will be false",
          "type": "boolean"
        }
      },
      "required": [
        "isRequired",
        "isAccepted"
      ],
      "type": "object"
    },
    "v1TenantDomains": {
      "description": "Tenant domains",
      "properties": {
        "domains": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1TenantEmailPatch": {
      "description": "Tenant EmailId",
      "properties": {
        "emailId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1TenantEnableClusterGroup": {
      "description": "Enable or Disable cluster group for a tenant",
      "properties": {
        "hideSystemClusterGroups": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isClusterGroupEnabled": {
          "description": "Deprecated. Use hideSystemClusterGroups field",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1TenantEntity": {
      "description": "Tenant Entity",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TenantSpecEntity"
        }
      },
      "type": "object"
    },
    "v1TenantFreemium": {
      "description": "Tenant freemium configuration",
      "properties": {
        "activeClustersLimit": {
          "type": "integer",
          "x-omitempty": false
        },
        "isFreemium": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isUnlimited": {
          "type": "boolean",
          "x-omitempty": false
        },
        "overageUsageLimit": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "totalUsageLimit": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1TenantFreemiumUsage": {
      "properties": {
        "isFreemium": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isUnlimited": {
          "type": "boolean",
          "x-omitempty": false
        },
        "limit": {
          "$ref": "#/definitions/v1FreemiumUsageLimit"
        },
        "usage": {
          "$ref": "#/definitions/v1FreemiumUsage"
        }
      },
      "type": "object"
    },
    "v1TenantOidcClaims": {
      "properties": {
        "Email": {
          "type": "string",
          "x-omitempty": false
        },
        "FirstName": {
          "type": "string",
          "x-omitempty": false
        },
        "LastName": {
          "type": "string",
          "x-omitempty": false
        },
        "SpectroTeam": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1TenantOidcClientSpec": {
      "description": "Tenant",
      "properties": {
        "callbackUrl": {
          "type": "string",
          "x-omitempty": false
        },
        "clientId": {
          "type": "string",
          "x-omitempty": false
        },
        "clientSecret": {
          "type": "string",
          "x-omitempty": false
        },
        "defaultTeams": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-omitempty": false
        },
        "isSsoEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "issuerTls": {
          "$ref": "#/definitions/v1OidcIssuerTls"
        },
        "issuerUrl": {
          "description": "the issuer is the URL identifier for the service",
          "type": "string",
          "x-omitempty": false
        },
        "logoutUrl": {
          "type": "string",
          "x-omitempty": false
        },
        "requiredClaims": {
          "$ref": "#/definitions/v1TenantOidcClaims"
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-omitempty": false
        },
        "scopesDelimiter": {
          "type": "string",
          "x-omitempty": false
        },
        "syncSsoTeams": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1TenantPasswordPolicyEntity": {
      "description": "Tenant Password Policy Entity",
      "properties": {
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "expiryDurationInDays": {
          "type": "integer"
        },
        "firstReminderInDays": {
          "type": "integer"
        },
        "isRegex": {
          "type": "boolean"
        },
        "minLength": {
          "type": "integer"
        },
        "minNumOfBlockLetters": {
          "type": "integer"
        },
        "minNumOfDigits": {
          "type": "integer"
        },
        "minNumOfSmallLetters": {
          "type": "integer"
        },
        "minNumOfSpecialCharacters": {
          "type": "integer"
        },
        "regex": {
          "type": "string"
        },
        "updateTimestamp": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "type": "object"
    },
    "v1TenantResourceLimit": {
      "properties": {
        "kind": {
          "$ref": "#/definitions/v1ResourceLimitType",
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "limit": {
          "format": "int64",
          "type": "number",
          "x-omitempty": false
        },
        "maxLimit": {
          "format": "int64",
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1TenantResourceLimitEntity": {
      "properties": {
        "kind": {
          "$ref": "#/definitions/v1ResourceLimitType",
          "type": "string",
          "x-omitempty": false
        },
        "limit": {
          "format": "int64",
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1TenantResourceLimits": {
      "description": "Tenant resource limits",
      "properties": {
        "resources": {
          "items": {
            "$ref": "#/definitions/v1TenantResourceLimit"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1TenantResourceLimitsEntity": {
      "description": "Tenant resource limits. Supported resources keys are 'user','project','apiKey','team','role','cloudaccount','clusterprofile','workspace','registry','privategateway','location','certificate','macro','sshkey','alert','spectrocluster','edgehost'.",
      "properties": {
        "resources": {
          "items": {
            "$ref": "#/definitions/v1TenantResourceLimitEntity"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1TenantSamlRequestSpec": {
      "description": "Tenant",
      "properties": {
        "attributes": {
          "items": {
            "$ref": "#/definitions/v1TenantSamlSpecAttribute"
          },
          "type": "array"
        },
        "defaultTeams": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "federationMetadata": {
          "type": "string"
        },
        "identityProvider": {
          "type": "string"
        },
        "isSingleLogoutEnabled": {
          "type": "boolean"
        },
        "isSsoEnabled": {
          "type": "boolean"
        },
        "nameIdFormat": {
          "type": "string"
        },
        "syncSsoTeams": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1TenantSamlSpec": {
      "description": "Tenant",
      "properties": {
        "acsUrl": {
          "type": "string"
        },
        "attributes": {
          "items": {
            "$ref": "#/definitions/v1TenantSamlSpecAttribute"
          },
          "type": "array"
        },
        "audienceUrl": {
          "description": "same as entity id",
          "type": "string"
        },
        "certificate": {
          "description": "certificate for slo",
          "type": "string"
        },
        "defaultTeams": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "entityId": {
          "type": "string"
        },
        "federationMetadata": {
          "type": "string"
        },
        "identityProvider": {
          "type": "string"
        },
        "isSingleLogoutEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isSsoEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "issuer": {
          "description": "same as entity id",
          "type": "string"
        },
        "nameIdFormat": {
          "type": "string"
        },
        "serviceProviderMetadata": {
          "type": "string"
        },
        "singleLogoutUrl": {
          "description": "slo url",
          "type": "string",
          "x-omitempty": false
        },
        "syncSsoTeams": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1TenantSamlSpecAttribute": {
      "properties": {
        "attributeValue": {
          "type": "string"
        },
        "mappedAttribute": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nameFormat": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1TenantSelfSignUpSpec": {
      "description": "Tenant sign up data",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "loginMode": {
          "default": "devops",
          "enum": [
            "dev",
            "devops"
          ],
          "type": "string"
        },
        "notifyTenantAdmin": {
          "type": "boolean"
        },
        "orgName": {
          "type": "string"
        }
      },
      "required": [
        "firstName",
        "lastName",
        "emailId",
        "orgName"
      ],
      "type": "object"
    },
    "v1TenantSpec": {
      "description": "Tenant Spec",
      "properties": {
        "address": {
          "$ref": "#/definitions/v1Address"
        },
        "authType": {
          "type": "string"
        },
        "defaultLoginMode": {
          "type": "string"
        },
        "orgEmailId": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "planUid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1TenantSpecEntity": {
      "description": "Tenant Entity input",
      "properties": {
        "address": {
          "$ref": "#/definitions/v1Address"
        },
        "authType": {
          "type": "string"
        },
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "loginMode": {
          "default": "devops",
          "enum": [
            "dev",
            "devops"
          ],
          "type": "string"
        },
        "orgEmailId": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "ssoApp": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1TenantSsoAuthProvidersEntity": {
      "properties": {
        "isEnabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "ssoLogins": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1TenantStatus": {
      "description": "Tenant Status",
      "properties": {
        "cleanUpStatus": {
          "$ref": "#/definitions/v1TenantCleanUpStatus"
        },
        "isActive": {
          "type": "boolean",
          "x-omitempty": false
        },
        "toBeDeleted": {
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1TenantUpgradeSettingsEntity": {
      "properties": {
        "enableLock": {
          "type": "boolean",
          "x-omitempty": false
        },
        "supportedVersionsRange": {
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "v1TenantUsage": {
      "description": "Tenant usage object",
      "properties": {
        "orgName": {
          "description": "Organization name",
          "type": "string"
        },
        "tenantUid": {
          "description": "Tenant uid",
          "type": "string"
        },
        "usedAlloyCredits": {
          "description": "Credits used by imported clusters",
          "format": "float64",
          "type": "number"
        },
        "usedPureCredits": {
          "description": "Credits used by managed clusters",
          "format": "float64",
          "type": "number"
        }
      }
    },
    "v1Tenants": {
      "description": "Tenants list",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1Tenant"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1TenantsAccountsNas": {
      "properties": {
        "failures": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "success": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1TenantsActivities": {
      "description": "Active tenants and clusters data",
      "properties": {
        "tenants": {
          "additionalProperties": {
            "$ref": "#/definitions/v1TenantActivity"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1TencentAccount": {
      "description": "Tencent cloud account information",
      "properties": {
        "apiVersion": {
          "description": "Cloud account api version",
          "type": "string"
        },
        "kind": {
          "description": "Cloud account kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TencentCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      },
      "type": "object"
    },
    "v1TencentAccounts": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1TencentAccount"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1TencentAvailabilityZone": {
      "description": "Tencent availability zone",
      "properties": {
        "name": {
          "description": "Tencent availability zone name",
          "type": "string"
        },
        "state": {
          "description": "Tencent availability zone state",
          "type": "string"
        },
        "zoneId": {
          "description": "Tencent availability zone id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1TencentAvailabilityZones": {
      "description": "List of Tencent Availability zones",
      "properties": {
        "zones": {
          "items": {
            "$ref": "#/definitions/v1TencentAvailabilityZone"
          },
          "type": "array"
        }
      },
      "required": [
        "zones"
      ],
      "type": "object"
    },
    "v1TencentCloudAccount": {
      "properties": {
        "secretId": {
          "description": "Tencent api secretID",
          "type": "string"
        },
        "secretKey": {
          "description": "Tencent api secret key",
          "type": "string"
        }
      },
      "required": [
        "secretId",
        "secretKey"
      ],
      "type": "object"
    },
    "v1TencentCloudClusterConfigEntity": {
      "description": "Tencent cloud cluster config entity",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1TencentClusterConfig"
        }
      },
      "type": "object"
    },
    "v1TencentCloudConfig": {
      "description": "TencentCloudConfig is the Schema for the tencentcloudconfigs API",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TencentCloudConfigSpec"
        }
      },
      "type": "object"
    },
    "v1TencentCloudConfigSpec": {
      "description": "TencentCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "properties": {
        "cloudAccountRef": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "cloudAccountRef should point to the secret which contains TencentCloudAccount"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1TencentClusterConfig"
        },
        "machinePoolConfig": {
          "items": {
            "$ref": "#/definitions/v1TencentMachinePoolConfig"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1TencentClusterConfig": {
      "description": "Cluster level configuration for tencent cloud and applicable for all the machine pools",
      "properties": {
        "endpointAccess": {
          "$ref": "#/definitions/v1TkeEndpointAccess",
          "description": "Endpoints specifies access to this cluster's control plane endpoints"
        },
        "region": {
          "type": "string"
        },
        "sshKeyIDs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "vpcID": {
          "description": "VPC Id to deploy cluster into should have one public and one private subnet for the the cluster creation, this field is optional, If VPC Id is not provided a fully managed VPC will be created",
          "type": "string"
        }
      },
      "required": [
        "region"
      ],
      "type": "object"
    },
    "v1TencentInstanceTypes": {
      "description": "List of Tencent instance types",
      "properties": {
        "instanceTypes": {
          "items": {
            "$ref": "#/definitions/v1InstanceType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1TencentKeypair": {
      "description": "Tencent Keypair entity",
      "properties": {
        "id": {
          "description": "Tencent keypair id",
          "type": "string"
        },
        "name": {
          "description": "Tencent keypair name",
          "type": "string"
        },
        "publickey": {
          "description": "Tencent public key",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1TencentKeypairs": {
      "description": "List of Tencent keypairs",
      "properties": {
        "keypairs": {
          "items": {
            "$ref": "#/definitions/v1TencentKeypair"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1TencentMachine": {
      "description": "Tencent cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1TencentMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      },
      "type": "object"
    },
    "v1TencentMachinePoolCloudConfigEntity": {
      "properties": {
        "azs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "format": "int64",
          "maximum": 2000,
          "minimum": 1,
          "type": "integer"
        },
        "subnetIds": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"ap-guangzhou-6\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first subnet from the AZ will be picked up for deployment",
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1TencentMachinePoolConfig": {
      "properties": {
        "additionalLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AdditionalLabels",
          "type": "object"
        },
        "additionalTags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object"
        },
        "azs": {
          "description": "AZs is only used for dynamic placement",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instanceConfig": {
          "$ref": "#/definitions/v1InstanceConfig"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "format": "int32",
          "type": "integer"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "format": "int64",
          "type": "integer"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer"
        },
        "subnetIds": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"ap-guangzhou-6\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first subnet from the AZ will be picked up for deployment",
          "type": "object"
        },
        "taints": {
          "description": "control plane or worker taints",
          "items": {
            "$ref": "#/definitions/v1Taint"
          },
          "type": "array"
        },
        "updateStrategy": {
          "$ref": "#/definitions/v1UpdateStrategy",
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1TencentMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1TencentMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      },
      "required": [
        "cloudConfig"
      ],
      "type": "object"
    },
    "v1TencentMachineSpec": {
      "description": "Tencent cloud VM definition spec",
      "properties": {
        "dnsName": {
          "type": "string"
        },
        "imageId": {
          "type": "string"
        },
        "instanceType": {
          "type": "string"
        },
        "nics": {
          "items": {
            "$ref": "#/definitions/v1TencentNic"
          },
          "type": "array"
        },
        "securityGroups": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "subnetId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vpcId": {
          "type": "string"
        },
        "zoneId": {
          "type": "string"
        }
      },
      "required": [
        "nics",
        "instanceType",
        "imageId"
      ],
      "type": "object"
    },
    "v1TencentMachines": {
      "description": "Tencent machine list",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1TencentMachine"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1TencentNic": {
      "description": "Tencent network interface",
      "properties": {
        "index": {
          "format": "int8",
          "type": "integer"
        },
        "privateIPs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "publicIp": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1TencentRegion": {
      "description": "Tencent region entity",
      "properties": {
        "name": {
          "description": "Name of tencent region",
          "type": "string"
        },
        "state": {
          "description": "State of tencent region",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1TencentRegions": {
      "description": "List of tencent regions",
      "properties": {
        "regions": {
          "description": "Tencent regions entity",
          "items": {
            "$ref": "#/definitions/v1TencentRegion"
          },
          "type": "array"
        }
      },
      "required": [
        "regions"
      ],
      "type": "object"
    },
    "v1TencentSecurityGroup": {
      "description": "Tencent Security Group. A security group is a virtual firewall that features stateful data packet filtering",
      "properties": {
        "id": {
          "description": "Tencent security group id",
          "type": "string"
        },
        "isDefault": {
          "description": "Whether it is the default security group, the default security group does not support deletion.",
          "type": "boolean"
        },
        "name": {
          "description": "Tencent security group name",
          "type": "string"
        },
        "projectId": {
          "description": "Tencent security group associated to a project",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1TencentSecurityGroups": {
      "description": "List of Tencent security groups",
      "properties": {
        "groups": {
          "items": {
            "$ref": "#/definitions/v1TencentSecurityGroup"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1TencentStorageTypes": {
      "description": "List of Tencent storage types",
      "properties": {
        "storageTypes": {
          "items": {
            "$ref": "#/definitions/v1StorageType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1TencentSubnet": {
      "description": "Tencent Subnet entity",
      "properties": {
        "az": {
          "description": "Availability zone associated with tencent subnet",
          "type": "string"
        },
        "cidrBlock": {
          "description": "Tencent subnet CIDR. The CIDR notation consists of an IP address, a slash character ('/') and a decimal number from 0 to 32",
          "type": "string"
        },
        "name": {
          "description": "Tencent subnet name",
          "type": "string"
        },
        "subnetId": {
          "description": "Tencent subnet id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1TencentVpc": {
      "description": "Tencent VPC entity",
      "properties": {
        "cidrBlock": {
          "description": "Tencent VPC CIDR. The CIDR notation consists of an IP address, a slash character ('/') and a decimal number from 0 to 32",
          "type": "string"
        },
        "name": {
          "description": "Tencent VPC name",
          "type": "string"
        },
        "subnets": {
          "items": {
            "$ref": "#/definitions/v1TencentSubnet"
          },
          "type": "array"
        },
        "vpcId": {
          "description": "Tencent VPC id",
          "type": "string"
        }
      },
      "required": [
        "vpcId"
      ],
      "type": "object"
    },
    "v1TencentVpcs": {
      "description": "List of Tencent VPCs",
      "properties": {
        "vpcs": {
          "items": {
            "$ref": "#/definitions/v1TencentVpc"
          },
          "type": "array"
        }
      },
      "required": [
        "vpcs"
      ],
      "type": "object"
    },
    "v1TierPrice": {
      "description": "tier price",
      "properties": {
        "alloyPricing": {
          "items": {
            "$ref": "#/definitions/v1PriceRange"
          },
          "type": "array",
          "uniqueItems": true
        },
        "purePricing": {
          "items": {
            "$ref": "#/definitions/v1PriceRange"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "format": "date-time",
      "type": "string"
    },
    "v1TkeEndpointAccess": {
      "description": "TKEEndpointAccess specifies how control plane endpoints are accessible",
      "properties": {
        "IsExtranet": {
          "description": "IsExtranet Whether it is external network access (TRUE external network access FALSE internal network access, default value: FALSE)",
          "type": "boolean"
        },
        "private": {
          "description": "Private points VPC-internal control plane access to the private endpoint",
          "type": "boolean"
        },
        "privateCIDR": {
          "description": "Deprecated. PrivateCIDRs specifies which blocks can access the public endpoint",
          "type": "string"
        },
        "public": {
          "description": "Public controls whether control plane endpoints are publicly accessible",
          "type": "boolean"
        },
        "publicCIDRs": {
          "description": "Deprecated. PublicCIDRs specifies which blocks can access the public endpoint",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "securityGroup": {
          "description": "Tencent security group",
          "type": "string"
        },
        "subnetId": {
          "description": "Tencent Subnet",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1TlsConfiguration": {
      "description": "TLS configuration",
      "properties": {
        "ca": {
          "type": "string"
        },
        "certificate": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false
        },
        "insecureSkipVerify": {
          "type": "boolean",
          "x-omitempty": false
        },
        "key": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1TotalClusterRate": {
      "description": "Cluster total estimated rate information",
      "properties": {
        "compute": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "storage": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        },
        "total": {
          "format": "float64",
          "type": "number",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1TotalResourceUsage": {
      "description": "Total Resource Usage",
      "properties": {
        "projects": {
          "items": {
            "$ref": "#/definitions/v1ProjectResourceUsage"
          },
          "type": "array",
          "uniqueItems": true
        },
        "totalAlloyCpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        },
        "totalPureCpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1TransferJob": {
      "description": "transfer job details",
      "properties": {
        "finishTime": {
          "$ref": "#/definitions/v1Time"
        },
        "folder": {
          "type": "string"
        },
        "isCompleted": {
          "type": "boolean"
        },
        "message": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "startTime": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string"
        },
        "status": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1Uid": {
      "properties": {
        "uid": {
          "type": "string"
        }
      },
      "required": [
        "uid"
      ],
      "type": "object"
    },
    "v1UidRoleSummary": {
      "properties": {
        "inheritedRoles": {
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          },
          "type": "array"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1UidSummary": {
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Uids": {
      "items": {
        "$ref": "#/definitions/v1Uid"
      },
      "type": "array",
      "uniqueItems": true
    },
    "v1UpdateStrategy": {
      "description": "UpdatesStrategy will be used to translate to RollingUpdateStrategy of a MachineDeployment We'll start with default values for the translation, can expose more details later Following is details of parameters translated from the type ScaleOut =\u003e maxSurge=1, maxUnavailable=0 ScaleIn =\u003e maxSurge=0, maxUnavailable=1",
      "properties": {
        "type": {
          "description": "update strategy, either ScaleOut or ScaleIn if empty, will default to RollingUpdateScaleOut",
          "enum": [
            "RollingUpdateScaleOut",
            "RollingUpdateScaleIn"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1UpdateTenantStatus": {
      "description": "Update tenant status",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "stage": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Updated": {
      "description": "The resource was updated successfully"
    },
    "v1UpdatedMsg": {
      "description": "Update response with message",
      "properties": {
        "msg": {
          "type": "string"
        }
      }
    },
    "v1Upgrades": {
      "description": "Upgrades represent the reason of the last upgrade that took place",
      "properties": {
        "reason": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "timestamp": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "type": "object"
    },
    "v1User": {
      "description": "User",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserSpec"
        },
        "status": {
          "$ref": "#/definitions/v1UserStatus"
        }
      },
      "type": "object"
    },
    "v1UserActivateInfo": {
      "properties": {
        "passwordToken": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1UserActivateLink": {
      "properties": {
        "activationLink": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1UserActivityInfo": {
      "description": "Active user data",
      "properties": {
        "lastLogin": {
          "type": "string"
        },
        "lastLoginTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1UserAssetSsh": {
      "description": "SSH key information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetSshSpec"
        }
      },
      "type": "object"
    },
    "v1UserAssetSshEntity": {
      "description": "SSH Key request payload",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetSshSpec"
        }
      },
      "type": "object"
    },
    "v1UserAssetSshSpec": {
      "description": "SSH key specification",
      "properties": {
        "publicKey": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1UserAssetsLocation": {
      "description": "Location object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetsLocationSpec"
        }
      },
      "type": "object"
    },
    "v1UserAssetsLocationAzure": {
      "description": "Azure location object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetsLocationAzureSpec"
        }
      },
      "type": "object"
    },
    "v1UserAssetsLocationAzureSpec": {
      "description": "Azure location specification",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1AzureStorageConfig"
        },
        "isDefault": {
          "description": "Set to 'true', if location has to be set as default",
          "type": "boolean"
        },
        "type": {
          "description": "Azure location type [azure]",
          "type": "string"
        }
      },
      "required": [
        "config"
      ],
      "type": "object"
    },
    "v1UserAssetsLocationGcp": {
      "description": "GCP location object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetsLocationGcpSpec"
        }
      },
      "type": "object"
    },
    "v1UserAssetsLocationGcpSpec": {
      "description": "GCP location specification",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1GcpStorageConfig"
        },
        "isDefault": {
          "description": "Set to 'true', if location has to be set as default",
          "type": "boolean"
        },
        "type": {
          "description": "GCP location type [gcp]",
          "type": "string"
        }
      },
      "required": [
        "config"
      ],
      "type": "object"
    },
    "v1UserAssetsLocationS3": {
      "description": "S3 location object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1UserAssetsLocationS3Spec"
        }
      },
      "type": "object"
    },
    "v1UserAssetsLocationS3Spec": {
      "description": "S3 location specification",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1S3StorageConfig"
        },
        "isDefault": {
          "description": "Set to 'true', if location has to be set as default",
          "type": "boolean"
        },
        "type": {
          "description": "S3 location type [s3/minio]",
          "type": "string"
        }
      },
      "required": [
        "config"
      ],
      "type": "object"
    },
    "v1UserAssetsLocationSpec": {
      "description": "Location specification",
      "properties": {
        "isDefault": {
          "type": "boolean"
        },
        "storage": {
          "$ref": "#/definitions/v1LocationType"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1UserAssetsLocations": {
      "properties": {
        "items": {
          "description": "List of locations",
          "items": {
            "$ref": "#/definitions/v1UserAssetsLocation"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1UserAssetsSsh": {
      "properties": {
        "items": {
          "description": "List of SSH keys",
          "items": {
            "$ref": "#/definitions/v1UserAssetSsh"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1UserAuthenticatedUrl": {
      "description": "Returns the Authenticated redirect Url for the palette oidc",
      "properties": {
        "redirectUrl": {
          "description": "authenticated redirect Url for the palette oidc",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1UserEntity": {
      "description": "User",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserSpecEntity"
        }
      },
      "type": "object"
    },
    "v1UserInfo": {
      "description": "User basic information",
      "properties": {
        "orgName": {
          "description": "Organization name",
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        },
        "userUid": {
          "type": "string"
        }
      }
    },
    "v1UserInfoResponse": {
      "properties": {
        "address": {
          "description": "End-User's preferred postal address",
          "type": "string"
        },
        "birthdate": {
          "description": "End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format",
          "type": "string"
        },
        "email": {
          "description": "End-User's preferred e-mail address",
          "type": "string"
        },
        "email_verified": {
          "description": "User at the time the verification was performed",
          "type": "boolean"
        },
        "family_name": {
          "description": "Surname(s) or last name(s) of the End-User",
          "type": "string"
        },
        "gender": {
          "description": "End-User's gender",
          "type": "string"
        },
        "given_name": {
          "description": "Given name(s) or first name(s) of the End-User",
          "type": "string"
        },
        "locale": {
          "description": "End-User's locale, represented as a BCP47 [RFC5646] language tag",
          "type": "string"
        },
        "middle_name": {
          "description": "Middle name(s) of the End-User",
          "type": "string"
        },
        "name": {
          "description": "End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences",
          "type": "string"
        },
        "nickname": {
          "description": "Casual name of the End-User that may or may not be the same as the given_name",
          "type": "string"
        },
        "phone_number": {
          "description": "End-User's preferred telephone number",
          "type": "string"
        },
        "phone_number_verified": {
          "description": "User at the time the verification was performed",
          "type": "boolean"
        },
        "picture": {
          "description": "URL of the End-User's profile picture",
          "type": "string"
        },
        "preferred_username": {
          "description": "Shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe",
          "type": "string"
        },
        "profile": {
          "description": "URL of the End-User's profile page",
          "type": "string"
        },
        "sub": {
          "description": "Subject - Identifier for the End-User at the Issuer",
          "type": "string"
        },
        "updated_at": {
          "description": "Time the End-User's information was last updated",
          "type": "integer"
        },
        "website": {
          "description": "URL of the End-User's Web page or blog",
          "type": "string"
        },
        "zoneinfo": {
          "description": "String from zoneinfo [zoneinfo] time zone database representing the End-User's time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1UserKubectlSession": {
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "creationTime": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "podIp": {
          "type": "string"
        },
        "podName": {
          "type": "string"
        },
        "port": {
          "type": "string"
        },
        "projectUid": {
          "type": "string"
        },
        "sessionUid": {
          "type": "string"
        },
        "shellyCluster": {
          "type": "string"
        },
        "tenantClusterEndpoint": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "userUid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1UserMe": {
      "description": "User information wrt permissions",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserSpec"
        },
        "status": {
          "$ref": "#/definitions/v1UserMeStatus"
        }
      },
      "type": "object"
    },
    "v1UserMeStatus": {
      "description": "User status with permissions",
      "properties": {
        "activationLink": {
          "description": "Contains activation link for the user",
          "type": "string"
        },
        "isActive": {
          "description": "Specifies if user account is active/disabled",
          "type": "boolean"
        },
        "isContractAccepted": {
          "description": "Specifies if user account has accepted the contract",
          "type": "boolean",
          "x-omitempty": false
        },
        "loginMode": {
          "description": "User's login Mode",
          "type": "string"
        },
        "projectPermissions": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "tenant": {
          "$ref": "#/definitions/v1UserMeTenant",
          "description": "users's tenant information"
        },
        "tenantPermissions": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        }
      }
    },
    "v1UserMeTenant": {
      "properties": {
        "orgName": {
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1UserMeta": {
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "org": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1UserMetaEntity": {
      "description": "User meta entity",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1UserPatch": {
      "items": {
        "$ref": "#/definitions/v1HttpPatch"
      },
      "type": "array"
    },
    "v1UserProfile": {
      "description": "User Profile",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserProfileSpec"
        },
        "status": {
          "$ref": "#/definitions/v1UserProfileStatus"
        }
      },
      "type": "object"
    },
    "v1UserProfileSpec": {
      "description": "User Profile specifications",
      "properties": {
        "emailId": {
          "description": "User's email id",
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      }
    },
    "v1UserProfileStatus": {
      "description": "User Profile status",
      "properties": {
        "lastPasswordPolicyMail": {
          "$ref": "#/definitions/v1Time",
          "description": "user's last password policy time"
        },
        "lastPasswordUpdate": {
          "$ref": "#/definitions/v1Time",
          "description": "user's last password update time"
        }
      }
    },
    "v1UserProfiles": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1UserProfile"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1UserRoleMap": {
      "properties": {
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1UserRoleUIDs": {
      "properties": {
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1UserRolesEntity": {
      "properties": {
        "inheritedRoles": {
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          },
          "type": "array"
        },
        "roles": {
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1UserRsaToken": {
      "description": "Rsa Auth token response",
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1UserSpec": {
      "description": "User specifications",
      "properties": {
        "emailId": {
          "description": "User's email id",
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1UserSpecEntity": {
      "description": "User Entity input",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "loginMode": {
          "type": "string"
        },
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "teams": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1UserSpecSummary": {
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "projects": {
          "description": "Deprecated.",
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          },
          "type": "array"
        },
        "projectsCount": {
          "format": "int32",
          "type": "integer",
          "x-omitempty": false
        },
        "roles": {
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          },
          "type": "array"
        },
        "teams": {
          "items": {
            "$ref": "#/definitions/v1UidSummary"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1UserStatus": {
      "description": "User status",
      "properties": {
        "activationLink": {
          "description": "provides the link to activate or reset the user password",
          "type": "string",
          "x-omitempty": false
        },
        "isActive": {
          "description": "Specifies if user account is active/disabled",
          "type": "boolean",
          "x-omitempty": false
        },
        "isPasswordResetting": {
          "description": "Specifies if user in multi org requested password reset",
          "type": "boolean",
          "x-omitempty": false
        },
        "lastSignIn": {
          "$ref": "#/definitions/v1Time",
          "description": "user's last sign in time"
        }
      }
    },
    "v1UserStatusLoginMode": {
      "properties": {
        "loginMode": {
          "enum": [
            "dev",
            "devops"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1UserSummary": {
      "description": "User summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserSpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1UserStatus"
        }
      },
      "type": "object"
    },
    "v1UserSummarySortFields": {
      "enum": [
        "name",
        "creationTimestamp"
      ],
      "type": "string",
      "x-nullable": true
    },
    "v1UserSummarySortSpec": {
      "properties": {
        "field": {
          "$ref": "#/definitions/v1UserSummarySortFields"
        },
        "order": {
          "$ref": "#/definitions/v1SortOrder"
        }
      }
    },
    "v1UserToken": {
      "description": "Returns the Authorization token. To be used for further api calls",
      "properties": {
        "Authorization": {
          "description": "Describes the authentication token in jwt format.",
          "type": "string"
        },
        "isMfa": {
          "description": "Indicates the authentication flow using MFA",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "type": "object"
    },
    "v1UserUpdateEntity": {
      "description": "User",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1UserUpdateSpecEntity"
        }
      },
      "type": "object"
    },
    "v1UserUpdateSpecEntity": {
      "description": "User Entity input",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "description": "Deprecated. Use 'v1/users/{uid}/roles' API to assign roles.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1Users": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1User"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1UsersFilterSpec": {
      "description": "Users filter spec",
      "properties": {
        "emailId": {
          "$ref": "#/definitions/v1FilterString"
        },
        "name": {
          "$ref": "#/definitions/v1FilterString"
        }
      }
    },
    "v1UsersMetadata": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1UserMetaEntity"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1UsersSummary": {
      "description": "Deprecated, Use v1UsersSummaryList - Returns User summary",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1UserSummary"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1UsersSummaryList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1UserSummary"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1UsersSummarySpec": {
      "description": "Users filter summary spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1UsersFilterSpec"
        },
        "sort": {
          "items": {
            "$ref": "#/definitions/v1UserSummarySortSpec"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1V1SystemAdminEmail": {
      "description": "SystemAdmin",
      "properties": {
        "email": {
          "type": "string"
        },
        "insecureVerify": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1V1SystemAdminPasswordResetEntity": {
      "description": "SystemAdmin",
      "properties": {
        "email": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        },
        "oldPassword": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VMAddVolumeEntity": {
      "properties": {
        "addVolumeOptions": {
          "$ref": "#/definitions/v1VmAddVolumeOptions",
          "description": "Parameters required to add volume to virtual machine/virtual machine instance"
        },
        "dataVolumeTemplate": {
          "$ref": "#/definitions/v1VmDataVolumeTemplateSpec",
          "description": "dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference. DataVolumes in this list are dynamically created for the VirtualMachine and are tied to the VirtualMachine's life-cycle."
        },
        "persist": {
          "description": "If 'true' add the disk to the Virtual Machine \u0026 Virtual Machine Instance, else add the disk to the Virtual Machine Instance only",
          "type": "boolean"
        }
      },
      "required": [
        "addVolumeOptions"
      ],
      "type": "object"
    },
    "v1VMCluster": {
      "description": "VM Dashboard enabled Spectro cluster",
      "properties": {
        "metadata": {
          "properties": {
            "name": {
              "type": "string"
            },
            "projectUid": {
              "type": "string"
            },
            "uid": {
              "type": "string"
            }
          }
        },
        "spec": {
          "description": "Spectro cluster spec",
          "properties": {
            "cloudType": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "status": {
          "description": "Spectro cluster status",
          "properties": {
            "clusterState": {
              "type": "string"
            }
          }
        }
      },
      "type": "object"
    },
    "v1VMClusters": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1VMCluster"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1VMRemoveVolumeEntity": {
      "properties": {
        "persist": {
          "description": "If 'true' remove the disk from the Virtual Machine \u0026 Virtual Machine Instance, else remove the disk from the Virtual Machine Instance only",
          "type": "boolean"
        },
        "removeVolumeOptions": {
          "$ref": "#/definitions/v1VmRemoveVolumeOptions",
          "description": "Parameters required to remove volume from virtual machine/virtual machine instance"
        }
      },
      "required": [
        "removeVolumeOptions"
      ],
      "type": "object"
    },
    "v1Variable": {
      "description": "Unique variable field with schema definition",
      "properties": {
        "defaultValue": {
          "description": "The default value of the variable",
          "type": "string"
        },
        "description": {
          "description": "Variable description",
          "type": "string"
        },
        "displayName": {
          "description": "Unique display name of the variable",
          "type": "string"
        },
        "format": {
          "$ref": "#/definitions/v1VariableFormat"
        },
        "hidden": {
          "description": "If true, then variable will be hidden for overriding the value. By default the hidden flag will be set to false",
          "type": "boolean",
          "x-omitempty": false
        },
        "immutable": {
          "description": "If true, then variable value can't be editable. By default the immutable flag will be set to false",
          "type": "boolean",
          "x-omitempty": false
        },
        "isSensitive": {
          "description": "If true, then default value will be masked. By default the isSensitive flag will be set to false",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "description": "Variable name",
          "type": "string"
        },
        "regex": {
          "description": "Regular expression pattern which the variable value must match",
          "type": "string"
        },
        "required": {
          "description": "Flag to specify if the variable is optional or mandatory. If it is mandatory then default value must be provided",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1VariableFormat": {
      "default": "string",
      "description": "Format type of the variable value",
      "enum": [
        "string",
        "number",
        "boolean",
        "ipv4",
        "ipv4cidr",
        "ipv6",
        "version"
      ],
      "type": "string"
    },
    "v1VariableNames": {
      "properties": {
        "variables": {
          "description": "Array of variable names",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "variables"
      ]
    },
    "v1Variables": {
      "properties": {
        "variables": {
          "description": "List of unique variable fields with schema constraints",
          "items": {
            "$ref": "#/definitions/v1Variable"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1Virtual": {
      "properties": {
        "appDeployments": {
          "description": "list of apps deployed on the virtual cluster",
          "items": {
            "$ref": "#/definitions/v1ObjectResReference"
          },
          "type": "array"
        },
        "clusterGroup": {
          "$ref": "#/definitions/v1ObjectResReference",
          "description": "cluster group details of virtual cluster"
        },
        "hostCluster": {
          "$ref": "#/definitions/v1ObjectResReference",
          "description": "host cluster reference"
        },
        "lifecycleStatus": {
          "$ref": "#/definitions/v1LifecycleStatus",
          "description": "cluster life cycle status of virtual cluster"
        },
        "state": {
          "description": "cluster virtual host status",
          "type": "string"
        },
        "virtualClusters": {
          "description": "list of virtual clusters deployed on the cluster",
          "items": {
            "$ref": "#/definitions/v1ObjectResReference"
          },
          "type": "array"
        }
      }
    },
    "v1VirtualCloudClusterConfigEntity": {
      "description": "Virtual cloud cluster config entity",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1VirtualClusterConfig"
        }
      },
      "type": "object"
    },
    "v1VirtualCloudConfig": {
      "description": "VirtualCloudConfig is the Schema for the virtual cloudconfigs API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VirtualCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1NestedCloudConfigStatus"
        }
      },
      "type": "object"
    },
    "v1VirtualCloudConfigSpec": {
      "description": "VirtualCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec for cluster-api.",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1VirtualClusterConfig"
        },
        "hostClusterUid": {
          "type": "string"
        },
        "machinePoolConfig": {
          "items": {
            "$ref": "#/definitions/v1VirtualMachinePoolConfig"
          },
          "type": "array"
        }
      },
      "required": [
        "clusterConfig",
        "hostClusterUid",
        "machinePoolConfig"
      ],
      "type": "object"
    },
    "v1VirtualClusterConfig": {
      "description": "Cluster level configuration for virtual cluster",
      "properties": {
        "controlPlaneEndpoint": {
          "$ref": "#/definitions/v1APIEndpoint"
        },
        "helmRelease": {
          "$ref": "#/definitions/v1VirtualClusterHelmRelease"
        },
        "kubernetesVersion": {
          "default": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VirtualClusterHelmChart": {
      "properties": {
        "name": {
          "default": "",
          "type": "string"
        },
        "repo": {
          "default": "",
          "type": "string"
        },
        "version": {
          "default": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VirtualClusterHelmRelease": {
      "properties": {
        "chart": {
          "$ref": "#/definitions/v1VirtualClusterHelmChart"
        },
        "values": {
          "default": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VirtualClusterResize": {
      "properties": {
        "instanceType": {
          "$ref": "#/definitions/v1VirtualInstanceType"
        }
      },
      "required": [
        "instanceType"
      ],
      "type": "object"
    },
    "v1VirtualInstanceType": {
      "properties": {
        "maxCPU": {
          "description": "Maximum CPU cores",
          "format": "int32",
          "type": "integer"
        },
        "maxMemInMiB": {
          "description": "Maximum memory in MiB",
          "format": "int32",
          "type": "integer"
        },
        "maxStorageGiB": {
          "description": "Maximum storage in GiB",
          "format": "int32",
          "type": "integer"
        },
        "minCPU": {
          "description": "Minimum CPU cores",
          "format": "int32",
          "type": "integer"
        },
        "minMemInMiB": {
          "description": "Minimum memory in MiB",
          "format": "int32",
          "type": "integer"
        },
        "minStorageGiB": {
          "description": "Minimum storage in GiB",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1VirtualMachine": {
      "description": "Virtual cloud machine definition",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VirtualMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      },
      "type": "object"
    },
    "v1VirtualMachinePoolCloudConfigEntity": {
      "properties": {
        "instanceType": {
          "$ref": "#/definitions/v1VirtualInstanceType"
        }
      },
      "required": [
        "instanceType"
      ],
      "type": "object"
    },
    "v1VirtualMachinePoolConfig": {
      "properties": {
        "additionalLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "additionalLabels",
          "type": "object"
        },
        "additionalTags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object"
        },
        "azs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instanceType": {
          "$ref": "#/definitions/v1VirtualInstanceType",
          "description": "InstanceType defines the required CPU, Memory"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "resourcePool": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer"
        },
        "taints": {
          "description": "control plane or worker taints",
          "items": {
            "$ref": "#/definitions/v1Taint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updateStrategy": {
          "$ref": "#/definitions/v1UpdateStrategy",
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean"
        }
      },
      "required": [
        "instanceType"
      ],
      "type": "object"
    },
    "v1VirtualMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1VirtualMachinePoolCloudConfigEntity"
        }
      },
      "required": [
        "cloudConfig"
      ],
      "type": "object"
    },
    "v1VirtualMachineSnapshot": {
      "description": "VirtualMachineSnapshot defines the operation of snapshotting a VM",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1VmObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VirtualMachineSnapshotSpec"
        },
        "status": {
          "$ref": "#/definitions/v1VirtualMachineSnapshotStatus"
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "v1VirtualMachineSnapshotList": {
      "description": "VirtualMachineSnapshotList is a list of VirtualMachineSnapshot resources",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/v1VirtualMachineSnapshot"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1VmListMeta"
        }
      },
      "required": [
        "metadata",
        "items"
      ],
      "type": "object"
    },
    "v1VirtualMachineSnapshotSpec": {
      "description": "VirtualMachineSnapshotSpec is the spec for a VirtualMachineSnapshot resource",
      "properties": {
        "deletionPolicy": {
          "type": "string"
        },
        "failureDeadline": {
          "$ref": "#/definitions/v1VmDuration"
        },
        "source": {
          "$ref": "#/definitions/v1VmTypedLocalObjectReference"
        }
      },
      "required": [
        "source"
      ],
      "type": "object"
    },
    "v1VirtualMachineSnapshotStatus": {
      "description": "VirtualMachineSnapshotStatus is the status for a VirtualMachineSnapshot resource",
      "properties": {
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1VmCondition"
          },
          "type": "array"
        },
        "creationTime": {
          "$ref": "#/definitions/v1Time"
        },
        "error": {
          "$ref": "#/definitions/v1VmError"
        },
        "indications": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "phase": {
          "type": "string"
        },
        "readyToUse": {
          "type": "boolean"
        },
        "snapshotVolumes": {
          "$ref": "#/definitions/v1VmSnapshotVolumesLists"
        },
        "sourceUID": {
          "type": "string"
        },
        "virtualMachineSnapshotContentName": {
          "type": "string"
        }
      },
      "type": "object",
      "x-nullable": true
    },
    "v1VirtualMachineSpec": {
      "description": "Virtual cloud machine definition spec",
      "properties": {
        "hostname": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VirtualMachines": {
      "description": "List of virtual machines",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1VirtualMachine"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1VirtualNetwork": {
      "description": "Azure virtual network is the fundamental building block for your private network in Azure.",
      "properties": {
        "addressSpaces": {
          "description": "Location of the virtual network",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "id": {
          "description": "The ID of the resource group",
          "type": "string"
        },
        "location": {
          "description": "Location of the virtual network",
          "type": "string"
        },
        "name": {
          "description": "Name of the virtual network",
          "type": "string"
        },
        "subnets": {
          "description": "List of subnets associated with Azure VPC",
          "items": {
            "$ref": "#/definitions/v1Subnet"
          },
          "type": "array"
        },
        "type": {
          "description": "Type of the virtual network",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmAccessCredential": {
      "description": "AccessCredential represents a credential source that can be used to authorize remote access to the vm guest Only one of its members may be specified.",
      "properties": {
        "sshPublicKey": {
          "$ref": "#/definitions/v1VmSshPublicKeyAccessCredential"
        },
        "userPassword": {
          "$ref": "#/definitions/v1VmUserPasswordAccessCredential"
        }
      },
      "type": "object"
    },
    "v1VmAccessCredentialSecretSource": {
      "properties": {
        "secretName": {
          "description": "SecretName represents the name of the secret in the VMI's namespace",
          "type": "string"
        }
      },
      "required": [
        "secretName"
      ],
      "type": "object"
    },
    "v1VmAddVolumeOptions": {
      "description": "AddVolumeOptions is provided when dynamically hot plugging a volume and disk",
      "properties": {
        "disk": {
          "$ref": "#/definitions/v1VmDisk"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "name": {
          "description": "Name represents the name that will be used to map the disk to the corresponding volume. This overrides any name set inside the Disk struct itself.",
          "type": "string"
        },
        "volumeSource": {
          "$ref": "#/definitions/v1VmHotplugVolumeSource"
        }
      },
      "required": [
        "name",
        "disk",
        "volumeSource"
      ],
      "type": "object"
    },
    "v1VmAffinity": {
      "description": "Affinity is a group of affinity scheduling rules.",
      "properties": {
        "nodeAffinity": {
          "$ref": "#/definitions/v1VmNodeAffinity"
        },
        "podAffinity": {
          "$ref": "#/definitions/v1VmPodAffinity"
        },
        "podAntiAffinity": {
          "$ref": "#/definitions/v1PodAntiAffinity"
        }
      },
      "type": "object"
    },
    "v1VmBIOS": {
      "description": "If set (default), BIOS will be used.",
      "properties": {
        "useSerial": {
          "description": "If set, the BIOS output will be transmitted over serial",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1VmBlockSize": {
      "description": "BlockSize provides the option to change the block size presented to the VM for a disk. Only one of its members may be specified.",
      "properties": {
        "custom": {
          "$ref": "#/definitions/v1VmCustomBlockSize"
        },
        "matchVolume": {
          "$ref": "#/definitions/v1VmFeatureState"
        }
      },
      "type": "object"
    },
    "v1VmBootloader": {
      "description": "Represents the firmware blob used to assist in the domain creation process. Used for setting the QEMU BIOS file path for the libvirt domain.",
      "properties": {
        "bios": {
          "$ref": "#/definitions/v1VmBIOS"
        },
        "efi": {
          "$ref": "#/definitions/v1VmEFI"
        }
      },
      "type": "object"
    },
    "v1VmCDRomTarget": {
      "properties": {
        "bus": {
          "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi.",
          "type": "string"
        },
        "readonly": {
          "description": "ReadOnly. Defaults to true.",
          "type": "boolean"
        },
        "tray": {
          "description": "Tray indicates if the tray of the device is open or closed. Allowed values are \"open\" and \"closed\". Defaults to closed.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmChassis": {
      "description": "Chassis specifies the chassis info passed to the domain.",
      "properties": {
        "asset": {
          "type": "string"
        },
        "manufacturer": {
          "type": "string"
        },
        "serial": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmClientPassthroughDevices": {
      "description": "Represent a subset of client devices that can be accessed by VMI. At the moment only, USB devices using Usbredir's library and tooling. Another fit would be a smartcard with libcacard.\n\nThe struct is currently empty as there is no immediate request for user-facing APIs. This structure simply turns on USB redirection of UsbClientPassthroughMaxNumberOf devices.",
      "type": "object"
    },
    "v1VmClock": {
      "description": "Represents the clock and timers of a vmi.",
      "properties": {
        "timer": {
          "$ref": "#/definitions/v1VmTimer"
        },
        "timezone": {
          "description": "Timezone sets the guest clock to the specified timezone. Zone name follows the TZ environment variable format (e.g. 'America/New_York').",
          "type": "string"
        },
        "utc": {
          "$ref": "#/definitions/v1VmClockOffsetUTC"
        }
      },
      "type": "object"
    },
    "v1VmClockOffsetUTC": {
      "description": "UTC sets the guest clock to UTC on each boot.",
      "properties": {
        "offsetSeconds": {
          "description": "OffsetSeconds specifies an offset in seconds, relative to UTC. If set, guest changes to the clock will be kept during reboots and not reset.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1VmCloudInitConfigDriveSource": {
      "description": "Represents a cloud-init config drive user data source. More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html",
      "properties": {
        "networkData": {
          "description": "NetworkData contains config drive inline cloud-init networkdata.",
          "type": "string"
        },
        "networkDataBase64": {
          "description": "NetworkDataBase64 contains config drive cloud-init networkdata as a base64 encoded string.",
          "type": "string"
        },
        "networkDataSecretRef": {
          "$ref": "#/definitions/v1VmLocalObjectReference"
        },
        "secretRef": {
          "$ref": "#/definitions/v1VmLocalObjectReference"
        },
        "userData": {
          "description": "UserData contains config drive inline cloud-init userdata.",
          "type": "string"
        },
        "userDataBase64": {
          "description": "UserDataBase64 contains config drive cloud-init userdata as a base64 encoded string.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmCloudInitNoCloudSource": {
      "description": "Represents a cloud-init nocloud user data source. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html",
      "properties": {
        "networkData": {
          "description": "NetworkData contains NoCloud inline cloud-init networkdata.",
          "type": "string"
        },
        "networkDataBase64": {
          "description": "NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded string.",
          "type": "string"
        },
        "networkDataSecretRef": {
          "$ref": "#/definitions/v1VmLocalObjectReference"
        },
        "secretRef": {
          "$ref": "#/definitions/v1VmLocalObjectReference"
        },
        "userData": {
          "description": "UserData contains NoCloud inline cloud-init userdata.",
          "type": "string"
        },
        "userDataBase64": {
          "description": "UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmCondition": {
      "description": "Condition defines conditions",
      "properties": {
        "lastProbeTime": {
          "type": "string"
        },
        "lastTransitionTime": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "v1VmConfigDriveSshPublicKeyAccessCredentialPropagation": {
      "type": "object"
    },
    "v1VmConfigMapVolumeSource": {
      "description": "ConfigMapVolumeSource adapts a ConfigMap into a volume. More info: https://kubernetes.io/docs/concepts/storage/volumes/#configmap",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or it's keys must be defined",
          "type": "boolean"
        },
        "volumeLabel": {
          "description": "The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmContainerDiskSource": {
      "description": "Represents a docker image with an embedded disk.",
      "properties": {
        "image": {
          "description": "Image is the name of the image with the embedded disk.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
          "type": "string"
        },
        "imagePullSecret": {
          "description": "ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.",
          "type": "string"
        },
        "path": {
          "description": "Path defines the path to disk file in the container",
          "type": "string"
        }
      },
      "required": [
        "image"
      ],
      "type": "object"
    },
    "v1VmCoreDataVolumeSource": {
      "properties": {
        "hotpluggable": {
          "description": "Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.",
          "type": "boolean"
        },
        "name": {
          "description": "Name of both the DataVolume and the PVC in the same namespace. After PVC population the DataVolume is garbage collected by default.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1VmCoreResourceRequirements": {
      "description": "ResourceRequirements describes the compute resource requirements.",
      "properties": {
        "limits": {
          "additionalProperties": {
            "$ref": "#/definitions/v1VmQuantity"
          },
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object"
        },
        "requests": {
          "additionalProperties": {
            "$ref": "#/definitions/v1VmQuantity"
          },
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1VmCpu": {
      "description": "CPU allows specifying the CPU topology.",
      "properties": {
        "cores": {
          "description": "Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.",
          "format": "int64",
          "type": "integer"
        },
        "dedicatedCpuPlacement": {
          "description": "DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it.",
          "type": "boolean"
        },
        "features": {
          "description": "Features specifies the CPU features list inside the VMI.",
          "items": {
            "$ref": "#/definitions/v1VmCpuFeature"
          },
          "type": "array"
        },
        "isolateEmulatorThread": {
          "description": "IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place the emulator thread on it.",
          "type": "boolean"
        },
        "model": {
          "description": "Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like \"host-passthrough\" to get the same CPU as the node and \"host-model\" to get CPU closest to the node one. Defaults to host-model.",
          "type": "string"
        },
        "numa": {
          "$ref": "#/definitions/v1VmNUMA"
        },
        "realtime": {
          "$ref": "#/definitions/v1VmRealtime"
        },
        "sockets": {
          "description": "Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.",
          "format": "int64",
          "type": "integer"
        },
        "threads": {
          "description": "Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1VmCpuFeature": {
      "description": "CPUFeature allows specifying a CPU feature.",
      "properties": {
        "name": {
          "description": "Name of the CPU feature",
          "type": "string"
        },
        "policy": {
          "description": "Policy is the CPU feature attribute which can have the following attributes: force    - The virtual CPU will claim the feature is supported regardless of it being supported by host CPU. require  - Guest creation will fail unless the feature is supported by the host CPU or the hypervisor is able to emulate it. optional - The feature will be supported by virtual CPU if and only if it is supported by host CPU. disable  - The feature will not be supported by virtual CPU. forbid   - Guest creation will fail if the feature is supported by host CPU. Defaults to require",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1VmCustomBlockSize": {
      "description": "CustomBlockSize represents the desired logical and physical block size for a VM disk.",
      "properties": {
        "logical": {
          "format": "int32",
          "type": "integer"
        },
        "physical": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "logical",
        "physical"
      ],
      "type": "object"
    },
    "v1VmDHCPOptions": {
      "description": "Extra DHCP options to use in the interface.",
      "properties": {
        "bootFileName": {
          "description": "If specified will pass option 67 to interface's DHCP server",
          "type": "string"
        },
        "ntpServers": {
          "description": "If specified will pass the configured NTP server to the VM via DHCP option 042.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "privateOptions": {
          "description": "If specified will pass extra DHCP options for private use, range: 224-254",
          "items": {
            "$ref": "#/definitions/v1VmDHCPPrivateOptions"
          },
          "type": "array"
        },
        "tftpServerName": {
          "description": "If specified will pass option 66 to interface's DHCP server",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmDHCPPrivateOptions": {
      "description": "DHCPExtraOptions defines Extra DHCP options for a VM.",
      "properties": {
        "option": {
          "description": "Option is an Integer value from 224-254 Required.",
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "description": "Value is a String value for the Option provided Required.",
          "type": "string"
        }
      },
      "required": [
        "option",
        "value"
      ],
      "type": "object"
    },
    "v1VmDataVolumeBlankImage": {
      "description": "DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC",
      "type": "object"
    },
    "v1VmDataVolumeCheckpoint": {
      "description": "DataVolumeCheckpoint defines a stage in a warm migration.",
      "properties": {
        "current": {
          "description": "Current is the identifier of the snapshot created for this checkpoint.",
          "type": "string"
        },
        "previous": {
          "description": "Previous is the identifier of the snapshot from the previous checkpoint.",
          "type": "string"
        }
      },
      "required": [
        "previous",
        "current"
      ],
      "type": "object"
    },
    "v1VmDataVolumeSource": {
      "description": "DataVolumeSource represents the source for our Data Volume, this can be HTTP, Imageio, S3, Registry or an existing PVC",
      "properties": {
        "blank": {
          "$ref": "#/definitions/v1VmDataVolumeBlankImage"
        },
        "http": {
          "$ref": "#/definitions/v1VmDataVolumeSourceHttp"
        },
        "imageio": {
          "$ref": "#/definitions/v1VmDataVolumeSourceImageIO"
        },
        "pvc": {
          "$ref": "#/definitions/v1VmDataVolumeSourcePVC"
        },
        "registry": {
          "$ref": "#/definitions/v1VmDataVolumeSourceRegistry"
        },
        "s3": {
          "$ref": "#/definitions/v1VmDataVolumeSourceS3"
        },
        "upload": {
          "$ref": "#/definitions/v1VmDataVolumeSourceUpload"
        },
        "vddk": {
          "$ref": "#/definitions/v1VmDataVolumeSourceVDDK"
        }
      },
      "type": "object"
    },
    "v1VmDataVolumeSourceHttp": {
      "description": "DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs",
      "properties": {
        "certConfigMap": {
          "description": "CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate",
          "type": "string"
        },
        "extraHeaders": {
          "description": "ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "secretExtraHeaders": {
          "description": "SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "secretRef": {
          "description": "SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded",
          "type": "string"
        },
        "url": {
          "description": "URL is the URL of the http(s) endpoint",
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "v1VmDataVolumeSourceImageIO": {
      "description": "DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source",
      "properties": {
        "certConfigMap": {
          "description": "CertConfigMap provides a reference to the CA cert",
          "type": "string"
        },
        "diskId": {
          "description": "DiskID provides id of a disk to be imported",
          "type": "string"
        },
        "secretRef": {
          "description": "SecretRef provides the secret reference needed to access the ovirt-engine",
          "type": "string"
        },
        "url": {
          "description": "URL is the URL of the ovirt-engine",
          "type": "string"
        }
      },
      "required": [
        "url",
        "diskId"
      ],
      "type": "object"
    },
    "v1VmDataVolumeSourcePVC": {
      "description": "DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC",
      "properties": {
        "name": {
          "description": "The name of the source PVC",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the source PVC",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "name"
      ],
      "type": "object"
    },
    "v1VmDataVolumeSourceRef": {
      "description": "DataVolumeSourceRef defines an indirect reference to the source of data for the DataVolume",
      "properties": {
        "kind": {
          "description": "The kind of the source reference, currently only \"DataSource\" is supported",
          "type": "string"
        },
        "name": {
          "description": "The name of the source reference",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the source reference, defaults to the DataVolume namespace",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "v1VmDataVolumeSourceRegistry": {
      "description": "DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source",
      "properties": {
        "certConfigMap": {
          "description": "CertConfigMap provides a reference to the Registry certs",
          "type": "string"
        },
        "imageStream": {
          "description": "ImageStream is the name of image stream for import",
          "type": "string"
        },
        "pullMethod": {
          "description": "PullMethod can be either \"pod\" (default import), or \"node\" (node docker cache based import)",
          "type": "string"
        },
        "secretRef": {
          "description": "SecretRef provides the secret reference needed to access the Registry source",
          "type": "string"
        },
        "url": {
          "description": "URL is the url of the registry source (starting with the scheme: docker, oci-archive)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmDataVolumeSourceS3": {
      "description": "DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source",
      "properties": {
        "certConfigMap": {
          "description": "CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate",
          "type": "string"
        },
        "secretRef": {
          "description": "SecretRef provides the secret reference needed to access the S3 source",
          "type": "string"
        },
        "url": {
          "description": "URL is the url of the S3 source",
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "v1VmDataVolumeSourceUpload": {
      "description": "DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source",
      "type": "object"
    },
    "v1VmDataVolumeSourceVDDK": {
      "description": "DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source",
      "properties": {
        "backingFile": {
          "description": "BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi",
          "type": "string"
        },
        "initImageURL": {
          "description": "InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map",
          "type": "string"
        },
        "secretRef": {
          "description": "SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host",
          "type": "string"
        },
        "thumbprint": {
          "description": "Thumbprint is the certificate thumbprint of the vCenter or ESXi host",
          "type": "string"
        },
        "url": {
          "description": "URL is the URL of the vCenter or ESXi host with the VM to migrate",
          "type": "string"
        },
        "uuid": {
          "description": "UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmDataVolumeSpec": {
      "description": "DataVolumeSpec defines the DataVolume type specification",
      "properties": {
        "checkpoints": {
          "description": "Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.",
          "items": {
            "$ref": "#/definitions/v1VmDataVolumeCheckpoint"
          },
          "type": "array"
        },
        "contentType": {
          "description": "DataVolumeContentType options: \"kubevirt\", \"archive\"",
          "type": "string"
        },
        "finalCheckpoint": {
          "description": "FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.",
          "type": "boolean"
        },
        "preallocation": {
          "description": "Preallocation controls whether storage for DataVolumes should be allocated in advance.",
          "type": "boolean"
        },
        "priorityClassName": {
          "description": "PriorityClassName for Importer, Cloner and Uploader pod",
          "type": "string"
        },
        "pvc": {
          "$ref": "#/definitions/v1VmPersistentVolumeClaimSpec"
        },
        "source": {
          "$ref": "#/definitions/v1VmDataVolumeSource"
        },
        "sourceRef": {
          "$ref": "#/definitions/v1VmDataVolumeSourceRef"
        },
        "storage": {
          "$ref": "#/definitions/v1VmStorageSpec"
        }
      },
      "type": "object"
    },
    "v1VmDataVolumeTemplateSpec": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1VmObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VmDataVolumeSpec"
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "v1VmDevices": {
      "properties": {
        "autoattachGraphicsDevice": {
          "description": "Whether to attach the default graphics device or not. VNC will not be available if set to false. Defaults to true.",
          "type": "boolean"
        },
        "autoattachInputDevice": {
          "description": "Whether to attach an Input Device. Defaults to false.",
          "type": "boolean"
        },
        "autoattachMemBalloon": {
          "description": "Whether to attach the Memory balloon device with default period. Period can be adjusted in virt-config. Defaults to true.",
          "type": "boolean"
        },
        "autoattachPodInterface": {
          "description": "Whether to attach a pod network interface. Defaults to true.",
          "type": "boolean"
        },
        "autoattachSerialConsole": {
          "description": "Whether to attach the default serial console or not. Serial console access will not be available if set to false. Defaults to true.",
          "type": "boolean"
        },
        "autoattachVSOCK": {
          "description": "Whether to attach the VSOCK CID to the VM or not. VSOCK access will be available if set to true. Defaults to false.",
          "type": "boolean"
        },
        "blockMultiQueue": {
          "description": "Whether or not to enable virtio multi-queue for block devices. Defaults to false.",
          "type": "boolean"
        },
        "clientPassthrough": {
          "$ref": "#/definitions/v1VmClientPassthroughDevices"
        },
        "disableHotplug": {
          "description": "DisableHotplug disabled the ability to hotplug disks.",
          "type": "boolean"
        },
        "disks": {
          "description": "Disks describes disks, cdroms and luns which are connected to the vmi.",
          "items": {
            "$ref": "#/definitions/v1VmDisk"
          },
          "type": "array"
        },
        "filesystems": {
          "description": "Filesystems describes filesystem which is connected to the vmi.",
          "items": {
            "$ref": "#/definitions/v1VmFilesystem"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "gpus": {
          "description": "Whether to attach a GPU device to the vmi.",
          "items": {
            "$ref": "#/definitions/v1VmGPU"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "hostDevices": {
          "description": "Whether to attach a host device to the vmi.",
          "items": {
            "$ref": "#/definitions/v1VmHostDevice"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "inputs": {
          "description": "Inputs describe input devices",
          "items": {
            "$ref": "#/definitions/v1VmInput"
          },
          "type": "array"
        },
        "interfaces": {
          "description": "Interfaces describe network interfaces which are added to the vmi.",
          "items": {
            "$ref": "#/definitions/v1VmInterface"
          },
          "type": "array"
        },
        "networkInterfaceMultiqueue": {
          "description": "If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.",
          "type": "boolean"
        },
        "rng": {
          "$ref": "#/definitions/v1VmRng"
        },
        "sound": {
          "$ref": "#/definitions/v1VmSoundDevice"
        },
        "tpm": {
          "$ref": "#/definitions/v1VmTPMDevice"
        },
        "useVirtioTransitional": {
          "description": "Fall back to legacy virtio 0.9 support if virtio bus is selected on devices. This is helpful for old machines like CentOS6 or RHEL6 which do not understand virtio_non_transitional (virtio 1.0).",
          "type": "boolean"
        },
        "watchdog": {
          "$ref": "#/definitions/v1VmWatchdog"
        }
      },
      "type": "object"
    },
    "v1VmDisk": {
      "properties": {
        "blockSize": {
          "$ref": "#/definitions/v1VmBlockSize"
        },
        "bootOrder": {
          "description": "BootOrder is an integer value \u003e 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists.",
          "format": "int32",
          "type": "integer"
        },
        "cache": {
          "description": "Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough.",
          "type": "string"
        },
        "cdrom": {
          "$ref": "#/definitions/v1VmCDRomTarget"
        },
        "dedicatedIOThread": {
          "description": "dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false.",
          "type": "boolean"
        },
        "disk": {
          "$ref": "#/definitions/v1VmDiskTarget"
        },
        "io": {
          "description": "IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads.",
          "type": "string"
        },
        "lun": {
          "$ref": "#/definitions/v1VmLunTarget"
        },
        "name": {
          "description": "Name is the device name",
          "type": "string"
        },
        "serial": {
          "description": "Serial provides the ability to specify a serial number for the disk device.",
          "type": "string"
        },
        "shareable": {
          "description": "If specified the disk is made sharable and multiple write from different VMs are permitted",
          "type": "boolean"
        },
        "tag": {
          "description": "If specified, disk address and its tag will be provided to the guest via config drive metadata",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1VmDiskTarget": {
      "properties": {
        "bus": {
          "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi, usb.",
          "type": "string"
        },
        "pciAddress": {
          "description": "If specified, the virtual disk will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10",
          "type": "string"
        },
        "readonly": {
          "description": "ReadOnly. Defaults to false.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1VmDomainSpec": {
      "properties": {
        "chassis": {
          "$ref": "#/definitions/v1VmChassis"
        },
        "clock": {
          "$ref": "#/definitions/v1VmClock"
        },
        "cpu": {
          "$ref": "#/definitions/v1VmCpu"
        },
        "devices": {
          "$ref": "#/definitions/v1VmDevices"
        },
        "features": {
          "$ref": "#/definitions/v1VmFeatures"
        },
        "firmware": {
          "$ref": "#/definitions/v1VmFirmware"
        },
        "ioThreadsPolicy": {
          "description": "Controls whether or not disks will share IOThreads. Omitting IOThreadsPolicy disables use of IOThreads. One of: shared, auto",
          "type": "string"
        },
        "launchSecurity": {
          "$ref": "#/definitions/v1VmLaunchSecurity"
        },
        "machine": {
          "$ref": "#/definitions/v1VmMachine"
        },
        "memory": {
          "$ref": "#/definitions/v1VmMemory"
        },
        "resources": {
          "$ref": "#/definitions/v1VmResourceRequirements"
        }
      },
      "required": [
        "devices"
      ],
      "type": "object"
    },
    "v1VmDownwardApiVolumeFile": {
      "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
      "properties": {
        "fieldRef": {
          "$ref": "#/definitions/v1VmObjectFieldSelector"
        },
        "mode": {
          "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
          "type": "string"
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/v1VmResourceFieldSelector"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "v1VmDownwardApiVolumeSource": {
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info.",
      "properties": {
        "fields": {
          "description": "Fields is a list of downward API volume file",
          "items": {
            "$ref": "#/definitions/v1VmDownwardApiVolumeFile"
          },
          "type": "array"
        },
        "volumeLabel": {
          "description": "The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmDownwardMetricsVolumeSource": {
      "description": "DownwardMetricsVolumeSource adds a very small disk to VMIs which contains a limited view of host and guest metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.",
      "type": "object"
    },
    "v1VmDuration": {
      "description": "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
      "type": "string"
    },
    "v1VmEFI": {
      "description": "If set, EFI will be used instead of BIOS.",
      "properties": {
        "secureBoot": {
          "description": "If set, SecureBoot will be enabled and the OVMF roms will be swapped for SecureBoot-enabled ones. Requires SMM to be enabled. Defaults to true",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1VmEmptyDiskSource": {
      "description": "EmptyDisk represents a temporary disk which shares the vmis lifecycle.",
      "properties": {
        "capacity": {
          "$ref": "#/definitions/v1VmQuantity"
        }
      },
      "required": [
        "capacity"
      ],
      "type": "object"
    },
    "v1VmEphemeralVolumeSource": {
      "properties": {
        "persistentVolumeClaim": {
          "$ref": "#/definitions/v1VmPersistentVolumeClaimVolumeSource"
        }
      },
      "type": "object"
    },
    "v1VmError": {
      "description": "Error is the last error encountered during the snapshot/restore",
      "properties": {
        "message": {
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "type": "object"
    },
    "v1VmExecAction": {
      "description": "ExecAction describes a \"run in container\" action.",
      "properties": {
        "command": {
          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1VmFeatureApiC": {
      "properties": {
        "enabled": {
          "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
          "type": "boolean"
        },
        "endOfInterrupt": {
          "description": "EndOfInterrupt enables the end of interrupt notification in the guest. Defaults to false.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1VmFeatureHyperv": {
      "description": "Hyperv specific features.",
      "properties": {
        "evmcs": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "frequencies": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "ipi": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "reenlightenment": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "relaxed": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "reset": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "runtime": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "spinlocks": {
          "$ref": "#/definitions/v1VmFeatureSpinlocks"
        },
        "synic": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "synictimer": {
          "$ref": "#/definitions/v1VmSyNICTimer"
        },
        "tlbflush": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "vapic": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "vendorid": {
          "$ref": "#/definitions/v1VmFeatureVendorId"
        },
        "vpindex": {
          "$ref": "#/definitions/v1VmFeatureState"
        }
      },
      "type": "object"
    },
    "v1VmFeatureKVm": {
      "properties": {
        "hidden": {
          "description": "Hide the KVM hypervisor from standard MSR based discovery. Defaults to false",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1VmFeatureSpinlocks": {
      "properties": {
        "enabled": {
          "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
          "type": "boolean"
        },
        "spinlocks": {
          "description": "Retries indicates the number of retries. Must be a value greater or equal 4096. Defaults to 4096.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1VmFeatureState": {
      "description": "Represents if a feature is enabled or disabled.",
      "properties": {
        "enabled": {
          "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1VmFeatureVendorId": {
      "properties": {
        "enabled": {
          "description": "Enabled determines if the feature should be enabled or disabled on the guest. Defaults to true.",
          "type": "boolean"
        },
        "vendorid": {
          "description": "VendorID sets the hypervisor vendor id, visible to the vmi. String up to twelve characters.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmFeatures": {
      "properties": {
        "acpi": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "apic": {
          "$ref": "#/definitions/v1VmFeatureApiC"
        },
        "hyperv": {
          "$ref": "#/definitions/v1VmFeatureHyperv"
        },
        "kvm": {
          "$ref": "#/definitions/v1VmFeatureKVm"
        },
        "pvspinlock": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "smm": {
          "$ref": "#/definitions/v1VmFeatureState"
        }
      },
      "type": "object"
    },
    "v1VmFieldsV1": {
      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:\u003cname\u003e', where \u003cname\u003e is the name of a field in a struct, or key in a map 'v:\u003cvalue\u003e', where \u003cvalue\u003e is the exact json formatted value of a list item 'i:\\\u003cindex\u003e', where \\\u003cindex\u003e is position of a item in a list 'k:\u003ckeys\u003e', where \u003ckeys\u003e is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
      "properties": {
        "Raw": {
          "items": {
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1VmFilesystem": {
      "properties": {
        "name": {
          "description": "Name is the device name",
          "type": "string"
        },
        "virtiofs": {
          "$ref": "#/definitions/v1VmFilesystemVirtiofs"
        }
      },
      "required": [
        "name",
        "virtiofs"
      ],
      "type": "object"
    },
    "v1VmFilesystemVirtiofs": {
      "type": "object"
    },
    "v1VmFirmware": {
      "properties": {
        "bootloader": {
          "$ref": "#/definitions/v1VmBootloader"
        },
        "kernelBoot": {
          "$ref": "#/definitions/v1VmKernelBoot"
        },
        "serial": {
          "description": "The system-serial-number in SMBIOS",
          "type": "string"
        },
        "uuid": {
          "description": "UUID reported by the vmi bios. Defaults to a random generated uid.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmGPU": {
      "properties": {
        "deviceName": {
          "type": "string"
        },
        "name": {
          "description": "Name of the GPU device as exposed by a device plugin",
          "type": "string"
        },
        "tag": {
          "description": "If specified, the virtual network interface address and its tag will be provided to the guest via config drive",
          "type": "string"
        },
        "virtualGPUOptions": {
          "$ref": "#/definitions/v1VmVGPUOptions"
        }
      },
      "required": [
        "name",
        "deviceName"
      ],
      "type": "object"
    },
    "v1VmGuestAgentPing": {
      "description": "GuestAgentPing configures the guest-agent based ping probe",
      "type": "object"
    },
    "v1VmHPETTimer": {
      "properties": {
        "present": {
          "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.",
          "type": "boolean"
        },
        "tickPolicy": {
          "description": "TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of \"delay\", \"catchup\", \"merge\", \"discard\".",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmHostDevice": {
      "properties": {
        "deviceName": {
          "description": "DeviceName is the resource name of the host device exposed by a device plugin",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tag": {
          "description": "If specified, the virtual network interface address and its tag will be provided to the guest via config drive",
          "type": "string"
        }
      },
      "required": [
        "name",
        "deviceName"
      ],
      "type": "object"
    },
    "v1VmHostDisk": {
      "description": "Represents a disk created on the cluster level",
      "properties": {
        "capacity": {
          "$ref": "#/definitions/v1VmQuantity"
        },
        "path": {
          "description": "The path to HostDisk image located on the cluster",
          "type": "string"
        },
        "shared": {
          "description": "Shared indicate whether the path is shared between nodes",
          "type": "boolean"
        },
        "type": {
          "description": "Contains information if disk.img exists or should be created allowed options are 'Disk' and 'DiskOrCreate'",
          "type": "string"
        }
      },
      "required": [
        "path",
        "type"
      ],
      "type": "object"
    },
    "v1VmHotplugVolumeSource": {
      "description": "HotplugVolumeSource Represents the source of a volume to mount which are capable of being hotplugged on a live running VMI. Only one of its members may be specified.",
      "properties": {
        "dataVolume": {
          "$ref": "#/definitions/v1VmCoreDataVolumeSource"
        },
        "persistentVolumeClaim": {
          "$ref": "#/definitions/v1VmPersistentVolumeClaimVolumeSource"
        }
      },
      "type": "object"
    },
    "v1VmHttpGetAction": {
      "description": "HTTPGetAction describes an action based on HTTP Get requests.",
      "properties": {
        "host": {
          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
          "type": "string"
        },
        "httpHeaders": {
          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
          "items": {
            "$ref": "#/definitions/v1VmHttpHeader"
          },
          "type": "array"
        },
        "path": {
          "description": "Path to access on the HTTP server.",
          "type": "string"
        },
        "port": {
          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
          "type": [
            "string",
            "number"
          ]
        },
        "scheme": {
          "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
          "type": "string"
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "v1VmHttpHeader": {
      "description": "HTTPHeader describes a custom header to be used in HTTP probes",
      "properties": {
        "name": {
          "description": "The header field name",
          "type": "string"
        },
        "value": {
          "description": "The header field value",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "v1VmHugepages": {
      "description": "Hugepages allow to use hugepages for the VirtualMachineInstance instead of regular memory.",
      "properties": {
        "pageSize": {
          "description": "PageSize specifies the hugepage size, for x86_64 architecture valid values are 1Gi and 2Mi.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmHypervTimer": {
      "properties": {
        "present": {
          "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1VmI6300ESBWatchdog": {
      "description": "i6300esb watchdog device.",
      "properties": {
        "action": {
          "description": "The action to take. Valid values are poweroff, reset, shutdown. Defaults to reset.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmInput": {
      "properties": {
        "bus": {
          "description": "Bus indicates the bus of input device to emulate. Supported values: virtio, usb.",
          "type": "string"
        },
        "name": {
          "description": "Name is the device name",
          "type": "string"
        },
        "type": {
          "description": "Type indicated the type of input device. Supported values: tablet.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "name"
      ],
      "type": "object"
    },
    "v1VmInstancetypeMatcher": {
      "description": "InstancetypeMatcher references a instancetype that is used to fill fields in the VMI template.",
      "properties": {
        "inferFromVolume": {
          "description": "InferFromVolume lists the name of a volume that should be used to infer or discover the instancetype to be used through known annotations on the underlying resource. Once applied to the InstancetypeMatcher this field is removed.",
          "type": "string"
        },
        "kind": {
          "description": "Kind specifies which instancetype resource is referenced. Allowed values are: \"VirtualMachineInstancetype\" and \"VirtualMachineClusterInstancetype\". If not specified, \"VirtualMachineClusterInstancetype\" is used by default.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype",
          "type": "string"
        },
        "revisionName": {
          "description": "RevisionName specifies a ControllerRevision containing a specific copy of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype to be used. This is initially captured the first time the instancetype is applied to the VirtualMachineInstance.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmInterface": {
      "properties": {
        "acpiIndex": {
          "description": "If specified, the ACPI index is used to provide network interface device naming, that is stable across changes in PCI addresses assigned to the device. This value is required to be unique across all devices and be between 1 and (16*1024-1).",
          "format": "int32",
          "type": "integer"
        },
        "bootOrder": {
          "description": "BootOrder is an integer value \u003e 0, used to determine ordering of boot devices. Lower values take precedence. Each interface or disk that has a boot order must have a unique value. Interfaces without a boot order are not tried.",
          "format": "int32",
          "type": "integer"
        },
        "bridge": {
          "$ref": "#/definitions/v1VmInterfaceBridge"
        },
        "dhcpOptions": {
          "$ref": "#/definitions/v1VmDHCPOptions"
        },
        "macAddress": {
          "description": "Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.",
          "type": "string"
        },
        "macvtap": {
          "$ref": "#/definitions/v1VmInterfaceMacvtap"
        },
        "masquerade": {
          "$ref": "#/definitions/v1VmInterfaceMasquerade"
        },
        "model": {
          "description": "Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio. Defaults to virtio.",
          "type": "string"
        },
        "name": {
          "description": "Logical name of the interface as well as a reference to the associated networks. Must match the Name of a Network.",
          "type": "string"
        },
        "passt": {
          "$ref": "#/definitions/v1VmInterfacePasst"
        },
        "pciAddress": {
          "description": "If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10",
          "type": "string"
        },
        "ports": {
          "description": "List of ports to be forwarded to the virtual machine.",
          "items": {
            "$ref": "#/definitions/v1VmPort"
          },
          "type": "array"
        },
        "slirp": {
          "$ref": "#/definitions/v1VmInterfaceSlirp"
        },
        "sriov": {
          "$ref": "#/definitions/v1VmInterfaceSRIOV"
        },
        "tag": {
          "description": "If specified, the virtual network interface address and its tag will be provided to the guest via config drive",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1VmInterfaceBridge": {
      "description": "InterfaceBridge connects to a given network via a linux bridge.",
      "type": "object"
    },
    "v1VmInterfaceMacvtap": {
      "description": "InterfaceMacvtap connects to a given network by extending the Kubernetes node's L2 networks via a macvtap interface.",
      "type": "object"
    },
    "v1VmInterfaceMasquerade": {
      "description": "InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic.",
      "type": "object"
    },
    "v1VmInterfacePasst": {
      "description": "InterfacePasst connects to a given network.",
      "type": "object"
    },
    "v1VmInterfaceSRIOV": {
      "description": "InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio.",
      "type": "object"
    },
    "v1VmInterfaceSlirp": {
      "description": "InterfaceSlirp connects to a given network using QEMU user networking mode.",
      "type": "object"
    },
    "v1VmKVmTimer": {
      "properties": {
        "present": {
          "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1VmKernelBoot": {
      "description": "Represents the firmware blob used to assist in the kernel boot process. Used for setting the kernel, initrd and command line arguments",
      "properties": {
        "container": {
          "$ref": "#/definitions/v1VmKernelBootContainer"
        },
        "kernelArgs": {
          "description": "Arguments to be passed to the kernel at boot time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmKernelBootContainer": {
      "description": "If set, the VM will be booted from the defined kernel / initrd.",
      "properties": {
        "image": {
          "description": "Image that contains initrd / kernel files.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
          "type": "string"
        },
        "imagePullSecret": {
          "description": "ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.",
          "type": "string"
        },
        "initrdPath": {
          "description": "the fully-qualified path to the ramdisk image in the host OS",
          "type": "string"
        },
        "kernelPath": {
          "description": "The fully-qualified path to the kernel image in the host OS",
          "type": "string"
        }
      },
      "required": [
        "image"
      ],
      "type": "object"
    },
    "v1VmLabelSelector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "items": {
            "$ref": "#/definitions/v1VmLabelSelectorRequirement"
          },
          "type": "array"
        },
        "matchLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "matchLabels is a map of key-value pairs. A single key-value in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1VmLabelSelectorRequirement": {
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "description": "key is the label key that the selector applies to.",
          "type": "string",
          "x-kubernetes-patch-merge-key": "key",
          "x-kubernetes-patch-strategy": "merge"
        },
        "operator": {
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string"
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "v1VmLaunchSecurity": {
      "properties": {
        "sev": {
          "$ref": "#/definitions/v1VmSEV"
        }
      },
      "type": "object"
    },
    "v1VmListMeta": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "format": "int64",
          "type": "integer"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only.",
          "type": "string"
        },
        "selfLink": {
          "description": "selfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmLocalObjectReference": {
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmLunTarget": {
      "properties": {
        "bus": {
          "description": "Bus indicates the type of disk device to emulate. supported values: virtio, sata, scsi.",
          "type": "string"
        },
        "readonly": {
          "description": "ReadOnly. Defaults to false.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1VmMachine": {
      "properties": {
        "type": {
          "description": "QEMU machine type is the actual chipset of the VirtualMachineInstance.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmManagedFieldsEntry": {
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
          "type": "string"
        },
        "fieldsV1": {
          "$ref": "#/definitions/v1VmFieldsV1"
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "type": "object"
    },
    "v1VmMemory": {
      "description": "Memory allows specifying the VirtualMachineInstance memory features.",
      "properties": {
        "guest": {
          "$ref": "#/definitions/v1VmQuantity"
        },
        "hugepages": {
          "$ref": "#/definitions/v1VmHugepages"
        }
      },
      "type": "object"
    },
    "v1VmMemoryDumpVolumeSource": {
      "properties": {
        "claimName": {
          "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "hotpluggable": {
          "description": "Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.",
          "type": "boolean"
        },
        "readOnly": {
          "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
          "type": "boolean"
        }
      },
      "required": [
        "claimName"
      ],
      "type": "object"
    },
    "v1VmMultusNetwork": {
      "description": "Represents the multus cni network.",
      "properties": {
        "default": {
          "description": "Select the default network and add it to the multus-cni.io/default-network annotation.",
          "type": "boolean"
        },
        "networkName": {
          "description": "References to a NetworkAttachmentDefinition CRD object. Format: \u003cnetworkName\u003e, \u003cnamespace\u003e/\u003cnetworkName\u003e. If namespace is not specified, VMI namespace is assumed.",
          "type": "string"
        }
      },
      "required": [
        "networkName"
      ],
      "type": "object"
    },
    "v1VmNUMA": {
      "properties": {
        "guestMappingPassthrough": {
          "$ref": "#/definitions/v1VmNUMAGuestMappingPassthrough"
        }
      },
      "type": "object"
    },
    "v1VmNUMAGuestMappingPassthrough": {
      "description": "NUMAGuestMappingPassthrough instructs kubevirt to model numa topology which is compatible with the CPU pinning on the guest. This will result in a subset of the node numa topology being passed through, ensuring that virtual numa nodes and their memory never cross boundaries coming from the node numa mapping.",
      "type": "object"
    },
    "v1VmNetwork": {
      "description": "Network represents a network type and a resource that should be connected to the vm.",
      "properties": {
        "multus": {
          "$ref": "#/definitions/v1VmMultusNetwork"
        },
        "name": {
          "description": "Network name. Must be a DNS_LABEL and unique within the vm. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "pod": {
          "$ref": "#/definitions/v1VmPodNetwork"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1VmNodeAffinity": {
      "description": "Node affinity is a group of node affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/v1VmPreferredSchedulingTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "$ref": "#/definitions/v1VmNodeSelector"
        }
      },
      "type": "object"
    },
    "v1VmNodeSelector": {
      "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
      "properties": {
        "nodeSelectorTerms": {
          "description": "Required. A list of node selector terms. The terms are ORed.",
          "items": {
            "$ref": "#/definitions/v1VmNodeSelectorTerm"
          },
          "type": "array"
        }
      },
      "required": [
        "nodeSelectorTerms"
      ],
      "type": "object"
    },
    "v1VmNodeSelectorRequirement": {
      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "v1VmNodeSelectorTerm": {
      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
      "properties": {
        "matchExpressions": {
          "description": "A list of node selector requirements by node's labels.",
          "items": {
            "$ref": "#/definitions/v1VmNodeSelectorRequirement"
          },
          "type": "array"
        },
        "matchFields": {
          "description": "A list of node selector requirements by node's fields.",
          "items": {
            "$ref": "#/definitions/v1VmNodeSelectorRequirement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1VmObjectFieldSelector": {
      "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
      "properties": {
        "apiVersion": {
          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
          "type": "string"
        },
        "fieldPath": {
          "description": "Path of the field to select in the specified API version.",
          "type": "string"
        }
      },
      "required": [
        "fieldPath"
      ],
      "type": "object"
    },
    "v1VmObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object"
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
          "type": "string"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified.",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "items": {
            "$ref": "#/definitions/v1VmManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\nMust be a DNS_LABEL. Cannot be updated.",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "items": {
            "$ref": "#/definitions/v1VmOwnerReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\nPopulated by the system. Read-only. Value must be treated as opaque by clients.",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\nPopulated by the system. Read-only.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmOwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "type": "object"
    },
    "v1VmPITTimer": {
      "properties": {
        "present": {
          "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.",
          "type": "boolean"
        },
        "tickPolicy": {
          "description": "TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of \"delay\", \"catchup\", \"discard\".",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmPersistentVolumeClaimSpec": {
      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dataSource": {
          "$ref": "#/definitions/v1VmTypedLocalObjectReference"
        },
        "dataSourceRef": {
          "$ref": "#/definitions/v1VmTypedLocalObjectReference"
        },
        "resources": {
          "$ref": "#/definitions/v1VmCoreResourceRequirements"
        },
        "selector": {
          "$ref": "#/definitions/v1VmLabelSelector"
        },
        "storageClassName": {
          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
          "type": "string"
        },
        "volumeName": {
          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmPersistentVolumeClaimVolumeSource": {
      "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
      "properties": {
        "claimName": {
          "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "hotpluggable": {
          "description": "Hotpluggable indicates whether the volume can be hotplugged and hotunplugged.",
          "type": "boolean"
        },
        "readOnly": {
          "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
          "type": "boolean"
        }
      },
      "required": [
        "claimName"
      ],
      "type": "object"
    },
    "v1VmPodAffinity": {
      "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/v1VmWeightedPodAffinityTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "items": {
            "$ref": "#/definitions/v1VmPodAffinityTerm"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1VmPodAffinityTerm": {
      "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/v1VmLabelSelector"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/v1VmLabelSelector"
        },
        "namespaces": {
          "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "topologyKey": {
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
          "type": "string"
        }
      },
      "required": [
        "topologyKey"
      ],
      "type": "object"
    },
    "v1VmPodDnsConfig": {
      "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
      "properties": {
        "nameservers": {
          "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "options": {
          "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
          "items": {
            "$ref": "#/definitions/v1VmPodDnsConfigOption"
          },
          "type": "array"
        },
        "searches": {
          "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1VmPodDnsConfigOption": {
      "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
      "properties": {
        "name": {
          "description": "Required.",
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmPodNetwork": {
      "description": "Represents the stock pod network interface.",
      "properties": {
        "vmIPv6NetworkCIDR": {
          "description": "IPv6 CIDR for the vm network. Defaults to fd10:0:2::/120 if not specified.",
          "type": "string"
        },
        "vmNetworkCIDR": {
          "description": "CIDR for vm network. Default 10.0.2.0/24 if not specified.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmPort": {
      "description": "Port represents a port to expose from the virtual machine. Default protocol TCP. The port field is mandatory",
      "properties": {
        "name": {
          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
          "type": "string"
        },
        "port": {
          "description": "Number of port to expose for the virtual machine. This must be a valid port number, 0 \u003c x \u003c 65536.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\".",
          "type": "string"
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "v1VmPreferenceMatcher": {
      "description": "PreferenceMatcher references a set of preference that is used to fill fields in the VMI template.",
      "properties": {
        "inferFromVolume": {
          "description": "InferFromVolume lists the name of a volume that should be used to infer or discover the preference to be used through known annotations on the underlying resource. Once applied to the PreferenceMatcher this field is removed.",
          "type": "string"
        },
        "kind": {
          "description": "Kind specifies which preference resource is referenced. Allowed values are: \"VirtualMachinePreference\" and \"VirtualMachineClusterPreference\". If not specified, \"VirtualMachineClusterPreference\" is used by default.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the VirtualMachinePreference or VirtualMachineClusterPreference",
          "type": "string"
        },
        "revisionName": {
          "description": "RevisionName specifies a ControllerRevision containing a specific copy of the VirtualMachinePreference or VirtualMachineClusterPreference to be used. This is initially captured the first time the instancetype is applied to the VirtualMachineInstance.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmPreferredSchedulingTerm": {
      "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
      "properties": {
        "preference": {
          "$ref": "#/definitions/v1VmNodeSelectorTerm"
        },
        "weight": {
          "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "weight",
        "preference"
      ],
      "type": "object"
    },
    "v1VmProbe": {
      "description": "Probe describes a health check to be performed against a VirtualMachineInstance to determine whether it is alive or ready to receive traffic.",
      "properties": {
        "exec": {
          "$ref": "#/definitions/v1VmExecAction"
        },
        "failureThreshold": {
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "guestAgentPing": {
          "$ref": "#/definitions/v1VmGuestAgentPing"
        },
        "httpGet": {
          "$ref": "#/definitions/v1VmHttpGetAction"
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the VirtualMachineInstance has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "format": "int32",
          "type": "integer"
        },
        "periodSeconds": {
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "successThreshold": {
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "tcpSocket": {
          "$ref": "#/definitions/v1VmTcpSocketAction"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out. For exec probes the timeout fails the probe but does not terminate the command running on the guest. This means a blocking command can result in an increasing load on the guest. A small buffer will be added to the resulting workload exec probe to compensate for delays caused by the qemu guest exec mechanism. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1VmQemuGuestAgentSshPublicKeyAccessCredentialPropagation": {
      "properties": {
        "users": {
          "description": "Users represents a list of guest users that should have the ssh public keys added to their authorized_keys file.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        }
      },
      "required": [
        "users"
      ],
      "type": "object"
    },
    "v1VmQemuGuestAgentUserPasswordAccessCredentialPropagation": {
      "type": "object"
    },
    "v1VmQuantity": {
      "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n\u003cquantity\u003e        ::= \u003csignedNumber\u003e\u003csuffix\u003e\n  (Note that \u003csuffix\u003e may be empty, from the \"\" case in \u003cdecimalSI\u003e.)\n\u003cdigit\u003e           ::= 0 | 1 | ... | 9 \u003cdigits\u003e          ::= \u003cdigit\u003e | \u003cdigit\u003e\u003cdigits\u003e \u003cnumber\u003e          ::= \u003cdigits\u003e | \u003cdigits\u003e.\u003cdigits\u003e | \u003cdigits\u003e. | .\u003cdigits\u003e \u003csign\u003e            ::= \"+\" | \"-\" \u003csignedNumber\u003e    ::= \u003cnumber\u003e | \u003csign\u003e\u003cnumber\u003e \u003csuffix\u003e          ::= \u003cbinarySI\u003e | \u003cdecimalExponent\u003e | \u003cdecimalSI\u003e \u003cbinarySI\u003e        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n\u003cdecimalSI\u003e       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n\u003cdecimalExponent\u003e ::= \"e\" \u003csignedNumber\u003e | \"E\" \u003csignedNumber\u003e\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
      "type": "string"
    },
    "v1VmRTCTimer": {
      "properties": {
        "present": {
          "description": "Enabled set to false makes sure that the machine type or a preset can't add the timer. Defaults to true.",
          "type": "boolean"
        },
        "tickPolicy": {
          "description": "TickPolicy determines what happens when QEMU misses a deadline for injecting a tick to the guest. One of \"delay\", \"catchup\".",
          "type": "string"
        },
        "track": {
          "description": "Track the guest or the wall clock.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmRealtime": {
      "description": "Realtime holds the tuning knobs specific for realtime workloads.",
      "properties": {
        "mask": {
          "description": "Mask defines the vcpu mask expression that defines which vcpus are used for realtime. Format matches libvirt's expressions. Example: \"0-3,^1\",\"0,2,3\",\"2-3\"",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmRemoveVolumeOptions": {
      "description": "RemoveVolumeOptions is provided when dynamically hot unplugging volume and disk",
      "properties": {
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "name": {
          "description": "Name represents the name that maps to both the disk and volume that should be removed",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1VmResourceFieldSelector": {
      "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
      "properties": {
        "containerName": {
          "description": "Container name: required for volumes, optional for env vars",
          "type": "string"
        },
        "divisor": {
          "$ref": "#/definitions/v1VmQuantity"
        },
        "resource": {
          "description": "Required: resource to select",
          "type": "string"
        }
      },
      "required": [
        "resource"
      ],
      "type": "object"
    },
    "v1VmResourceRequirements": {
      "properties": {
        "limits": {
          "description": "Limits describes the maximum amount of compute resources allowed. Valid resource keys are \"memory\" and \"cpu\".",
          "type": "object"
        },
        "overcommitGuestOverhead": {
          "description": "Don't ask the scheduler to take the guest-management overhead into account. Instead put the overhead only into the container's memory limit. This can lead to crashes if all memory is in use on a node. Defaults to false.",
          "type": "boolean"
        },
        "requests": {
          "description": "Requests is a description of the initial vmi resources. Valid resource keys are \"memory\" and \"cpu\".",
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1VmRng": {
      "description": "Rng represents the random device passed from host",
      "type": "object"
    },
    "v1VmSEV": {
      "type": "object"
    },
    "v1VmSecretVolumeSource": {
      "description": "SecretVolumeSource adapts a Secret into a volume.",
      "properties": {
        "optional": {
          "description": "Specify whether the Secret or it's keys must be defined",
          "type": "boolean"
        },
        "secretName": {
          "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
          "type": "string"
        },
        "volumeLabel": {
          "description": "The volume label of the resulting disk inside the VMI. Different bootstrapping mechanisms require different values. Typical values are \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmServiceAccountVolumeSource": {
      "description": "ServiceAccountVolumeSource adapts a ServiceAccount into a volume.",
      "properties": {
        "serviceAccountName": {
          "description": "Name of the service account in the pod's namespace to use. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmSnapshotVolumesLists": {
      "description": "SnapshotVolumesLists includes the list of volumes which were included in the snapshot and volumes which were excluded from the snapshot",
      "properties": {
        "excludedVolumes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "includedVolumes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        }
      },
      "type": "object"
    },
    "v1VmSoundDevice": {
      "description": "Represents the user's configuration to emulate sound cards in the VMI.",
      "properties": {
        "model": {
          "description": "We only support ich9 or ac97. If SoundDevice is not set: No sound card is emulated. If SoundDevice is set but Model is not: ich9",
          "type": "string"
        },
        "name": {
          "description": "User's defined name for this sound device",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1VmSshPublicKeyAccessCredential": {
      "description": "SSHPublicKeyAccessCredential represents a source and propagation method for injecting ssh public keys into a vm guest",
      "properties": {
        "propagationMethod": {
          "$ref": "#/definitions/v1VmSshPublicKeyAccessCredentialPropagationMethod"
        },
        "source": {
          "$ref": "#/definitions/v1VmSshPublicKeyAccessCredentialSource"
        }
      },
      "required": [
        "source",
        "propagationMethod"
      ],
      "type": "object"
    },
    "v1VmSshPublicKeyAccessCredentialPropagationMethod": {
      "description": "SSHPublicKeyAccessCredentialPropagationMethod represents the method used to inject a ssh public key into the vm guest. Only one of its members may be specified.",
      "properties": {
        "configDrive": {
          "$ref": "#/definitions/v1VmConfigDriveSshPublicKeyAccessCredentialPropagation"
        },
        "qemuGuestAgent": {
          "$ref": "#/definitions/v1VmQemuGuestAgentSshPublicKeyAccessCredentialPropagation"
        }
      },
      "type": "object"
    },
    "v1VmSshPublicKeyAccessCredentialSource": {
      "description": "SSHPublicKeyAccessCredentialSource represents where to retrieve the ssh key credentials Only one of its members may be specified.",
      "properties": {
        "secret": {
          "$ref": "#/definitions/v1VmAccessCredentialSecretSource"
        }
      },
      "type": "object"
    },
    "v1VmStorageSpec": {
      "description": "StorageSpec defines the Storage type specification",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dataSource": {
          "$ref": "#/definitions/v1VmTypedLocalObjectReference"
        },
        "resources": {
          "$ref": "#/definitions/v1VmCoreResourceRequirements"
        },
        "selector": {
          "$ref": "#/definitions/v1VmLabelSelector"
        },
        "storageClassName": {
          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
          "type": "string"
        },
        "volumeName": {
          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmSyNICTimer": {
      "properties": {
        "direct": {
          "$ref": "#/definitions/v1VmFeatureState"
        },
        "enabled": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1VmSysprepSource": {
      "description": "Represents a Sysprep volume source.",
      "properties": {
        "configMap": {
          "$ref": "#/definitions/v1VmLocalObjectReference"
        },
        "secret": {
          "$ref": "#/definitions/v1VmLocalObjectReference"
        }
      },
      "type": "object"
    },
    "v1VmTPMDevice": {
      "type": "object"
    },
    "v1VmTcpSocketAction": {
      "description": "TCPSocketAction describes an action based on opening a socket",
      "properties": {
        "host": {
          "description": "Optional: Host name to connect to, defaults to the pod IP.",
          "type": "string"
        },
        "port": {
          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
          "type": [
            "string",
            "number"
          ]
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "v1VmTimer": {
      "description": "Represents all available timers in a vmi.",
      "properties": {
        "hpet": {
          "$ref": "#/definitions/v1VmHPETTimer"
        },
        "hyperv": {
          "$ref": "#/definitions/v1VmHypervTimer"
        },
        "kvm": {
          "$ref": "#/definitions/v1VmKVmTimer"
        },
        "pit": {
          "$ref": "#/definitions/v1VmPITTimer"
        },
        "rtc": {
          "$ref": "#/definitions/v1VmRTCTimer"
        }
      },
      "type": "object"
    },
    "v1VmToleration": {
      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
      "properties": {
        "effect": {
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
          "type": "string"
        },
        "key": {
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
          "type": "string"
        },
        "operator": {
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
          "type": "string"
        },
        "tolerationSeconds": {
          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
          "format": "int64",
          "type": "integer"
        },
        "value": {
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VmTopologySpreadConstraint": {
      "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/v1VmLabelSelector"
        },
        "maxSkew": {
          "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
          "format": "int32",
          "type": "integer"
        },
        "topologyKey": {
          "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field.",
          "type": "string"
        },
        "whenUnsatisfiable": {
          "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
          "type": "string"
        }
      },
      "required": [
        "maxSkew",
        "topologyKey",
        "whenUnsatisfiable"
      ],
      "type": "object"
    },
    "v1VmTypedLocalObjectReference": {
      "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "v1VmUserPasswordAccessCredential": {
      "description": "UserPasswordAccessCredential represents a source and propagation method for injecting user passwords into a vm guest Only one of its members may be specified.",
      "properties": {
        "propagationMethod": {
          "$ref": "#/definitions/v1VmUserPasswordAccessCredentialPropagationMethod"
        },
        "source": {
          "$ref": "#/definitions/v1VmUserPasswordAccessCredentialSource"
        }
      },
      "required": [
        "source",
        "propagationMethod"
      ],
      "type": "object"
    },
    "v1VmUserPasswordAccessCredentialPropagationMethod": {
      "description": "UserPasswordAccessCredentialPropagationMethod represents the method used to inject a user passwords into the vm guest. Only one of its members may be specified.",
      "properties": {
        "qemuGuestAgent": {
          "$ref": "#/definitions/v1VmQemuGuestAgentUserPasswordAccessCredentialPropagation"
        }
      },
      "type": "object"
    },
    "v1VmUserPasswordAccessCredentialSource": {
      "description": "UserPasswordAccessCredentialSource represents where to retrieve the user password credentials Only one of its members may be specified.",
      "properties": {
        "secret": {
          "$ref": "#/definitions/v1VmAccessCredentialSecretSource"
        }
      },
      "type": "object"
    },
    "v1VmVGPUDisplayOptions": {
      "properties": {
        "enabled": {
          "description": "Enabled determines if a display addapter backed by a vGPU should be enabled or disabled on the guest. Defaults to true.",
          "type": "boolean"
        },
        "ramFB": {
          "$ref": "#/definitions/v1VmFeatureState"
        }
      },
      "type": "object"
    },
    "v1VmVGPUOptions": {
      "properties": {
        "display": {
          "$ref": "#/definitions/v1VmVGPUDisplayOptions"
        }
      },
      "type": "object"
    },
    "v1VmVirtualMachineCondition": {
      "description": "VirtualMachineCondition represents the state of VirtualMachine",
      "properties": {
        "lastProbeTime": {
          "type": "string"
        },
        "lastTransitionTime": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "v1VmVirtualMachineInstanceSpec": {
      "description": "VirtualMachineInstanceSpec is a description of a VirtualMachineInstance.",
      "properties": {
        "accessCredentials": {
          "description": "Specifies a set of public keys to inject into the vm guest",
          "items": {
            "$ref": "#/definitions/v1VmAccessCredential"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "affinity": {
          "$ref": "#/definitions/v1VmAffinity"
        },
        "dnsConfig": {
          "$ref": "#/definitions/v1VmPodDnsConfig"
        },
        "dnsPolicy": {
          "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
          "type": "string"
        },
        "domain": {
          "$ref": "#/definitions/v1VmDomainSpec"
        },
        "evictionStrategy": {
          "description": "EvictionStrategy can be set to \"LiveMigrate\" if the VirtualMachineInstance should be migrated instead of shut-off in case of a node drain.",
          "type": "string"
        },
        "hostname": {
          "description": "Specifies the hostname of the vmi If not specified, the hostname will be set to the name of the vmi, if dhcp or cloud-init is configured properly.",
          "type": "string"
        },
        "livenessProbe": {
          "$ref": "#/definitions/v1VmProbe"
        },
        "networks": {
          "description": "List of networks that can be attached to a vm's virtual interface.",
          "items": {
            "$ref": "#/definitions/v1VmNetwork"
          },
          "type": "array"
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "NodeSelector is a selector which must be true for the vmi to fit on a node. Selector which must match a node's labels for the vmi to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
          "type": "object"
        },
        "priorityClassName": {
          "description": "If specified, indicates the pod's priority. If not specified, the pod priority will be default or zero if there is no default.",
          "type": "string"
        },
        "readinessProbe": {
          "$ref": "#/definitions/v1VmProbe"
        },
        "schedulerName": {
          "description": "If specified, the VMI will be dispatched by specified scheduler. If not specified, the VMI will be dispatched by default scheduler.",
          "type": "string"
        },
        "startStrategy": {
          "description": "StartStrategy can be set to \"Paused\" if Virtual Machine should be started in paused state.",
          "type": "string"
        },
        "subdomain": {
          "description": "If specified, the fully qualified vmi hostname will be \"\u003chostname\u003e.\u003csubdomain\u003e.\u003cpod namespace\u003e.svc.\u003ccluster domain\u003e\". If not specified, the vmi will not have a domainname at all. The DNS entry will resolve to the vmi, no matter if the vmi itself can pick up a hostname.",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "description": "Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force terminated.",
          "format": "int64",
          "type": "integer"
        },
        "tolerations": {
          "description": "If toleration is specified, obey all the toleration rules.",
          "items": {
            "$ref": "#/definitions/v1VmToleration"
          },
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "TopologySpreadConstraints describes how a group of VMIs will be spread across a given topology domains. K8s scheduler will schedule VMI pods in a way which abides by the constraints.",
          "items": {
            "$ref": "#/definitions/v1VmTopologySpreadConstraint"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "topologyKey",
            "whenUnsatisfiable"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "topologyKey",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by disks belonging to the vmi.",
          "items": {
            "$ref": "#/definitions/v1VmVolume"
          },
          "type": "array"
        }
      },
      "required": [
        "domain"
      ],
      "type": "object"
    },
    "v1VmVirtualMachineInstanceTemplateSpec": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1VmObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VmVirtualMachineInstanceSpec"
        }
      },
      "type": "object"
    },
    "v1VmVirtualMachineMemoryDumpRequest": {
      "description": "VirtualMachineMemoryDumpRequest represent the memory dump request phase and info",
      "properties": {
        "claimName": {
          "description": "ClaimName is the name of the pvc that will contain the memory dump",
          "type": "string"
        },
        "endTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "fileName": {
          "description": "FileName represents the name of the output file",
          "type": "string"
        },
        "message": {
          "description": "Message is a detailed message about failure of the memory dump",
          "type": "string"
        },
        "phase": {
          "description": "Phase represents the memory dump phase",
          "type": "string"
        },
        "remove": {
          "description": "Remove represents request of dissociating the memory dump pvc",
          "type": "boolean"
        },
        "startTimestamp": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "required": [
        "claimName",
        "phase"
      ],
      "type": "object"
    },
    "v1VmVirtualMachineStartFailure": {
      "description": "VirtualMachineStartFailure tracks VMIs which failed to transition successfully to running using the VM status",
      "properties": {
        "consecutiveFailCount": {
          "format": "int32",
          "type": "integer"
        },
        "lastFailedVMIUID": {
          "type": "string"
        },
        "retryAfterTimestamp": {
          "$ref": "#/definitions/v1Time"
        }
      },
      "type": "object"
    },
    "v1VmVirtualMachineStateChangeRequest": {
      "properties": {
        "action": {
          "description": "Indicates the type of action that is requested. e.g. Start or Stop",
          "type": "string"
        },
        "data": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Provides additional data in order to perform the Action",
          "type": "object"
        },
        "uid": {
          "description": "Indicates the UUID of an existing Virtual Machine Instance that this change request applies to -- if applicable",
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "type": "object"
    },
    "v1VmVirtualMachineVolumeRequest": {
      "properties": {
        "addVolumeOptions": {
          "$ref": "#/definitions/v1VmAddVolumeOptions"
        },
        "removeVolumeOptions": {
          "$ref": "#/definitions/v1VmRemoveVolumeOptions"
        }
      },
      "type": "object"
    },
    "v1VmVolume": {
      "description": "Volume represents a named volume in a vmi.",
      "properties": {
        "cloudInitConfigDrive": {
          "$ref": "#/definitions/v1VmCloudInitConfigDriveSource"
        },
        "cloudInitNoCloud": {
          "$ref": "#/definitions/v1VmCloudInitNoCloudSource"
        },
        "configMap": {
          "$ref": "#/definitions/v1VmConfigMapVolumeSource"
        },
        "containerDisk": {
          "$ref": "#/definitions/v1VmContainerDiskSource"
        },
        "dataVolume": {
          "$ref": "#/definitions/v1VmCoreDataVolumeSource"
        },
        "downwardAPI": {
          "$ref": "#/definitions/v1VmDownwardApiVolumeSource"
        },
        "downwardMetrics": {
          "$ref": "#/definitions/v1VmDownwardMetricsVolumeSource"
        },
        "emptyDisk": {
          "$ref": "#/definitions/v1VmEmptyDiskSource"
        },
        "ephemeral": {
          "$ref": "#/definitions/v1VmEphemeralVolumeSource"
        },
        "hostDisk": {
          "$ref": "#/definitions/v1VmHostDisk"
        },
        "memoryDump": {
          "$ref": "#/definitions/v1VmMemoryDumpVolumeSource"
        },
        "name": {
          "description": "Volume's name. Must be a DNS_LABEL and unique within the vmi. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "persistentVolumeClaim": {
          "$ref": "#/definitions/v1VmPersistentVolumeClaimVolumeSource"
        },
        "secret": {
          "$ref": "#/definitions/v1VmSecretVolumeSource"
        },
        "serviceAccount": {
          "$ref": "#/definitions/v1VmServiceAccountVolumeSource"
        },
        "sysprep": {
          "$ref": "#/definitions/v1VmSysprepSource"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1VmVolumeSnapshotStatus": {
      "properties": {
        "enabled": {
          "description": "True if the volume supports snapshotting",
          "type": "boolean"
        },
        "name": {
          "description": "Volume name",
          "type": "string"
        },
        "reason": {
          "description": "Empty if snapshotting is enabled, contains reason otherwise",
          "type": "string"
        }
      },
      "required": [
        "name",
        "enabled"
      ],
      "type": "object"
    },
    "v1VmWatchdog": {
      "description": "Named watchdog device.",
      "properties": {
        "i6300esb": {
          "$ref": "#/definitions/v1VmI6300ESBWatchdog"
        },
        "name": {
          "description": "Name of the watchdog.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1VmWeightedPodAffinityTerm": {
      "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
      "properties": {
        "podAffinityTerm": {
          "$ref": "#/definitions/v1VmPodAffinityTerm"
        },
        "weight": {
          "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "weight",
        "podAffinityTerm"
      ],
      "type": "object"
    },
    "v1VsphereAccount": {
      "description": "VSphere account information",
      "properties": {
        "apiVersion": {
          "description": "Cloud account api version",
          "type": "string"
        },
        "kind": {
          "description": "Cloud account kind",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VsphereCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1CloudAccountStatus"
        }
      },
      "type": "object"
    },
    "v1VsphereAccounts": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1VsphereAccount"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1VsphereCloudAccount": {
      "properties": {
        "insecure": {
          "description": "Insecure is a flag that controls whether or not to validate the vSphere server's certificate.",
          "type": "boolean",
          "x-omitempty": false
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "vcenterServer": {
          "description": "VcenterServer is the address of the vSphere endpoint",
          "type": "string"
        }
      },
      "required": [
        "vcenterServer",
        "username",
        "password"
      ],
      "type": "object"
    },
    "v1VsphereCloudClusterConfigEntity": {
      "description": "vSphere cloud cluster config entity",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1VsphereClusterConfigEntity"
        }
      },
      "type": "object"
    },
    "v1VsphereCloudConfig": {
      "description": "VsphereCloudConfig is the Schema for the vspherecloudconfigs API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VsphereCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1VsphereCloudConfigStatus"
        }
      },
      "type": "object"
    },
    "v1VsphereCloudConfigSpec": {
      "description": "VsphereCloudConfigSpec defines the desired state of VsphereCloudConfig",
      "properties": {
        "cloudAccountRef": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "cloudAccountRef should point to the secret which contains VsphereCloudAccount"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1VsphereClusterConfig"
        },
        "edgeHostRef": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "Appliance (Edge Host) uid for Edge env"
        },
        "machinePoolConfig": {
          "items": {
            "$ref": "#/definitions/v1VsphereMachinePoolConfig"
          },
          "type": "array"
        }
      },
      "required": [
        "clusterConfig",
        "machinePoolConfig"
      ],
      "type": "object"
    },
    "v1VsphereCloudConfigStatus": {
      "description": "VsphereCloudConfigStatus defines the observed state of VsphereCloudConfig",
      "properties": {
        "ansibleDigest": {
          "type": "string"
        },
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1ClusterCondition"
          },
          "type": "array"
        },
        "isAddonLayer": {
          "description": "addon layers present in spc",
          "type": "boolean"
        },
        "lastOVACreated": {
          "type": "string"
        },
        "lastVMExported": {
          "type": "string"
        },
        "nodeImage": {
          "$ref": "#/definitions/v1VsphereImage"
        },
        "roleDigest": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object"
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "uploadOvaS3": {
          "description": "UploadOVAS3 will hold last image name which uploaded to S3",
          "type": "string"
        },
        "useCapiImage": {
          "description": "If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1VsphereCloudDatacenter": {
      "description": "Vsphere datacenter",
      "properties": {
        "computeClusters": {
          "items": {
            "$ref": "#/definitions/v1VsphereComputeCluster"
          },
          "type": "array"
        },
        "folders": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VsphereClusterConfig": {
      "properties": {
        "controlPlaneEndpoint": {
          "$ref": "#/definitions/v1ControlPlaneEndPoint",
          "description": "The optional control plane endpoint, which can be an IP or FQDN"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "placement": {
          "$ref": "#/definitions/v1VspherePlacementConfig",
          "description": "Placement configuration Placement config in ClusterConfig serve as default values for each MachinePool"
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys for the 'spectro' user",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "staticIp": {
          "description": "whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name",
          "type": "boolean"
        }
      },
      "required": [
        "placement"
      ],
      "type": "object"
    },
    "v1VsphereClusterConfigEntity": {
      "properties": {
        "controlPlaneEndpoint": {
          "$ref": "#/definitions/v1ControlPlaneEndPoint",
          "description": "The optional control plane endpoint, which can be an IP or FQDN"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "placement": {
          "$ref": "#/definitions/v1VspherePlacementConfigEntity",
          "description": "Placement configuration Placement config in ClusterConfig serve as default values for each MachinePool"
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys for the 'spectro' user",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "staticIp": {
          "description": "whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name",
          "type": "boolean"
        }
      },
      "required": [
        "placement"
      ],
      "type": "object"
    },
    "v1VsphereComputeCluster": {
      "description": "Vsphere compute cluster",
      "properties": {
        "datastores": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "name": {
          "type": "string"
        },
        "networks": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "resourcePools": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1VsphereComputeClusterResources": {
      "description": "Datacenter and its resources like datastore, resoucepool, folders",
      "properties": {
        "computecluster": {
          "$ref": "#/definitions/v1VsphereComputeCluster"
        },
        "datacenter": {
          "description": "Name of the datacenter",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VsphereDatacenter": {
      "description": "List of Datacenter with computeclusters",
      "properties": {
        "computeclusters": {
          "description": "List  of the VSphere compute clusters in datacenter",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "datacenter": {
          "description": "name of the datacenter of the VSphere",
          "type": "string"
        },
        "folders": {
          "description": "List  of the VSphere folders in datacenter",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1VsphereDatacenters": {
      "description": "List of Datacenters with computeclusters",
      "properties": {
        "items": {
          "description": "List of associated datacenters",
          "items": {
            "$ref": "#/definitions/v1VsphereDatacenter"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1VsphereDnsMapping": {
      "description": "VSphere DNS Mapping",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VsphereDnsMappingSpec"
        }
      },
      "type": "object"
    },
    "v1VsphereDnsMappingSpec": {
      "description": "VSphere DNS Mapping Spec",
      "properties": {
        "datacenter": {
          "description": "VSphere datacenter name",
          "type": "string"
        },
        "dnsName": {
          "description": "VSphere DNS name",
          "type": "string"
        },
        "network": {
          "description": "VSphere network name",
          "type": "string"
        },
        "networkUrl": {
          "description": "VSphere network URL",
          "readOnly": true,
          "type": "string"
        },
        "privateGatewayUid": {
          "description": "VSphere private gateway uid",
          "type": "string"
        }
      },
      "required": [
        "privateGatewayUid",
        "datacenter",
        "network",
        "dnsName"
      ],
      "type": "object"
    },
    "v1VsphereDnsMappings": {
      "properties": {
        "items": {
          "description": "List of vSphere DNS mapping",
          "items": {
            "$ref": "#/definitions/v1VsphereDnsMapping"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1VsphereEnv": {
      "description": "Vsphere environment entity",
      "properties": {
        "version": {
          "description": "Version of vsphere environment",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VsphereImage": {
      "description": "A generated Image should always be a template which resides inside vsphere Will not generate a OVA file out of the image OVA can be used as a base input of the os pack, that's internal to the pack",
      "properties": {
        "fullPath": {
          "description": "full path of the image template location it contains datacenter/folder/templatename etc eg: /mydc/vm/template/spectro/workerpool-1-centos",
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VsphereInstanceType": {
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a virtual machine's disk, in GiB. Defaults to the analogue property value in the template from which this machine is cloned.",
          "format": "int32",
          "type": "integer"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB. Defaults to the analogue property value in the template from which this machine is cloned.",
          "format": "int64",
          "type": "integer"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of virtual processors in a virtual machine. Defaults to the analogue property value in the template from which this machine is cloned.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "numCPUs",
        "memoryMiB",
        "diskGiB"
      ],
      "type": "object"
    },
    "v1VsphereMachine": {
      "description": "vSphere cloud VM definition",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1VsphereMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1CloudMachineStatus"
        }
      },
      "type": "object"
    },
    "v1VsphereMachinePoolCloudConfigEntity": {
      "properties": {
        "instanceType": {
          "$ref": "#/definitions/v1VsphereInstanceType"
        },
        "placements": {
          "description": "Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster",
          "items": {
            "$ref": "#/definitions/v1VspherePlacementConfigEntity"
          },
          "type": "array"
        }
      }
    },
    "v1VsphereMachinePoolConfig": {
      "properties": {
        "additionalLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "additionalLabels",
          "type": "object"
        },
        "additionalTags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AdditionalTags is an optional set of tags to add to resources managed by the provider, in addition to the ones added by default. For eg., tags for EKS nodeGroup or EKS NodegroupIAMRole",
          "type": "object"
        },
        "instanceType": {
          "$ref": "#/definitions/v1VsphereInstanceType",
          "description": "InstanceType defines the required CPU, Memory, Storage"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: control-plane/worker, gpu, windows",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "machinePoolProperties": {
          "$ref": "#/definitions/v1MachinePoolProperties"
        },
        "maxSize": {
          "description": "max size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "minSize": {
          "description": "min size of the pool, for scaling",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "nodeRepaveInterval": {
          "description": "Minimum number of seconds a node should be Ready, before the next node is selected for repave. Applicable only for workerpools in infrastructure cluster",
          "format": "int32",
          "type": "integer"
        },
        "placements": {
          "description": "Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster",
          "items": {
            "$ref": "#/definitions/v1VspherePlacementConfig"
          },
          "type": "array"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "format": "int32",
          "type": "integer"
        },
        "taints": {
          "description": "control plane or worker taints",
          "items": {
            "$ref": "#/definitions/v1Taint"
          },
          "type": "array",
          "uniqueItems": true
        },
        "updateStrategy": {
          "$ref": "#/definitions/v1UpdateStrategy",
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove control plane taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      },
      "required": [
        "isControlPlane",
        "instanceType"
      ],
      "type": "object"
    },
    "v1VsphereMachinePoolConfigEntity": {
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1VsphereMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1MachinePoolConfigEntity"
        }
      },
      "required": [
        "cloudConfig"
      ],
      "type": "object"
    },
    "v1VsphereMachineSpec": {
      "description": "vSphere cloud VM definition spec",
      "properties": {
        "images": {
          "items": {
            "$ref": "#/definitions/v1VsphereImage"
          },
          "type": "array"
        },
        "instanceType": {
          "$ref": "#/definitions/v1VsphereInstanceType"
        },
        "nics": {
          "items": {
            "$ref": "#/definitions/v1VsphereNic"
          },
          "type": "array"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "placement": {
          "$ref": "#/definitions/v1VspherePlacementConfig",
          "description": "Placement configuration"
        },
        "vcenterServer": {
          "description": "VcenterServer is the address of the vSphere endpoint",
          "type": "string"
        }
      },
      "required": [
        "vcenterServer",
        "nics",
        "placement"
      ],
      "type": "object"
    },
    "v1VsphereMachines": {
      "description": "vSphere machine list",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1VsphereMachine"
          },
          "type": "array",
          "uniqueItems": true
        },
        "listmeta": {
          "$ref": "#/definitions/v1ListMetaData"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "v1VsphereNetworkConfig": {
      "properties": {
        "ipPool": {
          "$ref": "#/definitions/v1IPPool",
          "description": "when staticIP=true, need to provide IPPool"
        },
        "networkName": {
          "description": "NetworkName is the name of the network in which VMs are created/located.",
          "type": "string"
        },
        "parentPoolRef": {
          "$ref": "#/definitions/v1ObjectReference",
          "description": "ParentPoolRef reference to the ParentPool which allocates IPs for this IPPool"
        },
        "staticIp": {
          "description": "support dhcp or static IP, if false, use DHCP",
          "type": "boolean"
        }
      },
      "required": [
        "networkName"
      ],
      "type": "object"
    },
    "v1VsphereNetworkConfigEntity": {
      "properties": {
        "networkName": {
          "description": "NetworkName is the name of the network in which VMs are created/located.",
          "type": "string"
        },
        "parentPoolUid": {
          "description": "ParentPoolRef Uid to the ParentPool which allocates IPs for this IPPool",
          "type": "string"
        },
        "staticIp": {
          "description": "support dhcp or static IP, if false, use DHCP",
          "type": "boolean"
        }
      },
      "required": [
        "networkName"
      ],
      "type": "object"
    },
    "v1VsphereNic": {
      "description": "vSphere network interface",
      "properties": {
        "index": {
          "format": "int8",
          "type": "integer"
        },
        "macAddress": {
          "type": "string"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "networkName"
      ],
      "type": "object"
    },
    "v1VsphereOverlordClusterConfigEntity": {
      "properties": {
        "controlPlaneEndpoint": {
          "$ref": "#/definitions/v1ControlPlaneEndPoint",
          "description": "The optional control plane endpoint, which can be an IP or FQDN"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "placements": {
          "description": "Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster",
          "items": {
            "$ref": "#/definitions/v1VspherePlacementConfigEntity"
          },
          "type": "array"
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys for the 'spectro' user",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "staticIp": {
          "description": "whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1VspherePlacementConfig": {
      "description": "Both ClusterConfig and MachinePoolConfig will have PlacementConfig MachinePoolconfig.Placements will overwrite values defined in ClusterConfig Currently the convention is: Datacenter / Folder / ImageTemplateFolder / Network should be defined at ClusterConfig Cluster / ResourcePool / Datastore / Network is defined at MachinePool ClusterConfig Network should only indicate use DHCP or not MachinePool Network should contain the actual network and IPPool",
      "properties": {
        "cluster": {
          "description": "Cluster is the computecluster in vsphere",
          "type": "string"
        },
        "datacenter": {
          "description": "Datacenter is the name or inventory path of the datacenter where this machine's VM is created/located.",
          "type": "string"
        },
        "datastore": {
          "description": "Datastore is the datastore in which VMs are created/located.",
          "type": "string"
        },
        "folder": {
          "description": "Folder is the folder in which VMs are created/located.",
          "type": "string"
        },
        "imageTemplateFolder": {
          "description": "ImageTemplateFolder is the folder in which VMs templates are created/located. if empty will use default value spectro-templates",
          "type": "string"
        },
        "network": {
          "$ref": "#/definitions/v1VsphereNetworkConfig",
          "description": "network info"
        },
        "resourcePool": {
          "description": "ResourcePool is the resource pool within the above computecluster Cluster",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "StoragePolicyName of the storage policy to use with this Virtual Machine",
          "type": "string"
        },
        "uid": {
          "description": "UID for this placement",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1VspherePlacementConfigEntity": {
      "description": "Both ClusterConfig and MachinePoolConfig will have PlacementConfig MachinePoolconfig.Placements will overwrite values defined in ClusterConfig Currently the convention is: Datacenter / Folder / ImageTemplateFolder / Network should be defined at ClusterConfig Cluster / ResourcePool / Datastore / Network is defined at MachinePool ClusterConfig Network should only indicate use DHCP or not MachinePool Network should contain the actual network and IPPool",
      "properties": {
        "cluster": {
          "description": "Cluster is the computecluster in vsphere",
          "type": "string"
        },
        "datacenter": {
          "description": "Datacenter is the name or inventory path of the datacenter where this machine's VM is created/located.",
          "type": "string"
        },
        "datastore": {
          "description": "Datastore is the datastore in which VMs are created/located.",
          "type": "string"
        },
        "folder": {
          "description": "Folder is the folder in which VMs are created/located.",
          "type": "string"
        },
        "imageTemplateFolder": {
          "description": "ImageTemplateFolder is the folder in which VMs templates are created/located. if empty will use default value spectro-templates",
          "type": "string"
        },
        "network": {
          "$ref": "#/definitions/v1VsphereNetworkConfigEntity",
          "description": "network info"
        },
        "resourcePool": {
          "description": "ResourcePool is the resource pool within the above computecluster Cluster",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "StoragePolicyName of the storage policy to use with this Virtual Machine",
          "type": "string"
        },
        "uid": {
          "description": "UID for this placement",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Workspace": {
      "description": "Workspace information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1WorkspaceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1WorkspaceStatus"
        }
      }
    },
    "v1WorkspaceBackup": {
      "description": "Workspace backup",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1WorkspaceBackupSpec"
        },
        "status": {
          "$ref": "#/definitions/v1WorkspaceBackupStatus"
        }
      }
    },
    "v1WorkspaceBackupClusterRef": {
      "description": "Workspace backup cluster ref",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "clusterUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceBackupConfig": {
      "description": "Workspace backup config",
      "properties": {
        "backupConfig": {
          "$ref": "#/definitions/v1ClusterBackupConfig"
        },
        "clusterUids": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "includeAllClusters": {
          "type": "boolean"
        }
      }
    },
    "v1WorkspaceBackupConfigEntity": {
      "description": "Cluster backup config",
      "properties": {
        "backupConfig": {
          "$ref": "#/definitions/v1ClusterBackupConfig"
        },
        "clusterUids": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "includeAllClusters": {
          "type": "boolean"
        }
      }
    },
    "v1WorkspaceBackupDeleteEntity": {
      "description": "Cluster backup delete config",
      "properties": {
        "clusterConfigs": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceBackupClusterRef"
          },
          "type": "array",
          "uniqueItems": true
        },
        "requestUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceBackupSpec": {
      "description": "Workspace backup spec",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1WorkspaceBackupConfig"
        },
        "workspaceUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceBackupState": {
      "description": "Workspace backup state",
      "properties": {
        "deleteState": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceBackupStatus": {
      "description": "Workspace backup status",
      "properties": {
        "workspaceBackupStatuses": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceBackupStatusMeta"
          },
          "type": "array"
        }
      }
    },
    "v1WorkspaceBackupStatusConfig": {
      "description": "Workspace backup status config",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "durationInHours": {
          "format": "int64",
          "type": "number"
        },
        "includeAllDisks": {
          "type": "boolean"
        },
        "includeClusterResources": {
          "type": "boolean"
        },
        "namespaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1WorkspaceBackupStatusMeta": {
      "description": "Workspace backup status meta",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "requestUid": {
          "type": "string"
        },
        "workspaceBackupConfig": {
          "$ref": "#/definitions/v1WorkspaceClusterBackupConfig"
        }
      }
    },
    "v1WorkspaceClusterBackupConfig": {
      "description": "Workspace cluster backup config",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "backupState": {
          "$ref": "#/definitions/v1WorkspaceBackupState"
        },
        "backupTime": {
          "$ref": "#/definitions/v1Time"
        },
        "clusterBackupRefs": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterBackupResponse"
          },
          "type": "array"
        },
        "config": {
          "$ref": "#/definitions/v1WorkspaceBackupStatusConfig"
        },
        "requestTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1WorkspaceClusterBackupResponse": {
      "description": "Workspace cluster backup response",
      "properties": {
        "backupStatusMeta": {
          "$ref": "#/definitions/v1BackupStatusMeta"
        },
        "backupUid": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "clusterUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceClusterNamespace": {
      "description": "Workspace cluster namespace",
      "properties": {
        "image": {
          "$ref": "#/definitions/v1WorkspaceNamespaceImage"
        },
        "isRegex": {
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        },
        "namespaceResourceAllocation": {
          "$ref": "#/definitions/v1WorkspaceNamespaceResourceAllocation"
        }
      }
    },
    "v1WorkspaceClusterNamespacesEntity": {
      "description": "Workspace cluster namespaces update entity",
      "properties": {
        "clusterNamespaces": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterNamespace"
          },
          "type": "array",
          "uniqueItems": true
        },
        "clusterRefs": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterRef"
          },
          "type": "array",
          "uniqueItems": true
        },
        "quota": {
          "$ref": "#/definitions/v1WorkspaceQuota"
        }
      }
    },
    "v1WorkspaceClusterRef": {
      "description": "Workspace cluster reference",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "clusterUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceClusterRestoreConfig": {
      "description": "Workspace cluster restore config",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "clusterRestoreRefs": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterRestoreResponse"
          },
          "type": "array"
        },
        "restoreState": {
          "$ref": "#/definitions/v1WorkspaceRestoreState"
        },
        "restoreTime": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1WorkspaceClusterRestoreResponse": {
      "description": "Workspace cluster restore response",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "clusterUid": {
          "type": "string"
        },
        "restoreStatusMeta": {
          "$ref": "#/definitions/v1WorkspaceClusterRestoreState"
        },
        "restoreUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceClusterRestoreState": {
      "description": "Workspace cluster restore state",
      "properties": {
        "msg": {
          "type": "string"
        },
        "restoreTime": {
          "$ref": "#/definitions/v1Time"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceClusterWorkloadCronJobs": {
      "description": "Workspace cluster workload cronjobs summary",
      "properties": {
        "cronjobs": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadCronJob"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      },
      "type": "object"
    },
    "v1WorkspaceClusterWorkloadDaemonSets": {
      "description": "Workspace cluster workload daemonsets summary",
      "properties": {
        "daemonSets": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDaemonSet"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      },
      "type": "object"
    },
    "v1WorkspaceClusterWorkloadDeployments": {
      "description": "Workspace cluster workload deployments summary",
      "properties": {
        "deployments": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadDeployment"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      },
      "type": "object"
    },
    "v1WorkspaceClusterWorkloadJobs": {
      "description": "Workspace cluster workload jobs summary",
      "properties": {
        "jobs": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadJob"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      },
      "type": "object"
    },
    "v1WorkspaceClusterWorkloadNamespaces": {
      "description": "Workspace cluster workload namespaces summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        },
        "namespaces": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadNamespace"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1WorkspaceClusterWorkloadPods": {
      "description": "Workspace cluster workload pods summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        },
        "pods": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadPod"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1WorkspaceClusterWorkloadRoleBindings": {
      "description": "Workspace cluster workload rbac bindings summary",
      "properties": {
        "bindings": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadRoleBinding"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        }
      },
      "type": "object"
    },
    "v1WorkspaceClusterWorkloadStatefulSets": {
      "description": "Workspace cluster workload statefulsets summary",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1RelatedObject"
        },
        "statefulSets": {
          "items": {
            "$ref": "#/definitions/v1ClusterWorkloadStatefulSet"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1WorkspaceClustersWorkloadCronJobs": {
      "description": "Workspace clusters workload cronjobs summary",
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadCronJobs"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      },
      "type": "object"
    },
    "v1WorkspaceClustersWorkloadDaemonSets": {
      "description": "Workspace clusters workload statefulsets summary",
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadDaemonSets"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      },
      "type": "object"
    },
    "v1WorkspaceClustersWorkloadDeployments": {
      "description": "Workspace clusters workload deployments summary",
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadDeployments"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      },
      "type": "object"
    },
    "v1WorkspaceClustersWorkloadJobs": {
      "description": "Workspace clusters workload jobs summary",
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadJobs"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      },
      "type": "object"
    },
    "v1WorkspaceClustersWorkloadNamespaces": {
      "description": "Workspace clusters workload namespaces summary",
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadNamespaces"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      },
      "type": "object"
    },
    "v1WorkspaceClustersWorkloadPods": {
      "description": "Workspace clusters workload pods summary",
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadPods"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      },
      "type": "object"
    },
    "v1WorkspaceClustersWorkloadRoleBindings": {
      "description": "Workspace clusters workload rbac bindings summary",
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadRoleBindings"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      },
      "type": "object"
    },
    "v1WorkspaceClustersWorkloadStatefulSets": {
      "description": "Workspace clusters workload statefulsets summary",
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterWorkloadStatefulSets"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMetaInputEntity"
        }
      },
      "type": "object"
    },
    "v1WorkspaceEntity": {
      "description": "Workspace information",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1WorkspaceSpec"
        }
      }
    },
    "v1WorkspaceError": {
      "description": "Workspace error",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceNamespaceImage": {
      "description": "Workspace namespace image information",
      "properties": {
        "blackListedImages": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1WorkspaceNamespaceResourceAllocation": {
      "description": "Workspace namespace resource allocation",
      "properties": {
        "clusterResourceAllocations": {
          "items": {
            "$ref": "#/definitions/v1ClusterResourceAllocation"
          },
          "type": "array",
          "uniqueItems": true
        },
        "defaultResourceAllocation": {
          "$ref": "#/definitions/v1WorkspaceResourceAllocation"
        }
      }
    },
    "v1WorkspacePolicies": {
      "description": "Workspace policies",
      "properties": {
        "backupPolicy": {
          "$ref": "#/definitions/v1WorkspaceBackupConfigEntity"
        }
      }
    },
    "v1WorkspaceQuota": {
      "description": "Workspace resource quota",
      "properties": {
        "resourceAllocation": {
          "$ref": "#/definitions/v1WorkspaceResourceAllocation"
        }
      }
    },
    "v1WorkspaceResourceAllocation": {
      "description": "Workspace resource allocation",
      "properties": {
        "cpuCores": {
          "minimum": -1,
          "type": "number",
          "x-omitempty": false
        },
        "memoryMiB": {
          "minimum": -1,
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1WorkspaceResourceAllocationsEntity": {
      "description": "Workspace resource allocation update entity",
      "properties": {
        "clusterNamespaces": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterNamespace"
          },
          "type": "array",
          "uniqueItems": true
        },
        "clusterRefs": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterRef"
          },
          "type": "array",
          "uniqueItems": true
        },
        "quota": {
          "$ref": "#/definitions/v1WorkspaceQuota"
        }
      }
    },
    "v1WorkspaceRestore": {
      "description": "Workspace restore",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1WorkspaceRestoreSpec"
        },
        "status": {
          "$ref": "#/definitions/v1WorkspaceRestoreStatus"
        }
      }
    },
    "v1WorkspaceRestoreConfig": {
      "description": "Workspace cluster restore config",
      "properties": {
        "backupName": {
          "type": "string"
        },
        "includeClusterResources": {
          "type": "boolean"
        },
        "includeNamespaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "preserveNodePorts": {
          "type": "boolean"
        },
        "restorePVs": {
          "type": "boolean"
        },
        "sourceClusterUid": {
          "type": "string"
        }
      },
      "required": [
        "backupName",
        "sourceClusterUid"
      ]
    },
    "v1WorkspaceRestoreConfigEntity": {
      "description": "Cluster restore config",
      "properties": {
        "backupRequestUid": {
          "type": "string"
        },
        "restoreConfigs": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceRestoreConfig"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "backupRequestUid"
      ]
    },
    "v1WorkspaceRestoreSpec": {
      "description": "Workspace restore spec",
      "properties": {
        "workspaceUid": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceRestoreState": {
      "description": "Workspace restore state",
      "properties": {
        "deleteState": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceRestoreStatus": {
      "description": "Workspace restore status",
      "properties": {
        "workspaceRestoreStatuses": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceRestoreStatusMeta"
          },
          "type": "array"
        }
      }
    },
    "v1WorkspaceRestoreStatusMeta": {
      "description": "Workspace restore status meta",
      "properties": {
        "actor": {
          "$ref": "#/definitions/v1ClusterFeatureActor"
        },
        "requestUid": {
          "type": "string"
        },
        "workspaceRestoreConfig": {
          "$ref": "#/definitions/v1WorkspaceClusterRestoreConfig"
        }
      }
    },
    "v1WorkspaceRolesPatch": {
      "properties": {
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1WorkspaceRolesUidSummary": {
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1WorkspaceScopeRoles": {
      "description": "List all workspaces with the roles assigned to the users",
      "properties": {
        "projects": {
          "items": {
            "$ref": "#/definitions/v1ProjectsWorkspaces"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1WorkspaceSpec": {
      "description": "Workspace specifications",
      "properties": {
        "clusterNamespaces": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterNamespace"
          },
          "type": "array",
          "uniqueItems": true
        },
        "clusterRbacs": {
          "items": {
            "$ref": "#/definitions/v1ClusterRbac"
          },
          "type": "array",
          "uniqueItems": true
        },
        "clusterRefs": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceClusterRef"
          },
          "type": "array",
          "uniqueItems": true
        },
        "policies": {
          "$ref": "#/definitions/v1WorkspacePolicies"
        },
        "quota": {
          "$ref": "#/definitions/v1WorkspaceQuota"
        }
      }
    },
    "v1WorkspaceStatus": {
      "description": "Workspace status",
      "properties": {
        "errors": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceError"
          },
          "type": "array",
          "uniqueItems": true
        }
      }
    },
    "v1WorkspaceWorkloadsFilter": {
      "description": "Workspace workloads filter",
      "properties": {
        "clusters": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "namespaces": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "v1WorkspaceWorkloadsSpec": {
      "description": "Workspace workloads spec",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1WorkspaceWorkloadsFilter"
        }
      },
      "type": "object"
    },
    "v1WorkspacesRoles": {
      "description": "Workspace users and their roles",
      "properties": {
        "inheritedRoles": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceRolesUidSummary"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceRolesUidSummary"
          },
          "type": "array"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1WorkspacesRolesPatch": {
      "properties": {
        "workspaces": {
          "items": {
            "$ref": "#/definitions/v1WorkspaceRolesPatch"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1YearlyUsage": {
      "description": "Yearly usage object",
      "properties": {
        "billingPeriod": {
          "$ref": "#/definitions/v1InvoiceBillingPeriod"
        },
        "monthlyUsages": {
          "description": "List of monthly usages",
          "items": {
            "$ref": "#/definitions/v1MonthlyUsage"
          },
          "type": "array",
          "uniqueItems": true
        },
        "productUsages": {
          "$ref": "#/definitions/v1ProductUsage"
        }
      }
    },
    "v1ZoneEntity": {
      "description": "Azure availability zone entity",
      "properties": {
        "id": {
          "description": "Azure availability zone id",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "info": {
    "title": "Palette APIs - 4.4",
    "version": "v1"
  },
  "paths": {
    "/v1/apiKeys": {
      "get": {
        "operationId": "v1ApiKeysList",
        "responses": {
          "200": {
            "description": "Retrieves a list of API keys",
            "schema": {
              "$ref": "#/definitions/v1ApiKeys"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of API keys",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1ApiKeysCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ApiKeyEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "APIKey Created successfully",
            "schema": {
              "$ref": "#/definitions/v1ApiKeyCreateResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create an API key",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/apiKeys/{uid}": {
      "delete": {
        "operationId": "v1ApiKeysUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified API key",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1ApiKeysUidGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ApiKey"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified API key",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Specify API key uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1ApiKeysUidActiveState",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ApiKeyActiveState"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Activate or de-active the specified API key",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "v1ApiKeysUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ApiKeyUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the specified API key",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/apiKeys/{uid}/state": {
      "parameters": [
        {
          "description": "Specify API key uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1ApiKeysUidState",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ApiKeyActiveState"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Revoke or re-activate the API key access",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appDeployments": {
      "post": {
        "operationId": "v1AppDeploymentsVirtualClusterCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AppDeploymentVirtualClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a application deployment in the virtual cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appDeployments/clusterGroup": {
      "post": {
        "operationId": "v1AppDeploymentsClusterGroupCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AppDeploymentClusterGroupEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a application deployment in one of virtual clusters in the cluster group",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appDeployments/{uid}": {
      "delete": {
        "operationId": "v1AppDeploymentsUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified application deployment",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1AppDeploymentsUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppDeployment"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified application deployment",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Application deployment uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/appDeployments/{uid}/profile": {
      "get": {
        "operationId": "v1AppDeploymentsUidProfileGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppDeploymentProfileSpec"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns profile of the specified application deployment",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Application deployment uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1AppDeploymentsUidProfileUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AppDeploymentProfileEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified application deployment profile",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appDeployments/{uid}/profile/apply": {
      "parameters": [
        {
          "description": "Application deployment uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Application deployment notification uid",
          "in": "query",
          "name": "notify",
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1AppDeploymentsUidProfileApply",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Apply the application deployment profile updates",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appDeployments/{uid}/profile/tiers/{tierUid}": {
      "get": {
        "operationId": "v1AppDeploymentsProfileTiersUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppTier"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified application deployment profile tier information",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Application deployment uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Application deployment tier uid",
          "in": "path",
          "name": "tierUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1AppDeploymentsProfileTiersUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AppTierUpdateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified application deployment profile tier information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appDeployments/{uid}/profile/tiers/{tierUid}/manifests": {
      "get": {
        "operationId": "v1AppDeploymentsProfileTiersUidManifestsGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppTierManifests"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of manifests of the specified application deployment profile tier",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Application deployment uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Application deployment tier uid",
          "in": "path",
          "name": "tierUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/appDeployments/{uid}/profile/tiers/{tierUid}/manifests/{manifestUid}": {
      "get": {
        "operationId": "v1AppDeploymentsProfileTiersManifestsUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Manifest"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified application deployment tier manifest information",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Application deployment uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Application deployment tier uid",
          "in": "path",
          "name": "tierUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Application deployment tier manifest uid",
          "in": "path",
          "name": "manifestUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1AppDeploymentsProfileTiersManifestsUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ManifestRefUpdateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified application deployment tier manifest information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appDeployments/{uid}/profile/versions": {
      "get": {
        "operationId": "v1AppDeploymentsUidProfileVersionsGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppDeploymentProfileVersions"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of profile versions of the specified application deployment",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Application deployment uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/appProfiles": {
      "post": {
        "operationId": "v1AppProfilesCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AppProfileEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a application profile",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appProfiles/macros": {
      "get": {
        "operationId": "v1AppProfilesMacrosList",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of application profile macros",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appProfiles/{uid}": {
      "delete": {
        "operationId": "v1AppProfilesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified application profile",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1AppProfilesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppProfile"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified application profile",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1AppProfilesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AppProfileEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified application profile",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appProfiles/{uid}/clone": {
      "parameters": [
        {
          "description": "Application profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1AppProfilesUidClone",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AppProfileCloneEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Clones the specified application profile",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appProfiles/{uid}/clone/validate": {
      "parameters": [
        {
          "description": "Application profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1AppProfilesUidCloneValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AppProfileCloneMetaInputEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates the specified application profile clone",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appProfiles/{uid}/metadata": {
      "parameters": [
        {
          "description": "Application profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1AppProfilesUidMetadataUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AppProfileMetaEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified application profile metadata",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appProfiles/{uid}/tiers": {
      "get": {
        "operationId": "v1AppProfilesUidTiersGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppProfileTiers"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of tiers of the specified application profile",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Application profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1AppProfilesUidTiersPatch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AppTierPatchEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates app tier of the specified application profile",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1AppProfilesUidTiersCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AppTierEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds tier to the specified application profile",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appProfiles/{uid}/tiers/{tierUid}": {
      "delete": {
        "operationId": "v1AppProfilesUidTiersUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified application profile tier",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1AppProfilesUidTiersUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppTier"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified application profile tier information",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Application profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Application profile tier uid",
          "in": "path",
          "name": "tierUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1AppProfilesUidTiersUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AppTierUpdateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified application profile tier",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appProfiles/{uid}/tiers/{tierUid}/manifests": {
      "get": {
        "operationId": "v1AppProfilesUidTiersUidManifestsGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppTierManifests"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of manifests of the specified application profile tier",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Application profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Application profile tier uid",
          "in": "path",
          "name": "tierUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1AppProfilesUidTiersUidManifestsCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ManifestInputEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds manifest to the specified application profile tier",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appProfiles/{uid}/tiers/{tierUid}/manifests/{manifestUid}": {
      "delete": {
        "operationId": "v1AppProfilesUidTiersUidManifestsUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified application profile tier manifest",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1AppProfilesUidTiersUidManifestsUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Manifest"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified application profile tier manifest information",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Application profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Application profile tier uid",
          "in": "path",
          "name": "tierUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Application profile tier manifest uid",
          "in": "path",
          "name": "manifestUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1AppProfilesUidTiersUidManifestsUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ManifestRefUpdateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified application profile tier manifest information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/appProfiles/{uid}/tiers/{tierUid}/resolvedValues": {
      "get": {
        "operationId": "v1AppProfilesUidTiersUidResolvedValuesGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AppTierResolvedValues"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified application profile tier resolved values",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Application profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Application profile tier uid",
          "in": "path",
          "name": "tierUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/audits": {
      "get": {
        "operationId": "v1AuditsList",
        "parameters": [
          {
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "format": "date-time",
            "in": "query",
            "name": "startTime",
            "type": "string"
          },
          {
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "format": "date-time",
            "in": "query",
            "name": "endTime",
            "type": "string"
          },
          {
            "description": "Specify the user uid, to retrieve the specific user audit logs",
            "in": "query",
            "name": "userUid",
            "type": "string"
          },
          {
            "description": "Specify the project uid, to retrieve the specific project audit logs",
            "in": "query",
            "name": "projectUid",
            "type": "string"
          },
          {
            "description": "Specify the tenant uid, to retrieve the specific tenant audit logs",
            "in": "query",
            "name": "tenantUid",
            "type": "string"
          },
          {
            "description": "Specify the resource name, to retrieve the specific resource audit logs",
            "in": "query",
            "name": "resourceKind",
            "type": "string"
          },
          {
            "description": "Specify the resource uid, to retrieve the specific resource audit logs",
            "in": "query",
            "name": "resourceUid",
            "type": "string"
          },
          {
            "enum": [
              "create",
              "update",
              "delete",
              "publish",
              "deploy"
            ],
            "in": "query",
            "name": "actionType",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Audits"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves the list of audit logs",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/audits/{uid}": {
      "get": {
        "operationId": "v1AuditsUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Audit"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified audit log",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Specify the audit uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/audits/{uid}/sysMsg": {
      "get": {
        "operationId": "v1AuditsUidGetSysMsg",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AuditSysMsg"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified system audit message",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Specify the audit uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/audits/{uid}/userMsg": {
      "parameters": [
        {
          "description": "Specify the audit uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1AuditsUidMsgUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AuditMsgUpdate"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified user message for the specified audit",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/auth/authenticate": {
      "post": {
        "description": "Creates a authentication request with the specified credentials",
        "operationId": "v1Authenticate",
        "parameters": [
          {
            "default": true,
            "description": "Describes a way to set cookie from backend.",
            "in": "query",
            "name": "setCookie",
            "type": "boolean"
          },
          {
            "description": "Describes the credential details required for authentication",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AuthLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        },
        "summary": "Authenticates the user for the specified crendentials",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/auth/org": {
      "get": {
        "description": "Returns the allowed login method and information with the organization details",
        "operationId": "v1AuthOrg",
        "parameters": [
          {
            "in": "query",
            "name": "orgName",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1LoginResponse"
            }
          }
        },
        "summary": "Returns the user organization details",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/auth/org/{org}/oidc/callback": {
      "get": {
        "description": "Returns the Authorization token for the palette. This is called by the IDP as a callback url after IDP authenticates the user with its server.",
        "operationId": "V1OidcCallback",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        },
        "summary": "Idp authorization code callback",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Organization name",
          "in": "path",
          "name": "org",
          "required": true,
          "type": "string"
        },
        {
          "description": "Describes temporary and very short lived code sent by IDP to validate the token",
          "in": "query",
          "name": "code",
          "type": "string"
        },
        {
          "description": "Describes a state to validate and associate request and response",
          "in": "query",
          "name": "state",
          "type": "string"
        },
        {
          "description": "Describes a error code in case the IDP is not able to validate and authenticates the user",
          "in": "query",
          "name": "error",
          "type": "string"
        },
        {
          "description": "Describes a error in case the IDP is not able to validate and authenticates the user",
          "in": "query",
          "name": "error_description",
          "type": "string"
        }
      ]
    },
    "/v1/auth/org/{org}/oidc/logout": {
      "get": {
        "description": "Returns No Content. Works as a callback url after the IDP logout from their server.",
        "operationId": "V1OidcLogout",
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "summary": "Identity provider logout url for the Oidc",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Organization name",
          "in": "path",
          "name": "org",
          "required": true,
          "type": "string"
        },
        {
          "description": "Describes a state to validate and associate request and response",
          "in": "query",
          "name": "state",
          "type": "string"
        }
      ]
    },
    "/v1/auth/org/{org}/saml/callback": {
      "parameters": [
        {
          "description": "Organization name",
          "in": "path",
          "name": "org",
          "required": true,
          "type": "string"
        },
        {
          "description": "Deprecated.",
          "in": "query",
          "name": "authToken",
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Returns the Authorization token for the palette. This is called by the SAML based IDP as a callback url after IDP authenticates the user with its server.",
        "operationId": "V1SamlCallback",
        "parameters": [
          {
            "description": "Describe the SAML compliant response sent by IDP which will be validated by Palette",
            "in": "formData",
            "name": "SAMLResponse",
            "type": "string"
          },
          {
            "description": "Describes a state to validate and associate request and response",
            "in": "formData",
            "name": "RelayState",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        },
        "summary": "Identity provider callback url for the SMAL authentication",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/auth/org/{org}/saml/logout": {
      "parameters": [
        {
          "description": "Organization name",
          "in": "path",
          "name": "org",
          "required": true,
          "type": "string"
        },
        {
          "description": "Deprecated.",
          "in": "query",
          "name": "authToken",
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Returns No Content. Works as a callback url after the IDP logout from their server.",
        "operationId": "V1SamlLogout",
        "parameters": [
          {
            "description": "Describe the SAML compliant response sent by IDP which will be validated by Palette to perform logout.",
            "in": "formData",
            "name": "SAMLResponse",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "summary": "Identity provider logout url for the SMAL",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/auth/orgs": {
      "get": {
        "description": "Returns a list of user's organizations details and login methods",
        "operationId": "V1AuthOrgs",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Organizations"
            }
          }
        },
        "summary": "Returns a list of user's organizations",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/auth/password/{passwordToken}/activate": {
      "parameters": [
        {
          "description": "Describes the expirable password token for the user to be used for authentication of user",
          "in": "path",
          "name": "passwordToken",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "description": "Updates and Activates user password with the help of password token",
        "operationId": "v1PasswordActivate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "password": {
                  "description": "Describes the new password for the user",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "password"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "summary": "Updates and Activates the specified user password using the password token",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/auth/password/{passwordToken}/reset": {
      "parameters": [
        {
          "description": "Describes the expirable password token for the user to be used for authentication of user",
          "in": "path",
          "name": "passwordToken",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "description": "Updates the new user password with the help of password token",
        "operationId": "v1PasswordReset",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "password": {
                  "description": "Describes the new password for the user",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "password"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "summary": "Resets the user password using the password token",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/auth/refresh/{token}": {
      "get": {
        "description": "Returns a new token within refresh timeout and same session id is maintained",
        "operationId": "v1AuthRefresh",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        },
        "summary": "Refreshes authentication token",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "default": true,
          "description": "Describes a way to set cookie from backend.",
          "in": "query",
          "name": "setCookie",
          "type": "boolean"
        },
        {
          "description": "Non expired Authorization token",
          "in": "path",
          "name": "token",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/auth/sso/idps": {
      "get": {
        "description": "Returns a list of predefined Identity Provider (IDP)",
        "operationId": "V1SsoIdps",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1IdentityProviders"
            }
          }
        },
        "summary": "Returns a list of predefined Identity Provider (IDP)",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/auth/sso/logins": {
      "get": {
        "description": "Returns a list of supported sso logins and their authentication mechanism",
        "operationId": "V1SsoLogins",
        "parameters": [
          {
            "in": "query",
            "name": "org",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SsoLogins"
            }
          }
        },
        "summary": "Returns a list of supported sso logins",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/auth/sso/providers": {
      "get": {
        "description": "Returns a list of supported sso auth providers",
        "operationId": "V1AuthSsoProviders",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SsoLogins"
            }
          }
        },
        "summary": "Returns a list of supported sso auth providers",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/auth/sso/{ssoApp}/callback": {
      "get": {
        "description": "Returns Authorization token. Works as a callback url for the system defined sso apps",
        "operationId": "V1SsoCallback",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserToken"
            }
          }
        },
        "summary": "Returns Authorization token. Works as a callback url for the system defined sso apps",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Describes the sso app use to login into the system",
          "in": "path",
          "name": "ssoApp",
          "required": true,
          "type": "string"
        },
        {
          "description": "Describes temporary and very short lived code sent by IDP to validate the token",
          "in": "query",
          "name": "code",
          "type": "string"
        },
        {
          "description": "Describes a state to validate and associate request and response",
          "in": "query",
          "name": "state",
          "type": "string"
        },
        {
          "description": "Describes a error code in case the IDP is not able to validate and authenticates the user",
          "in": "query",
          "name": "error",
          "type": "string"
        },
        {
          "description": "Describes a error in case the IDP is not able to validate and authenticates the user",
          "in": "query",
          "name": "error_description",
          "type": "string"
        }
      ]
    },
    "/v1/auth/user/org/forgot": {
      "get": {
        "description": "Returns No Content. Sends the user organization(s) information via email",
        "operationId": "V1AuthUserOrgForgot",
        "parameters": [
          {
            "description": "Describes user's email id for sending organzation(s) details via email.",
            "in": "query",
            "name": "emailId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "summary": "Returns No Content. Sends the user organization information via email",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/auth/user/password/reset": {
      "post": {
        "description": "Creates request to reset password via email. Password reset email will be sent to the user. Sends 204 No Content.",
        "operationId": "v1PasswordResetRequest",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "emailId": {
                  "description": "Describes email if for which password reset email has to be sent",
                  "type": "string"
                }
              },
              "required": [
                "emailId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "summary": "Creates request to reset password via email",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/aws": {
      "get": {
        "operationId": "v1CloudAccountsAwsList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1AwsAccounts"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of AWS cloud accounts",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1CloudAccountsAwsCreate",
        "parameters": [
          {
            "description": "Request payload to validate AWS cloud account",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an AWS cloud account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/aws/{uid}": {
      "delete": {
        "operationId": "v1CloudAccountsAwsDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified AWS account",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudAccountsAwsGet",
        "parameters": [
          {
            "default": false,
            "in": "query",
            "name": "assumeCredentials",
            "type": "boolean"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AwsAccount"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified AWS account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "AWS cloud account uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudAccountsAwsUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified AWS account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/azure": {
      "get": {
        "operationId": "v1CloudAccountsAzureList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of azure cloud account items",
            "schema": {
              "$ref": "#/definitions/v1AzureAccounts"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of azure cloud accounts",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1CloudAccountsAzureCreate",
        "parameters": [
          {
            "description": "Request payload to validate Azure cloud account",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create azure cloud account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/azure/{uid}": {
      "delete": {
        "operationId": "v1CloudAccountsAzureDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified azure account",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudAccountsAzureGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AzureAccount"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified azure cloud account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Azure cloud account uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudAccountsAzureUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified azure account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/cloudTypes/{cloudType}": {
      "get": {
        "operationId": "v1CloudAccountsCustomList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account by specified cloud type items",
            "schema": {
              "$ref": "#/definitions/v1CustomAccounts"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of cloud accounts by cloud type",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Custom cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudAccountsCustomCreate",
        "parameters": [
          {
            "description": "Request payload to validate Custom cloud account",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1CustomAccountEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an cloud account of specific cloud type",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/cloudTypes/{cloudType}/{uid}": {
      "delete": {
        "operationId": "v1CloudAccountsCustomDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified account by cloud type",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudAccountsCustomGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1CustomAccount"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified account by cloud type",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Custom cloud account uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Custom cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudAccountsCustomUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1CustomAccountEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified account by cloud type",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/gcp": {
      "get": {
        "operationId": "v1CloudAccountsGcpList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of gcp cloud account items",
            "schema": {
              "$ref": "#/definitions/v1GcpAccounts"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of gcp cloud accounts",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1CloudAccountsGcpCreate",
        "parameters": [
          {
            "description": "Request payload to validate GCP cloud account",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpAccountEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a GCP cloud account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/gcp/{uid}": {
      "delete": {
        "operationId": "v1CloudAccountsGcpDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified GCP account",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudAccountsGcpGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GcpAccount"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified GCP cloud account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "GCP cloud account uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudAccountsGcpUpdate",
        "parameters": [
          {
            "description": "Request payload to validate GCP cloud account",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpAccountEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified GCP account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/maas": {
      "get": {
        "operationId": "v1CloudAccountsMaasList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1MaasAccounts"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Maas cloud accounts",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1CloudAccountsMaasCreate",
        "parameters": [
          {
            "description": "Request payload to validate Maas cloud account",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an Maas cloud account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/maas/{uid}": {
      "delete": {
        "operationId": "v1CloudAccountsMaasDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified Maas account",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudAccountsMaasGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1MaasAccount"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified Maas account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Maas cloud account uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1CloudAccountsMaasPatch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CloudAccountsPatch"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Patches the specified CloudAccount Maas",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "v1CloudAccountsMaasUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified Maas account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/maas/{uid}/properties/azs": {
      "get": {
        "operationId": "v1MaasAccountsUidAzs",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasZones"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the maas azs for a given account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudaccounts/maas/{uid}/properties/domains": {
      "get": {
        "operationId": "v1MaasAccountsUidDomains",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasDomains"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the maas domains for a given account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudaccounts/maas/{uid}/properties/resourcePools": {
      "get": {
        "operationId": "v1MaasAccountsUidPools",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasPools"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the maas pools for a given account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudaccounts/maas/{uid}/properties/subnets": {
      "get": {
        "operationId": "v1MaasAccountsUidSubnets",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasSubnets"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the maas subnets for a given account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudaccounts/maas/{uid}/properties/tags": {
      "get": {
        "operationId": "v1MaasAccountsUidTags",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasTags"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the maas tags for a given account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudaccounts/openstack": {
      "get": {
        "operationId": "v1CloudAccountsOpenStackList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAccounts"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of OpenStack cloud accounts",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1CloudAccountsOpenStackCreate",
        "parameters": [
          {
            "description": "Request payload to validate OpenStack cloud account",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a OpenStack cloud account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/openstack/{uid}": {
      "delete": {
        "operationId": "v1CloudAccountsOpenStackDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified OpenStack account",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudAccountsOpenStackGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAccount"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified OpenStack account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "OpenStack cloud account uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudAccountsOpenStackUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified OpenStack account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/azs": {
      "get": {
        "operationId": "v1OpenstackAccountsUidAzs",
        "parameters": [
          {
            "in": "query",
            "name": "region",
            "type": "string"
          },
          {
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "in": "query",
            "name": "domain",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAzs"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the openstack azs for a given account and region",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/flavors": {
      "get": {
        "operationId": "v1OpenstackAccountsUidFlavors",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "type": "string"
          },
          {
            "in": "query",
            "name": "domain",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackFlavors"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the openstack keypairs for a given account and scope",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/keypairs": {
      "get": {
        "operationId": "v1OpenstackAccountsUidKeypairs",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "type": "string"
          },
          {
            "in": "query",
            "name": "domain",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackKeypairs"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the openstack keypairs for a given account and scope",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/networks": {
      "get": {
        "operationId": "v1OpenstackAccountsUidNetworks",
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "type": "string"
          },
          {
            "in": "query",
            "name": "domain",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackNetworks"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the openstack networks for a given account and scope",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/projects": {
      "get": {
        "operationId": "v1OpenstackAccountsUidProjects",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackProjects"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the openstack projects for a given account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudaccounts/openstack/{uid}/properties/regions": {
      "get": {
        "operationId": "v1OpenstackAccountsUidRegions",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackRegions"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the openstack regions for a given account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudaccounts/summary": {
      "get": {
        "operationId": "v1CloudAccountsListSummary",
        "parameters": [
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account summary items",
            "schema": {
              "$ref": "#/definitions/v1CloudAccountsSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of cloud accounts summary",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/tencent": {
      "get": {
        "operationId": "v1CloudAccountsTencentList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1TencentAccounts"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Tencent cloud accounts",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1CloudAccountsTencentCreate",
        "parameters": [
          {
            "description": "Request payload to validate Tencent cloud account",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TencentAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an Tencent cloud account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/tencent/{uid}": {
      "delete": {
        "operationId": "v1CloudAccountsTencentDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified Tencent account",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudAccountsTencentGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TencentAccount"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified Tencent account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Tencent cloud account uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudAccountsTencentUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TencentAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified Tencent account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/vsphere": {
      "get": {
        "operationId": "v1CloudAccountsVsphereList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1VsphereAccounts"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of vSphere cloud accounts",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1CloudAccountsVsphereCreate",
        "parameters": [
          {
            "description": "Request payload to validate VSphere cloud account",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a vSphere cloud account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/vsphere/{uid}": {
      "delete": {
        "operationId": "v1CloudAccountsVsphereDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified vSphere account",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudAccountsVsphereGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VsphereAccount"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified vSphere account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "VSphere cloud account uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudAccountsVsphereUpdate",
        "parameters": [
          {
            "description": "Request payload to validate VSphere cloud account",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified VSphere account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudaccounts/vsphere/{uid}/properties/computecluster/resources": {
      "get": {
        "operationId": "v1VsphereAccountsUidClusterRes",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereComputeClusterResources"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the vSphere computecluster resources for the given overlord account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "query",
          "name": "datacenter",
          "required": true,
          "type": "string"
        },
        {
          "in": "query",
          "name": "computecluster",
          "required": true,
          "type": "string"
        },
        {
          "in": "query",
          "name": "useQualifiedNetworkName",
          "type": "boolean"
        }
      ]
    },
    "/v1/cloudaccounts/vsphere/{uid}/properties/datacenters": {
      "get": {
        "operationId": "v1VsphereAccountsUidDatacenters",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereDatacenters"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the vSphere datacenters \u0026 datacluster for the given overlord account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudaccounts/{uid}/geoLocation": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1AccountsGeolocationPatch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GeolocationLatlong"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the geolocation annotation",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/aks/{configUid}": {
      "get": {
        "operationId": "v1CloudConfigsAksGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AzureCloudConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified AKS cloud config",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudconfigs/aks/{configUid}/clusterConfig": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsAksUidClusterConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureCloudClusterConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster configuration information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/aks/{configUid}/machinePools": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsAksMachinePoolCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an AKS cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/aks/{configUid}/machinePools/{machinePoolName}": {
      "delete": {
        "operationId": "v1CloudConfigsAksMachinePoolDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified machine pool",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsAksMachinePoolUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified AKS cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/aks/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "operationId": "v1CloudConfigsAksPoolMachinesList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of AKS machine items",
            "schema": {
              "$ref": "#/definitions/v1AzureMachines"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of AKS machines",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsAksPoolMachinesAdd",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/aks/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "delete": {
        "operationId": "v1CloudConfigsAksPoolMachinesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified Azure machine",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudConfigsAksPoolMachinesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified AKS machine",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine uid",
          "in": "path",
          "name": "machineUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsAksPoolMachinesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/aws/{configUid}": {
      "get": {
        "operationId": "v1CloudConfigsAwsGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AwsCloudConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified AWS cloud config",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudconfigs/aws/{configUid}/clusterConfig": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsAwsUidClusterConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsCloudClusterConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster configuration information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/aws/{configUid}/machinePools": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsAwsMachinePoolCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an AWS cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}": {
      "delete": {
        "operationId": "v1CloudConfigsAwsMachinePoolDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified machine pool",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsAwsMachinePoolUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified AWS cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "operationId": "v1CloudConfigsAwsPoolMachinesList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of AWS machine items",
            "schema": {
              "$ref": "#/definitions/v1AwsMachines"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of AWS machines",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsAwsPoolMachinesAdd",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "delete": {
        "operationId": "v1CloudConfigsAwsPoolMachinesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified AWS machine",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudConfigsAwsPoolMachinesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified AWS machine",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine uid",
          "in": "path",
          "name": "machineUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsAwsPoolMachinesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/azure/{configUid}": {
      "get": {
        "operationId": "v1CloudConfigsAzureGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AzureCloudConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified Azure cloud config",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudconfigs/azure/{configUid}/clusterConfig": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsAzureUidClusterConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureCloudClusterConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster configuration information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/azure/{configUid}/machinePools": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsAzureMachinePoolCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an Azure cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}": {
      "delete": {
        "operationId": "v1CloudConfigsAzureMachinePoolDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified machine pool",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsAzureMachinePoolUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified Azure cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "description": "Returns all the Azure machines restricted to the user role and filters.",
        "operationId": "v1CloudConfigsAzurePoolMachinesList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of AWS machine items",
            "schema": {
              "$ref": "#/definitions/v1AzureMachines"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Azure machines",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsAzurePoolMachinesAdd",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "delete": {
        "operationId": "v1CloudConfigsAzurePoolMachinesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified Azure machine",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "description": "Returns a Azure machine for the specified uid.",
        "operationId": "v1CloudConfigsAzurePoolMachinesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified Azure machine",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine uid",
          "in": "path",
          "name": "machineUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsAzurePoolMachinesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AzureMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}": {
      "get": {
        "operationId": "v1CloudConfigsCustomGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified Custom cloud config",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        },
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/clusterConfig": {
      "parameters": [
        {
          "description": "Cluster's cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        },
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsCustomUidClusterConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudClusterConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster configuration information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/machinePools": {
      "parameters": [
        {
          "description": "Cluster's cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        },
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsCustomMachinePoolCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1CustomMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an Custom cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/machinePools/{machinePoolName}": {
      "delete": {
        "operationId": "v1CloudConfigsCustomMachinePoolDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified machine pool",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        },
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsCustomMachinePoolUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1CustomMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified Custom cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "operationId": "v1CloudConfigsCustomPoolMachinesList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Custom machine items",
            "schema": {
              "$ref": "#/definitions/v1CustomMachines"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Custom machines",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        },
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsCustomPoolMachinesAdd",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1CustomMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/cloudTypes/{cloudType}/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "delete": {
        "operationId": "v1CloudConfigsCustomPoolMachinesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified Custom machine",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudConfigsCustomPoolMachinesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1CustomMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified Custom machine",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        },
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine uid",
          "in": "path",
          "name": "machineUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsCustomPoolMachinesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1CustomMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/edge-native/{configUid}": {
      "get": {
        "operationId": "v1CloudConfigsEdgeNativeGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EdgeNativeCloudConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified edge-native cloud config",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudconfigs/edge-native/{configUid}/clusterConfig": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsEdgeNativeUidClusterConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeNativeCloudClusterConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster configuration information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/edge-native/{configUid}/machinePools": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsEdgeNativeMachinePoolCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeNativeMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a edge-native cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/edge-native/{configUid}/machinePools/{machinePoolName}": {
      "delete": {
        "operationId": "v1CloudConfigsEdgeNativeMachinePoolDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified machine pool",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsEdgeNativeMachinePoolUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeNativeMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified edge-native cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/edge-native/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "operationId": "v1CloudConfigsEdgeNativePoolMachinesList",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of edge-native machine items",
            "schema": {
              "$ref": "#/definitions/v1EdgeNativeMachines"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of edge-native machines",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsEdgeNativePoolMachinesAdd",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeNativeMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds the edge-native machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/edge-native/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "delete": {
        "operationId": "v1CloudConfigsEdgeNativePoolMachinesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified edge-native machine",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudConfigsEdgeNativePoolMachinesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EdgeNativeMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified edge-native machine",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine uid",
          "in": "path",
          "name": "machineUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsEdgeNativePoolMachinesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeNativeMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/eks/{configUid}": {
      "get": {
        "operationId": "v1CloudConfigsEksGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EksCloudConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified EKS cloud config",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudconfigs/eks/{configUid}/clusterConfig": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsEksUidClusterConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EksCloudClusterConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster configuration information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/eks/{configUid}/fargateProfiles": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsEksUidFargateProfilesUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EksFargateProfiles"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates EKS cloud config's fargate profiles",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/eks/{configUid}/machinePools": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsEksMachinePoolCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EksMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an EKS cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/eks/{configUid}/machinePools/{machinePoolName}": {
      "delete": {
        "operationId": "v1CloudConfigsEksMachinePoolDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified machine pool",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsEksMachinePoolUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EksMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified EKS cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/eks/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "operationId": "v1CloudConfigsEksPoolMachinesList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of EKS machine items",
            "schema": {
              "$ref": "#/definitions/v1AwsMachines"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of EKS machines",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsEksPoolMachinesAdd",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/eks/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "delete": {
        "operationId": "v1CloudConfigsEksPoolMachinesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified EKS machine",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudConfigsEksPoolMachinesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified EKS machine",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine uid",
          "in": "path",
          "name": "machineUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsEksPoolMachinesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AwsMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/gcp/{configUid}": {
      "get": {
        "operationId": "v1CloudConfigsGcpGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GcpCloudConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified GCP cloud config",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudconfigs/gcp/{configUid}/clusterConfig": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsGcpUidClusterConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpCloudClusterConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster configuration information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/gcp/{configUid}/machinePools": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsGcpMachinePoolCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a Gcp cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}": {
      "delete": {
        "operationId": "v1CloudConfigsGcpMachinePoolDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified machine pool",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsGcpMachinePoolUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified GCP cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "operationId": "v1CloudConfigsGcpPoolMachinesList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of GCP machine items",
            "schema": {
              "$ref": "#/definitions/v1GcpMachines"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of GCP machines",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsGcpPoolMachinesAdd",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "delete": {
        "operationId": "v1CloudConfigsGcpPoolMachinesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified GCP machine",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudConfigsGcpPoolMachinesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GcpMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified GCP machine",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine uid",
          "in": "path",
          "name": "machineUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsGcpPoolMachinesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/generic/{configUid}": {
      "get": {
        "operationId": "v1CloudConfigsGenericGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GenericCloudConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified Generic cloud config",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudconfigs/generic/{configUid}/clusterConfig": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsGenericUidClusterConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GenericCloudClusterConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster configuration information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/generic/{configUid}/machinePools": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsGenericMachinePoolCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GenericMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a generic cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/generic/{configUid}/machinePools/{machinePoolName}": {
      "delete": {
        "operationId": "v1CloudConfigsGenericMachinePoolDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified machine pool",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsGenericMachinePoolUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GenericMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified generic cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/generic/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "operationId": "v1CloudConfigsGenericPoolMachinesList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Generic machine items",
            "schema": {
              "$ref": "#/definitions/v1GenericMachines"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Generic machines",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsGenericPoolMachinesAdd",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GenericMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/generic/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "delete": {
        "operationId": "v1CloudConfigsGenericPoolMachinesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified machine",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudConfigsGenericPoolMachinesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GenericMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified generic machine",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine uid",
          "in": "path",
          "name": "machineUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsGenericPoolMachinesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GenericMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/gke/{configUid}": {
      "get": {
        "operationId": "v1CloudConfigsGkeGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GcpCloudConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified GKE cloud config",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudconfigs/gke/{configUid}/clusterConfig": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsGkeUidClusterConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpCloudClusterConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster configuration information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/gke/{configUid}/machinePools": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsGkeMachinePoolCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an GKE cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/gke/{configUid}/machinePools/{machinePoolName}": {
      "delete": {
        "operationId": "v1CloudConfigsGkeMachinePoolDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified machine pool",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsGkeMachinePoolUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified GKE cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/gke/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "operationId": "v1CloudConfigsGkePoolMachinesList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of GKE machine items",
            "schema": {
              "$ref": "#/definitions/v1GcpMachines"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of GKE machines",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsGkePoolMachinesAdd",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/gke/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "delete": {
        "operationId": "v1CloudConfigsGkePoolMachinesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified Gcp machine",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudConfigsGkePoolMachinesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1GcpMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified GKE machine",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine uid",
          "in": "path",
          "name": "machineUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsGkePoolMachinesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1GcpMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/maas/{configUid}": {
      "get": {
        "operationId": "v1CloudConfigsMaasGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1MaasCloudConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified Maas cloud config",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudconfigs/maas/{configUid}/clusterConfig": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsMaasUidClusterConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasCloudClusterConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster configuration information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/maas/{configUid}/machinePools": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsMaasMachinePoolCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an Maas cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/maas/{configUid}/machinePools/{machinePoolName}": {
      "delete": {
        "operationId": "v1CloudConfigsMaasMachinePoolDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified machine pool",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsMaasMachinePoolUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified Maas cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/maas/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "operationId": "v1CloudConfigsMaasPoolMachinesList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Maas machine items",
            "schema": {
              "$ref": "#/definitions/v1MaasMachines"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Maas machines",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsMaasPoolMachinesAdd",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/maas/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "delete": {
        "operationId": "v1CloudConfigsMaasPoolMachinesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified Maas machine",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudConfigsMaasPoolMachinesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1MaasMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified Maas machine",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine uid",
          "in": "path",
          "name": "machineUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsMaasPoolMachinesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1MaasMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/openstack/{configUid}": {
      "get": {
        "operationId": "v1CloudConfigsOpenStackGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1OpenStackCloudConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified OpenStack cloud config",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudconfigs/openstack/{configUid}/clusterConfig": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsOpenStackUidClusterConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackCloudClusterConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster configuration information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/openstack/{configUid}/machinePools": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsOpenStackMachinePoolCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a OpenStack cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/openstack/{configUid}/machinePools/{machinePoolName}": {
      "delete": {
        "operationId": "v1CloudConfigsOpenStackMachinePoolDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified machine pool",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsOpenStackMachinePoolUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified OpenStack cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/openstack/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "operationId": "v1CloudConfigsOpenStackPoolMachinesList",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of OpenStack machine items",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachines"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of OpenStack machines",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsOpenStackPoolMachinesAdd",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds the OpenStack machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/openstack/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "delete": {
        "operationId": "v1CloudConfigsOpenStackPoolMachinesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified OpenStack machine",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudConfigsOpenStackPoolMachinesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified OpenStack machine",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine uid",
          "in": "path",
          "name": "machineUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsOpenStackPoolMachinesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OpenStackMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/tke/{configUid}": {
      "get": {
        "operationId": "v1CloudConfigsTkeGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TencentCloudConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified TKE cloud config",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudconfigs/tke/{configUid}/clusterConfig": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsTkeUidClusterConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TencentCloudClusterConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster configuration information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/tke/{configUid}/machinePools": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsTkeMachinePoolCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TencentMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an TKE cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/tke/{configUid}/machinePools/{machinePoolName}": {
      "delete": {
        "operationId": "v1CloudConfigsTkeMachinePoolDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified machine pool",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsTkeMachinePoolUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TencentMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified TKE cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/tke/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "operationId": "v1CloudConfigsTkePoolMachinesList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of TKE machine items",
            "schema": {
              "$ref": "#/definitions/v1TencentMachines"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of TKE machines",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsTkePoolMachinesAdd",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TencentMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/tke/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "delete": {
        "operationId": "v1CloudConfigsTkePoolMachinesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified Tencent machine",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudConfigsTkePoolMachinesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TencentMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified Tke machine",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine uid",
          "in": "path",
          "name": "machineUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsTkePoolMachinesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TencentMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/virtual/{configUid}": {
      "get": {
        "operationId": "v1CloudConfigsVirtualGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VirtualCloudConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified Virtual cloud config",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudconfigs/virtual/{configUid}/clusterConfig": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsVirtualUidClusterConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VirtualCloudClusterConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster configuration information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/virtual/{configUid}/machinePools": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsVirtualMachinePoolCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a virtual cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/virtual/{configUid}/machinePools/{machinePoolName}": {
      "delete": {
        "operationId": "v1CloudConfigsVirtualMachinePoolDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified machine pool",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsVirtualMachinePoolUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified virtual cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/virtual/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "operationId": "v1CloudConfigsVirtualPoolMachinesList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of virtual machine items",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachines"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of virtual machines",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsVirtualPoolMachinesAdd",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/virtual/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "delete": {
        "operationId": "v1CloudConfigsVirtualPoolMachinesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified virtual machine",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudConfigsVirtualPoolMachinesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified virtual machine",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine uid",
          "in": "path",
          "name": "machineUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsVirtualPoolMachinesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/virtual/{configUid}/resize": {
      "parameters": [
        {
          "description": "Specify virtual cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsVirtualUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VirtualClusterResize"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates and resizes the virtual cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/vsphere/{configUid}": {
      "get": {
        "operationId": "v1CloudConfigsVsphereGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VsphereCloudConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified vSphere cloud config",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/cloudconfigs/vsphere/{configUid}/clusterConfig": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsVsphereUidClusterConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereCloudClusterConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster configuration information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/vsphere/{configUid}/machinePools": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsVsphereMachinePoolCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a vSphere cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}": {
      "delete": {
        "operationId": "v1CloudConfigsVsphereMachinePoolDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified machine pool",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsVsphereMachinePoolUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachinePoolConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified vSphere cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "operationId": "v1CloudConfigsVspherePoolMachinesList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of vSphere machine items",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachines"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of vSphere machines",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1CloudConfigsVspherePoolMachinesAdd",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds the vSphere machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "delete": {
        "operationId": "v1CloudConfigsVspherePoolMachinesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified vSphere machine",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1CloudConfigsVspherePoolMachinesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified vSphere machine",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine uid",
          "in": "path",
          "name": "machineUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsVspherePoolMachinesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified machine to cloud config's machine pool",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/{cloudType}/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}/maintenance": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine uid",
          "in": "path",
          "name": "machineUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsMachinePoolsMachineUidMaintenanceUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1MachineMaintenance"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified machine maintenance",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/{cloudType}/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}/maintenance/status": {
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine pool name",
          "in": "path",
          "name": "machinePoolName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Machine uid",
          "in": "path",
          "name": "machineUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1CloudConfigsMachinePoolsMachineUidMaintenanceStatusUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1MachineMaintenanceStatus"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified machine maintenance",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/cloudconfigs/{configUid}/machinePools/machineUids": {
      "get": {
        "operationId": "v1CloudConfigsMachinePoolsMachineUidsGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1MachinePoolsMachineUids"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cloud config's machine pools and machine uid",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster's cloud config uid",
          "in": "path",
          "name": "configUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/clouds/aws/account/sts": {
      "get": {
        "operationId": "V1AwsAccountStsGet",
        "parameters": [
          {
            "default": "aws",
            "description": "AWS accounts are scoped to a single partition. Allowed values [aws, aws-us-gov], Default values",
            "enum": [
              "aws",
              "aws-us-gov"
            ],
            "in": "query",
            "name": "partition",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/V1AwsAccountSts"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves AWS external id and account id",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/account/validate": {
      "post": {
        "operationId": "V1AwsAccountValidate",
        "parameters": [
          {
            "description": "Request payload to validate AWS cloud account",
            "in": "body",
            "name": "awsCloudAccount",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AwsCloudAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validate the specified AWS account credentials",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/cloudwatch/validate": {
      "post": {
        "description": "Validates aws cloud watch credentials",
        "operationId": "V1CloudsAwsCloudWatchValidate",
        "parameters": [
          {
            "description": "Request payload for cloud watch config",
            "in": "body",
            "name": "cloudWatchConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.CloudWatchConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "validates aws cloud watch credentials",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/cost": {
      "post": {
        "operationId": "v1AwsCloudCost",
        "parameters": [
          {
            "description": "Request payload for AWS cloud cost",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AwsCloudCostSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsCloudCostSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves AWS cloud account usage cost from cost explorer.",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/imageIds/{imageId}/volumeSize": {
      "get": {
        "description": "Get AWS Volume Size",
        "operationId": "V1AwsVolumeSizeGet",
        "parameters": [
          {
            "description": "Specific AWS Region",
            "in": "query",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific AWS cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "AWS image id",
            "in": "path",
            "name": "imageId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsVolumeSize"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get AWS Volume Size",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/policies": {
      "post": {
        "operationId": "V1AwsIamPolicies",
        "parameters": [
          {
            "description": "Request payload for AWS Cloud Account",
            "in": "body",
            "name": "account",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AwsCloudAccount"
            }
          },
          {
            "description": "Uid for the specific AWS cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsPolicies"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of AWS policies for the specified account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/policyArns/validate": {
      "post": {
        "operationId": "V1AwsPolicyArnsValidate",
        "parameters": [
          {
            "description": "Request payload to validate AWS policy ARN",
            "in": "body",
            "name": "spec",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AwsPolicyArnsSpec"
            }
          },
          {
            "description": "Uid for the specific AWS cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validate the aws policy arns validate",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/properties/validate": {
      "post": {
        "operationId": "V1AwsPropertiesValidate",
        "parameters": [
          {
            "description": "Request payload for AWS properties validate spec",
            "in": "body",
            "name": "properties",
            "required": true,
            "schema": {
              "$ref": "#/definitions/V1AwsPropertiesValidateSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validate AWS properties",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/regions": {
      "get": {
        "operationId": "V1AwsRegions",
        "parameters": [
          {
            "description": "Uid for the specific AWS cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsRegions"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of AWS regions for the specified account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/regions/{region}/availabilityzones": {
      "get": {
        "operationId": "V1AwsZones",
        "parameters": [
          {
            "description": "Region for which zones are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific AWS cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsAvailabilityZones"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of AWS availability zones for the specified region",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/regions/{region}/copydefaultimages": {
      "post": {
        "operationId": "V1AwsCopyImageFromDefaultRegion",
        "parameters": [
          {
            "description": "Region to copy AWS image from",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Request payload to copy the AWS image",
            "in": "body",
            "name": "spectroClusterAwsImageTag",
            "schema": {
              "$ref": "#/definitions/v1AwsFindImageRequest"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AsyncOperationIdEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Copies the specified image from one region to another region",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/regions/{region}/eksClusters/name/validate": {
      "get": {
        "description": "Returns no contents if aws cluster name is valid else error.",
        "operationId": "V1AwsClusterNameValidate",
        "parameters": [
          {
            "description": "Uid for the specific AWS cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "cluster name to be validated",
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region for which cluster name is validated",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Check if Aws cluster name is valid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/regions/{region}/images": {
      "post": {
        "operationId": "V1AwsFindImage",
        "parameters": [
          {
            "description": "Region to find AWS image",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Request payload to find the AWS image",
            "in": "body",
            "name": "awsImageRequest",
            "schema": {
              "$ref": "#/definitions/v1AwsFindImageRequest"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsImage"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns AWS image for the specified AMI name",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/regions/{region}/instancetypes": {
      "get": {
        "operationId": "V1AwsInstanceTypes",
        "parameters": [
          {
            "description": "Region for which AWS instances are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter for instances having cpu greater than or equal",
            "format": "double",
            "in": "query",
            "name": "cpuGtEq",
            "type": "number"
          },
          {
            "description": "Filter for instances having memory greater than or equal",
            "format": "double",
            "in": "query",
            "name": "memoryGtEq",
            "type": "number"
          },
          {
            "description": "Filter for instances having gpu greater than or equal",
            "format": "double",
            "in": "query",
            "name": "gpuGtEq",
            "type": "number"
          },
          {
            "description": "Uid for the specific AWS cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsInstanceTypes"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of AWS instance types",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/regions/{region}/keypairs": {
      "get": {
        "operationId": "V1AwsKeyPairs",
        "parameters": [
          {
            "description": "Region for which AWS key pairs are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific AWS cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsKeyPairs"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of AWS keypairs",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/regions/{region}/keypairs/{keypair}/validate": {
      "post": {
        "operationId": "V1AwsKeyPairValidate",
        "parameters": [
          {
            "description": "Region for which AWS key pairs is validated",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific AWS cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "AWS Key pair which is to be validated",
            "in": "path",
            "name": "keypair",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validate the specified AWS keypair",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/regions/{region}/kms/{keyId}": {
      "get": {
        "operationId": "V1AwsKmsKeyGet",
        "parameters": [
          {
            "description": "Region for which AWS KMS key belongs",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "The globally unique identifier for the KMS key",
            "in": "path",
            "name": "keyId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific AWS cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsKmsKeyEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get AWS KMS key by Id",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/regions/{region}/kmskeys": {
      "get": {
        "operationId": "V1AwsKmsKeys",
        "parameters": [
          {
            "description": "Region for which AWS KMS key are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific AWS cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsKmsKeys"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of AWS KMS keys for the specified account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/regions/{region}/kmskeys/validate": {
      "get": {
        "operationId": "V1AwsKmsKeyValidate",
        "parameters": [
          {
            "description": "Region for which AWS KMS key is validated",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific AWS cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "AWS KEY ARN for validation",
            "in": "query",
            "name": "keyArn",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validate an Aws KMS key for the specified account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/regions/{region}/storagetypes": {
      "get": {
        "operationId": "V1AwsStorageTypes",
        "parameters": [
          {
            "description": "Region for which AWS storage types are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsStorageTypes"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of AWS storage types",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/regions/{region}/vpcs": {
      "get": {
        "operationId": "V1AwsVpcs",
        "parameters": [
          {
            "description": "Region for which VPCs are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific AWS cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsVpcs"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of VPCs for the specified account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/s3/validate": {
      "post": {
        "operationId": "V1AwsS3Validate",
        "parameters": [
          {
            "description": "AWS S3 bucket credentials",
            "in": "body",
            "name": "awsS3Credential",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AwsS3BucketCredentials"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validate the AWS S3 bucket",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/securitygroups": {
      "get": {
        "operationId": "V1AwsSecurityGroups",
        "parameters": [
          {
            "description": "Uid for the specific AWS cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "Region for which security groups are requested",
            "in": "query",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Vpc Id for which security groups are requested",
            "in": "query",
            "name": "vpcId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AwsSecurityGroups"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of AWS security groups for the specified account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/aws/volumeTypes": {
      "get": {
        "description": "List all AWS Volume Types",
        "operationId": "V1AwsVolumeTypesGet",
        "parameters": [
          {
            "description": "Specific AWS Region",
            "in": "query",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AWSVolumeTypes"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get all AWS Volume Types",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/azure/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "operationId": "V1AzureAccountValidate",
        "parameters": [
          {
            "description": "Request payload for Azure cloud account",
            "in": "body",
            "name": "azureCloudAccount",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AzureCloudAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Check if Azure account is valid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/azure/groups": {
      "get": {
        "operationId": "V1AzureGroups",
        "parameters": [
          {
            "description": "Uid for the specific Azure cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureGroups"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Azure groups",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/azure/regions": {
      "get": {
        "operationId": "V1AzureRegions",
        "parameters": [
          {
            "description": "Uid for the specific Azure cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "SubscriptionId for which resources is requested",
            "in": "query",
            "name": "subscriptionId",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureRegions"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Azure regions",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/azure/regions/{region}/instancetypes": {
      "get": {
        "operationId": "V1AzureInstanceTypes",
        "parameters": [
          {
            "description": "Region for which Azure instance types are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter for instances having cpu greater than or equal",
            "format": "double",
            "in": "query",
            "name": "cpuGtEq",
            "type": "number"
          },
          {
            "description": "Filter for instances having memory greater than or equal",
            "format": "double",
            "in": "query",
            "name": "memoryGtEq",
            "type": "number"
          },
          {
            "description": "Filter for instances having gpu greater than or equal",
            "format": "double",
            "in": "query",
            "name": "gpuGtEq",
            "type": "number"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureInstanceTypes"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Azure instance types",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/azure/regions/{region}/storagetypes": {
      "get": {
        "operationId": "V1AzureStorageTypes",
        "parameters": [
          {
            "description": "Region for which Azure storage types are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureStorageTypes"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Azure storage types",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/azure/regions/{region}/subscriptions/{subscriptionId}/aksClusters/name/validate": {
      "get": {
        "description": "Returns no contents if Azure cluster name is valid else error.",
        "operationId": "V1AzureClusterNameValidate",
        "parameters": [
          {
            "description": "Uid for the specific Azure cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "cluster name to be validated",
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "region in which cluster name is to be validated",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "subscriptionId in which cluster name is to be validated",
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "resourceGroup in which cluster name is to be validated",
            "in": "query",
            "name": "resourceGroup",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Check if Azure cluster name is valid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/azure/regions/{region}/subscriptions/{subscriptionId}/networks": {
      "get": {
        "operationId": "V1AzureVirtualNetworkList",
        "parameters": [
          {
            "description": "Uid for the specific Azure cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region for which Azure virtual networks are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for which Azure virtual networks are requested",
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Resource group for which Azure virtual networks are requested",
            "in": "query",
            "name": "resourceGroup",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureVirtualNetworkList"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Azure virtual network list for the sepcified account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/azure/regions/{region}/subscriptions/{subscriptionId}/resourceGroups": {
      "get": {
        "operationId": "V1AzureResourceGroupList",
        "parameters": [
          {
            "description": "Uid for the specific Azure cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region for which Azure resource group are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for which Azure resource group are requested",
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureResourceGroupList"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Azure resource group for the specified account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/azure/regions/{region}/zones": {
      "get": {
        "operationId": "V1AzureZones",
        "parameters": [
          {
            "description": "Region for which Azure zones are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific Azure cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "subscriptionId of azure account",
            "in": "query",
            "name": "subscriptionId",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureZoneEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Azure zones for the specified region",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/azure/resourceGroups/{resourceGroup}/privateDnsZones": {
      "get": {
        "description": "Returns Azure private DNS zones",
        "operationId": "V1AzurePrivateDnsZones",
        "parameters": [
          {
            "description": "resourceGroup for which Azure private dns zones are requested",
            "in": "path",
            "name": "resourceGroup",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific Azure cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "subscriptionId for which Azure private dns zones are requested",
            "in": "query",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzurePrivateDnsZones"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get Azure private DNS zones for the given resource group",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/azure/resourceGroups/{resourceGroup}/storageAccounts": {
      "get": {
        "description": "Returns Azure storage accounts.",
        "operationId": "V1AzureStorageAccounts",
        "parameters": [
          {
            "description": "resourceGroup for which Azure storage accounts are requested",
            "in": "path",
            "name": "resourceGroup",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific Azure cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "subscriptionId for which Azure storage accounts are requested",
            "in": "query",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureStorageAccounts"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get Azure storage accounts",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/azure/resourceGroups/{resourceGroup}/storageAccounts/{storageAccountName}/containers": {
      "get": {
        "description": "Returns Azure storage containers for the given account.",
        "operationId": "V1AzureStorageContainers",
        "parameters": [
          {
            "description": "resourceGroup for which Azure storage accounts are requested",
            "in": "path",
            "name": "resourceGroup",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific Azure cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "subscriptionId for which Azure storage accounts are requested",
            "in": "query",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "resourceGroup for which Azure storage accounts are requested",
            "in": "path",
            "name": "storageAccountName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureStorageContainers"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get Azure storage containers",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/azure/storageaccounttypes": {
      "get": {
        "description": "Returns Azure storage account types.",
        "operationId": "V1AzureStorageAccountTypes",
        "parameters": [
          {
            "description": "Region for which Azure storage account types are requested",
            "in": "query",
            "name": "region",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureStorageAccountEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get Azure storage account types",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/azure/subscriptions": {
      "get": {
        "description": "Returns list of Azure subscription list.",
        "operationId": "V1AzureSubscriptionList",
        "parameters": [
          {
            "description": "Uid for the specific Azure cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureSubscriptionList"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Azure subscription list for the specified account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/azure/vhds/{vhd}/url": {
      "get": {
        "operationId": "V1AzureVhdUrl",
        "parameters": [
          {
            "description": "vhd location for which Azure vhd url is requested",
            "in": "path",
            "name": "vhd",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1AzureVhdUrlEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the Azure vhd url for the specified vhd location",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/cloudTypes": {
      "get": {
        "operationId": "V1CustomCloudTypesGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypes"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the custom cloud types",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/cloudTypes/register": {
      "post": {
        "operationId": "V1CustomCloudTypeRegister",
        "parameters": [
          {
            "description": "Request payload to register custom cloud type",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudRequestEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Registers the custom cloud type",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/cloudTypes/{cloudType}": {
      "delete": {
        "operationId": "V1CustomCloudTypesDelete",
        "parameters": [
          {
            "description": "Unique cloud type",
            "in": "path",
            "name": "cloudType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the custom cloud type",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/cloudTypes/{cloudType}/cloudAccountKeys": {
      "get": {
        "operationId": "V1CustomCloudTypeCloudAccountKeysGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeCloudAccountKeys"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns valid keys for the cloud account used for custom cloud type",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Unique cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "V1CustomCloudTypeCloudAccountKeysUpdate",
        "parameters": [
          {
            "description": "Request payload for custom cloud meta entity",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeCloudAccountKeys"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the custom cloud type cloud account keys",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/cloudTypes/{cloudType}/content/bootstrap": {
      "delete": {
        "operationId": "V1CustomCloudTypeBootstrapDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Delete the custom cloud type bootstrap",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "V1CustomCloudTypeBootstrapGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeContentResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the custom cloud type bootstrap",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Unique cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "operationId": "V1CustomCloudTypeBootstrapUpdate",
        "parameters": [
          {
            "in": "formData",
            "name": "fileName",
            "type": "file"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the custom cloud type bootstrap",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/cloudTypes/{cloudType}/content/cloudProvider": {
      "delete": {
        "operationId": "V1CustomCloudTypeCloudProviderDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Delete the custom cloud type cloud provider",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "V1CustomCloudTypeCloudProviderGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeContentResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the custom cloud type cloud provider",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Unique cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "operationId": "V1CustomCloudTypeCloudProviderUpdate",
        "parameters": [
          {
            "in": "formData",
            "name": "fileName",
            "type": "file"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the custom cloud type cloud provider",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/cloudTypes/{cloudType}/content/controlPlane": {
      "delete": {
        "operationId": "V1CustomCloudTypeControlPlaneDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Delete the custom cloud type control plane",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "V1CustomCloudTypeControlPlaneGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeContentResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the custom cloud type control plane",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Unique cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "operationId": "V1CustomCloudTypeControlPlaneUpdate",
        "parameters": [
          {
            "in": "formData",
            "name": "fileName",
            "type": "file"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the custom cloud type control plane",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/cloudTypes/{cloudType}/content/templates/clusterTemplate": {
      "delete": {
        "operationId": "V1CustomCloudTypeClusterTemplateDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Delete the custom cloud type cluster template",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "V1CustomCloudTypeClusterTemplateGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeContentResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the custom cloud type cluster template",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Unique cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "operationId": "V1CustomCloudTypeClusterTemplateUpdate",
        "parameters": [
          {
            "in": "formData",
            "name": "fileName",
            "type": "file"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the custom cloud type cluster template",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/cloudTypes/{cloudType}/content/templates/controlPlanePoolTemplate": {
      "delete": {
        "operationId": "V1CustomCloudTypeControlPlanePoolTemplateDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Delete the custom cloud type controlPlane pool template",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "V1CustomCloudTypeControlPlanePoolTemplateGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeContentResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the custom cloud type controlPlane pool template",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Unique cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "operationId": "V1CustomCloudTypeControlPlanePoolTemplateUpdate",
        "parameters": [
          {
            "in": "formData",
            "name": "fileName",
            "type": "file"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the custom cloud type controlPlane pool template",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/cloudTypes/{cloudType}/content/templates/workerPoolTemplate": {
      "delete": {
        "operationId": "V1CustomCloudTypeWorkerPoolTemplateDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Delete the custom cloud type worker pool template",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "V1CustomCloudTypeWorkerPoolTemplateGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudTypeContentResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the custom cloud type worker pool template",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Unique cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "operationId": "V1CustomCloudTypeWorkerPoolTemplateUpdate",
        "parameters": [
          {
            "in": "formData",
            "name": "fileName",
            "type": "file"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the custom cloud type worker pool template",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/cloudTypes/{cloudType}/logo": {
      "get": {
        "operationId": "V1CustomCloudTypeLogoGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "Download the logo",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the custom cloud type logo",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Unique cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "operationId": "V1CustomCloudTypeLogoUpdate",
        "parameters": [
          {
            "in": "formData",
            "name": "fileName",
            "type": "file"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the custom cloud type logo",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/cloudTypes/{cloudType}/meta": {
      "get": {
        "operationId": "V1CustomCloudTypeMetaGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CustomCloudMetaEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the custom cloud type meta",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Unique cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "V1CustomCloudTypeMetaUpdate",
        "parameters": [
          {
            "description": "Request payload for custom cloud meta entity",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CustomCloudRequestEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the custom cloud type meta",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/eks/properties/validate": {
      "post": {
        "operationId": "V1EksPropertiesValidate",
        "parameters": [
          {
            "description": "Request payload for EKS properties validate spec",
            "in": "body",
            "name": "properties",
            "required": true,
            "schema": {
              "$ref": "#/definitions/V1EksPropertiesValidateSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validate EKS properties",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/gcp/account/validate": {
      "post": {
        "operationId": "V1GcpAccountValidate",
        "parameters": [
          {
            "description": "Uid for the specific GCP cloud account",
            "in": "body",
            "name": "gcpCloudAccount",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GcpCloudAccountValidateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validate the specified GCP account credentials",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/gcp/azs/validate": {
      "post": {
        "operationId": "V1GcpAzValidate",
        "parameters": [
          {
            "description": "Uid for the specific GCP cloud account",
            "in": "body",
            "name": "entity",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AzValidateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validate the specified GCP az",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/gcp/bucketname/validate": {
      "post": {
        "operationId": "V1GcpBucketNameValidate",
        "parameters": [
          {
            "description": "Request payload for GCP account name validate",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GcpAccountNameValidateSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validate the specified GCP bucket name credentials",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/gcp/image/container/validate": {
      "get": {
        "operationId": "V1GcpContainerImageValidate",
        "parameters": [
          {
            "description": "image path in the container",
            "in": "query",
            "name": "imagePath",
            "required": true,
            "type": "string"
          },
          {
            "description": "tag in the GCP container",
            "in": "query",
            "name": "tag",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates the image with tag",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/gcp/images/{imageName}/url": {
      "get": {
        "operationId": "V1GcpImageUrl",
        "parameters": [
          {
            "description": "imageName for which GCP image url is requested",
            "in": "path",
            "name": "imageName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpImageUrlEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the Gcp image url for the specified image location",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/gcp/projects": {
      "get": {
        "operationId": "V1GcpProjects",
        "parameters": [
          {
            "description": "Uid for the specific GCP cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpProjects"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of GCP projects for the specified account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/gcp/projects/{project}/regions": {
      "get": {
        "operationId": "V1GcpRegions",
        "parameters": [
          {
            "description": "Uid for the specific GCP cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Project Name for which GCP zones are requested",
            "in": "path",
            "name": "project",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpRegions"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of GCP regions",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/gcp/projects/{project}/regions/{region}/networks": {
      "get": {
        "operationId": "V1GcpNetworks",
        "parameters": [
          {
            "description": "Uid for the specific GCP cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region for which GCP networks are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Project Name for which GCP networks are requested",
            "in": "path",
            "name": "project",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpNetworks"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of GCP networks for the specified account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/gcp/projects/{project}/regions/{region}/zones": {
      "get": {
        "operationId": "V1GcpZones",
        "parameters": [
          {
            "description": "Uid for the specific GCP cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region for which GCP zones are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Project Name for which GCP zones are requested",
            "in": "path",
            "name": "project",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpZones"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of GCP zones for the specified account and region",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/gcp/projects/{project}/validate": {
      "post": {
        "operationId": "V1GcpProjectValidate",
        "parameters": [
          {
            "description": "GCP project uid",
            "in": "path",
            "name": "project",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific GCP cloud account",
            "in": "body",
            "name": "cloudAccountUid",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CloudAccountUidEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validate the specified GCP project",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/gcp/projects/{project}/zones": {
      "get": {
        "operationId": "V1GcpAvailabilityZones",
        "parameters": [
          {
            "description": "Uid for the specific GCP cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Project Name for which GCP zones are requested",
            "in": "path",
            "name": "project",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpZones"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of GCP zones for the specified account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/gcp/properties/validate": {
      "post": {
        "operationId": "V1GcpPropertiesValidate",
        "parameters": [
          {
            "description": "Request payload for GCP properties validate spec",
            "in": "body",
            "name": "properties",
            "required": true,
            "schema": {
              "$ref": "#/definitions/V1GcpPropertiesValidateSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validate GCP properties",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/gcp/regions/{region}/instancetypes": {
      "get": {
        "operationId": "V1GcpInstanceTypes",
        "parameters": [
          {
            "description": "Region for which GCP instance types are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter for instances having cpu greater than or equal",
            "format": "double",
            "in": "query",
            "name": "cpuGtEq",
            "type": "number"
          },
          {
            "description": "Filter for instances having memory greater than or equal",
            "format": "double",
            "in": "query",
            "name": "memoryGtEq",
            "type": "number"
          },
          {
            "description": "Filter for instances having gpu greater than or equal",
            "format": "double",
            "in": "query",
            "name": "gpuGtEq",
            "type": "number"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpInstanceTypes"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of GCP instance types",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/gcp/regions/{region}/storagetypes": {
      "get": {
        "operationId": "V1GcpStorageTypes",
        "parameters": [
          {
            "description": "Region for which GCP storage types are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1GcpStorageTypes"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Gcp storage types",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/maas/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "operationId": "V1MaasAccountValidate",
        "parameters": [
          {
            "description": "Request payload for Maas cloud account",
            "in": "body",
            "name": "account",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MaasCloudAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Check if Maas account is valid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/maas/azs": {
      "get": {
        "operationId": "V1MaasZonesGet",
        "parameters": [
          {
            "description": "Uid for the specific Maas cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasZones"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Maas zones for a particular account uid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/maas/domains": {
      "get": {
        "operationId": "V1MaasDomainsGet",
        "parameters": [
          {
            "description": "Uid for the specific Maas cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasDomains"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Maas domains",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/maas/resourcePools": {
      "get": {
        "operationId": "V1MaasPoolsGet",
        "parameters": [
          {
            "description": "Uid for the specific Maas cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasPools"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Maas pools for a particular account uid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/maas/subnets": {
      "get": {
        "operationId": "V1MaasSubnetsGet",
        "parameters": [
          {
            "description": "Uid for the specific Maas cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasSubnets"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Maas subnets for a particular account uid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/maas/tags": {
      "get": {
        "operationId": "V1MaasTagsGet",
        "parameters": [
          {
            "description": "Uid for the specific Maas cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1MaasTags"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Maas tags for a particular account uid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/openstack/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "operationId": "V1OpenStackAccountValidate",
        "parameters": [
          {
            "description": "Request payload for OpenStack cloud account",
            "in": "body",
            "name": "openstackCloudAccount",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1OpenStackCloudAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Check if OpenStack account is valid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/openstack/azs": {
      "get": {
        "operationId": "V1OpenStackAzsGet",
        "parameters": [
          {
            "description": "Uid for the specific OpenStack cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "project for which OpenStack azs are requested",
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "description": "region for which OpenStack azs are requested",
            "in": "query",
            "name": "region",
            "type": "string"
          },
          {
            "description": "domain for which OpenStack azs are requested",
            "in": "query",
            "name": "domain",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackAzs"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of OpenStack azs for a particular account uid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/openstack/flavors": {
      "get": {
        "operationId": "V1OpenStackFlavorsGet",
        "parameters": [
          {
            "description": "Uid for the specific OpenStack cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "project for which OpenStack flavors are requested",
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "description": "region for which OpenStack flavors are requested",
            "in": "query",
            "name": "region",
            "type": "string"
          },
          {
            "description": "domain for which OpenStack flavors are requested",
            "in": "query",
            "name": "domain",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackFlavors"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the OpenStack flavors",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/openstack/keypairs": {
      "get": {
        "operationId": "V1OpenStackKeypairsGet",
        "parameters": [
          {
            "description": "Uid for the specific OpenStack cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "project for which OpenStack keypairs are requested",
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "description": "region for which OpenStack keypairs are requested",
            "in": "query",
            "name": "region",
            "type": "string"
          },
          {
            "description": "domain for which OpenStack keypairs are requested",
            "in": "query",
            "name": "domain",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackKeypairs"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the OpenStack keypair",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/openstack/networks": {
      "get": {
        "operationId": "V1OpenStackNetworksGet",
        "parameters": [
          {
            "description": "Uid for the specific OpenStack cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "project for which OpenStack networks are requested",
            "in": "query",
            "name": "project",
            "type": "string"
          },
          {
            "description": "region for which OpenStack networks are requested",
            "in": "query",
            "name": "region",
            "type": "string"
          },
          {
            "description": "domain for which OpenStack networks are requested",
            "in": "query",
            "name": "domain",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackNetworks"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the OpenStack networks",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/openstack/projects": {
      "get": {
        "operationId": "V1OpenStackProjectsGet",
        "parameters": [
          {
            "description": "Uid for the specific OpenStack cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackProjects"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the OpenStack projects",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/openstack/regions": {
      "get": {
        "operationId": "V1OpenStackRegionsGet",
        "parameters": [
          {
            "description": "Uid for the specific OpenStack cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OpenStackRegions"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the OpenStack regions",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/tencent/account/validate": {
      "post": {
        "operationId": "V1TencentAccountValidate",
        "parameters": [
          {
            "description": "Request payload to validate tencent cloud account",
            "in": "body",
            "name": "account",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TencentCloudAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validate the specified Tencent account credentials",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/tencent/regions": {
      "get": {
        "operationId": "V1TencentRegions",
        "parameters": [
          {
            "description": "Uid for the specific Tencent cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TencentRegions"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Tencent regions for the specified account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/tencent/regions/{region}/instancetypes": {
      "get": {
        "operationId": "V1TencentInstanceTypes",
        "parameters": [
          {
            "description": "Region for which tencent instances are listed",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter for instances having cpu greater than or equal",
            "format": "double",
            "in": "query",
            "name": "cpuGtEq",
            "type": "number"
          },
          {
            "description": "Filter for instances having memory greater than or equal",
            "format": "double",
            "in": "query",
            "name": "memoryGtEq",
            "type": "number"
          },
          {
            "description": "Filter for instances having gpu greater than or equal",
            "format": "double",
            "in": "query",
            "name": "gpuGtEq",
            "type": "number"
          },
          {
            "description": "Uid for the specific tencent cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TencentInstanceTypes"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Tencent instance types",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/tencent/regions/{region}/keypairs": {
      "get": {
        "operationId": "V1TencentKeypairs",
        "parameters": [
          {
            "description": "Region for which keypairs are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific Tencent cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TencentKeypairs"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of keypairs for the specified account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/tencent/regions/{region}/securitygroups": {
      "get": {
        "operationId": "V1TencentSecurityGroups",
        "parameters": [
          {
            "description": "Region for which security groups are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific Tencent cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TencentSecurityGroups"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of secutity groups for the specified account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/tencent/regions/{region}/storagetypes": {
      "get": {
        "operationId": "V1TencentStorageTypes",
        "parameters": [
          {
            "description": "Region for which tencent storages are listed",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific tencent cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Zone for which tencent storages are listed",
            "in": "query",
            "name": "zone",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TencentStorageTypes"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Tencent storage types",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/tencent/regions/{region}/vpcs": {
      "get": {
        "operationId": "V1TencentVpcs",
        "parameters": [
          {
            "description": "Region for which VPCs are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific Tencent cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TencentVpcs"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of VPCs for the specified account",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/tencent/regions/{region}/zones": {
      "get": {
        "operationId": "V1TencentZones",
        "parameters": [
          {
            "description": "Region for which zones are requested",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Uid for the specific Tencent cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TencentAvailabilityZones"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Tencent availability zones for the specified region",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/vsphere/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "operationId": "V1VsphereAccountValidate",
        "parameters": [
          {
            "description": "Request payload for VSphere cloud account",
            "in": "body",
            "name": "vsphereCloudAccount",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VsphereCloudAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Check if Vsphere account is valid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/vsphere/datacenters": {
      "get": {
        "operationId": "V1VsphereDatacenters",
        "parameters": [
          {
            "description": "Uid for the specific OpenStack cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereDatacenters"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the vsphere data centers",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/vsphere/datacenters/{uid}/computeclusters/{computecluster}": {
      "get": {
        "operationId": "V1VsphereComputeClusterResources",
        "parameters": [
          {
            "description": "Uid for the specific VSphere cloud account",
            "in": "query",
            "name": "cloudAccountUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "computecluster for which resources is requested",
            "in": "path",
            "name": "computecluster",
            "required": true,
            "type": "string"
          },
          {
            "description": "VSphere datacenter uid for which resources is requested",
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereComputeClusterResources"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the resources for vsphere compute cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/vsphere/env": {
      "get": {
        "operationId": "V1VsphereEnv",
        "parameters": [
          {
            "description": "Request payload for VSphere cloud account",
            "in": "body",
            "name": "vsphereCloudAccount",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VsphereCloudAccount"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereEnv"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves vsphere env",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/{cloudType}/instance/spotprice": {
      "get": {
        "operationId": "V1CloudInstanceSpotPriceGet",
        "parameters": [
          {
            "description": "Cloud type [aws/azure/gcp/tencent]",
            "in": "path",
            "name": "cloudType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Instance type for a specific cloud type",
            "in": "query",
            "name": "instanceType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Availability zone for a specific cloud type",
            "in": "query",
            "name": "zone",
            "required": true,
            "type": "string"
          },
          {
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "format": "date-time",
            "in": "query",
            "name": "timestamp",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudSpotPrice"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves the cloud instance spot price based on zone and timestamp for a specific cloud",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/{cloud}/compute/{type}/rate": {
      "get": {
        "operationId": "V1CloudComputeRate",
        "parameters": [
          {
            "description": "cloud for which compute rate is requested",
            "in": "path",
            "name": "cloud",
            "required": true,
            "type": "string"
          },
          {
            "description": "instance type for which compute rate is requested",
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "description": "region for which compute rate is requested",
            "in": "query",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudCost"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the cloud compute rate",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clouds/{cloud}/storage/{type}/rate": {
      "get": {
        "operationId": "V1CloudStorageRate",
        "parameters": [
          {
            "description": "cloud for which compute rate is requested",
            "in": "path",
            "name": "cloud",
            "required": true,
            "type": "string"
          },
          {
            "description": "storage type for which compute rate is requested",
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "description": "region for which compute rate is requested",
            "in": "query",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "maxDiskType for which compute rate is requested",
            "in": "query",
            "name": "maxDiskType",
            "type": "integer"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1CloudCost"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the cloud storage rate",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clustergroups": {
      "post": {
        "operationId": "v1ClusterGroupsCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterGroupEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create cluster groups",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clustergroups/developerCredit/usage/{scope}": {
      "get": {
        "operationId": "v1ClusterGroupsDeveloperCreditUsageGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster group developer credit usage",
            "schema": {
              "$ref": "#/definitions/v1ClusterGroupsDeveloperCreditUsage"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get cluster group developer credit usage by scope",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant"
          ],
          "in": "path",
          "name": "scope",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/clustergroups/hostCluster": {
      "get": {
        "operationId": "v1ClusterGroupsHostClusterSummary",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster groups of host cluster type summary",
            "schema": {
              "$ref": "#/definitions/v1ClusterGroupsHostClusterSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of cluster groups host cluster summary",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clustergroups/hostCluster/metadata": {
      "get": {
        "operationId": "v1ClusterGroupsHostClusterMetadata",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster groups host cluster metadata items",
            "schema": {
              "$ref": "#/definitions/v1ClusterGroupsHostClusterMetadata"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of cluster groups host cluster metadata",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clustergroups/validate/name": {
      "get": {
        "operationId": "v1ClusterGroupsValidateName",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates the cluster groups name",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clustergroups/{uid}": {
      "delete": {
        "operationId": "v1ClusterGroupsUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified cluster group",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1ClusterGroupsUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterGroup"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster groups",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/clustergroups/{uid}/hostCluster": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1ClusterGroupsUidHostClusterUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterGroupHostClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates cluster reference and host cluster config",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clustergroups/{uid}/meta": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1ClusterGroupsUidMetaUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMeta"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified cluster groups meta",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clustergroups/{uid}/packs/resolvedValues": {
      "get": {
        "operationId": "v1ClusterGroupsUidPacksResolvedValuesGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfilesResolvedValues"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified clustergroup's profile packs resolved values",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster group uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "body",
          "name": "body",
          "schema": {
            "$ref": "#/definitions/v1SpectroClusterProfilesParamReferenceEntity"
          }
        }
      ]
    },
    "/v1/clustergroups/{uid}/profiles": {
      "get": {
        "operationId": "v1ClusterGroupsUidProfilesGet",
        "parameters": [
          {
            "description": "includes pack meta such as schema, presets",
            "in": "query",
            "name": "includePackMeta",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfileList"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the associated profiles of a specified cluster group",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "ClusterGroup uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1ClusterGroupsUidProfilesUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfiles"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified cluster groups profiles",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles": {
      "post": {
        "operationId": "v1ClusterProfilesCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a cluster profile",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/bulk": {
      "delete": {
        "operationId": "v1ClusterProfilesBulkDelete",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1BulkDeleteRequest"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1BulkDeleteResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes list of cluster profiles",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/import": {
      "post": {
        "operationId": "v1ClusterProfilesImport",
        "parameters": [
          {
            "description": "If true then cluster profile will be published post successful import",
            "in": "query",
            "name": "publish",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileImportEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Imports a cluster profile",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/import/file": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "operationId": "v1ClusterProfilesImportFile",
        "parameters": [
          {
            "description": "If true then cluster profile will be published post successful import",
            "in": "query",
            "name": "publish",
            "type": "boolean"
          },
          {
            "description": "Cluster profile import file",
            "in": "formData",
            "name": "importFile",
            "type": "file"
          },
          {
            "default": "json",
            "description": "Cluster profile import file format [\"yaml\", \"json\"]",
            "enum": [
              "yaml",
              "json"
            ],
            "in": "query",
            "name": "format",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Imports a cluster profile via file",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/import/validate": {
      "post": {
        "operationId": "v1ClusterProfilesImportValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileImportEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster profile import validated response",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileImportEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates cluster profile import",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/macros": {
      "get": {
        "operationId": "v1MacrosList",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of macros",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/validate/name": {
      "get": {
        "description": "Validates the cluster profile name and version",
        "operationId": "v1ClusterProfilesValidateNameVersion",
        "parameters": [
          {
            "description": "Cluster profile name",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Cluster profile version",
            "in": "query",
            "name": "version",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates the cluster profile metadata",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/validate/packs": {
      "post": {
        "operationId": "v1ClusterProfilesValidatePacks",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileTemplateDraft"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster profile packs validation response",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates cluster profile packs",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/{uid}": {
      "delete": {
        "operationId": "v1ClusterProfilesDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified cluster profile",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1ClusterProfilesGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfile"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns a specified cluster profile",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Comma seperated pack meta such as schema, presets",
          "in": "query",
          "name": "includePackMeta",
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1ClusterProfilesUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileUpdateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified cluster profile",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/{uid}/clone": {
      "parameters": [
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1ClusterProfilesUidClone",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileCloneEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a clone of the specified cluster profile",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/{uid}/clone/validate": {
      "parameters": [
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Validates the cloned cluster profile name, version and target project uid",
        "operationId": "v1ClusterProfilesUidCloneValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileCloneMetaInputEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates the cluster profile clone",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/{uid}/export": {
      "get": {
        "operationId": "V1ClusterProfilesUidExport",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "Exports cluster profile as a file",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Export the specified cluster profile",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "default": "json",
          "description": "Cluster profile export file format [ \"yaml\", \"json\" ]",
          "enum": [
            "yaml",
            "json"
          ],
          "in": "query",
          "name": "format",
          "type": "string"
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/export/terraform": {
      "get": {
        "operationId": "V1ClusterProfilesUidExportTerraform",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "Downloads cluster profile export file",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Downloads the specified cluster profile",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "default": "yaml",
          "description": "Cluster profile export file format [ \"yaml\", \"json\" ]",
          "enum": [
            "yaml",
            "json"
          ],
          "in": "query",
          "name": "format",
          "type": "string"
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/metadata": {
      "parameters": [
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1ClusterProfilesUidMetadataUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ProfileMetaEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified cluster profile metadata",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/{uid}/packRefs": {
      "parameters": [
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Cluster profile notification uid",
          "in": "query",
          "name": "notify",
          "type": "string"
        },
        {
          "in": "body",
          "name": "body",
          "schema": {
            "$ref": "#/definitions/v1ClusterProfileNotificationUpdateEntity"
          }
        }
      ],
      "patch": {
        "operationId": "v1ClusterProfilesPacksRefUpdate",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates cluster profile packs ref",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/{uid}/packs": {
      "get": {
        "operationId": "v1ClusterProfilesUidPacksGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilePacksEntities"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster profile packs",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Comma seperated pack meta such as schema, presets",
          "in": "query",
          "name": "includePackMeta",
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1ClusterProfilesUidPacksAdd",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1PackInputEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds a new pack to the specified cluster profile and returns the created pack uid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/{uid}/packs/manifests": {
      "get": {
        "operationId": "v1ClusterProfilesUidPacksManifestsGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilePacksManifests"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster profile pack manifests",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Comma seperated pack meta such as schema, presets",
          "in": "query",
          "name": "includePackMeta",
          "type": "string"
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/packs/resolvedValues": {
      "get": {
        "operationId": "v1ClusterProfilesUidPacksResolvedValuesGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PackResolvedValues"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster profile packs resolved values",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "body",
          "name": "body",
          "schema": {
            "$ref": "#/definitions/v1PackParamsEntity"
          }
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/packs/{packName}": {
      "delete": {
        "operationId": "v1ClusterProfilesUidPacksNameDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified pack information in the cluster profile",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "V1ClusterProfilesUidPacksNameGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PackRefSummaryResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster profile pack",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Cluster profile pack name",
          "in": "path",
          "name": "packName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1ClusterProfilesUidPacksNameUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1PackUpdateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified pack information in the cluster profile",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/{uid}/packs/{packName}/config": {
      "get": {
        "operationId": "v1ClusterProfilesUidPacksConfigGet",
        "parameters": [
          {
            "description": "cluster profile uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Cluster profile pack name",
            "in": "path",
            "name": "packName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Cluster profile pack uid",
            "in": "query",
            "name": "packUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster profile pack configurations",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilePackConfigList"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster profile pack configuration",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/{uid}/packs/{packName}/manifests": {
      "get": {
        "operationId": "v1ClusterProfilesUidPacksUidManifests",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ManifestEntities"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the associated manifests for the specified profile's pack",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Cluster profile pack name",
          "in": "path",
          "name": "packName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1ClusterProfilesUidPacksNameManifestsAdd",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ManifestInputEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Adds manifest to the profiles packs and returns the added manifests uid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/{uid}/packs/{packName}/manifests/{manifestUid}": {
      "delete": {
        "operationId": "v1ClusterProfilesUidPacksNameManifestsUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified cluster profile pack manifest",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1ClusterProfilesUidPacksNameManifestsUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ManifestEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster profile pack manifest",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Cluster profile pack name",
          "in": "path",
          "name": "packName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Cluster profile pack manifest uid",
          "in": "path",
          "name": "manifestUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1ClusterProfilesUidPacksNameManifestsUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ManifestInputEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified manifest of the profile's pack",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/{uid}/publish": {
      "parameters": [
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "description": "Publish the draft cluster profile with next revision, the current draft cluster profile will be marked to published\nand the draft cluster profile will be set to null in the cluster profile template.\n",
        "operationId": "v1ClusterProfilesPublish",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Cluster profile published successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Publishes the specified cluster profile",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/{uid}/spc/download": {
      "get": {
        "operationId": "v1ClusterProfilesUidSpcDownload",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "Download cluster profile archive file",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Downloads the specified cluster profile",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/clusterprofiles/{uid}/validate/packs": {
      "post": {
        "operationId": "v1ClusterProfilesUidValidatePacks",
        "parameters": [
          {
            "description": "Cluster profile uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileTemplateDraft"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster profile packs validation response",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates specified cluster profile packs",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/clusterprofiles/{uid}/variables": {
      "delete": {
        "operationId": "V1ClusterProfilesUidVariablesDelete",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VariableNames"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified cluster profile variables",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "V1ClusterProfilesUidVariablesGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Variables"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieve a list of variables defined for the cluster profile",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "V1ClusterProfilesUidVariablesPatch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Variables"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update specific variables defined for a cluster profile",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "V1ClusterProfilesUidVariablesPut",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Variables"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the variables defined for a cluster profile",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/appDeployments": {
      "post": {
        "operationId": "v1DashboardAppDeployments",
        "parameters": [
          {
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "maximum": 50,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AppDeploymentsFilterSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of application deployment summary items",
            "schema": {
              "$ref": "#/definitions/v1AppDeploymentsSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of application deployments filter summary Supported filter fields - [\"appDeploymentName\", \"clusterUid\", \"tags\"] Supported sort fields - [\"appDeploymentName\", \"creationTimestamp\", \"lastModifiedTimestamp\"]",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/appProfiles": {
      "post": {
        "operationId": "v1DashboardAppProfiles",
        "parameters": [
          {
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "maximum": 50,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AppProfilesFilterSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of application profiles summary items",
            "schema": {
              "$ref": "#/definitions/v1AppProfilesSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of application profiles filter summary Supported filter fields - [\"profileName\", \"tags\"] Supported sort fields - [\"profileName\", \"creationTimestamp\", \"lastModifiedTimestamp\"]",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/appProfiles/metadata": {
      "get": {
        "operationId": "v1DashboardAppProfilesMetadata",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of application profile summary items",
            "schema": {
              "$ref": "#/definitions/v1AppProfilesMetadata"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of application profile metadata",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/appliances/metadata": {
      "post": {
        "operationId": "v1EdgeHostsMetadata",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostsMetadataFilter"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of edgehost summary items",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostsMetadataSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of edgehosts summary",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/cloudaccounts/metadata": {
      "get": {
        "operationId": "v1DashboardCloudAccountsMetadata",
        "parameters": [
          {
            "in": "query",
            "name": "environment",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud accounts summary items",
            "schema": {
              "$ref": "#/definitions/v1CloudAccountsMetadata"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of cloud accounts metadata",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/clustergroups/{uid}/hostClusters": {
      "post": {
        "operationId": "v1ClusterGroupUidHostClustersSummary",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSummarySpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of cluster summary for a given cluster group",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/clustergroups/{uid}/virtualClusters": {
      "post": {
        "operationId": "v1ClusterGroupUidVirtualClustersSummary",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSummarySpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of cluster summary for a given cluster group",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/clusterprofiles": {
      "post": {
        "operationId": "v1ClusterProfilesFilterSummary",
        "parameters": [
          {
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "maximum": 50,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilesFilterSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster profiles summary items",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilesSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of cluster profiles filter summary Supported filter fields - [\"profileName\", \"tags\", \"profileType\", \"environment\"] Supported sort fields - [\"profileName\", \"environment\", \"profileType\", \"creationTimestamp\", \"lastModifiedTimestamp\"]",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/clusterprofiles/metadata": {
      "get": {
        "operationId": "v1ClusterProfilesMetadata",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfilesMetadata"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of cluster profiles metadata",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/clusterprofiles/{uid}": {
      "get": {
        "operationId": "v1ClusterProfilesUidSummary",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster profile summary response",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfileSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a specified cluster profile summary",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/dashboard/edgehosts/search": {
      "post": {
        "operationId": "v1DashboardEdgehostsSearch",
        "parameters": [
          {
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "maximum": 50,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSummarySpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of edgehost summary items",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostsSearchSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Edgehosts summary with provided search filter. Supported fields as per schema /v1/dashboard/edgehosts/search/schema",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/edgehosts/search/schema": {
      "get": {
        "operationId": "v1DashboardEdgehostsSearchSchemaGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of schema items",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSchemaSpec"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a schema for the Edgehost search filter",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/pcgs/search": {
      "post": {
        "operationId": "v1DashboardPcgsSearchSummary",
        "parameters": [
          {
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "maximum": 50,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSummarySpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1PcgsSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of PCG summary with provided search filter. Supported fields as per schema /v1/dashboard/pcgs/search/schema",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/pcgs/search/schema": {
      "get": {
        "operationId": "v1DashboardPcgSearchSchemaGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of schema items",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSchemaSpec"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a schema for the PCG search filter",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/projects": {
      "get": {
        "description": "Deprecated: Use POST /v1/dashboard/projects",
        "operationId": "v1ProjectsSummary",
        "parameters": [
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "default": 60,
            "description": "Metric period in minutes defines latest metrics by period",
            "format": "int32",
            "in": "query",
            "name": "metricPeriod",
            "type": "integer"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of project summary items",
            "schema": {
              "$ref": "#/definitions/v1ProjectsSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of project summary",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1ProjectsFilterSummary",
        "parameters": [
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ProjectsFilterSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of project filter summary items",
            "schema": {
              "$ref": "#/definitions/v1ProjectsSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/projects/metadata": {
      "get": {
        "operationId": "v1ProjectsMetadata",
        "parameters": [
          {
            "description": "Name of the project",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of project metadata items",
            "schema": {
              "$ref": "#/definitions/v1ProjectsMetadata"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of projects metadata",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters": {
      "post": {
        "description": "Deprecated: Use POST /v1/dashboard/spectroclusters/search",
        "operationId": "v1SpectroClustersFilterSummary",
        "parameters": [
          {
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "maximum": 50,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterSummarySpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of cluster summary with provided filter spec Supported filter fields - [\"cpuUsage\", \"memoryUsage\", \"clusterName\", \"tags\", \"healthState\", \"clusterStates\", \"isDeleted\", \"environments\", \"metricPeriod\"] Supported sort fields - [\"environment\", \"clusterName\", \"memoryUsage\", \"healthState\", \"creationTimestamp\", \"lastModifiedTimestamp\"]",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/cost": {
      "post": {
        "operationId": "v1DashboardSpectroClustersCostSummary",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterCloudCostSummarySpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of resources cloud cost summary items",
            "schema": {
              "$ref": "#/definitions/v1ResourcesCloudCostSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves spectro clusters cloud cost summary information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/filters/workspace": {
      "get": {
        "operationId": "v1SpectroClustersFiltersWorkspace",
        "parameters": [
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of running, non rbac configured clusters in a workspace",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/metadata": {
      "get": {
        "operationId": "v1SpectroClustersMetadataGet",
        "parameters": [
          {
            "enum": [
              "hostclusters",
              "strictHostclusters"
            ],
            "in": "query",
            "name": "quickFilter",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersMetadata"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of cluster summary metadata",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1SpectroClustersMetadata",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterMetadataSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersMetadata"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of cluster summary",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/metadata/search": {
      "post": {
        "operationId": "v1SpectroClustersMetadataSearch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSummarySpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary meta items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersMetadataSearch"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of cluster metadata with provided search filter spec Supported sort fields - [\"environment\", \"clusterName\", \"clusterState\", \"creationTimestamp\", \"lastModifiedTimestamp\"]",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/metadata/search/schema": {
      "get": {
        "operationId": "v1SpectroClustersMetadataSearchSchema",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster meta schema items",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSchemaSpec"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a schema for the cluster metadata search filter",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/repaveStatus": {
      "get": {
        "operationId": "v1DashboardSpectroClustersRepaveList",
        "parameters": [
          {
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "maximum": 50,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "default": "Pending",
            "enum": [
              "Pending",
              "Approved",
              "Reverted"
            ],
            "in": "query",
            "name": "repaveState",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of clusters with the desired repave state",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/resources/consumption": {
      "post": {
        "operationId": "v1SpectroClustersResourcesConsumption",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ResourceConsumptionSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of resource consumption data items",
            "schema": {
              "$ref": "#/definitions/v1ResourcesConsumption"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves spectro clusters resource consumption",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/resources/cost": {
      "post": {
        "operationId": "v1SpectroClustersResourcesCostSummary",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ResourceCostSummarySpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of resources cost summary items",
            "schema": {
              "$ref": "#/definitions/v1ResourcesCostSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves spectro clusters resources cost summary information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/resources/usage": {
      "post": {
        "operationId": "v1SpectroClustersResourcesUsageSummary",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ResourceUsageSummarySpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of resources usage summary items",
            "schema": {
              "$ref": "#/definitions/v1ResourcesUsageSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves spectro clusters resources usage summary information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/search": {
      "post": {
        "operationId": "v1SpectroClustersSearchFilterSummary",
        "parameters": [
          {
            "description": "limit is a maximum number of responses to return for a list call. Maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "maximum": 50,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSummarySpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1SpectroClustersSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of cluster summary with provided search filter spec Supported sort fields - [\"environment\", \"clusterName\", \"memoryUsage\", \"healthState\", \"creationTimestamp\", \"lastModifiedTimestamp\"]",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/search/export": {
      "get": {
        "operationId": "v1DashboardClustersSearchSummaryExportGet",
        "parameters": [
          {
            "in": "query",
            "name": "encodedFilter",
            "type": "string"
          },
          {
            "default": "csv",
            "enum": [
              "csv"
            ],
            "in": "query",
            "name": "format",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            },
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Export and download the list of cluster summary with matching search filter and download as a file(csv)",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1DashboardClustersSearchSummaryExport",
        "parameters": [
          {
            "default": "csv",
            "enum": [
              "csv"
            ],
            "in": "query",
            "name": "format",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSummarySpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "download file",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Export the list of cluster summary with matching search filter and download as a file(csv) Supported sort fields - [\"environment\", \"clusterName\", \"healthState\", \"creationTimestamp\", \"lastModifiedTimestamp\"]",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/search/input": {
      "get": {
        "operationId": "v1DashboardSpectroClustersSearchInput",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster search filter input items",
            "schema": {
              "$ref": "#/definitions/v1ClusterSearchInputSpec"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a supported input values for the cluster search filter",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/search/schema": {
      "get": {
        "operationId": "v1SpectroClustersSearchSchema",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster filter schema items",
            "schema": {
              "$ref": "#/definitions/v1SearchFilterSchemaSpec"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a schema for the cluster search filter",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/vms": {
      "get": {
        "operationId": "V1DashboardVMEnabledClustersList",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of schema items",
            "schema": {
              "$ref": "#/definitions/v1VMClusters"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Virtual machine enabled clusters",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/{uid}": {
      "get": {
        "operationId": "v1SpectroClustersSummaryUid",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An spectro cluster summary",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterUidSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster summary",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/cost": {
      "get": {
        "operationId": "v1SpectroClustersUidCostSummary",
        "parameters": [
          {
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "format": "date-time",
            "in": "query",
            "name": "startTime",
            "type": "string"
          },
          {
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "format": "date-time",
            "in": "query",
            "name": "endTime",
            "type": "string"
          },
          {
            "description": "period in minutes, group the data point by the specified period",
            "format": "int32",
            "in": "query",
            "minimum": 60,
            "name": "period",
            "type": "integer"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An spectro cluster cost summary",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterCostSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves the specified cluster cost summary",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/overview": {
      "get": {
        "operationId": "v1SpectroClustersSummaryUidOverview",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An spectro cluster summary overview",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterUidSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster summary overview",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/dashboard/spectroclusters/{uid}/resources/consumption": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1SpectroClustersUidResourcesConsumption",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ResourceConsumptionSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of resource consumption data items",
            "schema": {
              "$ref": "#/definitions/v1ResourcesConsumption"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified spectro cluster resource consumption",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardSpectroClustersUidWorkloads",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workloads",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkload"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified cluster workloads",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/clusterrolebinding": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardSpectroClustersUidWorkloadsClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload clusterrolebindings",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadRoleBindings"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified cluster workload clusterrolebindings",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/cronjob": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardSpectroClustersUidWorkloadsCronJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload cronjobs",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadCronJobs"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified cluster workload cronjobs",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/daemonset": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardSpectroClustersUidWorkloadsDaemonSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload daemonsets",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadDaemonSets"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified cluster workload daemonsets",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/deployment": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardSpectroClustersUidWorkloadsDeployment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload deployments",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadDeployments"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified cluster workload deployments",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/job": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardSpectroClustersUidWorkloadsJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload jobs",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadJobs"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified cluster workload jobs",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/namespace": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardSpectroClustersUidWorkloadsNamespace",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload namespaces",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadNamespaces"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified cluster workload namespaces",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/pod": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardSpectroClustersUidWorkloadsPod",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload pods",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadPods"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified cluster workload pods",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/rolebinding": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardSpectroClustersUidWorkloadsRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload rolebindings",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadRoleBindings"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified cluster workload rolebindings",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/spectroclusters/{uid}/workloads/statefulset": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardSpectroClustersUidWorkloadsStatefulSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster workload statefulsets",
            "schema": {
              "$ref": "#/definitions/v1ClusterWorkloadStatefulSets"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified cluster workload statefulsets",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/workspaces": {
      "get": {
        "operationId": "v1DashboardWorkspacesList",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of workspace",
            "schema": {
              "$ref": "#/definitions/v1DashboardWorkspaces"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of workspace",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/clusterrolebinding": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload clusterrolebindings",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadRoleBindings"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified workspace clusters workload clusterrolebindings",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/cronjob": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsCronJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload cronjobs",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadCronJobs"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified workspace clusters workload cronjobs",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/daemonset": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsDaemonSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload daemonsets",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadDaemonSets"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified workspace clusters workload daemonsets",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/deployment": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsDeployment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload deployments",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadDeployments"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified workspace clusters workload deployments",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/job": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload jobs",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadJobs"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified workspace clusters workload jobs",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/namespace": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsNamespace",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload namespaces",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadNamespaces"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified workspace clusters workload namespaces",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/pod": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsPod",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload pods",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadPods"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified workspace clusters workload pods",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/rolebinding": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload rolebindings",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadRoleBindings"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified workspace clusters workload rolebindings",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/dashboard/workspaces/{uid}/spectroclusters/workloads/statefulset": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1DashboardWorkspacesUidSpectroClustersWorkloadsStatefulSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceWorkloadsSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of clusters workload statefulsets",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClustersWorkloadStatefulSets"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves specified workspace clusters workload statefulsets",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/datasinks/cloudwatch": {
      "post": {
        "description": "Sync data to cloud watch",
        "operationId": "V1DataSinksCloudWatchSink",
        "parameters": [
          {
            "description": "Request payload for cloud watch config",
            "in": "body",
            "name": "dataSinkCloudWatchConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.DataSinkCloudWatchConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "sync data to cloud watch",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts": {
      "get": {
        "description": "Deprecated. Use POST /v1/dashboard/edgehosts/search , to retrieve all the edgehosts without pagination use GET /v1/edgehosts/metadata.",
        "operationId": "v1EdgeHostDevicesList",
        "parameters": [
          {
            "enum": [
              "libvirt",
              "edge-native",
              "vsphere"
            ],
            "in": "query",
            "name": "type",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of edge host device items",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevices"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieve the Complete Edgehost Metadata List",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1EdgeHostDevicesCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDeviceEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create the edge host device",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/metadata": {
      "get": {
        "operationId": "v1EdgeHostsMetadataQuickFilterGet",
        "parameters": [
          {
            "enum": [
              "libvirt",
              "edge-native",
              "vsphere"
            ],
            "in": "query",
            "name": "type",
            "type": "string"
          },
          {
            "enum": [
              "unusedEdgeHosts"
            ],
            "in": "query",
            "name": "quickFilter",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of edge host metadata",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostsMeta"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of edge hosts metadata matching the filter condition",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/register": {
      "post": {
        "operationId": "v1EdgeHostDevicesRegister",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevice"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevice"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Registers the edge host device",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/tags": {
      "get": {
        "operationId": "v1EdgeHostsTagsGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of edge hosts tags",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostsTags"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of edge hosts tags",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/tokens": {
      "get": {
        "operationId": "v1EdgeTokensList",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of edge tokens",
            "schema": {
              "$ref": "#/definitions/v1EdgeTokens"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of edge tokens",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1EdgeTokensCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeTokenEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create the edge token",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/tokens/{uid}": {
      "delete": {
        "operationId": "v1EdgeTokensUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified edge token",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1EdgeTokensUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EdgeToken"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified edge token",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Edge token uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1EdgeTokensUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeTokenUpdate"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified edge token",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/tokens/{uid}/state": {
      "parameters": [
        {
          "description": "Edge token uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1EdgeTokensUidState",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeTokenActiveState"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Revoke or re-activate the edge token access",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/{uid}": {
      "delete": {
        "operationId": "v1EdgeHostDevicesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified edge host device",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1EdgeHostDevicesUidGet",
        "parameters": [
          {
            "default": false,
            "description": "resolve pack values if set to true",
            "in": "query",
            "name": "resolvePackValues",
            "type": "boolean"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevice"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified edge host device",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1EdgeHostDevicesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevice"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified edge host device",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/{uid}/cluster/associate": {
      "delete": {
        "operationId": "v1EdgeHostDevicesUidClusterDeassociate",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deassociate the clusters to the edge host",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1EdgeHostDevicesUidClusterAssociate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Associate the clusters to the edge host",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/{uid}/health": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1EdgeHostDevicesHealthUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostHealth"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the edge host health",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/{uid}/hostCheckSum": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1EdgeHostDeviceHostCheckSumUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDeviceHostCheckSum"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the specified edge host device host check sum",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/{uid}/hostPairingKey": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1EdgeHostDeviceHostPairingKeyUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDeviceHostPairingKey"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the specified edge host device host pairing key",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/{uid}/meta": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1EdgeHostDevicesUidMetaUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDeviceMetaUpdateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified edge host device meta",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/{uid}/pack/manifests/{manifestUid}": {
      "get": {
        "operationId": "v1EdgeHostDevicesUidPackManifestsUidGet",
        "parameters": [
          {
            "description": "edge host uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "description": "manifest uid which is part of the pack ref",
            "in": "path",
            "name": "manifestUid",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "resolve pack manifest values if set to true",
            "in": "query",
            "name": "resolveManifestValues",
            "type": "boolean"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Pack manifest content",
            "schema": {
              "$ref": "#/definitions/v1Manifest"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified edge host's manifest",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/{uid}/packs/status": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1EdgeHostDevicesUidPacksStatusPatch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPacksStatusEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Patch update specified edge host's packs status",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/{uid}/profiles": {
      "get": {
        "operationId": "v1EdgeHostDevicesUidProfilesGet",
        "parameters": [
          {
            "description": "includes pack meta such as schema, presets",
            "in": "query",
            "name": "includePackMeta",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfileList"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the associated profiles of a specified edge host device",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1EdgeHostDevicesUidProfilesUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfiles"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Associate cluster profiles to the specified edge host device",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/{uid}/reset": {
      "parameters": [
        {
          "description": "Edge host uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "V1EdgeHostsUidReset",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Reset the cluster through edge host",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/edgehosts/{uid}/spc/download": {
      "get": {
        "operationId": "v1EdgeHostDevicesUidSpcDownload",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "download spc archive file",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Download the specified edge host device spc",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/edgehosts/{uid}/vsphere/properties": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1EdgeHostDevicesUidVspherePropertiesUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostVsphereCloudProperties"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified edge host device vsphere properties",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/events/components": {
      "get": {
        "description": "Returns a paginated list of component events based on request parameters",
        "operationId": "v1EventsComponentsList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of component events items",
            "schema": {
              "$ref": "#/definitions/v1Events"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns a paginated list of component events based on request parameters",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "description": "Creates a component event",
        "operationId": "v1EventsComponentsCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Event"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a component event",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/events/components/bulk": {
      "post": {
        "description": "Creates the component events in bulk",
        "operationId": "v1EventsComponentsCreateBulk",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1BulkEvents"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uids"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates the component events in bulk",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/events/components/{objectKind}/{objectUid}": {
      "delete": {
        "operationId": "v1EventsComponentsObjTypeUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Delete all the components events for the specified related object",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "description": "Returns a list of components events for the specified related object",
        "operationId": "v1EventsComponentsObjTypeUidList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1Events"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns a list of components events for the specified related object",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Describes the related object uid for which events has to be fetched",
          "enum": [
            "spectrocluster",
            "edgehost"
          ],
          "in": "path",
          "name": "objectKind",
          "required": true,
          "type": "string"
        },
        {
          "description": "Describes the related object kind for which events has to be fetched",
          "in": "path",
          "name": "objectUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/features": {
      "get": {
        "operationId": "v1FeaturesList",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Features"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves the list of features",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/features/{uid}": {
      "parameters": [
        {
          "description": "Specify the feature uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1FeaturesUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1FeatureUpdate"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update a feature",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/filters": {
      "get": {
        "operationId": "v1FiltersList",
        "parameters": [
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of filters",
            "schema": {
              "$ref": "#/definitions/v1FiltersSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns a list of Filters",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/filters/metadata": {
      "get": {
        "operationId": "v1FiltersMetadata",
        "parameters": [
          {
            "description": "filterType can be - [tag, meta, resource]",
            "in": "query",
            "name": "filterType",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of filters",
            "schema": {
              "$ref": "#/definitions/v1FiltersMetadata"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns a list of Filters metadata",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/filters/tag": {
      "post": {
        "operationId": "v1TagFiltersCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TagFilter"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a Tag filter",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/filters/tag/{uid}": {
      "delete": {
        "operationId": "v1TagFilterUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Delete the specified Filter object",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1TagFilterUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A Filter object",
            "schema": {
              "$ref": "#/definitions/v1TagFilterSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified Filter object",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1TagFilterUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TagFilter"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates a Tag filter",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/metrics/{resourceKind}/values": {
      "get": {
        "description": "Returns all the metrics for a given resource kind",
        "operationId": "v1MetricsList",
        "parameters": [
          {
            "enum": [
              "pod",
              "namespace",
              "spectrocluster",
              "machine",
              "project"
            ],
            "in": "path",
            "name": "resourceKind",
            "required": true,
            "type": "string"
          },
          {
            "default": "all",
            "in": "query",
            "name": "metricKind",
            "type": "string"
          },
          {
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "format": "date-time",
            "in": "query",
            "name": "startTime",
            "type": "string"
          },
          {
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "format": "date-time",
            "in": "query",
            "name": "endTime",
            "type": "string"
          },
          {
            "default": 1,
            "format": "int32",
            "in": "query",
            "name": "period",
            "type": "integer"
          },
          {
            "default": false,
            "description": "Deprecated. includeMasterMachines in boolean, group the data point by including control plane nodes if set to true",
            "in": "query",
            "name": "includeMasterMachines",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "includeControlPlaneMachines in boolean, group the data point by including control plane nodes if set to true",
            "in": "query",
            "name": "includeControlPlaneMachines",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "if true then api returns only aggregation values, else api returns all data points by default",
            "in": "query",
            "name": "discrete",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "spectroClusterUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of metric items",
            "schema": {
              "$ref": "#/definitions/v1MetricTimeSeriesList"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves the list of metrics for a specified resource kind",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/metrics/{resourceKind}/{resourceUid}/values": {
      "delete": {
        "operationId": "v1MetricsUidDelete",
        "parameters": [
          {
            "enum": [
              "pod",
              "namespace",
              "spectrocluster",
              "machine",
              "project"
            ],
            "in": "path",
            "name": "resourceKind",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the metrics of the specified resource",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1MetricsUidList",
        "parameters": [
          {
            "enum": [
              "pod",
              "namespace",
              "spectrocluster",
              "machine",
              "project"
            ],
            "in": "path",
            "name": "resourceKind",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "resourceUid",
            "required": true,
            "type": "string"
          },
          {
            "default": "all",
            "description": "multiple metric kinds can be provided with comma separated",
            "in": "query",
            "name": "metricKind",
            "type": "string"
          },
          {
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "format": "date-time",
            "in": "query",
            "name": "startTime",
            "type": "string"
          },
          {
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "format": "date-time",
            "in": "query",
            "name": "endTime",
            "type": "string"
          },
          {
            "default": 1,
            "description": "period in minutes, group the data point by the specified period",
            "format": "int32",
            "in": "query",
            "name": "period",
            "type": "integer"
          },
          {
            "default": false,
            "description": "Deprecated. includeMasterMachines in boolean, group the data point by including control plane nodes if set to true",
            "in": "query",
            "name": "includeMasterMachines",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "includeControlPlaneMachines in boolean, group the data point by including control plane nodes if set to true",
            "in": "query",
            "name": "includeControlPlaneMachines",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "if true then api returns only aggregation values, else api returns all data points by default",
            "in": "query",
            "name": "discrete",
            "type": "boolean"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of metric items",
            "schema": {
              "$ref": "#/definitions/v1MetricTimeSeries"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the metrics for a specified resource uid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/notifications/": {
      "get": {
        "description": "Returns a paginated list of notifications based on request parameters",
        "operationId": "v1NotificationsList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of notification items",
            "schema": {
              "$ref": "#/definitions/v1Notifications"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns a paginated list of notifications based on request parameters",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/notifications/events": {
      "post": {
        "description": "Creates a notification event",
        "operationId": "v1NotificationsEventCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1NotificationEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a notification event",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/notifications/{objectKind}/{objectUid}": {
      "get": {
        "description": "Returns a list of notifications for the specified related object",
        "operationId": "v1NotificationsObjTypeUidList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1Notifications"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns a list of notifications for the specified related object",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Describes the related object kind for which notifications have to be fetched",
          "enum": [
            "spectrocluster",
            "clusterprofile",
            "appdeployment"
          ],
          "in": "path",
          "name": "objectKind",
          "required": true,
          "type": "string"
        },
        {
          "description": "Describes the related object uid for which notifications have to be fetched",
          "in": "path",
          "name": "objectUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Describes a way to fetch \"done\" notifications",
          "in": "query",
          "name": "isDone",
          "type": "string"
        }
      ]
    },
    "/v1/notifications/{uid}/ack": {
      "parameters": [
        {
          "description": "Describes acknowledging notification uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "description": "Updates the specified notification for the acknowledgment",
        "operationId": "v1NotificationsUidAck",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified notification for the acknowledgment",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/notifications/{uid}/done": {
      "parameters": [
        {
          "description": "Describes notification uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "description": "Updates the specified notification action as done",
        "operationId": "v1NotificationsUidDone",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified notification action as done",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords": {
      "get": {
        "operationId": "v1OverlordsList",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Overlords"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of overlords owned by the tenant",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords/maas/manifest": {
      "get": {
        "operationId": "V1OverlordsMaasManifest",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OverlordManifest"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the manifests required for the private gateway installation",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "query",
          "name": "pairingCode",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/overlords/maas/{uid}/account": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1OverlordsUidMaasAccountCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordMaasAccountCreate"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "create the maas cloudaccount for the private gateway",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "v1OverlordsUidMaasAccountUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordMaasAccountEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "update the maas cloudaccount for the private gateway",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords/maas/{uid}/account/validate": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1OverlordsUidMaasAccountValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "account": {
                  "$ref": "#/definitions/v1MaasCloudAccount"
                }
              }
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "validate the maas cloudaccount for the private gateway",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords/maas/{uid}/cloudconfig": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "V1OverlordsUidMaasCloudConfigCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordMaasCloudConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "create the maas cloud config for the private gateway",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "V1OverlordsUidMaasCloudConfigUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordMaasCloudConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "update the maas cloud config for the private gateway",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords/maas/{uid}/clusterprofile": {
      "get": {
        "operationId": "v1OverlordsUidMaasClusterProfile",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfile"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified maas private gateway cluster profile",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/overlords/migrate": {
      "post": {
        "operationId": "V1OverlordsMigrate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordMigrateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "migrate all the clusters from source overlord to target overlord",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords/openstack/manifest": {
      "get": {
        "operationId": "v1OverlordsOpenStackManifest",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OverlordManifest"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the manifests required for the private gateway installation",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "query",
          "name": "pairingCode",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/overlords/openstack/{uid}/account": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1OverlordsUidOpenStackAccountCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordOpenStackAccountCreate"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "create the OpenStack cloudaccount for the private gateway",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "v1OverlordsUidOpenStackAccountUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordOpenStackAccountEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "update the OpenStack cloudaccount for the private gateway",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords/openstack/{uid}/account/validate": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1OverlordsUidOpenStackAccountValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "account": {
                  "$ref": "#/definitions/v1OpenStackCloudAccount"
                }
              }
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "validate the OpenStack cloudaccount for the private gateway",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords/openstack/{uid}/cloudconfig": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1OverlordsUidOpenStackCloudConfigCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordOpenStackCloudConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "create the OpenStack cloud config for the private gateway",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "v1OverlordsUidOpenStackCloudConfigUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordOpenStackCloudConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "update the OpenStack cloud config for the private gateway",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords/openstack/{uid}/clusterprofile": {
      "get": {
        "operationId": "v1OverlordsUidOpenStackClusterProfile",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfile"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified OpenStack private gateway cluster profile",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/overlords/pairing/code": {
      "get": {
        "operationId": "v1OverlordsPairingCode",
        "parameters": [
          {
            "enum": [
              "vsphere",
              "openstack",
              "maas"
            ],
            "in": "query",
            "name": "cloudType",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1PairingCode"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the pairing code for the private gateway",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords/vsphere/manifest": {
      "get": {
        "operationId": "v1OverlordsVsphereManifest",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OverlordManifest"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the manifests required for the private gateway installation",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "query",
          "name": "pairingCode",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/overlords/vsphere/ova": {
      "get": {
        "operationId": "v1OverlordsVsphereOvaGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OverloadVsphereOva"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns overlord's ova information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords/vsphere/{uid}/account": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1OverlordsUidVsphereAccountCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordVsphereAccountCreate"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "create the vSphere cloudaccount for the private gateway",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "v1OverlordsUidVsphereAccountUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordVsphereAccountEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "update the vSphere cloudaccount for the private gateway",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords/vsphere/{uid}/account/validate": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1OverlordsUidVsphereAccountValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "account": {
                  "$ref": "#/definitions/v1VsphereCloudAccount"
                }
              }
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "validate the vSphere cloudaccount for the private gateway",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords/vsphere/{uid}/cloudconfig": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1OverlordsUidVsphereCloudConfigCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordVsphereCloudConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "create the vSphere cloud config for the private gateway",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "v1OverlordsUidVsphereCloudConfigUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OverlordVsphereCloudConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "update the vSphere cloud config for the private gateway",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords/vsphere/{uid}/clusterprofile": {
      "get": {
        "operationId": "v1OverlordsUidVsphereClusterProfile",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterProfile"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified vsphere private gateway cluster profile",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/overlords/vsphere/{uid}/pools": {
      "get": {
        "operationId": "v1OverlordsUidPoolsList",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1IpPools"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of IP Pools for the specified private gateway",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1OverlordsUidPoolCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1IpPoolInputEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an IP pool defintion for the sepcified private gateway",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords/vsphere/{uid}/pools/{poolUid}": {
      "delete": {
        "operationId": "v1OverlordsUidPoolDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the private gateways's specified IP Pool data",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "poolUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1OverlordsUidPoolUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1IpPoolInputEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the private gateways's specified IP Pool data",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords/vsphere/{uid}/properties/computecluster/resources": {
      "get": {
        "operationId": "v1OverlordsUidVsphereComputeclusterRes",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereComputeClusterResources"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves the vSphere computecluster resources for the specified private gateway's account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "query",
          "name": "datacenter",
          "required": true,
          "type": "string"
        },
        {
          "in": "query",
          "name": "computecluster",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/overlords/vsphere/{uid}/properties/datacenters": {
      "get": {
        "operationId": "v1OverlordsUidVsphereDatacenters",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereDatacenters"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves the vSphere datacenters \u0026 datacluster for the specified private gateway's account",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/overlords/{uid}": {
      "delete": {
        "operationId": "v1OverlordsUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1DeletedMsg"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "delete the private gateway",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1OverlordsUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Overlord"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified private gateway's for the given uid",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/overlords/{uid}/metadata": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1OverlordsUidMetadataUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMetaInputEntitySchema"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "update the private gateway's metadata",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/overlords/{uid}/reset": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1OverlordsUidReset",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1UpdatedMsg"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "reset the private gateway by disaaociating the private gateway's resources",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/packs": {
      "delete": {
        "operationId": "v1PacksSummaryDelete",
        "parameters": [
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1DeleteMeta"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the packs",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1PacksSummaryList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of pack summary items",
            "schema": {
              "$ref": "#/definitions/v1PackSummaries"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of packs",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/packs/search": {
      "post": {
        "operationId": "v1PacksSearch",
        "parameters": [
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1PacksFilterSpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of pack summary items",
            "schema": {
              "$ref": "#/definitions/v1PackMetadataList"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of packs based on filter",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/packs/{packName}/registries/{registryUid}": {
      "get": {
        "operationId": "v1PacksNameRegistryUidList",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1PackTagEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of packs",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Pack registry uid",
          "in": "path",
          "name": "registryUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Pack name",
          "in": "path",
          "name": "packName",
          "required": true,
          "type": "string"
        },
        {
          "default": "all",
          "description": "Pack cloud type",
          "in": "query",
          "name": "cloudType",
          "type": "string"
        },
        {
          "description": "Pack layer",
          "in": "query",
          "name": "layer",
          "type": "string"
        },
        {
          "description": "Comma seperated pack states. Example values are \"deprecated\" \"deprecated,disabled\". If states is not specified or empty then by default API will return all packs except \"disabled\" packs",
          "in": "query",
          "name": "states",
          "type": "string"
        }
      ]
    },
    "/v1/packs/{packUid}/logo": {
      "get": {
        "operationId": "v1PacksPackUidLogo",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "image/png",
          "image/gif",
          "image/jpeg"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Cache-Control": {
                "description": "Cache control directive for the response",
                "type": "string"
              },
              "Expires": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the logo for a specified pack",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Pack uid",
          "in": "path",
          "name": "packUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/packs/{uid}": {
      "get": {
        "operationId": "v1PacksUid",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A pack for the specified uid",
            "schema": {
              "$ref": "#/definitions/v1PackTagEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified pack",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Pack uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/packs/{uid}/readme": {
      "get": {
        "operationId": "v1PacksUidReadme",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Readme describes the documentation of the specified pack",
            "schema": {
              "$ref": "#/definitions/v1PackReadme"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the readme of a specified pack",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Pack uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/pcg/selfHosted": {
      "post": {
        "operationId": "v1PcgSelfHosted",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1PcgSelfHostedParams"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1PcgServiceKubectlCommands"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the private gateway manifest link",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/pcg/{uid}/register": {
      "post": {
        "operationId": "v1PcgUidRegister",
        "parameters": [
          {
            "in": "body",
            "name": "pairingCode",
            "schema": {
              "$ref": "#/definitions/v1PairingCode"
            }
          },
          {
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Registers the pcg",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/pcg/{uid}/services/ally/manifest": {
      "get": {
        "operationId": "v1PcgUidAllyManifestGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "download file",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the pcg ally manifest",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/pcg/{uid}/services/jet/manifest": {
      "get": {
        "operationId": "v1PcgUidJetManifestGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "download file",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the pcg jet manifest",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/permissions": {
      "get": {
        "operationId": "v1PermissionsList",
        "parameters": [
          {
            "enum": [
              "system",
              "tenant",
              "project",
              "resource"
            ],
            "in": "query",
            "name": "scope",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of permissions",
            "schema": {
              "$ref": "#/definitions/v1Permissions"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of permissions",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/projects": {
      "get": {
        "description": "Deprecated: Use POST /v1/dashboard/projects",
        "operationId": "v1ProjectsList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of projects",
            "schema": {
              "$ref": "#/definitions/v1Projects"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of projects",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1ProjectsCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ProjectEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a project",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/projects/alerts": {
      "get": {
        "operationId": "v1ProjectsAlerts",
        "responses": {
          "200": {
            "description": "An array of alert components",
            "schema": {
              "$ref": "#/definitions/v1ProjectAlertComponents"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of supported alerts for a project",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/projects/{uid}": {
      "delete": {
        "operationId": "v1ProjectsUidDelete",
        "parameters": [
          {
            "in": "query",
            "name": "cleanupProjectResources",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ProjectCleanup"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified project",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1ProjectsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Project"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified project",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1ProjectsUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ProjectEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified project",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/projects/{uid}/alerts/{component}": {
      "delete": {
        "operationId": "v1ProjectsUidAlertDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified alert to the specified project",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "component",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1ProjectsUidAlertCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Channel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create the specified alert to the specified project",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "v1ProjectsUidAlertUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AlertEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Upsert the specified alert to the specified project",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/projects/{uid}/alerts/{component}/{alertUid}": {
      "delete": {
        "operationId": "v1ProjectsUidAlertsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified alert of the specified project",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1ProjectsUidAlertsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Channel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the specified alert of the specified project",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "component",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "alertUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1ProjectsUidAlertsUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Channel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the specified alert of the specified project",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/projects/{uid}/macros": {
      "delete": {
        "operationId": "v1ProjectsUidMacrosDeleteByMacroName",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Delete the macros for the specified project by macro name",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1ProjectsUidMacrosList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "List the macros of the specified project",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1ProjectsUidMacrosUpdateByMacroName",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the macros for the specified project by macro name",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1ProjectsUidMacrosCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create or add new macros for the specified project",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "v1ProjectsUidMacrosUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the macros of the specified project",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/projects/{uid}/meta": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1ProjectsUidMetaUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMeta"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the metadata of the specified project",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/projects/{uid}/preferences/clusterSettings": {
      "get": {
        "operationId": "v1ProjectClusterSettingsGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ProjectClusterSettings"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get project cluster settings",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{uid}/preferences/clusterSettings/nodesAutoRemediationSetting": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1ProjectClustersNodesAutoRemediationSettingUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1NodesAutoRemediationSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update project clusters nodes auto remediation setting",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/projects/{uid}/teams": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1ProjectsUidTeamsUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ProjectTeamsEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the teams association to the specified project",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/projects/{uid}/users": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1ProjectsUidUsersUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ProjectUsersEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the users association to the specified project",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/projects/{uid}/validate": {
      "delete": {
        "operationId": "v1ProjectsUidValidate",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ProjectActiveResources"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validate and returns active resource of project before delete",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/registries/helm": {
      "get": {
        "operationId": "v1RegistriesHelmList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1HelmRegistries"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Helm registries",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "default": "all",
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "in": "query",
          "name": "scope",
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1RegistriesHelmCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1HelmRegistryEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a helm registry",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/helm/summary": {
      "get": {
        "operationId": "v1RegistriesHelmSummaryList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1HelmRegistriesSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of helm registries as summary",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "default": "all",
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "in": "query",
          "name": "scope",
          "type": "string"
        }
      ]
    },
    "/v1/registries/helm/validate": {
      "post": {
        "description": "Returns no contents if helm registry is valid else error.",
        "operationId": "V1RegistriesHelmValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1HelmRegistrySpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Check if helm registry is valid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/helm/{uid}": {
      "delete": {
        "operationId": "v1RegistriesHelmUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified helm registry",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1RegistriesHelmUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1HelmRegistry"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified Helm registry",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1RegistriesHelmUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1HelmRegistry"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified helm registry",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/helm/{uid}/sync": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "default": false,
          "in": "query",
          "name": "forceSync",
          "type": "boolean"
        }
      ],
      "post": {
        "description": "Sync all the helm charts from the registry",
        "operationId": "v1RegistriesHelmUidSync",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Sync Helm registry",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/helm/{uid}/sync/status": {
      "get": {
        "description": "Get the sync status for the specified helm registry",
        "operationId": "v1RegistriesHelmUidSyncStatus",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Helm registry sync status",
            "schema": {
              "$ref": "#/definitions/v1RegistrySyncStatus"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get helm registry sync status",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/registries/metadata": {
      "get": {
        "operationId": "v1RegistriesMetadata",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry metadata items",
            "schema": {
              "$ref": "#/definitions/v1RegistriesMetadata"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of registries metadata",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "default": "all",
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "in": "query",
          "name": "scope",
          "type": "string"
        }
      ]
    },
    "/v1/registries/oci/basic": {
      "post": {
        "operationId": "v1BasicOciRegistriesCreate",
        "parameters": [
          {
            "default": false,
            "in": "query",
            "name": "skipPackSync",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1BasicOciRegistry"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a basic oci registry",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/oci/basic/validate": {
      "post": {
        "description": "Returns no contents if oci registry is valid else error.",
        "operationId": "v1BasicOciRegistriesValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BasicOciRegistrySpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Check if oci registry is valid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/oci/ecr": {
      "post": {
        "operationId": "v1EcrRegistriesCreate",
        "parameters": [
          {
            "default": false,
            "in": "query",
            "name": "skipPackSync",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EcrRegistry"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a ecr registry",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/oci/ecr/validate": {
      "post": {
        "description": "Returns no contents if ecr registry is valid else error.",
        "operationId": "v1EcrRegistriesValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EcrRegistrySpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Check if ecr registry is valid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/oci/image": {
      "get": {
        "operationId": "v1OciImageRegistryGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1OciImageRegistry"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a image registry",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/oci/summary": {
      "get": {
        "operationId": "v1OciRegistriesSummary",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of oci registry items",
            "schema": {
              "$ref": "#/definitions/v1OciRegistries"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a oci registries summary",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/oci/{uid}": {
      "get": {
        "operationId": "v1OciRegistriesGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1OciRegistryEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the information of specified oci registry",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "query",
          "name": "clusterUid",
          "type": "string"
        }
      ]
    },
    "/v1/registries/oci/{uid}/basic": {
      "delete": {
        "operationId": "v1BasicOciRegistriesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified basic oci registry",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1BasicOciRegistriesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1BasicOciRegistry"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the basic oci registry",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1BasicOciRegistriesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1BasicOciRegistry"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified basic oci registry",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/oci/{uid}/basic/sync": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "default": false,
          "in": "query",
          "name": "forceSync",
          "type": "boolean"
        }
      ],
      "post": {
        "description": "Sync all the content from the oci registry",
        "operationId": "v1BasicOciRegistriesUidSync",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Sync oci registry",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/oci/{uid}/basic/sync/status": {
      "get": {
        "description": "Get sync status for the oci specified registry",
        "operationId": "v1BasicOciRegistriesUidSyncStatus",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Oci registry sync status",
            "schema": {
              "$ref": "#/definitions/v1RegistrySyncStatus"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get oci registry sync status",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/registries/oci/{uid}/ecr": {
      "delete": {
        "operationId": "v1EcrRegistriesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified ecr registry",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1EcrRegistriesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1EcrRegistry"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified ecr registry",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1EcrRegistriesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1EcrRegistry"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified ecr registry",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/oci/{uid}/ecr/sync": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "default": false,
          "in": "query",
          "name": "forceSync",
          "type": "boolean"
        }
      ],
      "post": {
        "description": "Sync all the content from the ecr registry",
        "operationId": "v1EcrRegistriesUidSync",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Sync ecr registry",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/oci/{uid}/ecr/sync/status": {
      "get": {
        "description": "Get sync status for the ecr specified registry",
        "operationId": "v1EcrRegistriesUidSyncStatus",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ecr registry sync status",
            "schema": {
              "$ref": "#/definitions/v1RegistrySyncStatus"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get ecr registry sync status",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/registries/pack": {
      "get": {
        "operationId": "v1RegistriesPackList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1PackRegistries"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of Pack registries",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "default": "all",
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "in": "query",
          "name": "scope",
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1RegistriesPackCreate",
        "parameters": [
          {
            "default": false,
            "in": "query",
            "name": "skipPackSync",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1PackRegistry"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a pack registry",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/pack/summary": {
      "get": {
        "operationId": "v1RegistriesPackSummaryList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1PackRegistriesSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of pack registries as summary",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "default": "all",
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "in": "query",
          "name": "scope",
          "type": "string"
        }
      ]
    },
    "/v1/registries/pack/validate": {
      "post": {
        "description": "Returns no contents if pack registry is valid else error.",
        "operationId": "V1RegistriesPackValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PackRegistrySpec"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Check if pack registry is valid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/pack/{uid}": {
      "delete": {
        "operationId": "v1RegistriesPackUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified pack registry",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1RegistriesPackUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PackRegistry"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified Pack registry",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1RegistriesPackUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1PackRegistry"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified pack registry",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/pack/{uid}/sync": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "default": false,
          "in": "query",
          "name": "forceSync",
          "type": "boolean"
        }
      ],
      "post": {
        "description": "Sync all the packs from the registry",
        "operationId": "v1RegistriesPackUidSync",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Sync Pack registry",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/registries/pack/{uid}/sync/status": {
      "get": {
        "description": "Get sync status for the pack specified registry",
        "operationId": "v1RegistriesPackUidSyncStatus",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Pack registry sync status",
            "schema": {
              "$ref": "#/definitions/v1RegistrySyncStatus"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get pack registry sync status",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/registries/{registryName}/config": {
      "get": {
        "operationId": "v1RegistriesNameConfigGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RegistryConfigEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified system scope registry configuration",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "registryName",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/registries/{uid}": {
      "delete": {
        "operationId": "v1RegistriesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified registry",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/roles": {
      "get": {
        "operationId": "v1RolesList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Roles"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of roles",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1RolesCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Role"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a role with specified permissions",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/roles/{uid}": {
      "delete": {
        "operationId": "v1RolesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified role",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1RolesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Role"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified role",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1RolesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Role"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified role",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/roles/{uid}/clone": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1RolesClone",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1RoleClone"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Clone the role",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/services/{serviceName}/version": {
      "get": {
        "operationId": "v1ServiceVersionGet",
        "parameters": [
          {
            "description": "service name",
            "enum": [
              "ally",
              "jet",
              "palette",
              "ambit",
              "ally-lite",
              "palette-lite",
              "crony",
              "tick",
              "edge",
              "lodge",
              "level",
              "edgeconfig",
              "firth",
              "stylus"
            ],
            "in": "path",
            "name": "serviceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "spectro cluster uid",
            "in": "query",
            "name": "clusterUid",
            "type": "string"
          },
          {
            "description": "edge host uid",
            "in": "query",
            "name": "edgeHostUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ServiceVersion"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns a latest version for a given service name",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/services/{serviceName}/versions/{version}/manifest": {
      "get": {
        "operationId": "v1ServiceManifestGet",
        "parameters": [
          {
            "description": "service name",
            "enum": [
              "ally",
              "jet",
              "palette",
              "ambit",
              "ally-lite",
              "palette-lite",
              "crony",
              "tick",
              "edge",
              "lodge",
              "level",
              "edgeconfig",
              "firth",
              "stylus"
            ],
            "in": "path",
            "name": "serviceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "service version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "action type",
            "enum": [
              "apply",
              "delete",
              "resources"
            ],
            "in": "query",
            "name": "action",
            "required": true,
            "type": "string"
          },
          {
            "description": "resource file name",
            "in": "query",
            "name": "resourceFilename",
            "type": "string"
          },
          {
            "description": "spectro cluster uid",
            "in": "query",
            "name": "clusterUid",
            "type": "string"
          },
          {
            "description": "edge host uid",
            "in": "query",
            "name": "edgeHostUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ServiceManifest"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns a service manifest for a given service name and version",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/aks": {
      "post": {
        "operationId": "v1SpectroClustersAksCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an AKS cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/aks/rate": {
      "post": {
        "operationId": "v1SpectroClustersAksRate",
        "parameters": [
          {
            "default": "hourly",
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "in": "query",
            "name": "periodType",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterRateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Aks Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get AKS cluster estimated rate information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/aks/validate": {
      "post": {
        "operationId": "v1SpectroClustersAksValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Aks Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates AKS cluster create operation",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/aws": {
      "post": {
        "operationId": "v1SpectroClustersAwsCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAwsClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an AWS cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/aws/import": {
      "post": {
        "operationId": "v1SpectroClustersAwsImport",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAwsClusterImportEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Imports an AWS cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/aws/rate": {
      "post": {
        "operationId": "v1SpectroClustersAwsRate",
        "parameters": [
          {
            "default": "hourly",
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "in": "query",
            "name": "periodType",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAwsClusterRateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Aws Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get AWS cluster estimated rate information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/aws/validate": {
      "post": {
        "operationId": "v1SpectroClustersAwsValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAwsClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Aws Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates AWS cluster create operation",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/azure": {
      "post": {
        "operationId": "v1SpectroClustersAzureCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an Azure cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/azure/import": {
      "post": {
        "operationId": "v1SpectroClustersAzureImport",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterImportEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Imports an Azure cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/azure/rate": {
      "post": {
        "operationId": "v1SpectroClustersAzureRate",
        "parameters": [
          {
            "default": "hourly",
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "in": "query",
            "name": "periodType",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterRateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get Azure cluster estimated rate information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/azure/validate": {
      "post": {
        "operationId": "v1SpectroClustersAzureValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroAzureClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates Azure cluster create operation",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/cloudTypes/{cloudType}": {
      "parameters": [
        {
          "description": "Cluster's cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1SpectroClustersCustomCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroCustomClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a Custom cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/cloudTypes/{cloudType}/validate": {
      "parameters": [
        {
          "description": "Cluster's cloud type",
          "in": "path",
          "name": "cloudType",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1SpectroClustersCustomValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroCustomClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Custom Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates Custom cluster create operation",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/config/edgeInstaller": {
      "get": {
        "operationId": "v1SpectroClustersConfigEdgeInstaller",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ClusterEdgeInstallerConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Cluster configuration for the edge installer",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/edge-native": {
      "post": {
        "operationId": "v1SpectroClustersEdgeNativeCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEdgeNativeClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an EdgeNative cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/edge-native/import": {
      "post": {
        "operationId": "v1SpectroClustersEdgeNativeImport",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEdgeNativeClusterImportEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Imports an EdgeNative cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/edge-native/rate": {
      "post": {
        "operationId": "v1SpectroClustersEdgeNativeRate",
        "parameters": [
          {
            "default": "hourly",
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "in": "query",
            "name": "periodType",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEdgeNativeClusterRateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "EdgeNative Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get edge-native cluster estimated rate information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/edge-native/validate": {
      "post": {
        "operationId": "v1SpectroClustersEdgeNativeValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEdgeNativeClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "EdgeNative Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates edge-native cluster create operation",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/eks": {
      "post": {
        "operationId": "v1SpectroClustersEksCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEksClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an EKS cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/eks/rate": {
      "post": {
        "operationId": "v1SpectroClustersEksRate",
        "parameters": [
          {
            "default": "hourly",
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "in": "query",
            "name": "periodType",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEksClusterRateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Eks Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get EKS cluster estimated rate information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/eks/validate": {
      "post": {
        "operationId": "v1SpectroClustersEksValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroEksClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Eks Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates EKS cluster create operation",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/features/backup/locations/{uid}": {
      "get": {
        "operationId": "V1ClusterFeatureBackupLocationUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterRefs"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the cluster object references based on locationUid",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "V1ClusterFeatureBackupLocationUidChange",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterBackupLocationType"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Change cluster backup location",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/features/logFetcher/{uid}/download": {
      "get": {
        "operationId": "v1ClusterFeatureLogFetcherLogDownload",
        "parameters": [
          {
            "in": "query",
            "name": "fileName",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            },
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Download log fetcher logs for cluster by log fetcher uid",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid for which log is requested",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/features/logFetcher/{uid}/log": {
      "parameters": [
        {
          "description": "Cluster uid for which log is requested",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "operationId": "v1ClusterFeatureLogFetcherLogUpdate",
        "parameters": [
          {
            "description": "Log file by agent",
            "in": "formData",
            "name": "fileName",
            "type": "file"
          },
          {
            "description": "Unique request Id",
            "in": "query",
            "name": "requestId",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update log fetcher logs by log fetcher uid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/gcp": {
      "post": {
        "operationId": "v1SpectroClustersGcpCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a GCP cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/gcp/import": {
      "post": {
        "operationId": "v1SpectroClustersGcpImport",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterImportEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Imports a GCP cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/gcp/rate": {
      "post": {
        "operationId": "v1SpectroClustersGcpRate",
        "parameters": [
          {
            "default": "hourly",
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "in": "query",
            "name": "periodType",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterRateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Gcp Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get GCP cluster estimated rate information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/gcp/validate": {
      "post": {
        "operationId": "v1SpectroClustersGcpValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Gcp Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates GCP cluster create operation",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/generic/import": {
      "post": {
        "description": "The machines information will be captured, whereas the cloud specific configuration info will not be retrieved",
        "operationId": "v1SpectroClustersGenericImport",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGenericClusterImportEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Imports a cluster of any cloud type in generic way",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/generic/rate": {
      "post": {
        "operationId": "v1SpectroClustersGenericRate",
        "parameters": [
          {
            "default": "hourly",
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "in": "query",
            "name": "periodType",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGenericClusterRateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Genric Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get generic cluster estimated rate information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/gke": {
      "post": {
        "operationId": "v1SpectroClustersGkeCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates an GKE cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/gke/rate": {
      "post": {
        "operationId": "v1SpectroClustersGkeRate",
        "parameters": [
          {
            "default": "hourly",
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "in": "query",
            "name": "periodType",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterRateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Gke Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get GKE cluster estimated rate information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/gke/validate": {
      "post": {
        "operationId": "v1SpectroClustersGkeValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroGcpClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Gke Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates GKE cluster create operation",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/maas": {
      "post": {
        "operationId": "v1SpectroClustersMaasCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroMaasClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a MAAS cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/maas/import": {
      "post": {
        "operationId": "v1SpectroClustersMaasImport",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroMaasClusterImportEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Imports a Maas cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/maas/rate": {
      "post": {
        "operationId": "v1SpectroClustersMaasRate",
        "parameters": [
          {
            "default": "hourly",
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "in": "query",
            "name": "periodType",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroMaasClusterRateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Maas Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get maas cluster estimated rate information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/maas/validate": {
      "post": {
        "operationId": "v1SpectroClustersMaasValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroMaasClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Maas Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates MAAS cluster create operation",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/openstack": {
      "post": {
        "operationId": "v1SpectroClustersOpenStackCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroOpenStackClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a OpenStack cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/openstack/import": {
      "post": {
        "operationId": "v1SpectroClustersOpenStackImport",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroOpenStackClusterImportEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Imports an OpenStack cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/openstack/rate": {
      "post": {
        "operationId": "v1SpectroClustersOpenStackRate",
        "parameters": [
          {
            "default": "hourly",
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "in": "query",
            "name": "periodType",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroOpenStackClusterRateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Openstack Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get openstack cluster estimated rate information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/openstack/validate": {
      "post": {
        "operationId": "v1SpectroClustersOpenStackValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroOpenStackClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "vSphere Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates OpenStack cluster create operation",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/spc/download": {
      "post": {
        "operationId": "v1SpectroClustersSpcDownload",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterDefinitionEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "Cluster definition archive file",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Downloads the cluster definition archive file",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/tke": {
      "post": {
        "operationId": "v1SpectroClustersTkeCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroTencentClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a Tke cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/tke/rate": {
      "post": {
        "operationId": "v1SpectroClustersTkeRate",
        "parameters": [
          {
            "default": "hourly",
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "in": "query",
            "name": "periodType",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroTencentClusterRateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Tke Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get TKE cluster estimated rate information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/tke/validate": {
      "post": {
        "operationId": "v1SpectroClustersTkeValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroTencentClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Tke Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates TKE cluster create operation",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/upgrade/settings": {
      "get": {
        "operationId": "v1SpectroClustersUpgradeSettingsGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ClusterUpgradeSettingsEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get cluster settings by context",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1SpectroClustersUpgradeSettings",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterUpgradeSettingsEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update all clusters upgrade settings",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/validate/name": {
      "get": {
        "operationId": "v1SpectroClustersValidateName",
        "parameters": [
          {
            "description": "Cluster name",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates the cluster name",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/validate/packs": {
      "post": {
        "operationId": "v1SpectroClustersValidatePacks",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPacksEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster packs validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates spectro cluster packs",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/virtual": {
      "post": {
        "operationId": "v1SpectroClustersVirtualCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVirtualClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a virtual cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/virtual/packs/values": {
      "get": {
        "operationId": "v1VirtualClustersPacksValues",
        "parameters": [
          {
            "default": "k3s",
            "description": "Kubernetes distribution type",
            "enum": [
              "k3s",
              "cncf_k8s"
            ],
            "in": "query",
            "name": "kubernetesDistroType",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/v1ClusterVirtualPacksValues"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the cluster pack values yaml",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/virtual/validate": {
      "post": {
        "operationId": "v1SpectroClustersVirtualValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVirtualClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates virtual cluster create operation",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/vsphere": {
      "post": {
        "operationId": "v1SpectroClustersVsphereCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVsphereClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a vSphere cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/vsphere/import": {
      "post": {
        "operationId": "v1SpectroClustersVsphereImport",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVsphereClusterImportEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Imports a vSphere cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/vsphere/rate": {
      "post": {
        "operationId": "v1SpectroClustersVsphereRate",
        "parameters": [
          {
            "default": "hourly",
            "enum": [
              "hourly",
              "monthly",
              "yearly"
            ],
            "in": "query",
            "name": "periodType",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVsphereClusterRateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Vsphere Cluster estimated rate response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get vSphere cluster estimated rate information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/vsphere/validate": {
      "post": {
        "operationId": "v1SpectroClustersVsphereValidate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroVsphereClusterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "vSphere Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates vSphere cluster create operation",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}": {
      "delete": {
        "operationId": "v1SpectroClustersDelete",
        "parameters": [
          {
            "description": "If set to true the cluster will be force deleted and user has to manually clean up the provisioned cloud resources",
            "in": "query",
            "name": "forceDelete",
            "type": "boolean"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified cluster",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1SpectroClustersGet",
        "parameters": [
          {
            "description": "Comma separated tags like system,profile",
            "in": "query",
            "name": "includeTags",
            "type": "string"
          },
          {
            "default": false,
            "description": "Resolve pack values if set to true",
            "in": "query",
            "name": "resolvePackValues",
            "type": "boolean"
          },
          {
            "description": "Includes pack meta such as schema, presets",
            "in": "query",
            "name": "includePackMeta",
            "type": "string"
          },
          {
            "description": "Filter cluster profile templates by profileType",
            "in": "query",
            "name": "profileType",
            "type": "string"
          },
          {
            "default": false,
            "description": "Include non spectro labels in the cluster labels if set to true",
            "in": "query",
            "name": "includeNonSpectroLabels",
            "type": "boolean"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroCluster"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/assets": {
      "get": {
        "operationId": "v1SpectroClustersUidAssetsGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the cluster asset doc",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1SpectroClustersUidAssets",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Associate the assets for the cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/assets/adminKubeconfig": {
      "get": {
        "operationId": "v1SpectroClustersUidAdminKubeConfig",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "download file",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster's kube config file",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/assets/frpKubeconfig": {
      "delete": {
        "operationId": "v1SpectroClustersUidFrpKubeConfigDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the cluster's frp kube config client data",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1SpectroClustersUidFrpKubeConfigGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "download file",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster's frp kube config file",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersUidFrpKubeConfigUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetFrpKubeConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster's frp kube config data",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/assets/kubeconfig": {
      "get": {
        "operationId": "v1SpectroClustersUidKubeConfig",
        "parameters": [
          {
            "default": true,
            "description": "FRP (reverse-proxy) based kube config will be returned if available",
            "in": "query",
            "name": "frp",
            "type": "boolean"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "download file",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster's kube config file",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersUidKubeConfigUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetKubeConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster's manifest data",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/assets/kubeconfigclient": {
      "delete": {
        "operationId": "v1SpectroClustersUidKubeConfigClientDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the cluster's kube config client data",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1SpectroClustersUidKubeConfigClientGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "download file",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster's kube config client file",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersUidKubeConfigClientUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetKubeConfigClient"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster's kube config client data",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/assets/manifest": {
      "get": {
        "operationId": "v1SpectroClustersUidManifestGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster's manifest data",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersUidManifestUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterAssetManifest"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified cluster's manifest data",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/clusterConfig/clusterMetaAttribute": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1SpectroClustersUidClusterMetaAttributeUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterMetaAttributeEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified cluster meta attribute",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/clusterConfig/controlPlaneHealthCheckTimeout": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "V1ControlPlaneHealthCheckTimeoutUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ControlPlaneHealthCheckTimeoutEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified cluster controlPlane health check timeout",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/clusterConfig/hostCluster": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "V1HostClusterConfigUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1HostClusterConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified cluster host config",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/clusterConfig/lifecycleConfig": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1SpectroClustersUidLifecycleConfigUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1LifecycleConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified cluster Life cycle configuration",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/clusterConfig/osPatch": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1SpectroClustersUidOsPatchUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1OsPatchEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified cluster OS patch configuration",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/config/namespaces": {
      "get": {
        "operationId": "v1SpectroClustersUidConfigNamespacesGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterNamespaceResources"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves namespaces for the specified cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersUidConfigNamespacesUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterNamespaceResourcesUpdateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates namespaces for the specified cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/config/namespaces/{namespaceUid}": {
      "get": {
        "operationId": "v1SpectroClustersUidConfigNamespacesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster's namespace response",
            "schema": {
              "$ref": "#/definitions/v1ClusterNamespaceResource"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves the specified namespace of the cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Cluster namespace uid",
          "in": "path",
          "name": "namespaceUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersUidConfigNamespacesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterNamespaceResourceInputEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified namespace of the cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/config/rbacs": {
      "get": {
        "operationId": "v1SpectroClustersUidConfigRbacsGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbacs"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves RBAC information for the specified cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersUidConfigRbacsUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbacResourcesUpdateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates RBAC information for the specified cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/config/rbacs/{rbacUid}": {
      "get": {
        "operationId": "v1SpectroClustersUidConfigRbacsUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster's RBAC response",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbac"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves the specified RBAC of the cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "RBAC resource uid",
          "in": "path",
          "name": "rbacUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersUidConfigRbacsUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbacInputEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified RBAC of the cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/download": {
      "get": {
        "operationId": "v1SpectroClustersUidDownload",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "download cluster archive file",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Download the specified cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/edge-native/edgeHosts": {
      "get": {
        "operationId": "v1EdgeNativeClustersHostsList",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of edge host device",
            "schema": {
              "$ref": "#/definitions/v1EdgeHostDevices"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of edge host of edge-native cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/backup": {
      "delete": {
        "operationId": "v1ClusterFeatureBackupScheduleReset",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Reset cluster backup schedule settings",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1ClusterFeatureBackupGet",
        "parameters": [
          {
            "in": "query",
            "name": "backupRequestUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterBackup"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the cluster backup result",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1ClusterFeatureBackupCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterBackupConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create cluster backup settings",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "v1ClusterFeatureBackupUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterBackupConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update cluster backup settings",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/features/backup/onDemand": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1ClusterFeatureBackupOnDemandCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterBackupConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create on demand cluster backup",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/features/backup/{backupName}/request/{requestUid}": {
      "delete": {
        "operationId": "v1ClusterFeatureBackupDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Delete cluster backup",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "backupName",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "requestUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan": {
      "get": {
        "operationId": "v1ClusterFeatureComplianceScanGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterComplianceScan"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the compliance scan of cluster, if driverType is provided then specific status of driverType will be returned",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1ClusterFeatureComplianceScanCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterComplianceScheduleConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create cluster compliance scan",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "v1ClusterFeatureComplianceScanUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterComplianceScheduleConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update cluster compliance scan settings",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers": {
      "get": {
        "operationId": "v1ClusterFeatureComplianceScanLogsGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterComplianceScanLogs"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the compliance scan log by cluster uid and driver type",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers/kubeBench": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1ClusterFeatureScanKubeBenchLogUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1KubeBenchEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the KubeBench compliance scan log by uid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers/kubeHunter": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1ClusterFeatureScanKubeHunterLogUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1KubeHunterEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the KubeHunter compliance scan log by uid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers/sonobuoy": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1ClusterFeatureScanSonobuoyLogUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SonobuoyEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the Sonobuoy compliance scan log by uid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/drivers/syft": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1ClusterFeatureScanSyftLogUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SyftEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the Syft compliance scan log by uid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}": {
      "delete": {
        "operationId": "v1ClusterFeatureComplianceScanLogDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Delete the compliance scan log by uid",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "logUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/kubeBench": {
      "get": {
        "operationId": "v1ClusterFeatureKubeBenchLogGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterScanLogKubeBench"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the KubeBench compliance scan log by uid",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "logUid",
          "required": true,
          "type": "string"
        },
        {
          "in": "query",
          "name": "reportId",
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/kubeHunter": {
      "get": {
        "operationId": "v1ClusterFeatureKubeHunterLogGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterScanLogKubeHunter"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the KubeHunter compliance scan log by uid",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "logUid",
          "required": true,
          "type": "string"
        },
        {
          "in": "query",
          "name": "reportId",
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/sonobuoy": {
      "get": {
        "operationId": "v1ClusterFeatureSonobuoyLogGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterScanLogSonobuoy"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the Sonobuoy compliance scan log by uid",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "logUid",
          "required": true,
          "type": "string"
        },
        {
          "in": "query",
          "name": "reportId",
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/syft": {
      "get": {
        "operationId": "v1ClusterFeatureSyftLogGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterScanLogSyft"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the Syft compliance scan log by uid",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "logUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/syft/sbom": {
      "get": {
        "operationId": "v1SyftScanLogImageSBOMGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "download file",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the image sbom of syft scan log of cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "logUid",
          "required": true,
          "type": "string"
        },
        {
          "in": "query",
          "name": "image",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/logs/{logUid}/drivers/{driver}/download": {
      "get": {
        "operationId": "v1ClusterFeatureDriverLogDownload",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            },
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Downloads the driver cluster logs",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "logUid",
          "required": true,
          "type": "string"
        },
        {
          "enum": [
            "kubeBench",
            "kubeHunter",
            "sonobuoy",
            "syft"
          ],
          "in": "path",
          "name": "driver",
          "required": true,
          "type": "string"
        },
        {
          "default": "pdf",
          "in": "query",
          "name": "fileFormat",
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/complianceScan/onDemand": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1ClusterFeatureComplianceScanOnDemandCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterComplianceOnDemandConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create on demand cluster compliance scan",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/features/helmCharts": {
      "get": {
        "operationId": "v1ClusterFeatureHelmChartsGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterHelmCharts"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the installed helm charts of a specified cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/logFetcher": {
      "get": {
        "operationId": "v1ClusterFeatureLogFetcherGet",
        "parameters": [
          {
            "in": "query",
            "name": "requestId",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterLogFetcher"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the log fetcher for cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid for which log is requested",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1ClusterFeatureLogFetcherCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterLogFetcherRequest"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create the log fetcher for cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/features/manifests": {
      "get": {
        "operationId": "v1ClusterFeatureManifestsGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterManifests"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the installed manifests of a specified cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/restore": {
      "get": {
        "operationId": "v1ClusterFeatureRestoreGet",
        "parameters": [
          {
            "in": "query",
            "name": "restoreRequestUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterRestore"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the cluster restore of cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/features/restore/onDemand": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1ClusterFeatureRestoreOnDemandCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRestoreConfig"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create on demand cluster restore",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/import/manifest": {
      "get": {
        "operationId": "v1SpectroClustersUidImportManifest",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "download file",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            },
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster's import manifest file",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/import/upgrade": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1SpectroClustersUidImportUpgradePatch",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Upgrade the specified imported read only cluster with full permissions",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/k8certificates": {
      "get": {
        "operationId": "v1SpectroClustersK8Certificate",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1MachineCertificates"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get K8Certificate for spectro cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/k8certificates/renew": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1SpectroClustersCertificatesRenew",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Sets the cluster control plane nodes Kubernetes certificates for renewal",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/kubectl/redirect": {
      "get": {
        "operationId": "V1SpectroClustersUidKubeCtlRedirect",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterKubeCtlRedirect"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster's kube config file",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/location": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersUidLocationPut",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterLocationInputEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Associate the assets for the cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/metadata": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1SpectroClustersUidMetadataUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMetaInputEntitySchema"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the specified spectro cluster metadata",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/namespaces": {
      "get": {
        "operationId": "v1ClusterNamespacesGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterNamespaces"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns available namespaces for the cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "default": false,
          "in": "query",
          "name": "skipEmptyNamespaces",
          "type": "boolean"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/oidc": {
      "get": {
        "operationId": "V1SpectroClustersUidOIDC",
        "parameters": [
          {
            "description": "spc uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterOidcSpec"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns k8s spectrocluster oidc",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/oidc/dashboard/url": {
      "get": {
        "operationId": "V1SpectroClustersUidOIDCDashboardUrl",
        "parameters": [
          {
            "description": "spc uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SectroClusterK8sDashboardUrl"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns k8s dashboard url",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/pack/manifests/{manifestUid}": {
      "get": {
        "operationId": "v1SpectroClustersUidPackManifestsUidGet",
        "parameters": [
          {
            "description": "cluster uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "description": "manifest uid which is part of the pack ref",
            "in": "path",
            "name": "manifestUid",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "resolve pack manifest values if set to true",
            "in": "query",
            "name": "resolveManifestValues",
            "type": "boolean"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Pack manifest content",
            "schema": {
              "$ref": "#/definitions/v1Manifest"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster's manifest",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/pack/properties": {
      "get": {
        "operationId": "v1SpectroClustersUidPackProperties",
        "parameters": [
          {
            "description": "Cluster uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pack layer",
            "in": "query",
            "name": "layer",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pack values yaml field path",
            "in": "query",
            "name": "fieldPath",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pack name",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "default": true,
            "description": "Is the macros need to be resolved",
            "in": "query",
            "name": "resolveMacros",
            "type": "boolean"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster's pack properties response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPackProperties"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get specified cluster pack properties",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/packRefs": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "query",
          "name": "notify",
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1SpectroClustersPacksRefUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterNotificationUpdateEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster's pack references",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/packs/resolvedValues": {
      "get": {
        "operationId": "v1SpectroClustersUidPacksResolvedValuesGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfilesResolvedValues"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster's packs resolved values",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "body",
          "name": "body",
          "schema": {
            "$ref": "#/definitions/v1SpectroClusterProfilesParamReferenceEntity"
          }
        }
      ]
    },
    "/v1/spectroclusters/{uid}/packs/status": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1SpectroClustersUidPacksStatusPatch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPacksStatusEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Patch update specified cluster's packs status",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/profileUpdates": {
      "get": {
        "operationId": "v1SpectroClustersGetProfileUpdates",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfileUpdates"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the profile updates of a specified cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/profiles": {
      "delete": {
        "operationId": "v1SpectroClustersDeleteProfiles",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfilesDeleteEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Remove cluster profiles from the specified cluster",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1SpectroClustersGetProfiles",
        "parameters": [
          {
            "description": "includes pack meta such as schema, presets",
            "in": "query",
            "name": "includePackMeta",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfileList"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the associated profiles of a specified cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1SpectroClustersPatchProfiles",
        "parameters": [
          {
            "default": false,
            "description": "Resolve pending cluster notification if set to true",
            "in": "query",
            "name": "resolveNotification",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfiles"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Patch cluster profiles to the specified cluster",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "v1SpectroClustersUpdateProfiles",
        "parameters": [
          {
            "default": false,
            "description": "Resolve pending cluster notification if set to true",
            "in": "query",
            "name": "resolveNotification",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfiles"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Associate cluster profiles to the specified cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/profiles/packs/manifests": {
      "get": {
        "operationId": "v1SpectroClustersGetProfilesPacksManifests",
        "parameters": [
          {
            "description": "Includes pack meta such as schema, presets",
            "in": "query",
            "name": "includePackMeta",
            "type": "string"
          },
          {
            "default": false,
            "description": "Resolve pack macro variables if set to true",
            "in": "query",
            "name": "resolveMacros",
            "type": "boolean"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterProfilesPacksManifests"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the associated profile's pack manifests of a specified cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/profiles/{profileUid}/packs/{packName}/config": {
      "get": {
        "operationId": "v1SpectroClustersUidProfilesUidPacksConfigGet",
        "parameters": [
          {
            "description": "cluster uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "description": "profile uid",
            "in": "path",
            "name": "profileUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "pack name",
            "in": "path",
            "name": "packName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster pack values",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPackConfigList"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified cluster's profile pack configuration",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/profiles/{profileUid}/packs/{packName}/manifests": {
      "get": {
        "operationId": "v1SpectroClustersProfilesUidPackManifestsGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1PackManifests"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the associated profiles pack manifests of the specified cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Cluster profile uid",
          "in": "path",
          "name": "profileUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Name of the pack",
          "in": "path",
          "name": "packName",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersProfilesUidPackManifestsUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ManifestRefInputEntities"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates cluster profiles pack manifests to the specified cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/rate": {
      "get": {
        "operationId": "v1SpectroClustersUidRate",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRate"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the estimated rate of the specified cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "default": "hourly",
          "description": "Period type [hourly, monthly, yearly]",
          "enum": [
            "hourly",
            "monthly",
            "yearly"
          ],
          "in": "query",
          "name": "periodType",
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/repave/approve": {
      "patch": {
        "operationId": "v1SpectroClustersUidRepaveApproveUpdate",
        "parameters": [
          {
            "description": "cluster uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the spectrocluster repave approve update",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/repave/status": {
      "get": {
        "operationId": "v1SpectroClustersUidRepaveGet",
        "parameters": [
          {
            "description": "cluster uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns cluster repave status",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRepave"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the spectrocluster repave",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/reset": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "V1SpectroClustersUidReset",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "reset the cluster s by deleting machine pools and condtions",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/status": {
      "get": {
        "operationId": "v1SpectroClustersUidStatus",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterStatusEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the cluster's status",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/status/condition": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersUpdateStatusCondition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterCondition"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified cluster status condition",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/status/conditions": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1SpectroClustersUpdateStatusConditions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1ClusterCondition"
              },
              "type": "array"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified cluster status conditions",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/status/endpoints": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersUpdateStatusEndpoints",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1ApiEndpoint"
              },
              "type": "array"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified cluster's service endpoints information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/status/imported": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1SpectroClustersUpdateStatusImported",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified cluster status as imported",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/status/services": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersUpdateStatusServices",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1LoadBalancerService"
              },
              "type": "array"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified cluster's services information",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/status/spcApply": {
      "get": {
        "operationId": "v1SpectroClustersUidStatusSpcApplyGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SpcApply"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the SPC apply information for the agent",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1SpectroClustersUidStatusSpcApply",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Set the CanBeApplied to true on the spcApply status. CanBeApplied indicates the agent to orchestrate the spc changes",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/status/spcApply/patchTime": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1SpectroClustersUidStatusSpcPatchTime",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpcPatchTimeEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the agent patch time for the SPC changes",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/status/upgrades": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersUidUpgradesPut",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterUidUpgrades"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the cluster's upgrade status",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/upgrade/settings": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1SpectroClustersUidUpgradeSettings",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterUpgradeSettingsEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update specific cluster upgrade settings",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/validate/packs": {
      "post": {
        "operationId": "v1SpectroClustersUidValidatePacks",
        "parameters": [
          {
            "description": "cluster uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPacksEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster packs validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterValidatorResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates cluster packs",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/validate/repave": {
      "post": {
        "operationId": "v1SpectroClustersUidValidateRepave",
        "parameters": [
          {
            "description": "cluster uid",
            "in": "path",
            "name": "uid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterPacksEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster repave validation response",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterRepaveValidationResponse"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates if cluster gets repaved for the specified packs",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/variables": {
      "get": {
        "operationId": "v1SpectroClustersUidVariablesGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Variables"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieve a list of variables associated with the cluster",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid for which variables need to be retrieved",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/vms": {
      "get": {
        "operationId": "v1SpectroClustersVMList",
        "parameters": [
          {
            "collectionFormat": "csv",
            "description": "Namespace names, comma separated value (ex: dev,test). If namespace is empty it returns the specific resource under all namespace",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "namespace",
            "type": "array"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ClusterVirtualMachineList"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the list of virtual machines",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1SpectroClustersVMCreate",
        "parameters": [
          {
            "description": "Namespace name",
            "in": "query",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterVirtualMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ClusterVirtualMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create virtual machine",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/vms/snapshot": {
      "get": {
        "operationId": "v1ClusterVMSnapshotsList",
        "parameters": [
          {
            "collectionFormat": "csv",
            "description": "vmName is comma separated value (ex: name1,name2).",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "vmName",
            "type": "array"
          },
          {
            "collectionFormat": "csv",
            "description": "Namespace names, comma separated value (ex: dev,test). If namespace is empty it returns the specific resource under all namespace",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "namespace",
            "type": "array"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachineSnapshotList"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the list of snapshots of given namespaces",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}": {
      "delete": {
        "operationId": "v1SpectroClustersVMDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the virtual machine",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1SpectroClustersVMGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ClusterVirtualMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get virtual machine",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Virtual Machine name",
          "in": "path",
          "name": "vmName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Namespace name",
          "in": "query",
          "name": "namespace",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersVMUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterVirtualMachine"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ClusterVirtualMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified virtual machine of the cluster",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/addVolume": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Virtual Machine name",
          "in": "path",
          "name": "vmName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Namespace name",
          "in": "query",
          "name": "namespace",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersVMAddVolume",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VMAddVolumeEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Add volume to the virtual machine instance",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/clone": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Virtual Machine name",
          "in": "path",
          "name": "vmName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Namespace name",
          "in": "query",
          "name": "namespace",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1SpectroClustersVMClone",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1SpectroClusterVMCloneEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1ClusterVirtualMachine"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Clone virtual machine",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/migrate": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Virtual Machine name",
          "in": "path",
          "name": "vmName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Namespace name",
          "in": "query",
          "name": "namespace",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersVMMigrate",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Migrate the virtual machine",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/pause": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Virtual Machine name",
          "in": "path",
          "name": "vmName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Namespace name",
          "in": "query",
          "name": "namespace",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersVMPause",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Pause the virtual machine instance",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/removeVolume": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Virtual Machine name",
          "in": "path",
          "name": "vmName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Namespace name",
          "in": "query",
          "name": "namespace",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersVMRemoveVolume",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VMRemoveVolumeEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Remove volume from the virtual machine instance",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/restart": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Virtual Machine name",
          "in": "path",
          "name": "vmName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Namespace name",
          "in": "query",
          "name": "namespace",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersVMRestart",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Restart the virtual machine",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/resume": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Virtual Machine name",
          "in": "path",
          "name": "vmName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Namespace name",
          "in": "query",
          "name": "namespace",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersVMResume",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Resume the virtual machine instance",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/snapshot": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Virtual Machine name",
          "in": "path",
          "name": "vmName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Namespace name of virtual machine",
          "in": "query",
          "name": "namespace",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1VMSnapshotCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachineSnapshot"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachineSnapshot"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create snapshot of virtual machine",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/snapshot/{snapshotName}": {
      "delete": {
        "operationId": "v1VMSnapshotDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Delete the snapshot of virtual machine",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1VMSnapshotGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachineSnapshot"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get virtual machine snapshot",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Virtual Machine name",
          "in": "path",
          "name": "vmName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Snapshot name",
          "in": "path",
          "name": "snapshotName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Namespace name",
          "in": "query",
          "name": "namespace",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1VMSnapshotUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachineSnapshot"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VirtualMachineSnapshot"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified snapshot of a virtual machine",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/start": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Virtual Machine name",
          "in": "path",
          "name": "vmName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Namespace name",
          "in": "query",
          "name": "namespace",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersVMStart",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Start the virtual machine",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/vms/{vmName}/stop": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Virtual Machine name",
          "in": "path",
          "name": "vmName",
          "required": true,
          "type": "string"
        },
        {
          "description": "Namespace name",
          "in": "query",
          "name": "namespace",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1SpectroClustersVMStop",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Stop the virtual machine",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/workloads/sync": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Sync specified cluster workload",
        "operationId": "v1SpectroClustersUidWorkloadsSync",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Sync specified cluster workload",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/spectroclusters/{uid}/workloads/{workloadKind}/sync": {
      "parameters": [
        {
          "description": "Cluster uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Workload kind",
          "enum": [
            "namespace",
            "pod",
            "deployment",
            "statefulset",
            "daemonset",
            "job",
            "cronjob",
            "rolebinding",
            "clusterrolebinding"
          ],
          "in": "path",
          "name": "workloadKind",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1SpectroClustersUidWorkloadsKindSync",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Sync specified cluster workload",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/system/config/reverseproxy": {
      "get": {
        "operationId": "V1SystemConfigReverseProxyGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemReverseProxy"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "get the system config reverse proxy",
        "tags": [
          "v1",
          "system",
          "private",
          "docs-show"
        ]
      },
      "put": {
        "operationId": "V1SystemConfigReverseProxyUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SystemReverseProxy"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "updates the system config reverse proxy",
        "tags": [
          "v1",
          "system",
          "private",
          "docs-show"
        ]
      }
    },
    "/v1/system/passwords/blocklist": {
      "delete": {
        "operationId": "V1PasswordsBlockListDelete",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/V1PasswordsBlockList"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Delete a list of block listed passwords",
        "tags": [
          "v1",
          "system",
          "docs-show"
        ]
      },
      "patch": {
        "operationId": "V1PasswordsBlockListUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/V1PasswordsBlockList"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "List of block listed passwords",
        "tags": [
          "v1",
          "system",
          "docs-show"
        ]
      }
    },
    "/v1/teams": {
      "get": {
        "operationId": "v1TeamsList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of teams",
            "schema": {
              "$ref": "#/definitions/v1Teams"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of teams",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1TeamsCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Team"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a team with the specified users and roles",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/teams/summary": {
      "get": {
        "description": "Deprecated, Use Post api - Returns a list of team summaries",
        "operationId": "v1TeamsSummary",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TeamsSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of team summary",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1TeamsSummaryGet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TeamsSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of teams summary items",
            "schema": {
              "$ref": "#/definitions/v1TeamsSummaryList"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of teams summary with provided filter spec",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/teams/{uid}": {
      "delete": {
        "operationId": "v1TeamsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified team",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1TeamsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Team"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the sepcified team",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1TeamsUidPatch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TeamPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Patches the specified team",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "v1TeamsUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Team"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the sepcified team",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/teams/{uid}/projects": {
      "get": {
        "operationId": "v1TeamsProjectRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ProjectRolesEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified team's project and roles data",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1TeamsProjectRolesPut",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ProjectRolesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the projects and roles for the specified team",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/teams/{uid}/resourceRoles": {
      "get": {
        "description": "Returns resource roles for team",
        "operationId": "v1TeamsUidResourceRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ResourceRoles"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified individual and resource roles for a team",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Resource roles added to specific team",
        "operationId": "v1TeamsUidResourceRolesCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResourceRolesUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Add resource roles for team",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/teams/{uid}/resourceRoles/{resourceRoleUid}": {
      "delete": {
        "operationId": "v1TeamsUidResourceRolesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deleted the resource roles from team",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "resourceRoleUid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "description": "Specific resource roles fo team is updated",
        "operationId": "v1TeamsResourceRolesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResourceRolesUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the resource roles for team",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/teams/{uid}/roles": {
      "get": {
        "operationId": "V1TeamsUidTenantRolesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TeamTenantRolesEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified team's tenant roles",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "V1TeamsUidTenantRolesUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TeamTenantRolesUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the tenant roles of the specified team",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/address": {
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1PatchTenantAddress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantAddressPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update tenant address",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/assets/certs": {
      "get": {
        "operationId": "V1TenantUIdAssetsCertsList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantAssetCerts"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "lists the certificates for the tenant",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "V1TenantUidAssetsCertsCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantAssetCert"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "create the tenant certificate",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/assets/certs/{certificateUid}": {
      "delete": {
        "operationId": "V1TenantUidAssetsCertsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "deletes the tenant certificate",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "V1TenantUidAssetsCertsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantAssetCert"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the ca certificate for the tenant",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "certificateUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "V1TenantUidAssetsCertsUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantAssetCert"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "updates the tenant certificate",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/assets/dataSinks": {
      "delete": {
        "operationId": "V1TenantUidAssetsDataSinksDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "deletes the tenant data sink config",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "V1TenantUidAssetsDataSinksGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1DataSinkConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns data sink config of tenant",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "V1TenantUidAssetsDataSinksCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1DataSinkConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "create data sink config",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "V1TenantUidAssetsDataSinksUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1DataSinkConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "updates the tenant data sink config",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/authTokenSettings": {
      "get": {
        "operationId": "v1TenantUidAuthTokenSettingsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AuthTokenSettings"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get tenant auth token settings",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1TenantUidAuthTokenSettingsUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AuthTokenSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update tenant auth token settings",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/contract/accept": {
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1TenantsUidContractAccept",
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Tenant to accept the contract agreement",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/creditAccount/aws": {
      "delete": {
        "operationId": "v1TenantsCreditAccountDelete",
        "parameters": [
          {
            "default": false,
            "in": "query",
            "name": "forceDelete",
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the aws credit account for tenants",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1TenantsCreditAccountGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1AwsCreditAccountEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the credit accounts for the tenants with free tier access",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/tenants/{tenantUid}/domains": {
      "get": {
        "operationId": "V1TenantUidDomainsGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TenantDomains"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "retrieves the domains for tenant",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "V1TenantUidDomainsUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantDomains"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "creates or updates domains for tenant",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/emailId": {
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1PatchTenantEmailId",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantEmailPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update tenant emailId",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/freemium": {
      "get": {
        "operationId": "v1TenantFreemiumGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TenantFreemium"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get tenant level freemium configuration",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1TenantFreemiumUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantFreemium"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update tenant freemium configuration",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/freemiumUsage": {
      "get": {
        "operationId": "v1TenantFreemiumUsageGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantFreemiumUsage"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get tenant freemium usage",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/tenants/{tenantUid}/invoices/{invoiceUid}": {
      "get": {
        "operationId": "v1InvoicesUidGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Invoice"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns a specified invoice",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Specify the tenant uid",
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Specify the invoice uid",
          "in": "path",
          "name": "invoiceUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/tenants/{tenantUid}/invoices/{invoiceUid}/report/invoice/pdf": {
      "get": {
        "operationId": "V1InvoiceUidReportInvoicePdf",
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            },
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Downloads the specified invoice report",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Specify the tenant uid",
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Specify the invoice uid",
          "in": "path",
          "name": "invoiceUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/tenants/{tenantUid}/invoices/{invoiceUid}/report/pdf": {
      "get": {
        "operationId": "V1InvoiceUidReportPdf",
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            },
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Downloads the specified monthly invoice report",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Specify the tenant uid",
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Specify the invoice uid",
          "in": "path",
          "name": "invoiceUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/tenants/{tenantUid}/invoices/{invoiceUid}/report/usage/pdf": {
      "get": {
        "operationId": "V1InvoiceUidReportUsagePdf",
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Disposition": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              }
            },
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Downloads the specified tenant usage",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Specify the tenant uid",
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Specify the invoice uid",
          "in": "path",
          "name": "invoiceUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/tenants/{tenantUid}/loginBanner": {
      "get": {
        "operationId": "v1TenantUidLoginBannerGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1LoginBannerSettings"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get tenant login banner settings",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1TenantUidLoginBannerUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1LoginBannerSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update tenant login banner settings",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/macros": {
      "delete": {
        "operationId": "v1TenantsUidMacrosDeleteByMacroName",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Delete the macros for the specified tenant by given macro name",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1TenantsUidMacrosList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "List the macros of the specified tenant",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1TenantsUidMacrosUpdateByMacroName",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the macros for the specified tenant by given macro name",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1TenantsUidMacrosCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create or add new macros for the specified tenant",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "v1TenantsUidMacrosUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the macros of the specified tenant",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/oidc/config": {
      "get": {
        "operationId": "V1TenantUidOidcConfigGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantOidcClientSpec"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the oidc Spec for tenant",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "V1TenantUidOidcConfigUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantOidcClientSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Associates the  oidc Spec for the tenant",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/password/policy": {
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "V1TenantUidPasswordPolicyUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantPasswordPolicyEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "creates or updates a password policy for tenant",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/preferences/clusterGroup": {
      "get": {
        "operationId": "V1TenantPrefClusterGroupGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TenantEnableClusterGroup"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get is cluster group enabled for a specific tenant",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "V1TenantPrefClusterGroupUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantEnableClusterGroup"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Enable or Disable cluster group for a specific tenant",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/preferences/clusterSettings": {
      "get": {
        "operationId": "v1TenantClusterSettingsGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TenantClusterSettings"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get tenant cluster settings",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/tenants/{tenantUid}/preferences/clusterSettings/nodesAutoRemediationSetting": {
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1TenantClustersNodesAutoRemediationSettingUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1NodesAutoRemediationSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update tenant clusters nodes auto remediation setting",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/preferences/developerCredit": {
      "get": {
        "operationId": "V1TenantDeveloperCreditGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1DeveloperCredit"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get developer credit enabled for a specific tenant",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "V1TenantDeveloperCreditUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1DeveloperCredit"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "update developer credit for a specific tenant",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/preferences/fips": {
      "get": {
        "operationId": "v1TenantFipsSettingsGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1FipsSettings"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get tenant fips settings",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1TenantFipsSettingsUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1FipsSettings"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update tenant fips setting",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/rateConfig": {
      "get": {
        "operationId": "v1RateConfigGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1RateConfig"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get all rate config for public and private cloud",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1RateConfigUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1RateConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "updates the rate config for public and private cloud",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/resourceLimits": {
      "get": {
        "operationId": "v1TenantResourceLimitsGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1TenantResourceLimits"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get tenant level resource limits configuration",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1TenantResourceLimitsUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantResourceLimitsEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update tenant resource limits configuration",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/saml/config": {
      "get": {
        "operationId": "V1TenantUidSamlConfigSpecGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantSamlSpec"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified service provider metadata and Saml Spec for tenant",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "V1TenantUidSamlConfigUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantSamlRequestSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Associates the specified federation metadata for the tenant",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/tenants/{tenantUid}/sso/auth/providers": {
      "get": {
        "operationId": "V1TenantUidSsoAuthProvidersGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1TenantSsoAuthProvidersEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "get sso logins for the tenants",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "tenantUid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "V1TenantUidSsoAuthProvidersUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1TenantSsoAuthProvidersEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "enable sso logins for the tenants",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users": {
      "get": {
        "description": "Lists users the given user context",
        "operationId": "v1UsersList",
        "parameters": [
          {
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "in": "query",
            "name": "fields",
            "type": "string"
          },
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          },
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Users"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Lists users",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "description": "A user is created for the given user context",
        "operationId": "v1UsersCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1UserEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create User",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/assets/locations": {
      "get": {
        "operationId": "v1UsersAssetsLocationGet",
        "parameters": [
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocations"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified users location",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/assets/locations/azure": {
      "post": {
        "operationId": "v1UsersAssetsLocationAzureCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationAzure"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create a Azure location",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/assets/locations/azure/{uid}": {
      "get": {
        "operationId": "v1UsersAssetsLocationAzureGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationAzure"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified Azure location",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Specify the Azure location uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1UsersAssetsLocationAzureUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationAzure"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified Azure location",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/assets/locations/gcp": {
      "post": {
        "operationId": "v1UsersAssetsLocationGcpCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationGcp"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create a GCP location",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/assets/locations/gcp/{uid}": {
      "get": {
        "operationId": "v1UsersAssetsLocationGcpGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationGcp"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified GCP location",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Specify the GCP location uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1UsersAssetsLocationGcpUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationGcp"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified GCP location",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/assets/locations/minio": {
      "post": {
        "operationId": "v1UsersAssetsLocationMinioCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create a MinIO location",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/assets/locations/minio/{uid}": {
      "get": {
        "operationId": "v1UsersAssetsLocationMinioGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified MinIO location",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Specify the MinIO location uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1UsersAssetsLocationMinioUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified MinIO location",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/assets/locations/s3": {
      "post": {
        "operationId": "v1UsersAssetsLocationS3Create",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create a S3 location",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/assets/locations/s3/{uid}": {
      "delete": {
        "operationId": "v1UsersAssetsLocationS3Delete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified S3 location",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1UsersAssetsLocationS3Get",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified S3 location",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Specify the S3 location uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1UsersAssetsLocationS3Update",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsLocationS3"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified S3 location",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/assets/locations/{type}/{uid}/default": {
      "parameters": [
        {
          "description": "Specify the location uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "Specify the location type [aws/azure/gcp/minio/s3]",
          "in": "path",
          "name": "type",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1UsersAssetsLocationDefaultUpdate",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the default backup location",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/assets/locations/{uid}": {
      "delete": {
        "operationId": "v1UsersAssetsLocationDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified location",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Specify the location uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/users/assets/sshkeys": {
      "get": {
        "operationId": "v1UsersAssetsSshGet",
        "parameters": [
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1UserAssetsSsh"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the SSH keys",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1UserAssetsSshCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetSshEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Creates a SSH key",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/assets/sshkeys/{uid}": {
      "delete": {
        "operationId": "v1UsersAssetSshDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified user ssh key",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1UsersAssetSshGetUid",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1UserAssetSsh"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified user ssh key",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Specify the SSH key uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1UsersAssetSshUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1UserAssetSsh"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified user ssh key",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/assets/vsphere/dnsMapping": {
      "get": {
        "operationId": "v1VsphereMappingGet",
        "parameters": [
          {
            "description": "Specify the vSphere gateway uid",
            "in": "query",
            "name": "gatewayUid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify the vSphere datacenter name",
            "in": "query",
            "name": "datacenter",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify the vSphere network name",
            "in": "query",
            "name": "network",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereDnsMapping"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified vSphere DNS mapping",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/assets/vsphere/dnsMappings": {
      "get": {
        "operationId": "v1VsphereDnsMappingsGet",
        "parameters": [
          {
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "in": "query",
            "name": "filters",
            "type": "string"
          },
          {
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "in": "query",
            "name": "orderBy",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereDnsMappings"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified vSphere DNS mappings",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1VsphereDnsMappingCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereDnsMapping"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create a vSphere DNS mapping",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/assets/vsphere/dnsMappings/{uid}": {
      "delete": {
        "operationId": "v1VsphereDnsMappingDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified vSphere DNS mapping",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1VsphereDnsMappingGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1VsphereDnsMapping"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified vSphere DNS mapping",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "description": "Specify the vSphere DNS mapping uid",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1VsphereDnsMappingUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1VsphereDnsMapping"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified vSphere DNS mapping",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/auth/tokens/revoke": {
      "post": {
        "operationId": "v1UsersAuthTokensRevoke",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1AuthTokenRevoke"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Revoke access of specific token(s)",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/config/scar": {
      "get": {
        "operationId": "V1UsersConfigScarGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1SystemScarSpec"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Get the system Spectro repository. Restricted to edge services",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/info": {
      "get": {
        "description": "Returns a basic information of User for the specified uid.",
        "operationId": "v1UsersInfoGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserInfo"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the base information of specified User",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/kubectl/session/{sessionUid}": {
      "get": {
        "description": "gets users kubectl session",
        "operationId": "V1UsersKubectlSessionUid",
        "parameters": [
          {
            "in": "path",
            "name": "sessionUid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserKubectlSession"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "gets users kubectl session",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/meta": {
      "get": {
        "operationId": "v1UsersMetadata",
        "responses": {
          "200": {
            "description": "An array of users metadata items",
            "schema": {
              "$ref": "#/definitions/v1UsersMetadata"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of users metadata",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/password/change": {
      "patch": {
        "description": "User password change request via current password and emailId",
        "operationId": "V1UsersPasswordChange",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "currentPassword": {
                  "type": "string"
                },
                "emailId": {
                  "type": "string"
                },
                "newPassword": {
                  "type": "string"
                }
              },
              "required": [
                "newPassword",
                "emailId",
                "currentPassword"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "User password change request using the user emailId",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/password/reset": {
      "patch": {
        "description": "User password request will be sent to the supplied emailId",
        "operationId": "v1UsersEmailPasswordReset",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "emailId": {
                  "type": "string"
                }
              },
              "required": [
                "emailId"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "User password reset request using the email id",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/summary": {
      "get": {
        "description": "Deprecated, Use Post api - Returns a list of user summaries",
        "operationId": "v1UsersSummary",
        "parameters": [
          {
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call. Default and maximum value of the limit is 50.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "offset is the next index number from which the response will start. The response offset value can be used along with continue token for the pagination.",
            "format": "int64",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "continue token to paginate the subsequent data items",
            "in": "query",
            "name": "continue",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UsersSummary"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified user summary list",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1UsersSummaryGet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1UsersSummarySpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of users summary items",
            "schema": {
              "$ref": "#/definitions/v1UsersSummaryList"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Retrieves a list of users summary with provided filter spec",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/system/features": {
      "get": {
        "description": "Returns the users system feature",
        "operationId": "v1UsersSystemFeature",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1SystemFeatures"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the users system feature",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/system/macros": {
      "delete": {
        "operationId": "v1UsersSystemMacrosDeleteByMacroName",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Delete the macros for the system user by macro name",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1UsersSystemMacrosList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "List the macros of the system",
        "tags": [
          "v1"
        ]
      },
      "patch": {
        "operationId": "v1UsersSystemMacrosUpdateByMacroName",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the macros for the system user by macro name",
        "tags": [
          "v1"
        ]
      },
      "post": {
        "operationId": "v1UsersSystemMacrosCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create or add new macros for the system user",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "v1UsersSystemMacrosUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1Macros"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update the macros of the system",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/{uid}": {
      "delete": {
        "description": "Deletes the specified User for given uid",
        "operationId": "v1UsersUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified User",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "description": "Returns a User for the specified uid.",
        "operationId": "v1UsersUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified User",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "description": "User is patched for the specified information",
        "operationId": "v1UsersUidPatch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UserPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Patches the specified User",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "description": "A user is created for the given user context",
        "operationId": "v1UsersUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1UserUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update User",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/{uid}/password/change": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "description": "User password change request via current password",
        "operationId": "v1UsersUidPasswordChange",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "currentPassword": {
                  "type": "string"
                },
                "newPassword": {
                  "type": "string"
                }
              },
              "required": [
                "newPassword"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "User password change request using the user uid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/{uid}/password/reset": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "description": "User password reset request, will send the password reset option through the emailId",
        "operationId": "v1UsersUidPasswordReset",
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "User password reset request using the user uid",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/{uid}/projects": {
      "get": {
        "description": "Returns a User with projects and roles",
        "operationId": "v1UsersProjectRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ProjectRolesEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified User Projects and Roles information",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "description": "User is updated with projects and roles",
        "operationId": "v1UsersProjectRolesPut",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ProjectRolesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the projects and roles for user",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/{uid}/resourceRoles": {
      "get": {
        "description": "Returns resource roles for user",
        "operationId": "v1UsersUidResourceRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1ResourceRoles"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified individual and resource roles for a user",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Resource roles added to specific user",
        "operationId": "v1UsersUidResourceRolesCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResourceRolesUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Add resource roles for user",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/{uid}/resourceRoles/{resourceRoleUid}": {
      "delete": {
        "operationId": "v1UsersUidResourceRolesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deleted the resource roles from user",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "resourceRoleUid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "description": "Specific resource roles fo user is updated",
        "operationId": "v1UsersResourceRolesUidUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResourceRolesUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the resource roles for user",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/{uid}/roles": {
      "get": {
        "description": "Returns roles clubbed from team",
        "operationId": "v1UsersUidRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1UserRolesEntity"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified individual and team roles for a user",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "description": "User is updated with roles",
        "operationId": "v1UsersUidRolesUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UserRoleUIDs"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the roles for user",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/users/{uid}/status/loginMode": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "v1UsersStatusLoginMode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1UserStatusLoginMode"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Users status login mode",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/workspaces": {
      "post": {
        "operationId": "v1WorkspacesCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create workspace",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/workspaces/teams/{teamUid}/roles": {
      "get": {
        "operationId": "v1TeamsWorkspaceGetRoles",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceScopeRoles"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified team's workspaces and roles data",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "teamUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1TeamsWorkspaceRolesPut",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1WorkspacesRolesPatch"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the workspace roles for the specified team",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/workspaces/users/{userUid}/roles": {
      "get": {
        "description": "Returns a User with workspaces and roles",
        "operationId": "v1UsersWorkspaceGetRoles",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceScopeRoles"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified User workspaces and Roles information",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "userUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "description": "User is updated with workspace roles",
        "operationId": "v1UsersWorkspaceRolesPut",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1WorkspacesRolesPatch"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the workspace roles for user",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/workspaces/validate/name": {
      "get": {
        "operationId": "v1WorkspacesValidateName",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response without content",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Validates the workspace name",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/workspaces/{uid}": {
      "delete": {
        "operationId": "v1WorkspacesUidDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified workspace",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1WorkspacesUidGet",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1Workspace"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the specified workspace",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/workspaces/{uid}/backup": {
      "delete": {
        "operationId": "v1WorkspaceOpsBackupDelete",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceBackupDeleteEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Delete workspace backup",
        "tags": [
          "v1"
        ]
      },
      "get": {
        "operationId": "v1WorkspaceOpsBackupGet",
        "parameters": [
          {
            "in": "query",
            "name": "backupRequestUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceBackup"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the  workspace backup result",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1WorkspaceOpsBackupCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceBackupConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create workspace backup settings",
        "tags": [
          "v1"
        ]
      },
      "put": {
        "operationId": "v1WorkspaceOpsBackupUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceBackupConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Update workspace backup settings",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/workspaces/{uid}/backup/onDemand": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1WorkspaceOpsBackupOnDemandCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceBackupConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create On demand Workspace Backup",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/workspaces/{uid}/clusterNamespaces": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1WorkspacesUidClusterNamespacesUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceClusterNamespacesEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified workspace namespaces",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/workspaces/{uid}/clusterRbacs": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1WorkspacesClusterRbacCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbac"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create cluster rbac in workspace",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/workspaces/{uid}/clusterRbacs/{clusterRbacUid}": {
      "delete": {
        "operationId": "v1WorkspacesUidClusterRbacDelete",
        "parameters": [
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Deletes the specified workspace cluster rbac",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "in": "path",
          "name": "clusterRbacUid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1WorkspacesUidClusterRbacUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ClusterRbac"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified workspace cluster rbac",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/workspaces/{uid}/meta": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "v1WorkspacesUidMetaUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMeta"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified workspace meta",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/workspaces/{uid}/resourceAllocations": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "description": "Deprecated",
        "operationId": "v1WorkspacesUidResourceAllocationsUpdate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceResourceAllocationsEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Updates the specified workspace resource allocations",
        "tags": [
          "v1"
        ]
      }
    },
    "/v1/workspaces/{uid}/restore": {
      "get": {
        "operationId": "v1WorkspaceOpsRestoreGet",
        "parameters": [
          {
            "in": "query",
            "name": "restoreRequestUid",
            "type": "string"
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceRestore"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Returns the  workspace restore result",
        "tags": [
          "v1"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/workspaces/{uid}/restore/onDemand": {
      "parameters": [
        {
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "v1WorkspaceOpsRestoreOnDemandCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/v1WorkspaceRestoreConfigEntity"
            }
          },
          {
            "description": "Scope the request to the specified project uid",
            "in": "header",
            "name": "ProjectUid",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "AuditUid": {
                "description": "Audit uid for the request",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/v1Uid"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          },
          {
            "Authorization": []
          }
        ],
        "summary": "Create On demand Workspace Restore",
        "tags": [
          "v1"
        ]
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "ApiKey": {
      "description": "API key authorization where API key can be generated from Palette console under Profile \u003e My API Keys",
      "in": "header",
      "name": "ApiKey",
      "type": "apiKey"
    },
    "Authorization": {
      "description": "JWT token authorization obtained using /v1/auth/authenticate api",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0"
}