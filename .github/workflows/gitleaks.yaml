name: Sync gitleaksignore to master

on:
  push:
    branches:
      - 'version-*'
    paths:
      - '.gitleaksignore'
  # Manual trigger for testing purposes
  workflow_dispatch:
    inputs:
      branch:
        description: 'Version branch to simulate a sync from'
        required: true
        default: 'version-3-4'

concurrency:
  group: sync-gitleaksignore
  cancel-in-progress: false

jobs:
  sync-ignore:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout current branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        # Use the branch from workflow_dispatch for testing purposes
        ref: ${{ github.event.inputs.branch || github.ref_name }}

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Get current branch name and fetch master
      id: vars
      run: |
        echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
        git fetch origin master

    - name: Extract gitleaksignore entries from version branch
      run: |
        cp .gitleaksignore version_ignore

        # Get master version of the file
        git checkout origin/master -- .gitleaksignore
        cp .gitleaksignore master_ignore

        # Cleanup and sort both files (remove comments + blanks)
        grep -vE '^\s*#|^\s*$' version_ignore | sort -u > version_clean
        grep -vE '^\s*#|^\s*$' master_ignore | sort -u > master_clean

        # Find entries in version_clean not in master
        comm -23 version_clean master_clean > to_add.txt

        echo "New entries to add:"
        cat to_add.txt || true

    - name: Exit early if nothing to add
      id: check_changes     
      run: |
        if [ ! -s to_add.txt ]; then
          echo "No new gitleaksignore entries to add to master."
          exit 0
        fi
        echo 'GITLEAKS_CHANGES=true' >> $GITHUB_OUTPUT

    - name: Update .gitleaksignore in master
      if: ${{ steps.check_changes.outputs.GITLEAKS_CHANGES == 'true' }}
      run: |
        # Create a new branch from master
        git checkout master
        git pull origin master
        branch_name="gitleaks-sync-${{ github.run_id }}"
        git checkout -b "$branch_name"

        # Add new entries to .gitleaksignore
        echo "" >> .gitleaksignore
        cat to_add.txt >> .gitleaksignore
        echo "" >> .gitleaksignore

        # Commit and push the changes
        git add .gitleaksignore
        git commit -m "chore: sync .gitleaksignore with version branch"
        git push origin "$branch_name"

    - name: Create a PR in master with new .gitleaksignore entries
      if: ${{ steps.check_changes.outputs.GITLEAKS_CHANGES == 'true' }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pr_body='
        ## Describe the Change
        This PR updates the master .gitleaksignore file according to the new entries added to the version branch .gitleaksignore file.
        '
        output=$(gh pr create --base master --title "docs: update .gitleaksignore" --body "$pr_body")
        pr_url=$(echo "$output" | grep -o "https://[^ ]*")        - name: Get current branch name and fetch master
          id: vars
          run: |
            echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
            git fetch origin master
        echo "PR successfully created $pr_url."

        # Save the PR URL as an environment variable
        echo "GITHUB_CREATED_PERMISSIONS_PR=$pr_url" >> $GITHUB_ENV

    - name: Success Slack Notification
      if: ${{ success() && steps.check_changes.outputs.GITLEAKS_CHANGES == 'true' }}
      uses: rtCamp/action-slack-notify@v2.3.3
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_PRIVATE_TEAM_TEST_WEBHOOK }}
        SLACK_COLOR: ${{ job.status }}
        SLACKIFY_MARKDOWN: true
        ENABLE_ESCAPES: true
        SLACK_MESSAGE: "This PR adds missing .gitleaksignore entries from the ${{ steps.vars.outputs.BRANCH_NAME }} branch. Please review ${{ env.GITHUB_CREATED_PERMISSIONS_PR }} for more details."
    
    - name: Failure Slack Notification
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2.3.3
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_PRIVATE_TEAM_TEST_WEBHOOK }}
        SLACK_COLOR: ${{ job.status }}
        SLACKIFY_MARKDOWN: true
        ENABLE_ESCAPES: true
        SLACK_MESSAGE: 'The gitleaks sync job in `${{ github.repository }}` failed. [View details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).'