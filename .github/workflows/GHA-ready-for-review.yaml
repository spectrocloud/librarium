# This workflow will post to Slack when a PR is labeled with "notify-slack". 
# It will notify the appropriate reviewers based on the current UTC hour.
# It also ensures that Slack is not notified multiple times for the same PR.
# The reviewers are defined in a Base64 encoded JSON file stored in a GitHub secret.
# After notifying, it records the notification in the PR comments and securely deletes the reviewers file.
# The workflow is designed to be efficient and secure, ensuring that sensitive information is handled properly.


name: Ready for Review

on:
  pull_request:
    types: [labeled]

permissions:
  pull-requests: write

concurrency:
  group: readyforreviewci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  notify-slack:
    if: contains(github.event.pull_request.labels.*.name, 'notify-slack')
    runs-on: ubuntu-latest

    steps:
      - name: Check for prior Slack notification comment
        id: check
        run: |
          COMMENTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments)

          echo "$COMMENTS" | grep -q "<!-- slack-notified -->"
          if [ $? -eq 0 ]; then
            echo "Slack already notified."
            echo "notified=true" >> $GITHUB_OUTPUT
          else
            echo "notified=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit if already notified # skip remaining steps but treat it as successful
        if: steps.check.outputs.notified == 'true'
        continue-on-error: true
        run: echo "Slack already notified — skipping remaining steps."

      - name: Decode reviewer config (Base64) #decode GitHub secret
        if: steps.check.outputs.notified == 'false'
        id: config
        run: |
          echo "${{ secrets.REVIEWER_CONFIG_B64 }}" | base64 -d > reviewers.json

      - name: Choose Reviewers From Config
        if: steps.check.outputs.notified == 'false'
        id: pick
        run: |
          HOUR=$(date -u +'%H')
          echo "Current UTC Hour: $HOUR"
          REVIEWERS=""

          for reviewer in $(jq -r 'keys[]' reviewers.json); do
            START=$(jq -r ".\"$reviewer\".start" reviewers.json)
            END=$(jq -r ".\"$reviewer\".end" reviewers.json)
            SLACK_ID=$(jq -r ".\"$reviewer\".slack_id" reviewers.json)

            if [ "$HOUR" -ge "$START" ] && [ "$HOUR" -lt "$END" ]; then
              REVIEWERS+="<@$SLACK_ID> "
            fi
          done

          echo "reviewers=$REVIEWERS" >> $GITHUB_OUTPUT

      - name: Notify Slack # Send notification to Slack
        if: steps.check.outputs.notified == 'false'
        uses: rtCamp/action-slack-notify@v2.3.3
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_PRIVATE_TEAM_TEST_WEBHOOK }}
          SLACK_USERNAME: "spectromate"
          SLACK_ICON_EMOJI: ":robot_panic:"
          SLACK_COLOR: "#A020F0"
          SLACK_MESSAGE: |
            :review: *<${{ github.event.pull_request.html_url }}|${{ github.event.pull_request.title }}>* is ready for review!
            Pinging: ${{ steps.pick.outputs.reviewers }}

      - name: Record Slack notification as PR comment # Add a comment to the PR to indicate Slack was notified
        if: steps.check.outputs.notified == 'false'
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"body\":\"✅ Slack reviewers notified at $TIMESTAMP\n${{ steps.pick.outputs.reviewers }}\n<!-- slack-notified -->\"}" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments

      - name: Securely overwrite and delete reviewers.json # Shred the reviewers.json file to ensure sensitive data is not left behind
        if: always()
        run: |
          if [ -f reviewers.json ]; then
            echo "Shredding reviewers.json"
            dd if=/dev/urandom of=reviewers.json bs=1 count=$(stat -c%s reviewers.json) conv=notrunc status=none
            rm -f reviewers.json
            echo "Secure deletion complete."
          else
            echo "No reviewers.json file to delete."
          fi

      - name: Final Job Status Summary # Provide a summary of the job status
        if: always()
        run: |
          if [ "${{ steps.check.outputs.notified }}" == "true" ]; then
            echo "✅ Job completed: Slack was already notified."
          else
            echo "✅ Job completed: Slack notification was sent in this run."
          fi
