{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Hubble APIs",
    "version": "v1alpha1"
  },
  "paths": {
    "/v1alpha1/async/ops/{opsId}/status": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Retrieves the status of the async operation",
        "operationId": "V1Alpha1AsyncOpsStatus",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AsyncStatus"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "opsId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/audits": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of audit logs",
        "operationId": "v1Alpha1AuditsList",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "string",
            "name": "userUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "projectUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "tenantUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "resourceKind",
            "in": "query"
          },
          {
            "type": "string",
            "name": "resourceUid",
            "in": "query"
          },
          {
            "enum": [
              "create",
              "update",
              "delete",
              "publish",
              "deploy"
            ],
            "type": "string",
            "name": "actionType",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Audits"
            }
          }
        }
      }
    },
    "/v1alpha1/audits/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified audit log",
        "operationId": "v1Alpha1AuditsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Audit"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/audits/{uid}/sysMsg": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the system message of the specified audit",
        "operationId": "v1Alpha1AuditsUidGetSysMsg",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AuditSysMsg"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/audits/{uid}/userMsg": {
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified user message for the specified audit",
        "operationId": "v1Alpha1AuditsUidMsgUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AuditMsgUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/auth/authenticate": {
      "post": {
        "description": "Authenticates the user",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Authenticates the user for the specified crendentials",
        "operationId": "v1alpha1Authenticate",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "name": "setCookie",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.AuthLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserToken"
            }
          }
        }
      }
    },
    "/v1alpha1/auth/cookie/refresh": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Refreshes authentication token using the cookie data",
        "operationId": "v1alpha1AuthRefreshCookie",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserToken"
            }
          }
        }
      }
    },
    "/v1alpha1/auth/login": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the authentication type for the specified user email id",
        "operationId": "v1alpha1AuthLogin",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.LoginResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/auth/logout": {
      "post": {
        "description": "Logs out the user",
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Logs out the user",
        "operationId": "v1alpha1AuthLogout",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/auth/org": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the user organization details",
        "operationId": "v1alpha1AuthOrg",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.LoginResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/auth/org/{org}/saml/callback": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "v1alpha1"
        ],
        "summary": "Identity provider callback url for the SMAL authentication",
        "operationId": "V1Alpha1SamlCallback",
        "parameters": [
          {
            "type": "string",
            "name": "SAMLResponse",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserToken"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "org",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "authToken",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/auth/password/{passwordToken}/activate": {
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Activates the specified user password using the password token",
        "operationId": "v1alpha1PasswordActivate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "password"
              ],
              "properties": {
                "password": {
                  "type": "string",
                  "format": "password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "passwordToken",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/auth/password/{passwordToken}/reset": {
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Resets the user password using the password token",
        "operationId": "v1alpha1PasswordReset",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "password"
              ],
              "properties": {
                "password": {
                  "type": "string",
                  "format": "password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "passwordToken",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/auth/refresh/{token}": {
      "get": {
        "description": "Issues a new token within refresh timeout and same session id is maintained",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Refreshes authentication token",
        "operationId": "v1alpha1AuthRefresh",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserToken"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "boolean",
          "default": true,
          "name": "setCookie",
          "in": "query"
        },
        {
          "type": "string",
          "name": "token",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/auth/services/login": {
      "post": {
        "description": "System service like ally, jet can login to get the JWT for the application interactions",
        "tags": [
          "v1alpha1"
        ],
        "summary": "System service authentication",
        "operationId": "v1alpha1SystemServicesLogin",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemServiceLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserToken"
            }
          }
        }
      }
    },
    "/v1alpha1/auth/sso/idps": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the list of supported identity providers",
        "operationId": "V1Alpha1SsoIdps",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.IdentityProviders"
            }
          }
        }
      }
    },
    "/v1alpha1/auth/syslogin": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "System admin login",
        "operationId": "V1Alpha1SysLogin",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "name": "setCookie",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SysLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SysUserToken"
            }
          }
        }
      }
    },
    "/v1alpha1/auth/user/password/reset": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Resets the user password via email. Password reset email will be sent to the user",
        "operationId": "v1alpha1PasswordResetRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "emailId"
              ],
              "properties": {
                "emailId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/baremetalmachines": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Retrieves a list of registered bare metal machines",
        "operationId": "v1alpha1BareMetalMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of bare metal machine items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.BareMetalMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Registers the bare metal machine",
        "operationId": "v1alpha1BareMetalMachinesRegister",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.BareMetalMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/baremetalmachines/{uid}": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Returns the specified bare metal machine",
        "operationId": "v1alpha1BareMetalMachinesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.BareMetalMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Updates the specified bare metal machine",
        "operationId": "v1alpha1BareMetalMachinesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.BareMetalMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Deletes the specified bare metal machine",
        "operationId": "v1alpha1BareMetalMachinesDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudaccounts/aws": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of AWS cloud accounts",
        "operationId": "v1alpha1CloudAccountsAwsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates an AWS cloud account",
        "operationId": "v1alpha1CloudAccountsAwsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/cloudaccounts/aws/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified AWS account",
        "operationId": "v1alpha1CloudAccountsAwsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified AWS account",
        "operationId": "v1alpha1CloudAccountsAwsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified AWS account",
        "operationId": "v1alpha1CloudAccountsAwsDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patches the specified CloudAccount Aws",
        "operationId": "v1alpha1CloudAccountsAwsPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.CloudAccountsPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudaccounts/azure": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of azure cloud accounts",
        "operationId": "v1alpha1CloudAccountsAzureList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of azure cloud account items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create azure cloud account",
        "operationId": "v1alpha1CloudAccountsAzureCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/cloudaccounts/azure/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified azure cloud account",
        "operationId": "v1alpha1CloudAccountsAzureGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified azure account",
        "operationId": "v1alpha1CloudAccountsAzureUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified azure account",
        "operationId": "v1alpha1CloudAccountsAzureDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patches the specified CloudAccount azure",
        "operationId": "v1alpha1CloudAccountsAzurePatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.CloudAccountsPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudaccounts/gcp": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of gcp cloud accounts",
        "operationId": "v1alpha1CloudAccountsGcpList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of gcp cloud account items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates a GCP cloud account",
        "operationId": "v1alpha1CloudAccountsGcpCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpAccountEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/cloudaccounts/gcp/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified GCP cloud account",
        "operationId": "v1alpha1CloudAccountsGcpGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified GCP account",
        "operationId": "v1alpha1CloudAccountsGcpUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpAccountEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified GCP account",
        "operationId": "v1alpha1CloudAccountsGcpDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patches the specified CloudAccount gcp",
        "operationId": "v1alpha1CloudAccountsGcpPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.CloudAccountsPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudaccounts/summary": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of cloud accounts summary",
        "operationId": "v1alpha1CloudAccountsListSummary",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account summary items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.CloudAccountsSummary"
            }
          }
        }
      }
    },
    "/v1alpha1/cloudaccounts/vsphere": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of vSphere cloud accounts",
        "operationId": "v1alpha1CloudAccountsVsphereList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereAccounts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates a vSphere cloud account",
        "operationId": "v1alpha1CloudAccountsVsphereCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/cloudaccounts/vsphere/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified vSphere account",
        "operationId": "v1alpha1CloudAccountsVsphereGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified VSphere account",
        "operationId": "v1alpha1CloudAccountsVsphereUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified vSphere account",
        "operationId": "v1alpha1CloudAccountsVsphereDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patches the specified CloudAccount Vsphere",
        "operationId": "v1alpha1CloudAccountsVspherePatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.CloudAccountsPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudaccounts/vsphere/{uid}/properties/computecluster/resources": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get the vSphere computecluster resources for the given overlord account",
        "operationId": "v1alpha1VsphereAccountsUidClusterRes",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1VsphereComputeClusterResources"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "datacenter",
          "in": "query",
          "required": true
        },
        {
          "type": "string",
          "name": "computecluster",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudaccounts/vsphere/{uid}/properties/datacenter/resources": {
      "get": {
        "description": "Deprecated. Use /cloudaccounts/vsphere/{uid}/properties/computecluster/resources",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get the vSphere datacenters \u0026 computecluster for the given overlord account",
        "operationId": "v1alpha1VsphereAccountsUidDatacenterRes",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1VsphereDatacenterResources"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "datacenter",
          "in": "query",
          "required": true
        },
        {
          "type": "string",
          "name": "computecluster",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudaccounts/vsphere/{uid}/properties/datacenters": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get the vSphere datacenters \u0026 datacluster for the given overlord account",
        "operationId": "v1alpha1VsphereAccountsUidDatacenters",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1VsphereDatacenters"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/aws/{configUid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified AWS cloud config",
        "operationId": "v1alpha1CloudConfigsAwsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsCloudConfig"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified AWS cloud config",
        "operationId": "v1alpha1CloudConfigsAwsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1AwsMachinePoolConfigEntities"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/aws/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates an AWS cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsAwsMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified AWS cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsAwsMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1alpha1CloudConfigsAwsMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of AWS machines",
        "operationId": "v1alpha1CloudConfigsAwsPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of AWS machine items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsAwsPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified AWS machine",
        "operationId": "v1alpha1CloudConfigsAwsPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsAwsPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified AWS machine",
        "operationId": "v1alpha1CloudConfigsAwsPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/azure/{configUid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified Azure cloud config",
        "operationId": "v1alpha1CloudConfigsAzureGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureCloudConfig"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified Azure cloud config",
        "operationId": "v1alpha1CloudConfigsAzureUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1AzureMachinePoolConfigEntities"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/azure/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates an Azure cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsAzureMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified Azure cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsAzureMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1alpha1CloudConfigsAzureMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "description": "Returns all the Azure machines restricted to the user role and filters.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of Azure machines",
        "operationId": "v1alpha1CloudConfigsAzurePoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of AWS machine items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsAzurePoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "description": "Returns a Azure machine for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified Azure machine",
        "operationId": "v1alpha1CloudConfigsAzurePoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified machine to cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsAzurePoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified Azure machine",
        "operationId": "v1alpha1CloudConfigsAzurePoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/gcp/{configUid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified GCP cloud config",
        "operationId": "v1alpha1CloudConfigsGcpGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpCloudConfig"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified AWS cloud config",
        "operationId": "v1alpha1CloudConfigsGcpUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpMachinePoolConfigEntities"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/gcp/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates a Gcp cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsGcpMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified GCP cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsGcpMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1alpha1CloudConfigsGcpMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of GCP machines",
        "operationId": "v1alpha1CloudConfigsGcpPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of GCP machine items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Adds the machine to cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsGcpPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/gcp/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified GCP machine",
        "operationId": "v1alpha1CloudConfigsGcpPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified machine to the cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsGcpPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified GCP machine",
        "operationId": "v1alpha1CloudConfigsGcpPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/vsphere/{configUid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified vSphere cloud config",
        "operationId": "v1alpha1CloudConfigsVsphereGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/vsphere/{configUid}/machinePools": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates a vSphere cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsVsphereMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified vSphere cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsVsphereMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified machine pool",
        "operationId": "v1alpha1CloudConfigsVsphereMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of vSphere machines",
        "operationId": "v1alpha1CloudConfigsVspherePoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of vSphere machine items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereMachines"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Adds the vSphere machine to cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsVspherePoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified vSphere machine",
        "operationId": "v1alpha1CloudConfigsVspherePoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereMachine"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified machine to cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsVspherePoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified vSphere machine",
        "operationId": "v1alpha1CloudConfigsVspherePoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/clouds/aws/account/validate": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Validate the specified AWS account credentials",
        "operationId": "V1alpha1AwsAccountValidate",
        "parameters": [
          {
            "name": "awsCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1AwsCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/aws/regions": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of AWS regions for the sepcified account",
        "operationId": "V1alpha1AwsRegions",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsRegions"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/aws/regions/{region}/availabilityzones": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of AWS availability zones for the specified region",
        "operationId": "V1alpha1AwsZones",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsAvailabilityZones"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/aws/regions/{region}/copydefaultimages": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Copies the specified image from one region to another region",
        "operationId": "V1alpha1AwsCopyImageFromDefaultRegion",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "name": "spectroClusterAwsImageTag",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsFindImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AsyncOperationIdEntity"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/aws/regions/{region}/images": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns AWS image for the specified AMI name",
        "operationId": "V1alpha1AwsFindImage",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "name": "awsImageRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsFindImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsImage"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/aws/regions/{region}/instancetypes": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of AWS instance types",
        "operationId": "V1alpha1AwsInstanceTypes",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "double",
            "name": "cpuGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "name": "memoryGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "name": "gpuGtEq",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsInstanceTypes"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/aws/regions/{region}/keypairs": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of AWS keypairs",
        "operationId": "V1alpha1AwsKeyPairs",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsKeyPairs"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/aws/regions/{region}/vpcs": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of vpcs for the specified account",
        "operationId": "V1alpha1AwsVpcs",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsVpcs"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Check if Azure account is valid",
        "operationId": "V1alpha1AzureAccountValidate",
        "parameters": [
          {
            "name": "azureCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1AzureCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/regions": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of Azure regions",
        "operationId": "V1alpha1AzureRegions",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureRegions"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/regions/{region}/instancetypes": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of Azure instance types",
        "operationId": "V1alpha1AzureInstanceTypes",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "double",
            "name": "cpuGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "name": "memoryGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "name": "gpuGtEq",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureInstanceTypes"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/regions/{region}/subscriptions/{subscriptionId}/networks": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of Azure virtual network list for the sepcified account",
        "operationId": "V1alpha1AzureVirtualNetworkList",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureVirtualNetworkList"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/regions/{region}/subscriptions/{subscriptionId}/resourceGroups": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of Azure resource group for the sepcified account",
        "operationId": "V1alpha1AzureResourceGroupList",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureResourceGroupList"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/regions/{region}/zones": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of Azure zones for the specified region",
        "operationId": "V1alpha1AzureZones",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureZoneEntity"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/storageaccounttypes": {
      "get": {
        "description": "Returns Azure storage account types.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get Azure storage account types",
        "operationId": "V1alpha1AzureStorageAccountTypes",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureStorageAccountEntity"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/subscriptions": {
      "get": {
        "description": "Returns list of Azure subscription list.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of Azure subscription list for the sepcified account",
        "operationId": "V1alpha1AzureSubscriptionList",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureSubscriptionList"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/vhds/{vhd}/url": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the Azure vhd url for the specified vhd location",
        "operationId": "V1alpha1AzureVhdUrl",
        "parameters": [
          {
            "type": "string",
            "name": "vhd",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureVhdUrlEntity"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/gcp/account/validate": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Validate the specified GCP account credentials",
        "operationId": "V1alpha1GcpAccountValidate",
        "parameters": [
          {
            "name": "gcpCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpCloudAccountValidateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/gcp/images/{imageName}/url": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the Gcp image url for the specified image location",
        "operationId": "V1alpha1GcpImageUrl",
        "parameters": [
          {
            "type": "string",
            "name": "imageName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpImageUrlEntity"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/gcp/projects": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of GCP projects for the sepcified account",
        "operationId": "V1alpha1GcpProjects",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpProjects"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/gcp/projects/{project}/regions": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of GCP regions",
        "operationId": "V1alpha1GcpRegions",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpRegions"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/gcp/projects/{project}/regions/{region}/networks": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of GCP networks for the sepcified account",
        "operationId": "V1alpha1GcpNetworks",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpNetworks"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/gcp/projects/{project}/regions/{region}/zones": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of GCP zones for the sepcified account",
        "operationId": "V1alpha1GcpZones",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpZones"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/gcp/regions/{region}/instancetypes": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of GCP instance types",
        "operationId": "V1alpha1GcpInstanceTypes",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "double",
            "name": "cpuGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "name": "memoryGtEq",
            "in": "query"
          },
          {
            "type": "number",
            "format": "double",
            "name": "gpuGtEq",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpInstanceTypes"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/vsphere/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Check if Vsphere account is valid",
        "operationId": "V1alpha1VsphereAccountValidate",
        "parameters": [
          {
            "name": "vsphereCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1VsphereCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/vsphere/datacenters": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the vsphere data centers",
        "operationId": "V1alpha1VsphereDatacenters",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereDatacenters"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/vsphere/datacenters/{uid}/computeclusters/{computecluster}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the resources for vsphere compute cluster",
        "operationId": "V1alpha1VsphereComputeClusterResources",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "computecluster",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereComputeClusterResources"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/vsphere/datacenters/{uid}/resources": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the resources for vsphere datacenter",
        "operationId": "V1alpha1VsphereDatacentersResources",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "computecluster",
            "in": "query"
          },
          {
            "type": "string",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereDatacenterResources"
            }
          }
        }
      }
    },
    "/v1alpha1/clusterprofiles": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of cluster profiles",
        "operationId": "v1alpha1ClusterProfilesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster profile items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfiles"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates a cluster profile",
        "operationId": "v1alpha1ClusterProfilesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfileEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/clusterprofiles/validate/packs": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Validate cluster profile packs",
        "operationId": "v1alpha1ClusterProfilesValidatePacks",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfileTemplateDraft"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster profile packs validation response",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfileValidatorResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/clusterprofiles/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified cluster profile",
        "operationId": "v1alpha1ClusterProfilesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfile"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified cluster profile",
        "operationId": "v1alpha1ClusterProfilesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfileEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified cluster profile",
        "operationId": "v1alpha1ClusterProfilesDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "includes pack meta such as schema, presets",
          "name": "includePackMeta",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/clusterprofiles/{uid}/packRefs": {
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update cluster profile packs ref",
        "operationId": "v1alpha1ClusterProfilesPacksRefUpdate",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "notify",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/clusterprofiles/{uid}/packs": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified cluster profile's packs information",
        "operationId": "v1alpha1ClusterProfilesUidPacksGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfilePacksEntities"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "includes pack meta such as schema, presets",
          "name": "includePackMeta",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/clusterprofiles/{uid}/packs/resolvedValues": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified cluster profile's packs resolved values",
        "operationId": "v1alpha1ClusterProfilesUidPacksResolvedValuesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1PackResolvedValues"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/v1alpha1PackParamsEntity"
          }
        }
      ]
    },
    "/v1alpha1/clusterprofiles/{uid}/packs/{packName}/versions/{packVersion}/values": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified cluster profile's pack values",
        "operationId": "v1alpha1ClusterProfilesUidPacksValuesGet",
        "parameters": [
          {
            "type": "string",
            "description": "cluster profile uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack name",
            "name": "packName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack version",
            "name": "packVersion",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack uid",
            "name": "packUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster profile pack values",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfilePackValuesList"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified cluster profile pack values",
        "operationId": "v1alpha1ClusterProfilesPacksValuesUpdate",
        "parameters": [
          {
            "type": "string",
            "description": "cluster profile uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack name",
            "name": "packName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack version",
            "name": "packVersion",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfilePackValues"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates a cluster profile pack values",
        "operationId": "v1alpha1ClusterProfilesPacksValuesCreate",
        "parameters": [
          {
            "type": "string",
            "description": "cluster profile uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack name",
            "name": "packName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack version",
            "name": "packVersion",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack uid",
            "name": "packUid",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfilePackValues"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/clusterprofiles/{uid}/publish": {
      "patch": {
        "description": "Publish the draft cluster profile with next revision, the current draft cluster profile will be marked to published\nand the draft cluster profile will be set to null in the cluster profile template.\n",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Publish the cluster profile",
        "operationId": "v1alpha1ClusterProfilesPublish",
        "responses": {
          "204": {
            "description": "Cluster profile published successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/crypto/decrypt/key/{key}/data/{data}": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Returns the decrypted data",
        "operationId": "V1Alpha1DecryptGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.CrypticResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "key",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "data",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "name": "base64",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/crypto/encrypt/key/{key}/data/{data}": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Returns the encrypted data",
        "operationId": "V1Alpha1EncryptGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.CrypticResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "key",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "data",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "name": "base64",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/crypto/hash": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Returns the hashed data",
        "operationId": "V1Alpha1CryptoHashGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Hash"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "data",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1alpha1/dashboard/clusterprofiles": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of cluster profiles summary",
        "operationId": "v1alpha1ClusterProfilesSummary",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster profile summary items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfilesSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "default": "all",
          "name": "cloudType",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/dashboard/projects": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of project summary",
        "operationId": "v1alpha1ProjectsSummary",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 60,
            "description": "Metric period in minutes defines latest metrics by period",
            "name": "metricPeriod",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of project summary items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ProjectsSummary"
            }
          }
        }
      }
    },
    "/v1alpha1/dashboard/spectroclusters": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of cluster summary",
        "operationId": "v1alpha1SpectroClustersSummary",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 60,
            "description": "Metric period in minutes defines latest metrics by period",
            "name": "metricPeriod",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClustersSummary"
            }
          }
        }
      }
    },
    "/v1alpha1/dashboard/spectroclusters/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified cluster summary",
        "operationId": "v1alpha1SpectroClustersSummaryUid",
        "responses": {
          "200": {
            "description": "An spectro cluster summary",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterUidSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/errlogs/hash": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Returns the hash for the error reference",
        "operationId": "V1Alpha1ErrLogsHashGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Hash"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "data",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1alpha1/errlogs/token/{token}": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Retrieves the list of error logs",
        "operationId": "V1Alpha1ErrLogsList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ErrLogs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/errlogs/{ref}/token/{token}": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Returns the specified err log for the given reference",
        "operationId": "V1Alpha1ErrLogsRefGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ErrLog"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "ref",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "token",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/events/components": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of component events",
        "operationId": "v1alpha1EventsComponentsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of component events items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Events"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates a commponent event",
        "operationId": "v1alpha1EventsComponentsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Event"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/events/components/bulk": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates the component events in bulk",
        "operationId": "v1alpha1EventsComponentsCreateBulk",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.BulkEvents"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uids"
            }
          }
        }
      }
    },
    "/v1alpha1/events/components/{objectKind}/{objectUid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of components events for the specified related object",
        "operationId": "v1alpha1EventsComponentsObjTypeUidList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Events"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete all the components events for the specified related object",
        "operationId": "v1alpha1EventsComponentsObjTypeUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "objectKind",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "objectUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/events/internal/subscribe": {
      "put": {
        "description": "Subscribe components events with the message broker",
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Subscribe components events with the message broker",
        "operationId": "v1alpha1EventsComponentsSubscriberUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1MsgSubscriber"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1alpha1/events/{eventUid}/components/{objectKind}/{objectUid}/context": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Retrieves a list of components events for the given related object for given window period",
        "operationId": "v1alpha1EventsUidComponentsObjTypeUidContextList",
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Events"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "eventUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "objectKind",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "objectUid",
          "in": "path",
          "required": true
        },
        {
          "maximum": 30,
          "minimum": 1,
          "type": "integer",
          "format": "int32",
          "default": 3,
          "description": "window period in minutes, will provide before \u0026 after events of window period duration",
          "name": "windowPeriod",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/files": {
      "post": {
        "description": "Returned uid can be used to associate as file uid",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1alpha1"
        ],
        "summary": "Stores an file in the repository",
        "operationId": "v1alpha1Files",
        "parameters": [
          {
            "type": "file",
            "name": "fileName",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.FileUploadResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/files/{uid}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified file as octet-stream",
        "operationId": "v1alpha1FilesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Type": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/health/internal/db": {
      "get": {
        "description": "Ping Service",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Database Ping Service",
        "operationId": "V1alpha1DatabaseHealthPing",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.HealthPing"
            }
          }
        }
      }
    },
    "/v1alpha1/health/internal/jobs": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "List the scheduler jobs",
        "operationId": "V1Alpha1SchedulerJobHealthList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SchedulerJobsHealth"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/health/internal/locks": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "List the locks",
        "operationId": "V1Alpha1LocksHealthList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.HealthLocks"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/health/internal/msgbroker": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Returns the message broker health",
        "operationId": "V1Alpha1MsgBrokerHealth",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.MsgBrokerHealth"
            }
          }
        }
      }
    },
    "/v1alpha1/health/ping": {
      "get": {
        "description": "Ping Service",
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Ping Service",
        "operationId": "V1alpha1HealthPing",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.HealthPing"
            }
          }
        }
      }
    },
    "/v1alpha1/installers/spectro": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Lists spectro installers",
        "operationId": "v1Alpha1SpectroInstallers",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroInstallers"
            }
          }
        }
      }
    },
    "/v1alpha1/installers/spectro/status": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get the spectro installer status",
        "operationId": "v1Alpha1SpectroInstallerStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroInstallerStatus"
            }
          }
        }
      }
    },
    "/v1alpha1/installers/spectro/vsphere": {
      "post": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Creates the spectro installer",
        "operationId": "v1alpha1SpectroInstallerCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroInstallerInputEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/installers/spectro/vsphere/clusterprofile": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the vsphere installer cluster profile",
        "operationId": "v1alpha1VsphereInstallerClusterProfilesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfile"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the vsphere installer cluster profile",
        "operationId": "v1alpha1VsphereInstallerClusterProfilesCreate",
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/installers/spectro/vsphere/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the spectro installer",
        "operationId": "v1alpha1SpectroInstallerGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroInstallerEntity"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the spectroinstaller entity",
        "operationId": "v1alpha1SpectroInstallerDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/installers/spectro/vsphere/{uid}/cloudaccount": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get a vSphere cloud account for spectrocluster uid",
        "operationId": "v1Alpha1SpectroInstallerCloudAccountGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1VsphereAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update a vSphere cloud account for spectrocluster uid",
        "operationId": "v1Alpha1SpectroInstallerCloudAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1VsphereAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create a vSphere cloud account for spectroinstaller uid",
        "operationId": "v1Alpha1SpectroInstallerCloudAccountCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1VsphereAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete a vSphere cloud account for specified installer uid",
        "operationId": "v1Alpha1SpectroInstallerCloudAccountDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/installers/spectro/vsphere/{uid}/spectrocluster": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get a vSphere spectro cluster for spectrocluster uid",
        "operationId": "v1Alpha1SpectroInstallerSpectroClusterGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1SpectroCluster"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update a vSphere spectro cluster for spectrocluster uid",
        "operationId": "v1Alpha1SpectroInstallerSpectroClusterUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1SpectroVsphereClusterEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create a vSphere spectro cluster for spectroinstaller uid",
        "operationId": "v1Alpha1SpectroInstallerSpectroClusterCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1SpectroVsphereClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete a vSphere spectro cluster for spectrocluster uid",
        "operationId": "v1Alpha1SpectroInstallerSpectroClusterDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/jobs/internal": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Retrieves the list of the scheduler jobs",
        "operationId": "V1Alpha1SchedulerJobList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SchedulerJobs"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Updates the specified scheduler job",
        "operationId": "V1Alpha1SchedulerJobUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SchedulerJob"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/jobs/internal/{job}": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Returns the specified scheduler job",
        "operationId": "V1Alpha1SchedulerJobName",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SchedulerJob"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        },
        {
          "type": "string",
          "name": "job",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/jobs/internal/{job}/disable": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Disables the specified scheduler job",
        "operationId": "V1Alpha1SchedulerJobNameDisable",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        },
        {
          "type": "string",
          "name": "job",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/jobs/internal/{job}/run": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Executes the specified scheduler job on demand",
        "operationId": "V1Alpha1SchedulerJobNameRun",
        "responses": {
          "200": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        },
        {
          "type": "string",
          "name": "job",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/locks/internal": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "List the locks",
        "operationId": "V1Alpha1LocksList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Locks"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/locks/internal/{lock}/unlock": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Unlock the lock",
        "operationId": "V1Alpha1LocksName",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "query"
        },
        {
          "type": "string",
          "name": "lock",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/metrics/{resourceKind}/values": {
      "get": {
        "description": "Returns all the metrics for a given resource kind",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves the list of metrics for a specified resource kind",
        "operationId": "v1alpha1MetricsList",
        "parameters": [
          {
            "enum": [
              "spectrocluster",
              "machine",
              "project"
            ],
            "type": "string",
            "name": "resourceKind",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "all",
            "name": "metricKind",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "name": "period",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "includeMasterMachines in boolean, group the data point by including master nodes if set to true",
            "name": "includeMasterMachines",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "if true then api returns only aggregation values, else api returns all data points by default",
            "name": "discrete",
            "in": "query"
          },
          {
            "type": "string",
            "name": "spectroClusterUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of metric items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.MetricTimeSeriesList"
            }
          }
        }
      }
    },
    "/v1alpha1/metrics/{resourceKind}/{resourceUid}/values": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the metrics for a specified resource uid",
        "operationId": "v1alpha1MetricsUidList",
        "parameters": [
          {
            "enum": [
              "spectrocluster",
              "machine",
              "project"
            ],
            "type": "string",
            "name": "resourceKind",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "resourceUid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "all",
            "description": "multiple metric kinds can be provided with comma separated",
            "name": "metricKind",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "description": "period in minutes, group the data point by the specified period",
            "name": "period",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "includeMasterMachines in boolean, group the data point by including master nodes if set to true",
            "name": "includeMasterMachines",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "if true then api returns only aggregation values, else api returns all data points by default",
            "name": "discrete",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of metric items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.MetricTimeSeries"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the metrics of the specified resource",
        "operationId": "v1alpha1MetricsUidDelete",
        "parameters": [
          {
            "enum": [
              "spectrocluster",
              "machine",
              "project"
            ],
            "type": "string",
            "name": "resourceKind",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "resourceUid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      }
    },
    "/v1alpha1/nats/config": {
      "get": {
        "description": "Returns Nats Configuration",
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Get Nats Configuration",
        "operationId": "V1Alpha1NatsConfiguration",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.NatsConfiguration"
            }
          }
        }
      }
    },
    "/v1alpha1/nats/credentials": {
      "post": {
        "description": "Returns Nats Credentials",
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Get Nats Credentials",
        "operationId": "V1Alpha1NatsCredentials",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.NatsCredentialRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.NatsCredentials"
            }
          }
        }
      }
    },
    "/v1alpha1/notifications/": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of notifications",
        "operationId": "v1alpha1NotificationsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of notification items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Notifications"
            }
          }
        }
      }
    },
    "/v1alpha1/notifications/events": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates a notification event",
        "operationId": "v1alpha1NotificationsEventCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.NotificationEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/notifications/{objectKind}/{objectUid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of notifications for the specified related object",
        "operationId": "v1alpha1NotificationsObjTypeUidList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Notifications"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "objectKind",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "objectUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "isDone",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/notifications/{uid}/ack": {
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Acknowledges the specified notification",
        "operationId": "v1alpha1NotificationsUidAck",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/notifications/{uid}/done": {
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Marks the specified notification's action as done",
        "operationId": "v1alpha1NotificationsUidDone",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/pairing/code": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the pairing code for the overload",
        "operationId": "v1alpha1OverlordsPairingCode",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PairingCode"
            }
          }
        }
      }
    },
    "/v1alpha1/overlords/vsphere": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of overlords owned by the tenant",
        "operationId": "v1alpha1OverlordsList",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Overlords"
            }
          }
        }
      }
    },
    "/v1alpha1/overlords/vsphere/manifest": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the manifests required for the overlord installation",
        "operationId": "v1alpha1OverlordsVsphereManifest",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.OverlordManifest"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "pairingCode",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/ova": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns overlord's ova information",
        "operationId": "v1alpha1OverlordsVsphereOvaGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.OverloadVsphereOva"
            }
          }
        }
      }
    },
    "/v1alpha1/overlords/vsphere/tenants/{tenantUid}/system": {
      "post": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Creates the system private gateway for the specified tenant",
        "operationId": "v1alpha1OverlordsSystem",
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified overlord for the given uid",
        "operationId": "v1alpha1OverlordsUidGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Overlord"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified overlord",
        "operationId": "v1alpha1OverlordsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.OverlordEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "delete the overlord",
        "operationId": "v1alpha1OverlordsUidDelete",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1DeletedMsg"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/{uid}/account": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "update the vSphere cloudaccount for the overlord",
        "operationId": "v1alpha1OverlordsUidVsphereAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.OverlordVsphereAccountEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "create the vSphere cloudaccount for the overlord",
        "operationId": "v1alpha1OverlordsUidVsphereAccountCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.OverlordVsphereAccountCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/{uid}/account/validate": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "validate the vSphere cloudaccount for the overlord",
        "operationId": "v1alpha1OverlordsUidVsphereAccountValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "account": {
                  "$ref": "#/definitions/v1alpha1VsphereCloudAccount"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/{uid}/cloudconfig": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "update the vSphere cloud config for the overlord",
        "operationId": "v1alpha1OverlordsUidVsphereCloudConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.OverlordVsphereCloudConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "create the vSphere cloud config for the overlord",
        "operationId": "v1alpha1OverlordsUidVsphereCloudConfigCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.OverlordVsphereCloudConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/{uid}/pools": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of IP Pools for the specified private gateway",
        "operationId": "v1alpha1OverlordsUidPoolsList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.IpPools"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates an IP pool defintion for the sepcified private gateway",
        "operationId": "v1alpha1OverlordsUidPoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.IpPoolInputEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/{uid}/pools/{poolUid}": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the private gateways's specified IP Pool data",
        "operationId": "v1alpha1OverlordsUidPoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.IpPoolInputEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the private gateways's specified IP Pool data",
        "operationId": "v1alpha1OverlordsUidPoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "poolUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/{uid}/properties/computecluster/resources": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves the vSphere computecluster resources for the specified overlord account",
        "operationId": "v1alpha1OverlordsUidVsphereComputeclusterRes",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1VsphereComputeClusterResources"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "datacenter",
          "in": "query",
          "required": true
        },
        {
          "type": "string",
          "name": "computecluster",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/{uid}/properties/datacenter/resources": {
      "get": {
        "description": "Deprecated. Use /overlords/vsphere/{uid}/properties/computecluster/resources",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves the vSphere computecluster resources for the specified overlord account",
        "operationId": "v1alpha1OverlordsUidVsphereDatacenterRes",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1VsphereDatacenterResources"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "datacenter",
          "in": "query",
          "required": true
        },
        {
          "type": "string",
          "name": "computecluster",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/{uid}/properties/datacenters": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves the vSphere datacenters \u0026 datacluster for the specified overlord account",
        "operationId": "v1alpha1OverlordsUidVsphereDatacenters",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1VsphereDatacenters"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/{uid}/reset": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "reset the overlord by disaaociating the overlord resources",
        "operationId": "v1alpha1OverlordsUidReset",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1UpdatedMsg"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/packs": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of pack summaries",
        "operationId": "v1alpha1PacksSummaryList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of pack summary items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackSummaries"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete all the pack summaries",
        "operationId": "v1alpha1PacksSummaryDelete",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1DeleteMeta"
            }
          }
        }
      }
    },
    "/v1alpha1/packs/{packName}/registries/{registryUid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of packs by tags",
        "operationId": "v1alpha1PacksNameRegistryUidList",
        "responses": {
          "200": {
            "description": "Pack items organized by tags",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackTagEntity"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "registryUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "pack name",
          "name": "packName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "default": "all",
          "name": "cloudType",
          "in": "query"
        },
        {
          "type": "string",
          "name": "layer",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/packs/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified pack for uid",
        "operationId": "v1alpha1PacksUid",
        "responses": {
          "200": {
            "description": "A pack for the specified uid",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackTagEntity"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/payments/stripe/checkout": {
      "post": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Create checkout session",
        "operationId": "v1alpha1PaymentStripeCheckoutPost",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.CheckoutSession"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/payments/stripe/config": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Get stripe publishable key",
        "operationId": "v1alpha1PaymentStripePublishKeyGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.StripeKey"
            }
          }
        }
      }
    },
    "/v1alpha1/payments/stripe/customer": {
      "post": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Create Customer",
        "operationId": "v1alpha1CustomerCreate",
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/payments/stripe/payment/status": {
      "post": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Webhook endpoint to receive payment status",
        "operationId": "v1alpha1PaymentStripePaymentStatusPost",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "description": "payment status payload",
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1alpha1/payments/stripe/paymentMethods/{paymentMethodUid}": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Retrieves a payment method by id",
        "operationId": "v1alpha1PaymentMethodGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PaymentMethod"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "paymentMethodUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/payments/stripe/plans": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Retrieves payment plans",
        "operationId": "v1alpha1PaymentPlansGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PaymentPlans"
            }
          }
        }
      }
    },
    "/v1alpha1/payments/stripe/subscriptions": {
      "post": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Create Payment Subscription",
        "operationId": "v1alpha1PaymentSubscriptionCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PaymentSubscription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/payments/stripe/subscriptions/{subscriptionUid}": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update Payment Subscription",
        "operationId": "v1alpha1PaymentSubscriptionUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PaymentSubscription"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Cancel the payment subscription",
        "operationId": "v1alpha1PaymentSubscriptionDelete",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "subscriptionUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/permissions": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of permissions",
        "operationId": "v1alpha1PermissionsList",
        "parameters": [
          {
            "enum": [
              "system",
              "tenant",
              "project"
            ],
            "type": "string",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of permissions",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Permissions"
            }
          }
        }
      }
    },
    "/v1alpha1/plans": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Retrieves a list of plans",
        "operationId": "v1alpha1PlansList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Plans"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Creates a user plan",
        "operationId": "v1alpha1PlansCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Plan"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/plans/{uid}": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Returns the specified plan",
        "operationId": "v1alpha1PlansUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Plan"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/plans/{uid}/credits/{creditUid}": {
      "put": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Updates the specified Plan's credit data",
        "operationId": "v1alpha1PlansUidCreditsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PlanCreditUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Deletes the specified Plan's credit data",
        "operationId": "v1alpha1PlansUidCreditsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "creditUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/plans/{uid}/freeCredit": {
      "post": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Adds free credit to the specified plan",
        "operationId": "v1alpha1PlansUidFreeCreditAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PlanAddFreeCreditUpdate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/plans/{uid}/planLimit": {
      "put": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Updates the specified plan's limit",
        "operationId": "v1alpha1PlansUidPlanLimitUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PlanLimitUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/plans/{uid}/planType": {
      "put": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Changes the plan type for the specified plan",
        "operationId": "v1alpha1PlansUidPlanTypeUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PlanChangeUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/plans/{uid}/renewal": {
      "patch": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Adds renewal data to the existing plan",
        "operationId": "v1alpha1PlansUidRenewal",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PlanRenewalUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/plans/{uid}/slaCredit": {
      "post": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Adds sla breach credit to the specified plan",
        "operationId": "v1alpha1PlansUidSlaCreditAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PlanAddSlaCreditUpdate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/projects": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of projects",
        "operationId": "v1alpha1ProjectsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of projects",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Projects"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates a project",
        "operationId": "v1alpha1ProjectsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ProjectEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/projects/alerts": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of supported alerts for a project",
        "operationId": "v1alpha1ProjectsAlerts",
        "responses": {
          "200": {
            "description": "An array of alert components",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ProjectAlertComponents"
            }
          }
        }
      }
    },
    "/v1alpha1/projects/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified project",
        "operationId": "v1alpha1ProjectsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Project"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified project",
        "operationId": "v1alpha1ProjectsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ProjectEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified project",
        "operationId": "v1alpha1ProjectsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Patches the specified project",
        "operationId": "v1alpha1ProjectsUidPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.ProjectPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/projects/{uid}/alerts/{component}": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Upsert the specified alert to the specified project",
        "operationId": "v1alpha1ProjectsUidAlertUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1AlertEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified alert to the specified project",
        "operationId": "v1alpha1ProjectsUidAlertDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "component",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/projects/{uid}/meta": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the metadata of the specified project",
        "operationId": "v1alpha1ProjectsUidMetaUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1ObjectMeta"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/projects/{uid}/teams": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the teams association to the specified project",
        "operationId": "v1alpha1ProjectsUidTeamsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ProjectTeamsEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/projects/{uid}/users": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the users association to the specified project",
        "operationId": "v1alpha1ProjectsUidUsersUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ProjectUsersEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/registries/git": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Retrieves a list of Git registries",
        "operationId": "v1alpha1RegistriesGitList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GitRegistries"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Creates a Git registry",
        "operationId": "v1alpha1RegistriesGitCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GitRegistry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/registries/git/summary": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Retrieves a list of git registries as summary",
        "operationId": "v1alpha1RegistriesGitSummaryList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GitRegistriesSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/registries/git/{uid}": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Returns the specified Git registry",
        "operationId": "v1alpha1RegistriesGitGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GitRegistry"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Updates the specified Git registry",
        "operationId": "v1alpha1RegistriesGitUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GitRegistry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Deletes the specified Git registry",
        "operationId": "v1alpha1RegistriesGitDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/registries/internal/pack/{uid}/sync": {
      "post": {
        "description": "Sync all the packs from the registry",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Sync Pack registry",
        "operationId": "v1alpha1RegistriesPackSync",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/registries/pack": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of Pack registries",
        "operationId": "v1alpha1RegistriesPackList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackRegistries"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates a pack registry",
        "operationId": "v1alpha1RegistriesPackCreate",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "skipPackSync",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackRegistry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/registries/pack/summary": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of pack registries as summary",
        "operationId": "v1alpha1RegistriesPackSummaryList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackRegistriesSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/registries/pack/validate": {
      "post": {
        "description": "Returns no contents if pack registry is valid else error.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Check if pack registry is valid",
        "operationId": "V1alpha1RegistriesPackValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackRegistrySpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/registries/pack/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified Pack registry",
        "operationId": "v1alpha1RegistriesPackGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackRegistry"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified pack registry",
        "operationId": "v1alpha1RegistriesPackUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackRegistry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified pack registry",
        "operationId": "v1alpha1RegistriesPackDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/roles": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of roles",
        "operationId": "v1alpha1RolesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Roles"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates a role with specified permissions",
        "operationId": "v1alpha1RolesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Role"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/roles/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified role",
        "operationId": "v1alpha1RolesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Role"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified role",
        "operationId": "v1alpha1RolesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Role"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified role",
        "operationId": "v1alpha1RolesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Patches the specified role",
        "operationId": "v1alpha1RolesUidpatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.RolePatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/services/{serviceName}/version": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns a latest version for a given service name",
        "operationId": "v1alpha1ServiceVersionGet",
        "parameters": [
          {
            "enum": [
              "ally",
              "jet",
              "palette",
              "ambit",
              "ally-lite",
              "palette-lite"
            ],
            "type": "string",
            "description": "service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ServiceVersion"
            }
          }
        }
      }
    },
    "/v1alpha1/services/{serviceName}/versions/{version}/manifest": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns a service manifest for a given service name and version",
        "operationId": "v1alpha1ServiceManifestGet",
        "parameters": [
          {
            "enum": [
              "ally",
              "jet",
              "palette",
              "ambit",
              "ally-lite",
              "palette-lite"
            ],
            "type": "string",
            "description": "service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "service version",
            "name": "version",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "apply",
              "delete"
            ],
            "type": "string",
            "description": "action type",
            "name": "action",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ServiceManifest"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of clusters",
        "operationId": "v1alpha1SpectroClustersList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusters"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/acquire": {
      "get": {
        "description": "To orchestrate the cluster for the K8 deployment, a lock will be applied on the cluster for 5 minutes, so that the same cluster can't be acquired for orchestration\n",
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Acquires a cluster with a lock",
        "operationId": "V1Alpha1SpectroClusterAcquire",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusters"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/acquire/create": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Returns the spectro cluster for creation with lock",
        "operationId": "v1alpha1SpectroClusterAcquireCreate",
        "parameters": [
          {
            "type": "string",
            "name": "overlordUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "overlordMode",
            "in": "query"
          },
          {
            "type": "string",
            "name": "jetUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroCluster"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/acquire/delete": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Returns the spectro cluster for deletion with lock",
        "operationId": "v1alpha1SpectroClusterAcquireDelete",
        "parameters": [
          {
            "type": "string",
            "name": "overlordUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "overlordMode",
            "in": "query"
          },
          {
            "type": "string",
            "name": "jetUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroCluster"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/aws": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates an AWS cluster",
        "operationId": "v1alpha1SpectroClustersAwsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroAwsClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/aws/validate": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Validate aws spectro cluster create",
        "operationId": "v1alpha1SpectroClustersAwsValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroAwsClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aws Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/aws/{uid}": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified AWS Cluster",
        "operationId": "v1alpha1SpectroClustersAwsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroAwsClusterEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified cluster",
        "operationId": "v1alpha1SpectroClustersAwsDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/aws/{uid}/validate": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Validate aws spectro cluster update",
        "operationId": "v1alpha1SpectroClustersUidAwsValidate",
        "parameters": [
          {
            "type": "string",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroAwsClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aws Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/azure": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates an Azure cluster",
        "operationId": "v1alpha1SpectroClustersAzureCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroAzureClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/azure/validate": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Validate azure spectro cluster create",
        "operationId": "v1alpha1SpectroClustersAzureValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroAzureClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/azure/{uid}": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified Azure Cluster",
        "operationId": "v1alpha1SpectroClustersAzureUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroAzureClusterEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified cluster",
        "operationId": "v1alpha1SpectroClustersAzureDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/azure/{uid}/validate": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Validate azure spectro cluster update",
        "operationId": "v1alpha1SpectroClustersUidAzureValidate",
        "parameters": [
          {
            "type": "string",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroAzureClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/gcp": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates a GCP cluster",
        "operationId": "v1alpha1SpectroClustersGcpCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroGcpClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/gcp/validate": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Validate gcp spectro cluster create",
        "operationId": "v1alpha1SpectroClustersGcpValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroGcpClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gcp Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/gcp/{uid}": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified GCP Cluster",
        "operationId": "v1alpha1SpectroClustersGcpUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroGcpClusterEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified cluster",
        "operationId": "v1alpha1SpectroClustersGcpDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/gcp/{uid}/validate": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Validate gcp spectro cluster update",
        "operationId": "v1alpha1SpectroClustersUidGcpValidate",
        "parameters": [
          {
            "type": "string",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroGcpClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gcp Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/internal/tenants/{tenantUid}/activeClusters": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Check any active clusters associated with the tenant",
        "operationId": "v1alpha1SpectroClustersTenantCheckActiveCluster",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1ActiveTenantResources"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/internal/tenants/{tenantUid}/activeResources": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Check any active cluster resources associated with the deleted tenant",
        "operationId": "v1alpha1SpectroClustersTenantCheckActiveResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1ActiveTenantResources"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/internal/tenants/{tenantUid}/cleanup": {
      "delete": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Clean up the resources associated with the deleted tenant",
        "operationId": "v1alpha1SpectroClustersTenantCleanUp",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/mgmt": {
      "get": {
        "tags": [
          "v1alpha1",
          "system",
          "private"
        ],
        "summary": "get the spectro application management information",
        "operationId": "V1Alpha1SpectroAppMgmtGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroAppMgmt"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/tenant/migration": {
      "patch": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "intiate migration for tenants",
        "operationId": "V1Alpha1SpectroClusterTenantMigration",
        "responses": {
          "200": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/validate/packs": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Validate spectro cluster packs",
        "operationId": "v1alpha1SpectroClustersValidatePacks",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterPacksEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Spectro Cluster packs validation response",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/vsphere": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Createa a vSphere cluster",
        "operationId": "v1alpha1SpectroClustersVsphereCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroVsphereClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/vsphere/validate": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Validate vsphere spectro cluster create",
        "operationId": "v1alpha1SpectroClustersVsphereValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroVsphereClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "vsphere Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/vsphere/{uid}": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified vSphere cluster",
        "operationId": "v1alpha1SpectroClustersVsphereUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroVsphereClusterEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified vSphere cluster",
        "operationId": "v1alpha1SpectroClustersVsphereDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/vsphere/{uid}/validate": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Validate vsphere spectro cluster update",
        "operationId": "v1alpha1SpectroClustersUidVsphereValidate",
        "parameters": [
          {
            "type": "string",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroVsphereClusterEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "vsphere Cluster validation response",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified cluster",
        "operationId": "v1alpha1SpectroClustersGet",
        "parameters": [
          {
            "type": "string",
            "name": "includeTags",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "resolvePackValues",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroCluster"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified cluster",
        "operationId": "v1alpha1SpectroClustersDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "includes pack meta such as schema, presets",
          "name": "includePackMeta",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/assets": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Associate the assets for the cluster",
        "operationId": "v1alpha1SpectroClustersUidAssets",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/v1alpha1.SpectroClusterAssetEntity"
          }
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/assets/kubeconfig": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified cluster's kube config file",
        "operationId": "v1alpha1SpectroClustersUidKubeConfig",
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the cluster's manifest data",
        "operationId": "v1alpha1SpectroClustersUidKubeConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterAssetKubeConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/assets/manifest": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified cluster's manifest data",
        "operationId": "v1alpha1SpectroClustersUidManifestGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified cluster's manifest data",
        "operationId": "v1alpha1SpectroClustersUidManifestUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterAssetManifest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/cleanup": {
      "delete": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Clean up the resources associated with the deleted cluster",
        "operationId": "v1alpha1SpectroClustersCleanUp",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/k8certificates": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get K8Certificate for spectro cluster",
        "operationId": "v1alpha1SpectroClustersK8Certificate",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.MachineCertificates"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/k8certificates/renew": {
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Sets the cluster master nodes Kubernetes certificates for renewal",
        "operationId": "v1alpha1SpectroClustersCertificatesRenew",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/packRefs": {
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the cluster's pack references",
        "operationId": "v1alpha1SpectroClustersPacksRefUpdate",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "notify",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/packs/resolvedValues": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified cluster's packs resolved values",
        "operationId": "v1alpha1SpectroClustersUidPacksResolvedValuesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1PackResolvedValues"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/v1alpha1PackParamsEntity"
          }
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/packs/{packName}/versions/{packVersion}/values": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified cluster's pack values",
        "operationId": "v1alpha1SpectroClustersUidPacksValuesGet",
        "parameters": [
          {
            "type": "string",
            "description": "cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack name",
            "name": "packName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack version",
            "name": "packVersion",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster pack values",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterPackValuesList"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified cluster pack values",
        "operationId": "v1alpha1SpectroClustersPacksValuesUpdate",
        "parameters": [
          {
            "type": "string",
            "description": "cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack name",
            "name": "packName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack version",
            "name": "packVersion",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterPackValues"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates the cluster pack values",
        "operationId": "v1alpha1SpectroClustersPacksValuesCreate",
        "parameters": [
          {
            "type": "string",
            "description": "cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack name",
            "name": "packName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack version",
            "name": "packVersion",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterPackValues"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/{uid}/profile": {
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Replaces the specified cluster profile for the cluster",
        "operationId": "v1alpha1SpectroClustersPatchProfile",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/status/condition": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified cluster status condition",
        "operationId": "v1alpha1SpectroClustersUpdateStatusCondition",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1ClusterCondition"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/status/conditions": {
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified cluster status conditions",
        "operationId": "v1alpha1SpectroClustersUpdateStatusConditions",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1ClusterCondition"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/status/endpoints": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified cluster's service endpoints information",
        "operationId": "v1alpha1SpectroClustersUpdateStatusEndpoints",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1ApiEndpoint"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/status/services": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified cluster's services information",
        "operationId": "v1alpha1SpectroClustersUpdateStatusServices",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1LoadBalancerService"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/validate/packs": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Validate spectro cluster packs",
        "operationId": "v1alpha1SpectroClustersUidValidatePacks",
        "parameters": [
          {
            "type": "string",
            "description": "cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterPacksEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Spectro Cluster packs validation response",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterValidatorResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/svc/hutil/internal/hubble/info": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "get hubble info",
        "operationId": "V1Alpha1SvcHutilInternalHubbleInfo",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.HubbleInfo"
            }
          }
        }
      }
    },
    "/v1alpha1/svc/hutil/internal/pause": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "pause all the services",
        "operationId": "V1Alpha1SvcHutilInternalPause",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/svc/hutil/internal/reinit/nats": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "reinit nats",
        "operationId": "V1Alpha1SvcHutilInternalReinitNats",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/system/admin/email": {
      "patch": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "email reset for system admin",
        "operationId": "V1Alpha1SystemAdminEmail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.V1Alpha1SystemAdminEmail"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/admin/password/reset": {
      "patch": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "password reset for system admin",
        "operationId": "V1Alpha1SystemAdminPasswordReset",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.V1Alpha1SystemAdminPasswordResetEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/aws/account": {
      "get": {
        "tags": [
          "v1alpha1",
          "system",
          "private"
        ],
        "summary": "get the system config aws devops account",
        "operationId": "V1Alpha1SystemConfigAwsAccountGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemAwsAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system",
          "private"
        ],
        "summary": "updates the system config aws devops account",
        "operationId": "V1Alpha1SystemConfigAwsAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemAwsAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/aws/image": {
      "get": {
        "tags": [
          "v1alpha1",
          "system",
          "private"
        ],
        "summary": "get the system aws image",
        "operationId": "V1Alpha1SystemConfigAwsImageGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemAwsImage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system",
          "private"
        ],
        "summary": "updates the system default aws devops image",
        "operationId": "V1Alpha1SystemConfigAwsImageUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemAwsImage"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/azure/account": {
      "get": {
        "tags": [
          "v1alpha1",
          "system",
          "private"
        ],
        "summary": "get the system azure account",
        "operationId": "V1Alpha1SystemConfigAzureAccountGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemAzureAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system",
          "private"
        ],
        "summary": "updates the system default azure devops account",
        "operationId": "V1Alpha1SystemConfigAzureAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemAzureAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/azure/storage": {
      "get": {
        "tags": [
          "v1alpha1",
          "system",
          "private"
        ],
        "summary": "get the system azure storage",
        "operationId": "V1Alpha1SystemConfigAzureStorageGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemAzureStorage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system",
          "private"
        ],
        "summary": "updates the system default azure devops storage",
        "operationId": "V1Alpha1SystemConfigAzureStorageUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemAzureStorage"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/certificate": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "get the system certificates",
        "operationId": "V1Alpha1SystemConfigCertificateGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemCertificateSpec"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "updates the system certificate",
        "operationId": "V1Alpha1SystemConfigCertificateUpdate",
        "parameters": [
          {
            "type": "file",
            "name": "crtFile",
            "in": "formData"
          },
          {
            "type": "file",
            "name": "keyFile",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1FileUploadResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/domain": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "get the system domain config",
        "operationId": "V1Alpha1SystemConfigDomainGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemConfigDomainSpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "updates the system domain config",
        "operationId": "V1Alpha1SystemConfigDomainUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemConfigDomainSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/gcp/account": {
      "get": {
        "tags": [
          "v1alpha1",
          "system",
          "private"
        ],
        "summary": "get the system gcp account",
        "operationId": "V1Alpha1SystemConfigGcpAccountGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemGcpAccount"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system",
          "private"
        ],
        "summary": "updates the system default gcp devops account",
        "operationId": "V1Alpha1SystemConfigGcpAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemGcpAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/gcp/image": {
      "get": {
        "tags": [
          "v1alpha1",
          "system",
          "private"
        ],
        "summary": "get the system gcp image",
        "operationId": "V1Alpha1SystemConfigGcpImageGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemGcpImage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system",
          "private"
        ],
        "summary": "updates the system default gcp devops image",
        "operationId": "V1Alpha1SystemConfigGcpImageUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemGcpImage"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/logger": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "get the system logger",
        "operationId": "V1Alpha1SystemConfigLoggerGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemLoggerSpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "updates the system logger",
        "operationId": "V1Alpha1SystemConfigLoggerUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemLoggerSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/preferences/cluster": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "get the cluster preference",
        "operationId": "V1Alpha1ClusterPreferenceGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterPreference"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "updates the cluster preference",
        "operationId": "V1Alpha1ClusterPreferenceUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterPreference"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/proxy": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "get the system proxy",
        "operationId": "V1Alpha1SystemConfigProxyGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemProxySpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system",
          "private"
        ],
        "summary": "updates the system proxy",
        "operationId": "V1Alpha1SystemConfigProxyUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemProxySpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/scar": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "get the system Spectro repository",
        "operationId": "V1Alpha1SystemConfigScarGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemScarSpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "updates the system Spectro repository",
        "operationId": "V1Alpha1SystemConfigScarUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemScarSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/smtp": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "get the system smtp",
        "operationId": "V1Alpha1SystemConfigSmtpGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemSmtpSpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "updates the system smtp",
        "operationId": "V1Alpha1SystemConfigSmtpUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemSmtpSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/smtp/validate": {
      "put": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "validates the system smtp",
        "operationId": "V1Alpha1SystemConfigSmtpValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemSmtpSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/sso": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "get the system sso",
        "operationId": "V1Alpha1SystemConfigSsoGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemSsoSpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "updates the system sso",
        "operationId": "V1Alpha1SystemConfigSsoUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemSsoSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/timeseries": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "get the system timeseries",
        "operationId": "V1Alpha1SystemConfigTimeseriesGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemTimeseriesSpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "updates the system timeseries",
        "operationId": "V1Alpha1SystemConfigTimeseriesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemTimeseriesSpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/config/vsphere/image": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "get the system vsphere image",
        "operationId": "V1Alpha1SystemConfigVsphereImageGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemVsphereImage"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "updates the system default vsphere devops image",
        "operationId": "V1Alpha1SystemConfigVsphereImageUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemVsphereImage"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/encrypt": {
      "post": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "encrypt the system data",
        "operationId": "V1Alpha1SystemEncrypt",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemCryptoInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemCryptoData"
            }
          }
        }
      }
    },
    "/v1alpha1/system/internal/spectromgmt": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "get the spectro management information",
        "operationId": "V1Alpha1SystemSpectroMgmtGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroMgmt"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "updates the spectro management information",
        "operationId": "V1Alpha1SystemSpectroMgmtUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroMgmt"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "create the spectro mgmt information",
        "operationId": "V1Alpha1SystemSpectroMgmtCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroMgmt"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/system/password/policy/default": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "get the system password policy",
        "operationId": "V1Alpha1SystemPasswordPolicyGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemPasswordPolicySpec"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "system",
          "private"
        ],
        "summary": "updates the system admin",
        "operationId": "V1Alpha1SystemPasswordPolicyUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemPasswordPolicySpec"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1Updated"
            }
          }
        }
      }
    },
    "/v1alpha1/system/version/installed": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "get the system installed version",
        "operationId": "V1Alpha1SystemVersionInstalled",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemVersionInfo"
            }
          }
        }
      }
    },
    "/v1alpha1/system/version/latest": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "get the system latest available version",
        "operationId": "V1Alpha1SystemVersionLatest",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemVersionInfo"
            }
          }
        }
      }
    },
    "/v1alpha1/teams": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of teams",
        "operationId": "v1alpha1TeamsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of teams",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Teams"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Creates a team with the specified users and roles",
        "operationId": "v1alpha1TeamsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Team"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/teams/summary": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of team summary",
        "operationId": "v1alpha1TeamsSummary",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.TeamsSummary"
            }
          }
        }
      }
    },
    "/v1alpha1/teams/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the sepcified team",
        "operationId": "v1alpha1TeamsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Team"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the sepcified team",
        "operationId": "v1alpha1TeamsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Team"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified team",
        "operationId": "v1alpha1TeamsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patches the specified team",
        "operationId": "v1alpha1TeamsUidPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.TeamPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/teams/{uid}/projects": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified team's project and roles data",
        "operationId": "v1alpha1TeamsProjectRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1ProjectRolesEntity"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the projects and roles for the specified team",
        "operationId": "v1alpha1TeamsProjectRolesPut",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1ProjectRolesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/tenants": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Retrieves a list of tenants",
        "operationId": "v1alpha1TenantsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of tenants",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Tenants"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Creates a tenant",
        "operationId": "v1alpha1TenantsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.TenantEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/tenants/internal/msgbroker/accounts/reinit": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Reintialize the tenants message broker accounts",
        "operationId": "V1Alpha1TenantsInternalMsgBrokerAccountsReInit",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.TenantsAccountsNas"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "boolean",
          "name": "ignoreErrors",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/tenants/internal/{tenantUid}/cleanUpStatus": {
      "put": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Update tenant status",
        "operationId": "v1alpha1UpdateTenantStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateTenantStatus"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/tenants/validate": {
      "post": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Validate tenant",
        "operationId": "v1alpha1TenantsValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.TenantBasicEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/tenants/{tenantUid}": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Returns the specified tenant",
        "operationId": "v1alpha1TenantsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Tenant"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Deletes the specified tenant",
        "operationId": "v1alpha1TenantsDelete",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "patch": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Patches the specified tenant",
        "operationId": "v1alpha1TenantsPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.TenantPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/tenants/{tenantUid}/cleanUp": {
      "delete": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Clean up tenant resources",
        "operationId": "v1alpha1TenantsCleanUp",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/tenants/{tenantUid}/invoices": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Retrieves a list of invoices",
        "operationId": "v1alpha1InvoicesList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Invoices"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/tenants/{tenantUid}/invoices/{invoiceUid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified invoice",
        "operationId": "v1alpha1InvoicesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Invoice"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "invoiceUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/tenants/{tenantUid}/isCleanedUp": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Get cleaned up tenant resources",
        "operationId": "v1alpha1TenantsIsCleanedUp",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.CleanUpResource"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/tenants/{tenantUid}/password/policy": {
      "get": {
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "retrieves the password policy for tenant",
        "operationId": "V1Alpha1TenantUidPasswordPolicyGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.TenantPasswordPolicyEntity"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "creates or updates a password policy for tenant",
        "operationId": "V1Alpha1TenantUidPasswordPolicyUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.TenantPasswordPolicyEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/tenants/{tenantUid}/plan": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Returns the current tenant's plan",
        "operationId": "v1alpha1TenantsUidPlanGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1Plan"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/tenants/{tenantUid}/plans/usage/monthly": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Returns the tenant's monthly planUsage grouped by projects",
        "operationId": "v1Alpha1PlansUsageMonthlyGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1PlanMonthlyUsages"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "date",
          "name": "endDate",
          "in": "query"
        },
        {
          "type": "string",
          "format": "date",
          "name": "startDate",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1alpha1/tenants/{tenantUid}/saml/metadata": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified service provider metadata and Saml Spec for tenant",
        "operationId": "V1Alpha1TenantUidSamlSpec",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.TenantSamlSpec"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1alpha1"
        ],
        "summary": "Associates the specified federation metadata for the tenant",
        "operationId": "V1Alpha1TenantUidFmd",
        "parameters": [
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "federationMetaDataFile",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "The federationMetadata to upload.",
            "name": "federationMetaData",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "The isSsoEnabled flag.",
            "name": "isSsoEnabled",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "The identityProvider name.",
            "name": "identityProvider",
            "in": "formData",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The default team for the sso user.",
            "name": "defaultTeams",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/tenants/{tenantUid}/usage/cpuCoreHours": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Returns the tenant's cpu corehours usages grouped by projects",
        "operationId": "v1Alpha1UsageCpuCoreHours",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1PlanCpuCoreHoursUsages"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "name": "endTime",
          "in": "query"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "name": "startTime",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/tenants/{tenantUid}/user": {
      "get": {
        "tags": [
          "v1alpha1",
          "system"
        ],
        "summary": "Returns the user object of the specified tenant",
        "operationId": "v1alpha1TenantsUserGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1User"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1",
          "private",
          "system"
        ],
        "summary": "Updates the user object of the tenant",
        "operationId": "v1alpha1TenantsUserUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1User"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1",
          "private",
          "system"
        ],
        "summary": "Creates an user using sysadmin privileges on behalf of the tenant",
        "operationId": "v1alpha1TenantsUserCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1UserEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/timeseries/internal/subscribe": {
      "put": {
        "description": "Subscribe timeseries with the message broker",
        "tags": [
          "v1alpha1",
          "private"
        ],
        "summary": "Subscribe timeseries with the message broker",
        "operationId": "v1alpha1TimeseriesSubscriberUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1MsgSubscriber"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1alpha1/users": {
      "get": {
        "description": "Lists users the given user context",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Lists users",
        "operationId": "v1alpha1UsersList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The fields are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Users"
            }
          }
        }
      },
      "post": {
        "description": "A user is created for the given user context",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create User",
        "operationId": "v1alpha1UsersCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/users/assets/certificates": {
      "get": {
        "description": "Returns a list of users assets certificates",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified Users assets certificates",
        "operationId": "v1alpha1UsersAssetsCertificateGet",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          },
          {
            "type": "string",
            "name": "componentType",
            "in": "query"
          },
          {
            "type": "string",
            "name": "componentUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserAssetsCertificate"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1alpha1"
        ],
        "summary": "Stores the specified Users assets certificate",
        "operationId": "v1alpha1UserAssetsCertificateCreate",
        "parameters": [
          {
            "type": "file",
            "name": "crtFile",
            "in": "formData"
          },
          {
            "type": "file",
            "name": "keyFile",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "componentType",
            "in": "query"
          },
          {
            "type": "string",
            "name": "componentUid",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/users/assets/certificates/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified Users certificate key",
        "operationId": "v1alpha1UsersAssetCertificateGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserAssetCertificate"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified Users certificate",
        "operationId": "v1alpha1UsersAssetCertificateUpdate",
        "parameters": [
          {
            "type": "file",
            "name": "crtFile",
            "in": "formData"
          },
          {
            "type": "file",
            "name": "keyFile",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "componentType",
            "in": "query"
          },
          {
            "type": "string",
            "name": "componentUid",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified Users certificate",
        "operationId": "v1alpha1UsersAssetCertificateDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/users/assets/sshkeys": {
      "get": {
        "description": "Returns a list of users assets ssh keys",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified Users assets ssh keys",
        "operationId": "v1alpha1UsersAssetsSshGet",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserAssetsSsh"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Stores the specified Users assets ssh",
        "operationId": "v1alpha1UserAssetsSshCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserAssetSshEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/users/assets/sshkeys/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified Users ssh key",
        "operationId": "v1alpha1UsersAssetSshGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserAssetSsh"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the specified Users ssh key",
        "operationId": "v1alpha1UsersAssetSshUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserAssetSsh"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified Users ssh key",
        "operationId": "v1alpha1UsersAssetSshDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/users/me": {
      "get": {
        "description": "Returns a User with permissions with scopes",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified User ACL information",
        "operationId": "v1alpha1UsersMeGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserMe"
            }
          }
        }
      }
    },
    "/v1alpha1/users/password/change": {
      "patch": {
        "description": "User password change request via current password and emailId",
        "tags": [
          "v1alpha1"
        ],
        "summary": "User password change request using the user emailId",
        "operationId": "V1Alpha1UsersPasswordChange",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "newPassword",
                "emailId",
                "currentPassword"
              ],
              "properties": {
                "currentPassword": {
                  "type": "string"
                },
                "emailId": {
                  "type": "string"
                },
                "newPassword": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/users/password/reset": {
      "patch": {
        "description": "User password request will be sent to the supplied emailId",
        "tags": [
          "v1alpha1"
        ],
        "summary": "User password reset request using the email id",
        "operationId": "v1alpha1UsersEmailPasswordReset",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "emailId"
              ],
              "properties": {
                "emailId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/users/summary": {
      "get": {
        "description": "Returns a list of user summaries",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified User Summary list",
        "operationId": "v1alpha1UsersSummary",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 50,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UsersSummary"
            }
          }
        }
      }
    },
    "/v1alpha1/users/{uid}": {
      "get": {
        "description": "Returns a User for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified User",
        "operationId": "v1alpha1UsersUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.User"
            }
          }
        }
      },
      "put": {
        "description": "A user is created for the given user context",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update User",
        "operationId": "v1alpha1UsersUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Deletes the specified User for given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the specified User",
        "operationId": "v1alpha1UsersUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "description": "User is patched for the specified information",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patches the specified User",
        "operationId": "v1alpha1UsersUidPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/users/{uid}/activationlink": {
      "get": {
        "description": "API to get the user  activation link to reset the password",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified User activation link to reset the password",
        "operationId": "V1Alpha1UsersUidActivationLink",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserActivateLink"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/users/{uid}/contract/accept": {
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "User to accept the contract agreement",
        "operationId": "v1alpha1UsersUidContractAccept",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/users/{uid}/internal/token": {
      "get": {
        "description": "Internal API for automation to get the user password token to reset the password (required sysadmin jwt token)",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified User password token to reset the password restricted to sysadmin",
        "operationId": "v1alpha1UsersPasswordToken",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserActivateInfo"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/users/{uid}/password/change": {
      "patch": {
        "description": "User password change request via current password",
        "tags": [
          "v1alpha1"
        ],
        "summary": "User password change request using the user uid",
        "operationId": "v1alpha1UsersUidPasswordChange",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "newPassword"
              ],
              "properties": {
                "currentPassword": {
                  "type": "string"
                },
                "newPassword": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/users/{uid}/password/reset": {
      "patch": {
        "description": "User password reset request, will send the password reset option through the emailId",
        "tags": [
          "v1alpha1"
        ],
        "summary": "User password reset request using the user uid",
        "operationId": "v1alpha1UsersUidPasswordReset",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/users/{uid}/projects": {
      "get": {
        "description": "Returns a User with projects and roles",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified User Projects and Roles information",
        "operationId": "v1alpha1UsersProjectRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ProjectRolesEntity"
            }
          }
        }
      },
      "put": {
        "description": "User is updated with projects and roles",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the projects and roles for user",
        "operationId": "v1alpha1UsersProjectRolesPut",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.ProjectRolesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/users/{uid}/roles": {
      "get": {
        "description": "Returns roles clubbed from team",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the specified individual and team roles for a user",
        "operationId": "v1alpha1UsersUidRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserRolesEntity"
            }
          }
        }
      },
      "put": {
        "description": "User is updated with roles",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the roles for user",
        "operationId": "v1alpha1UsersUidRolesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserRoleUIDs"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "v1.HttpPatch": {
      "type": "object",
      "required": [
        "op",
        "path"
      ],
      "properties": {
        "from": {
          "description": "A path to the pointer from which reference will be taken",
          "type": "string"
        },
        "op": {
          "description": "The operation to be performed",
          "type": "string",
          "enum": [
            "add",
            "remove",
            "replace",
            "move",
            "copy"
          ]
        },
        "path": {
          "description": "A path to the pointer on which operation will be done",
          "type": "string"
        },
        "value": {
          "description": "The value to be used within the operations.",
          "type": "object"
        }
      }
    },
    "v1.ListMetaData": {
      "description": "ListMeta describes metadata for the resource listing",
      "type": "object",
      "properties": {
        "continue": {
          "description": "Next token for the pagination. Next token is equal to empty string indicates end of result set.",
          "type": "string"
        },
        "count": {
          "description": "Total count of the resources which might change during pagination based on the resources addition or deletion",
          "type": "integer"
        }
      }
    },
    "v1.ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/v1.Time"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/v1.Time"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1.ObjectMetaInputEntity": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      }
    },
    "v1.ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      }
    },
    "v1.RelatedObject": {
      "description": "The object for which the event is related",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "spectrocluster",
            "machine",
            "cloudconfig",
            "clusterprofile",
            "pack"
          ]
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1.ResourceReference": {
      "type": "object",
      "required": [
        "uid"
      ],
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1.Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "type": "string",
      "format": "date-time"
    },
    "v1DeleteMeta": {
      "description": "Properties to send back after deletion operation",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1DeletedMsg": {
      "description": "Deleted response with message",
      "properties": {
        "msg": {
          "type": "string"
        }
      }
    },
    "v1ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "creationTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": "string",
          "format": "date-time"
        },
        "deletionTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": "string",
          "format": "date-time"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      }
    },
    "v1Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "type": "string",
      "format": "date-time"
    },
    "v1Uid": {
      "type": "object",
      "required": [
        "uid"
      ],
      "properties": {
        "uid": {
          "type": "string"
        }
      }
    },
    "v1Uids": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1Uid"
      }
    },
    "v1Updated": {
      "description": "The resource was updated successfully"
    },
    "v1UpdatedMsg": {
      "description": "Update response with message",
      "properties": {
        "msg": {
          "type": "string"
        }
      }
    },
    "v1alpha1.APIEndpoint": {
      "description": "APIEndpoint represents a reachable Kubernetes API endpoint.",
      "type": "object",
      "required": [
        "host",
        "port"
      ],
      "properties": {
        "host": {
          "description": "The hostname on which the API server is serving.",
          "type": "string"
        },
        "port": {
          "description": "The port on which the API server is serving.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.ActiveTenantResources": {
      "description": "Active resources of tenant",
      "type": "object",
      "properties": {
        "activeResources": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1.Alert": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.Channel"
          }
        },
        "component": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AsyncOperationIdEntity": {
      "description": "Async operation id",
      "type": "object",
      "properties": {
        "operationId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AsyncResult": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object"
        },
        "error": {
          "type": "string"
        },
        "isSuccess": {
          "type": "boolean"
        }
      }
    },
    "v1alpha1.AsyncStatus": {
      "type": "object",
      "properties": {
        "endTime": {
          "$ref": "#/definitions/v1.Time"
        },
        "result": {
          "type": "object",
          "$ref": "#/definitions/v1alpha1.AsyncResult"
        },
        "stage": {
          "type": "string"
        },
        "startTime": {
          "$ref": "#/definitions/v1.Time"
        }
      }
    },
    "v1alpha1.Audit": {
      "description": "Aduit entity",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.AuditSpec"
        }
      }
    },
    "v1alpha1.AuditActor": {
      "description": "Audit actor spec",
      "properties": {
        "actorType": {
          "type": "string",
          "enum": [
            "user",
            "system",
            "service"
          ]
        },
        "project": {
          "$ref": "#/definitions/v1alpha1.ProjectMeta"
        },
        "serviceName": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/v1alpha1.UserMeta"
        }
      }
    },
    "v1alpha1.AuditMsgUpdate": {
      "description": "Aduit user msg update entity",
      "type": "object",
      "properties": {
        "userMsg": {
          "type": "string",
          "maxLength": 255,
          "minLength": 3
        }
      }
    },
    "v1alpha1.AuditSpec": {
      "description": "Audit specifications",
      "properties": {
        "actionMsg": {
          "type": "string"
        },
        "actionType": {
          "type": "string",
          "enum": [
            "create",
            "update",
            "delete",
            "publish",
            "deploy"
          ]
        },
        "actor": {
          "$ref": "#/definitions/v1alpha1.AuditActor"
        },
        "contentMsg": {
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/v1.ResourceReference"
        },
        "userMsg": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AuditSysMsg": {
      "description": "Aduit system message",
      "type": "object",
      "properties": {
        "actionMsg": {
          "type": "string"
        },
        "contentMsg": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Audits": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Audit"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.AuthLogin": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "v1alpha1.AwsAMI": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsAccount": {
      "description": "Aws cloud account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.AwsCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.CloudAccountStatus"
        }
      }
    },
    "v1alpha1.AwsAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.AwsAvailabilityZone": {
      "description": "Aws availability zone",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zoneId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsAvailabilityZones": {
      "type": "object",
      "required": [
        "zones"
      ],
      "properties": {
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsAvailabilityZone"
          }
        }
      }
    },
    "v1alpha1.AwsCloudAccount": {
      "type": "object",
      "required": [
        "accessKey",
        "secretKey"
      ],
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsCloudConfig": {
      "description": "AwsCloudConfig is the Schema for the awscloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.AwsCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.AwsCloudConfigStatus"
        }
      }
    },
    "v1alpha1.AwsCloudConfigSpec": {
      "description": "AwsCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains AwsCloudAccount",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1alpha1.AwsClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsMachinePoolConfig"
          }
        }
      }
    },
    "v1alpha1.AwsCloudConfigStatus": {
      "description": "AwsCloudConfigStatus defines the observed state of AwsCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "type": "object",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "images": {
          "description": "Images array items should be 1-to-1 mapping to Spec.MachinePoolConfig",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsAMI"
          }
        },
        "isAddonLayer": {
          "description": "addon layes present in spc",
          "type": "boolean"
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      }
    },
    "v1alpha1.AwsClusterConfig": {
      "description": "cluster level configuration for aws cloud, same for all machinepools",
      "type": "object",
      "required": [
        "region"
      ],
      "properties": {
        "controlPlaneLoadBalancer": {
          "description": "ControlPlaneLoadBalancer specifies how API server elb will be configured, this field is optional, not provided, \"\", default =\u003e \"Internet-facing\" \"Internet-facing\" =\u003e \"Internet-facing\" \"internal\" =\u003e \"internal\" For spectro saas setup we require to talk to the apiserver from our cluster so ControlPlaneLoadBalancer should be \"\", not provided or \"Internet-facing\"",
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "vpcId": {
          "description": "VPC Id to deploy cluster into should have one public and one private subnet for the the cluster creation, this field is optional, If VPC Id is not provided a fully managed VPC will be created",
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsFindImageRequest": {
      "description": "Aws image name and credentials",
      "type": "object",
      "properties": {
        "amiName": {
          "type": "string"
        },
        "awsAccount": {
          "$ref": "#/definitions/v1alpha1.AwsCloudAccount"
        }
      }
    },
    "v1alpha1.AwsImage": {
      "description": "Aws image name and ami",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsInstanceTypes": {
      "type": "object",
      "properties": {
        "instanceTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.InstanceType"
          }
        }
      }
    },
    "v1alpha1.AwsKeyPairs": {
      "type": "object",
      "properties": {
        "keyNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.AwsMachine": {
      "description": "AWS cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.AwsMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.CloudMachineStatus"
        }
      }
    },
    "v1alpha1.AwsMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64",
          "maximum": 2000,
          "minimum": 1
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsSubnetEntity"
          }
        }
      }
    },
    "v1alpha1.AwsMachinePoolConfig": {
      "type": "object",
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplate"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "subnetIds": {
          "description": "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"us-west-2d\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first private subnet from the AZ will be picked up for deployment",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1alpha1.UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.AwsMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1alpha1.AwsMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1alpha1.MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1alpha1.MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1alpha1.AwsMachineSpec": {
      "description": "AWS cloud VM definition spec",
      "type": "object",
      "required": [
        "instanceType",
        "vpcId",
        "ami"
      ],
      "properties": {
        "ami": {
          "type": "string"
        },
        "az": {
          "type": "string"
        },
        "dnsName": {
          "type": "string"
        },
        "iamProfile": {
          "type": "string"
        },
        "instanceType": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsNic"
          }
        },
        "phase": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "subnetId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vpcId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsMachines": {
      "description": "AWS machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.AwsNic": {
      "description": "AWS network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsRegion": {
      "description": "Aws region",
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "optInStatus": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsRegions": {
      "type": "object",
      "required": [
        "regions"
      ],
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsRegion"
          }
        }
      }
    },
    "v1alpha1.AwsSubnet": {
      "description": "Aws subnet",
      "type": "object",
      "properties": {
        "az": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "subnetId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsSubnetEntity": {
      "properties": {
        "az": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsVpc": {
      "description": "Aws Vpc",
      "type": "object",
      "required": [
        "vpcId"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsSubnet"
          }
        },
        "vpcId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsVpcs": {
      "type": "object",
      "required": [
        "vpcs"
      ],
      "properties": {
        "vpcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsVpc"
          }
        }
      }
    },
    "v1alpha1.AzureAccount": {
      "description": "Azure account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.AzureAccountSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.CloudAccountStatus"
        }
      }
    },
    "v1alpha1.AzureAccountSpec": {
      "type": "object",
      "required": [
        "tenantId",
        "clientId",
        "clientSecret"
      ],
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string",
          "format": "password"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.AzureAvailabilityZone": {
      "description": "Azure availability zone",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureCloudConfig": {
      "description": "AzureCloudConfig is the Schema for the azurecloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.AzureCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.AzureCloudConfigStatus"
        }
      }
    },
    "v1alpha1.AzureCloudConfigSpec": {
      "description": "AwsCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains AzureCloudAccount",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1alpha1.AzureClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureMachinePoolConfig"
          }
        }
      }
    },
    "v1alpha1.AzureCloudConfigStatus": {
      "description": "AzureCloudConfigStatus defines the observed state of AzureCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "type": "object",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "conditions": {
          "description": "spectroAnsibleProvisioner: should be added only once, subsequent recocile will use the same provisioner SpectroAnsiblePacker bool `json:\"spectroAnsiblePacker,omitempty\"`",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "images": {
          "description": "Images array items should be 1-to-1 mapping to Spec.MachinePoolConfig",
          "$ref": "#/definitions/v1alpha1.AzureImage"
        },
        "isAddonLayer": {
          "description": "addon layes present in spc",
          "type": "boolean"
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        },
        "vhdImage": {
          "$ref": "#/definitions/v1alpha1.AzureVHDImage"
        }
      }
    },
    "v1alpha1.AzureClusterConfig": {
      "description": "cluster level configuration for azure cloud, same for all machinepools",
      "type": "object",
      "required": [
        "subscriptionId",
        "location",
        "sshKey"
      ],
      "properties": {
        "controlPlaneSubnet": {
          "description": "Subnet for Kubernetes control-plane node",
          "$ref": "#/definitions/v1alpha1.AzureSubnet"
        },
        "location": {
          "description": "Location is the Azure datacenter location",
          "type": "string"
        },
        "resourceGroup": {
          "type": "string"
        },
        "sshKey": {
          "type": "string"
        },
        "subscriptionId": {
          "description": "Subscription ID is unique identifier for the subscription used to access Azure services",
          "type": "string"
        },
        "vnetName": {
          "description": "VNETName is the virtual network in which the cluster is to be provisioned.",
          "type": "string"
        },
        "workerSubnet": {
          "description": "Subnet for Kubernetes worker node",
          "$ref": "#/definitions/v1alpha1.AzureSubnet"
        }
      }
    },
    "v1alpha1.AzureImage": {
      "description": "Refers to Azure Shared Gallery image",
      "type": "object",
      "properties": {
        "gallery": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resourceGroup": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "subscriptionID": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureInstanceTypes": {
      "type": "object",
      "properties": {
        "instanceTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.InstanceType"
          }
        }
      }
    },
    "v1alpha1.AzureMachine": {
      "description": "Azure cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.AzureMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.CloudMachineStatus"
        }
      }
    },
    "v1alpha1.AzureMachinePoolCloudConfigEntity": {
      "type": "object",
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "description": "Instance type stands for VMSize in Azure",
          "type": "string"
        },
        "osDisk": {
          "$ref": "#/definitions/v1alpha1.AzureOSDisk"
        }
      }
    },
    "v1alpha1.AzureMachinePoolConfig": {
      "type": "object",
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplate"
        },
        "instanceType": {
          "description": "Instance type stands for VMSize in Azure",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "osDisk": {
          "$ref": "#/definitions/v1alpha1.AzureOSDisk"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1alpha1.UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.AzureMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1alpha1.AzureMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1alpha1.MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1alpha1.MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1alpha1.AzureMachineSpec": {
      "description": "Azure cloud VM definition spec",
      "type": "object",
      "required": [
        "instanceType",
        "location",
        "osDisk"
      ],
      "properties": {
        "additionalTags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "allocatePublicIP": {
          "type": "boolean"
        },
        "availabilityZone": {
          "$ref": "#/definitions/v1alpha1.AzureMachineSpecAvailabilityZone"
        },
        "image": {
          "$ref": "#/definitions/v1alpha1.AzureMachineSpecImage"
        },
        "instanceType": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureNic"
          }
        },
        "osDisk": {
          "$ref": "#/definitions/v1alpha1.AzureOSDisk"
        },
        "sshPublicKey": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureMachineSpecAvailabilityZone": {
      "description": "Azure Machine Spec Availability zone",
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureMachineSpecImage": {
      "description": "Azure Machine Spec Image",
      "type": "object",
      "properties": {
        "gallery": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "offer": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "resourceGroup": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureMachines": {
      "description": "Azure machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.AzureNic": {
      "description": "AWS network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureOSDisk": {
      "type": "object",
      "properties": {
        "diskSizeGB": {
          "type": "integer",
          "format": "int32"
        },
        "managedDisk": {
          "$ref": "#/definitions/v1alpha1.ManagedDisk"
        },
        "osType": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureRegion": {
      "description": "Azure region",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureAvailabilityZone"
          }
        }
      }
    },
    "v1alpha1.AzureRegions": {
      "type": "object",
      "required": [
        "regions"
      ],
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureRegion"
          }
        }
      }
    },
    "v1alpha1.AzureResourceGroupList": {
      "type": "object",
      "properties": {
        "resourceGroupList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ResourceGroup"
          }
        }
      }
    },
    "v1alpha1.AzureStorageAccountEntity": {
      "description": "Azure Storage Account Entity",
      "type": "object",
      "properties": {
        "storageAccountTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.StorageAccountEntity"
          }
        }
      }
    },
    "v1alpha1.AzureSubnet": {
      "type": "object",
      "properties": {
        "cidrBlock": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "securityGroupName": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureSubscriptionList": {
      "type": "object",
      "properties": {
        "subscriptionList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.Subscription"
          }
        }
      }
    },
    "v1alpha1.AzureVHDImage": {
      "description": "Mold always create VHD image for custom image, and this can be use as golden images",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureVhdUrlEntity": {
      "description": "Azure vhd url entity",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureVirtualNetworkList": {
      "type": "object",
      "properties": {
        "virtualNetworkList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.VirtualNetwork"
          }
        }
      }
    },
    "v1alpha1.AzureZoneEntity": {
      "type": "object",
      "properties": {
        "zoneList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ZoneEntity"
          }
        }
      }
    },
    "v1alpha1.BareMetalMachine": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.BareMetalMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.BareMetalMachineStatus"
        }
      }
    },
    "v1alpha1.BareMetalMachineSpec": {
      "description": "BareMetalMachineSpec defines the desired state of BareMetalMachine",
      "type": "object",
      "properties": {
        "cpu": {
          "$ref": "#/definitions/v1alpha1.CPU"
        },
        "disks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.Disk"
          }
        },
        "gpu": {
          "$ref": "#/definitions/v1alpha1.GPU"
        },
        "memory": {
          "$ref": "#/definitions/v1alpha1.Memory"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.Nic"
          }
        },
        "os": {
          "$ref": "#/definitions/v1alpha1.OS"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1alpha1.BareMetalMachineStatus": {
      "description": "BareMetalMachineStatus defines the observed state of BareMetalMachine",
      "type": "object"
    },
    "v1alpha1.BareMetalMachines": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.BareMetalMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.BulkEvents": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1alpha1.Event"
      }
    },
    "v1alpha1.CPU": {
      "type": "object",
      "properties": {
        "cores": {
          "description": "number of cpu cores",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.Card": {
      "description": "Card details",
      "properties": {
        "brand": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "expMonth": {
          "type": "number",
          "format": "uint64"
        },
        "expYear": {
          "type": "number",
          "format": "uint64"
        },
        "fingerPrint": {
          "type": "string"
        },
        "funding": {
          "type": "string"
        },
        "last4": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Certificate": {
      "description": "Certificate details",
      "type": "object",
      "properties": {
        "expiry": {
          "$ref": "#/definitions/v1.Time"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.CertificateAuthority": {
      "description": "Certificate Authority",
      "type": "object",
      "properties": {
        "certificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.Certificate"
          }
        },
        "expiry": {
          "$ref": "#/definitions/v1.Time"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Channel": {
      "type": "object",
      "properties": {
        "alertAllUsers": {
          "type": "boolean",
          "x-omitempty": false
        },
        "identifiers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "email",
            "app"
          ]
        }
      }
    },
    "v1alpha1.CheckoutSession": {
      "description": "Checkout session id",
      "properties": {
        "cancelUrl": {
          "type": "string"
        },
        "invoiceUid": {
          "type": "string"
        },
        "successUrl": {
          "type": "string"
        }
      }
    },
    "v1alpha1.CleanUpResource": {
      "description": "Resources of tenant",
      "type": "object",
      "properties": {
        "activeResources": {
          "$ref": "#/definitions/v1alpha1.ActiveTenantResources"
        },
        "tenantStatus": {
          "$ref": "#/definitions/v1alpha1.TenantCleanUpStatus"
        }
      }
    },
    "v1alpha1.CloudAccountMeta": {
      "description": "Cloud account meta information",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.CloudAccountStatus": {
      "description": "Status of the account",
      "type": "object",
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.CloudAccountSummary": {
      "description": "Cloud account summary",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "specSummary": {
          "description": "Cloud account spec summary",
          "type": "object",
          "properties": {
            "accountId": {
              "type": "string"
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.CloudAccountStatus"
        }
      }
    },
    "v1alpha1.CloudAccountsPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1.HttpPatch"
      }
    },
    "v1alpha1.CloudAccountsSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.CloudAccountSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.CloudConfigMeta": {
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1alpha1.CloudType"
        },
        "machinePools": {
          "description": "Machine pool meta information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.MachinePoolMeta"
          }
        }
      }
    },
    "v1alpha1.CloudMachineStatus": {
      "description": "cloud machine status",
      "type": "object",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1alpha1.MachineHealth"
        },
        "instanceState": {
          "type": "string",
          "enum": [
            "Pending",
            "Provisioning",
            "Provisioned",
            "Running",
            "Deleting",
            "Deleted",
            "Failed",
            "Unknown"
          ]
        }
      }
    },
    "v1alpha1.CloudType": {
      "type": "string",
      "default": "all",
      "enum": [
        "all",
        "aws",
        "azure",
        "gcp",
        "vsphere",
        "baremetal"
      ]
    },
    "v1alpha1.ClusterCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/v1.Time"
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/v1.Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ClusterPreference": {
      "description": "cluster preference",
      "properties": {
        "archivalInterval": {
          "description": "Time unit is hour",
          "type": "integer"
        },
        "deletePeriod": {
          "description": "Time unit is hour",
          "type": "integer"
        },
        "monitorInterval": {
          "description": "Time unit is minutes",
          "type": "integer"
        }
      }
    },
    "v1alpha1.ClusterProfile": {
      "description": "ClusterProfile is the Schema for the clusterprofiles API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.ClusterProfileSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.ClusterProfileStatus"
        }
      }
    },
    "v1alpha1.ClusterProfileEntity": {
      "description": "Cluster profile input for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "template": {
              "$ref": "#/definitions/v1alpha1.ClusterProfileTemplateDraft"
            }
          }
        }
      }
    },
    "v1alpha1.ClusterProfilePackValues": {
      "$ref": "#/definitions/v1alpha1.PackValues"
    },
    "v1alpha1.ClusterProfilePackValuesList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.PackValues"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.ClusterProfilePacksEntities": {
      "description": "List of cluster profile packs entities",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterProfilePacksEntity"
          }
        }
      }
    },
    "v1alpha1.ClusterProfilePacksEntity": {
      "description": "Cluster profile's packs information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.PackSummarySpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.PackSummaryStatus"
        }
      }
    },
    "v1alpha1.ClusterProfileSpec": {
      "description": "ClusterProfileTemplate can be in draft mode, or published mode User only see the latest published template, and (or) the draft template User can apply either the draft version or the latest published version to a cluster when user create a draft version, just copy the Published template, increment the version, and keep changing the draft template without increment the draft version when user publish a draft, the version is fixed, and won't be able to make any modification on published template For each clusterprofile that has a published version, there will be a ClusterProfileArchive automatically created when user publish a draft, the published version will also be copied over to the corresponding ClusterProfileArchive it is just in case in the future for whatever reason we may want to expose earlier versions",
      "type": "object",
      "properties": {
        "draft": {
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplate"
        },
        "published": {
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplate"
        }
      }
    },
    "v1alpha1.ClusterProfileStatus": {
      "description": "ClusterProfileStatus defines the observed state of ClusterProfile",
      "type": "object",
      "properties": {
        "isPublished": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.ClusterProfileStatusSummary": {
      "description": "ClusterProfileStatusSummary defines the observed state of ClusterProfile",
      "type": "object",
      "properties": {
        "isPublished": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.ClusterProfileSummary": {
      "description": "Cluster profile summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "specSummary": {
          "description": "Cluster profile spec summary",
          "type": "object",
          "properties": {
            "draft": {
              "$ref": "#/definitions/v1alpha1.ClusterProfileTemplateSummary"
            },
            "published": {
              "$ref": "#/definitions/v1alpha1.ClusterProfileTemplateSummary"
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.ClusterProfileStatusSummary"
        }
      }
    },
    "v1alpha1.ClusterProfileTemplate": {
      "description": "ClusterProfileTemplate contains details of a clusterprofile definition",
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string",
          "enum": [
            "aws",
            "gcp",
            "azure",
            "vsphere",
            "openstack",
            "baremetal",
            "all"
          ]
        },
        "packServerRefs": {
          "description": "PackServerRefs is only used on Hubble side it is reference to pack registry servers which PackRef belongs to in hubble, pack server is a top level object, so use a reference to point to it packs within a clusterprofile can come from different pack servers, so this is an array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ObjectReference"
          }
        },
        "packServerSecret": {
          "description": "This secret is used only on Palette side use case is similar  to k8s image pull secret this single secret internally should contains all the pack servers in PackServerRefs if empty, means no credential is needed to access the pack server For spectro saas, Ally will set this field before pass to palette",
          "type": "string"
        },
        "packs": {
          "description": "Packs definitions here are final definitions. If ClonedFrom and ParamsOverwrite is present, then Packs are the final merge result of ClonedFrom and ParamsOverwrite So orchestration engine will just take the Packs and do the work, no need to worry about parameters merge",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PackRef"
          }
        },
        "type": {
          "type": "string"
        },
        "version": {
          "description": "version start from 0, matching the index of ClusterProfileSpec.Versions[] will be used by clusterSpec to identify which version is applied to the cluster",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.ClusterProfileTemplateDraft": {
      "description": "Cluster profile template",
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1alpha1.CloudType"
        },
        "packs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.PackEntity"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "cluster",
            "infra"
          ]
        }
      }
    },
    "v1alpha1.ClusterProfileTemplateMeta": {
      "description": "Cluster profile template meta information",
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1alpha1.CloudType"
        },
        "name": {
          "type": "string"
        },
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PackRef"
          }
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.ClusterProfileTemplateSummary": {
      "description": "Cluster profile template summary",
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PackRefSummary"
          }
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.ClusterProfileValidatorResponse": {
      "description": "Cluster profile validator response",
      "type": "object",
      "properties": {
        "packs": {
          "$ref": "#/definitions/v1alpha1.ConstraintValidatorResponse"
        }
      }
    },
    "v1alpha1.ClusterProfiles": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterProfile"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.ClusterProfilesSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterProfileSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.ClusterUsageSummary": {
      "description": "Cluster usage summary",
      "type": "object",
      "properties": {
        "cpuCores": {
          "type": "number",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ComputeMetrics": {
      "description": "Compute metrics",
      "type": "object",
      "properties": {
        "lastUpdatedTime": {
          "$ref": "#/definitions/v1.Time"
        },
        "limit": {
          "type": "number",
          "x-omitempty": false
        },
        "request": {
          "type": "number",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "x-omitempty": false
        },
        "unit": {
          "type": "string"
        },
        "usage": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.ConstraintError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ConstraintValidatorResponse": {
      "description": "Constraint validator response",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.ConstraintValidatorResult"
          }
        }
      }
    },
    "v1alpha1.ConstraintValidatorResult": {
      "description": "Constraint validator result",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.ConstraintError"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.CrypticResponse": {
      "description": "Cryptic Response",
      "type": "object",
      "properties": {
        "encryptedText": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "plainText": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Disk": {
      "type": "object",
      "properties": {
        "controller": {
          "type": "string"
        },
        "partitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.Partition"
          }
        },
        "size": {
          "description": "Size in GB",
          "type": "integer",
          "format": "int32"
        },
        "vendor": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ErrLog": {
      "type": "object",
      "properties": {
        "err": {
          "$ref": "#/definitions/v1alpha1.ErrStack"
        },
        "ref": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ErrLogs": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1alpha1.ErrLog"
      }
    },
    "v1alpha1.ErrStack": {
      "type": "object",
      "properties": {
        "causes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ErrStack"
          }
        },
        "code": {
          "type": "string"
        },
        "data": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Event": {
      "description": "Event information organized by tags",
      "type": "object",
      "properties": {
        "involvedObject": {
          "type": "object",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "message": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "reason": {
          "type": "string"
        },
        "relatedObject": {
          "type": "object",
          "$ref": "#/definitions/v1.RelatedObject"
        },
        "severity": {
          "type": "string"
        },
        "source": {
          "type": "object",
          "$ref": "#/definitions/v1alpha1.EventSource"
        }
      }
    },
    "v1alpha1.EventSource": {
      "description": "Event source info",
      "type": "object",
      "properties": {
        "component": {
          "type": "string"
        },
        "host": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Events": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Event"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.FileUploadResponse": {
      "description": "File upload response",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GPU": {
      "type": "object",
      "properties": {
        "cores": {
          "description": "number of gpu cores",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.GcpAccount": {
      "description": "GCP account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.GcpAccountSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.CloudAccountStatus"
        }
      }
    },
    "v1alpha1.GcpAccountEntity": {
      "description": "GCP account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.GcpAccountEntitySpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.CloudAccountStatus"
        }
      }
    },
    "v1alpha1.GcpAccountEntitySpec": {
      "type": "object",
      "properties": {
        "jsonCredentials": {
          "type": "string"
        },
        "jsonCredentialsFileUid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpAccountSpec": {
      "type": "object",
      "properties": {
        "jsonCredentials": {
          "type": "string"
        },
        "jsonCredentialsFileName": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpAccountValidateSpec": {
      "description": "Gcp cloud account",
      "type": "object",
      "properties": {
        "jsonCredentials": {
          "type": "string"
        },
        "jsonCredentialsFileUid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.GcpAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.GcpCloudAccountValidateEntity": {
      "description": "Gcp cloud account",
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1alpha1.GcpAccountValidateSpec"
        }
      }
    },
    "v1alpha1.GcpCloudConfig": {
      "description": "GcpCloudConfig is the Schema for the gcpcloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.GcpCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.GcpCloudConfigStatus"
        }
      }
    },
    "v1alpha1.GcpCloudConfigSpec": {
      "description": "GcpCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains GcpCloudAccount",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1alpha1.GcpClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.GcpMachinePoolConfig"
          }
        }
      }
    },
    "v1alpha1.GcpCloudConfigStatus": {
      "description": "GcpCloudConfigStatus defines the observed state of GcpCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "type": "object",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "conditions": {
          "description": "spectroAnsibleProvisioner: should be added only once, subsequent recocile will use the same provisioner SpectroAnsiblePacker bool `json:\"spectroAnsiblePacker,omitempty\"`",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "images": {
          "description": "Images array items should be 1-to-1 mapping to Spec.MachinePoolConfig",
          "$ref": "#/definitions/v1alpha1.GcpImage"
        },
        "isAddonLayer": {
          "description": "addon layes present in spc",
          "type": "boolean"
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceImageId": {
          "description": "sourceImageId, it can be from packref's annotations or from pack.json",
          "type": "string"
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      }
    },
    "v1alpha1.GcpClusterConfig": {
      "description": "cluster level configuration for gcp cloud, same for all machinepools",
      "type": "object",
      "required": [
        "project",
        "region"
      ],
      "properties": {
        "network": {
          "description": "NetworkName if empty would create VPC Network in auto mode. If provided, custom VPC network will be used",
          "type": "string"
        },
        "project": {
          "description": "Name of the project in which cluster is to be deployed",
          "type": "string"
        },
        "region": {
          "description": "GCP region for the cluster",
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpImage": {
      "description": "Refers to Gcp image",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpImageUrlEntity": {
      "description": "Gcp image url entity",
      "type": "object",
      "properties": {
        "imageFamily": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpInstanceTypes": {
      "description": "Retrieves a list of Gcp instance types",
      "type": "object",
      "properties": {
        "instanceTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.InstanceType"
          }
        }
      }
    },
    "v1alpha1.GcpMachine": {
      "description": "GCP cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.GcpMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.CloudMachineStatus"
        }
      }
    },
    "v1alpha1.GcpMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "Size of root volume in GB. Default is 30GB",
          "type": "integer",
          "format": "int64"
        },
        "subnet": {
          "description": "Subnet specifies the subnetwork to use for given instance. If not specified, the first subnet from the cluster region and network is used",
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpMachinePoolConfig": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplate"
        },
        "instanceType": {
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean"
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "Size of root volume in GB. Default is 30GB",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "subnet": {
          "description": "Subnet specifies the subnetwork to use for given instance. In not specified, the first subnet from the cluster region and network is used",
          "type": "string"
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1alpha1.UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean"
        }
      }
    },
    "v1alpha1.GcpMachinePoolConfigEntities": {
      "description": "Update request for the GCP Spectro cluster",
      "type": "object",
      "properties": {
        "spec": {
          "type": "object",
          "required": [
            "machinePoolConfig"
          ],
          "properties": {
            "machinePoolConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1.GcpMachinePoolConfigEntity"
              }
            }
          }
        }
      }
    },
    "v1alpha1.GcpMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1alpha1.GcpMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1alpha1.MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1alpha1.MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1alpha1.GcpMachineSpec": {
      "description": "GCP cloud VM definition spec",
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "image": {
          "type": "string"
        },
        "instanceType": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.GcpNic"
          }
        },
        "project": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "rootDeviceSize": {
          "type": "integer",
          "format": "int64"
        },
        "zone": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpMachines": {
      "description": "GCP machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.GcpMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.GcpNetwork": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.GcpSubnet"
          }
        }
      }
    },
    "v1alpha1.GcpNetworks": {
      "type": "object",
      "properties": {
        "networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.GcpNetwork"
          }
        }
      }
    },
    "v1alpha1.GcpNic": {
      "description": "GCP network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpProject": {
      "description": "Gcp project",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpProjects": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.GcpProject"
          }
        }
      }
    },
    "v1alpha1.GcpRegion": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpRegions": {
      "type": "object",
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.GcpRegion"
          }
        }
      }
    },
    "v1alpha1.GcpSubnet": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpZone": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpZones": {
      "type": "object",
      "properties": {
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.GcpZone"
          }
        }
      }
    },
    "v1alpha1.GitRegistries": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.GitRegistry"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.GitRegistriesSummary": {
      "description": "Git Registries Summary",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.GitRegistrySummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.GitRegistry": {
      "description": "Git registry information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.GitRegistrySpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.RegistryStatus"
        }
      }
    },
    "v1alpha1.GitRegistrySpec": {
      "description": "Git registry credentials spec",
      "type": "object",
      "required": [
        "auth",
        "repository"
      ],
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1alpha1.RegistryAuth"
        },
        "organization": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "webhookId": {
          "type": "integer"
        }
      }
    },
    "v1alpha1.GitRegistrySummary": {
      "description": "Git Registry summary",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GitRepoFileContent": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Hash": {
      "type": "object",
      "required": [
        "hash"
      ],
      "properties": {
        "hash": {
          "type": "string"
        }
      }
    },
    "v1alpha1.HealthLocks": {
      "type": "object",
      "properties": {
        "expiredLocks": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Lock"
          }
        }
      }
    },
    "v1alpha1.HealthPing": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string"
        }
      }
    },
    "v1alpha1.HubbleInfo": {
      "type": "object",
      "properties": {
        "apiEndpoint": {
          "type": "string"
        },
        "apiPort": {
          "type": "string"
        },
        "natsEndpoint": {
          "type": "string"
        },
        "uiEndpoint": {
          "type": "string"
        },
        "uiPort": {
          "type": "string"
        }
      }
    },
    "v1alpha1.IPPool": {
      "description": "IPPool defines static IPs available. Gateway, Prefix, Nameserver, if defined, will be default values for all Pools",
      "type": "object",
      "properties": {
        "gateway": {
          "description": "Gateway is the gateway ip address",
          "type": "string"
        },
        "nameserver": {
          "description": "Nameserver provide information for dns resolvation",
          "$ref": "#/definitions/v1alpha1.Nameserver"
        },
        "pools": {
          "description": "Pools contains the list of IP addresses pools",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.Pool"
          }
        },
        "prefix": {
          "description": "Prefix is the mask of the network as integer (max 128)",
          "type": "integer",
          "format": "int32"
        },
        "uid": {
          "description": "UID is the UID of this IPPool, used by Hubble",
          "type": "string"
        }
      }
    },
    "v1alpha1.IdentityProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.IdentityProviders": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1alpha1.IdentityProvider"
      }
    },
    "v1alpha1.InstallerStatus": {
      "description": "Spectro cluster installer status",
      "type": "object",
      "properties": {
        "clusterMigration": {
          "$ref": "#/definitions/v1alpha1.SpectroClusterMigration"
        },
        "clusterState": {
          "type": "string"
        },
        "endpoint": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.InstanceType": {
      "description": "Cloud Instance type details",
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "x-go-name": "Category"
        },
        "cpu": {
          "type": "number",
          "format": "double",
          "x-go-name": "Cpu"
        },
        "gpu": {
          "type": "number",
          "format": "double",
          "x-go-name": "Gpu"
        },
        "memory": {
          "type": "number",
          "format": "double",
          "x-go-name": "Memory"
        },
        "nonSupportedZones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "price": {
          "type": "number",
          "format": "double",
          "x-go-name": "Price"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      }
    },
    "v1alpha1.Invoice": {
      "description": "Invoice",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.InvoiceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.InvoiceStatus"
        }
      }
    },
    "v1alpha1.InvoiceCredits": {
      "description": "Invoice Credits",
      "properties": {
        "creditsToBeCharged": {
          "type": "number",
          "format": "float64"
        },
        "overageCharges": {
          "type": "number",
          "format": "float64"
        },
        "paymentAmount": {
          "type": "number",
          "format": "float64"
        },
        "paymentUnit": {
          "type": "string",
          "enum": [
            "usd"
          ]
        },
        "usedCredits": {
          "type": "number",
          "format": "float64"
        }
      }
    },
    "v1alpha1.InvoicePlan": {
      "description": "Invoice plan",
      "properties": {
        "freeCredits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PlanCredit"
          }
        },
        "plantype": {
          "type": "string",
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ]
        },
        "slaCredits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PlanCredit"
          }
        }
      }
    },
    "v1alpha1.InvoiceProject": {
      "description": "Invoice Project",
      "properties": {
        "projectUid": {
          "type": "string"
        },
        "usage": {
          "type": "number",
          "format": "float64"
        }
      }
    },
    "v1alpha1.InvoiceSpec": {
      "description": "Invoice spec",
      "properties": {
        "credits": {
          "$ref": "#/definitions/v1alpha1.InvoiceCredits"
        },
        "month": {
          "$ref": "#/definitions/v1.Time"
        },
        "paymentTransactionId": {
          "type": "string"
        },
        "plan": {
          "$ref": "#/definitions/v1alpha1.InvoicePlan"
        },
        "project": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.InvoiceProject"
          }
        }
      }
    },
    "v1alpha1.InvoiceStatus": {
      "description": "Invoice Status",
      "properties": {
        "paymentDate": {
          "$ref": "#/definitions/v1.Time"
        },
        "paymentMsg": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "Paid",
            "PaymentPending",
            "PaymentInProgress",
            "PaymentFailed"
          ]
        }
      }
    },
    "v1alpha1.Invoices": {
      "description": "Array of Invoices",
      "type": "object",
      "required": [
        "invoices"
      ],
      "properties": {
        "invoices": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Invoice"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.IpPoolEntity": {
      "description": "IP Pool entity definition",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "pool": {
              "$ref": "#/definitions/v1alpha1.Pool"
            },
            "priavetGatewayUid": {
              "type": "string"
            },
            "restrictToSingleCluster": {
              "description": "if true, restricts this IP pool to be used by single cluster at any time",
              "type": "boolean",
              "x-omitempty": false
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.IpPoolStatus"
        }
      }
    },
    "v1alpha1.IpPoolInputEntity": {
      "description": "IP Pool input entity definition",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "pool"
          ],
          "properties": {
            "pool": {
              "$ref": "#/definitions/v1alpha1.Pool"
            },
            "restrictToSingleCluster": {
              "description": "if true, restricts this IP pool to be used by single cluster at any time",
              "type": "boolean"
            }
          }
        }
      }
    },
    "v1alpha1.IpPoolStatus": {
      "description": "IP Pool status",
      "type": "object",
      "properties": {
        "allottedIps": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "associatedClusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "inUse": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.IpPools": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.IpPoolEntity"
          }
        }
      }
    },
    "v1alpha1.LoadBalancerService": {
      "type": "object",
      "properties": {
        "host": {
          "description": "IP or Host from svc.Status.LoadBalancerStatus.Ingress",
          "type": "string"
        },
        "name": {
          "description": "name of the loadbalancer service",
          "type": "string"
        },
        "ports": {
          "description": "port this service exposed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ServicePort"
          }
        }
      }
    },
    "v1alpha1.Lock": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object",
          "x-omitempty": false,
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "expireAt": {
              "x-omitempty": false,
              "$ref": "#/definitions/v1.Time"
            },
            "key": {
              "type": "string",
              "x-omitempty": false
            }
          }
        }
      }
    },
    "v1alpha1.Locks": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1alpha1.Lock"
      }
    },
    "v1alpha1.Login": {
      "description": "Login input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.LoginResponse": {
      "description": "Login response specifying auth type and org name",
      "type": "object",
      "properties": {
        "appEnv": {
          "type": "string"
        },
        "authType": {
          "type": "string",
          "enum": [
            "password",
            "sso"
          ]
        },
        "orgName": {
          "type": "string"
        },
        "redirectUrl": {
          "type": "string",
          "x-omitempty": false
        },
        "totalTenants": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "v1alpha1.MachineCertificate": {
      "description": "K8 Certificates for master nodes",
      "type": "object",
      "properties": {
        "certificateAuthorities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.CertificateAuthority"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.MachineCertificates": {
      "description": "K8 Certificates for all master nodes of cluster",
      "type": "object",
      "properties": {
        "machineCertificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.MachineCertificate"
          }
        }
      }
    },
    "v1alpha1.MachineHealth": {
      "description": "Machine health state",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.MachineHealthCondition"
          }
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.MachineHealthCondition": {
      "description": "Machine health condition",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1alpha1.MachinePoolConfigEntity": {
      "description": "Machine pool configuration API entity",
      "type": "object",
      "required": [
        "name",
        "size",
        "labels"
      ],
      "properties": {
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1alpha1.UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.MachinePoolMeta": {
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1alpha1.CloudType"
        },
        "infraProfileTemplate": {
          "description": "InfraClusterProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplateMeta"
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.MachinePoolProfileConfigEntity": {
      "type": "object",
      "required": [
        "infraProfileUid"
      ],
      "properties": {
        "infraProfileUid": {
          "description": "InfraClusterProfile uid for the machine pool",
          "type": "string"
        },
        "packValues": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.PackValuesEntity"
          }
        }
      }
    },
    "v1alpha1.ManagedDisk": {
      "type": "object",
      "properties": {
        "storageAccountType": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Memory": {
      "type": "object",
      "properties": {
        "size": {
          "description": "memory size in bytes",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.MetricAggregation": {
      "description": "Aggregation values",
      "type": "object",
      "properties": {
        "avg": {
          "type": "number",
          "x-omitempty": false
        },
        "count": {
          "type": "number",
          "format": "int64",
          "x-omitempty": false
        },
        "max": {
          "type": "number",
          "x-omitempty": false
        },
        "min": {
          "type": "number",
          "x-omitempty": false
        },
        "sum": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.MetricMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.MetricPoint": {
      "description": "Metric Info",
      "type": "object",
      "properties": {
        "avg": {
          "type": "number"
        },
        "count": {
          "type": "number",
          "format": "int64"
        },
        "max": {
          "type": "number"
        },
        "min": {
          "type": "number"
        },
        "sum": {
          "type": "number"
        },
        "timestamp": {
          "type": "number",
          "format": "int64"
        },
        "value": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.MetricTimeSeries": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Metrics"
          }
        }
      }
    },
    "v1alpha1.MetricTimeSeriesList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.MetricsList"
          }
        }
      }
    },
    "v1alpha1.Metrics": {
      "type": "object",
      "properties": {
        "aggregation": {
          "$ref": "#/definitions/v1alpha1.MetricAggregation"
        },
        "kind": {
          "type": "string"
        },
        "points": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.MetricPoint"
          }
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "v1alpha1.MetricsList": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1alpha1.MetricMetadata"
        },
        "metrics": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Metrics"
          }
        }
      }
    },
    "v1alpha1.MgmtMigrationStatuses": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "finishTime": {
          "$ref": "#/definitions/v1.Time"
        },
        "folderName": {
          "type": "string"
        },
        "isCompleted": {
          "type": "boolean"
        },
        "message": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "$ref": "#/definitions/v1.Time"
        },
        "state": {
          "type": "string",
          "x-omitempty": false
        },
        "status": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.MsgBrokerConnection": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "accountUid": {
          "type": "string"
        },
        "cid": {
          "type": "integer"
        },
        "cluster": {
          "type": "object",
          "properties": {
            "addr": {
              "type": "string"
            },
            "authTimeout": {
              "type": "integer"
            },
            "clusterPort": {
              "type": "integer"
            },
            "urls": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "cpu": {
          "type": "number"
        },
        "duplicationCount": {
          "type": "integer"
        },
        "iP": {
          "type": "string"
        },
        "idle": {
          "type": "string"
        },
        "inBytes": {
          "type": "integer"
        },
        "inMsgs": {
          "type": "integer"
        },
        "lang": {
          "type": "string"
        },
        "lastActivity": {
          "$ref": "#/definitions/v1.Time"
        },
        "name": {
          "type": "string"
        },
        "outBytes": {
          "type": "integer"
        },
        "outMsgs": {
          "type": "integer"
        },
        "pendingBytes": {
          "type": "integer"
        },
        "port": {
          "type": "integer"
        },
        "rtt": {
          "type": "string"
        },
        "start": {
          "$ref": "#/definitions/v1.Time"
        },
        "subscriptionList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subscriptions": {
          "type": "integer"
        },
        "tLSCipherSuite": {
          "type": "string"
        },
        "tLSVersion": {
          "type": "string"
        },
        "uptime": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.MsgBrokerConnectionList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1alpha1.MsgBrokerConnection"
      }
    },
    "v1alpha1.MsgBrokerConnections": {
      "type": "object",
      "properties": {
        "connections": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.MsgBrokerConnection"
          }
        },
        "limit": {
          "type": "integer"
        },
        "now": {
          "$ref": "#/definitions/v1.Time"
        },
        "numOfConnections": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "serverId": {
          "type": "string"
        },
        "totalConnections": {
          "type": "integer"
        }
      }
    },
    "v1alpha1.MsgBrokerHealth": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "$ref": "#/definitions/v1alpha1.MsgBrokerNodesHealthSpec"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/v1alpha1.MsgBrokerNodesHealthStatus"
        }
      }
    },
    "v1alpha1.MsgBrokerNodeHealth": {
      "type": "object",
      "properties": {
        "allyPublishersByTenant": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1alpha1.MsgBrokerConnectionList"
          }
        },
        "duplicateSubscribersCount": {
          "type": "object",
          "additionalProperties": {
            "type": "integer"
          }
        },
        "hubbleSubscribersByService": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1alpha1.MsgBrokerConnectionList"
          }
        },
        "hubbleSubscribersByTenant": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1alpha1.MsgBrokerConnectionList"
          }
        },
        "hubbleSubscribersByType": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1alpha1.MsgBrokerConnectionList"
          }
        },
        "nodeId": {
          "type": "string"
        },
        "subscriberWithAbnormalRTT": {
          "$ref": "#/definitions/v1alpha1.MsgBrokerConnectionList"
        },
        "subscribersWithAbnormalSubscriptions": {
          "$ref": "#/definitions/v1alpha1.MsgBrokerConnectionList"
        },
        "uniqueSubscribers": {
          "type": "integer"
        },
        "unrecognizedClients": {
          "$ref": "#/definitions/v1alpha1.MsgBrokerConnectionList"
        }
      }
    },
    "v1alpha1.MsgBrokerNodeHealthSpec": {
      "type": "object",
      "properties": {
        "connections": {
          "type": "object",
          "$ref": "#/definitions/v1alpha1.MsgBrokerConnections"
        },
        "nodeId": {
          "type": "string"
        },
        "routes": {
          "type": "object",
          "$ref": "#/definitions/v1alpha1.MsgBrokerRoutes"
        },
        "variables": {
          "type": "object",
          "$ref": "#/definitions/v1alpha1.MsgBrokerVariables"
        }
      }
    },
    "v1alpha1.MsgBrokerNodesHealthSpec": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.MsgBrokerNodeHealthSpec"
          }
        }
      }
    },
    "v1alpha1.MsgBrokerNodesHealthStatus": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.MsgBrokerNodeHealth"
          }
        }
      }
    },
    "v1alpha1.MsgBrokerRoutes": {
      "type": "object",
      "properties": {
        "numRoutes": {
          "type": "integer"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.NatsRoute"
          }
        },
        "serverId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.MsgBrokerVariables": {
      "type": "object",
      "properties": {
        "authRequired": {
          "type": "boolean"
        },
        "authTimeout": {
          "type": "integer"
        },
        "cluster": {
          "type": "object",
          "properties": {
            "addr": {
              "type": "string"
            },
            "authTimeout": {
              "type": "integer"
            },
            "clusterPort": {
              "type": "integer"
            },
            "urls": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "configLoadTime": {
          "$ref": "#/definitions/v1.Time"
        },
        "connectUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "connections": {
          "type": "integer"
        },
        "cores": {
          "type": "integer"
        },
        "cpu": {
          "type": "number"
        },
        "gitCommit": {
          "type": "string"
        },
        "go": {
          "type": "string"
        },
        "gomaxprocs": {
          "type": "integer"
        },
        "host": {
          "type": "string"
        },
        "httpHost": {
          "type": "string"
        },
        "httpPort": {
          "type": "integer"
        },
        "inBytes": {
          "type": "integer"
        },
        "inMsgs": {
          "type": "integer"
        },
        "leafNodes": {
          "type": "integer"
        },
        "maxConnections": {
          "type": "integer"
        },
        "maxControlLine": {
          "type": "integer"
        },
        "maxPayload": {
          "type": "integer"
        },
        "maxPending": {
          "type": "integer"
        },
        "mem": {
          "type": "integer"
        },
        "now": {
          "$ref": "#/definitions/v1.Time"
        },
        "outBytes": {
          "type": "integer"
        },
        "outMsgs": {
          "type": "integer"
        },
        "pingInterval": {
          "type": "integer"
        },
        "pingMax": {
          "type": "integer"
        },
        "port": {
          "type": "integer"
        },
        "proto": {
          "type": "integer"
        },
        "remotes": {
          "type": "integer"
        },
        "routes": {
          "type": "integer"
        },
        "serverId": {
          "type": "string"
        },
        "serverName": {
          "type": "string"
        },
        "slowConsumers": {
          "type": "integer"
        },
        "start": {
          "$ref": "#/definitions/v1.Time"
        },
        "subscriptions": {
          "type": "integer"
        },
        "tlsRequired": {
          "type": "boolean"
        },
        "tlsTimeout": {
          "type": "integer"
        },
        "totalConnections": {
          "type": "integer"
        },
        "uptime": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "writeDeadline": {
          "type": "integer"
        }
      }
    },
    "v1alpha1.Nameserver": {
      "description": "Nameserver define search domains and nameserver addresses",
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "search": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.NatsConfiguration": {
      "description": "Nats Configuration",
      "type": "object",
      "properties": {
        "connectionString": {
          "type": "string"
        },
        "insecureTls": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        },
        "scheme": {
          "type": "string"
        },
        "tlsCertificate": {
          "type": "string"
        },
        "tlsKey": {
          "type": "string"
        },
        "urls": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "v1alpha1.NatsCredentialRequest": {
      "description": "Array of permissions",
      "type": "object",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "serviceName": {
          "type": "string",
          "enum": [
            "ally",
            "jet"
          ]
        },
        "tenantUid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.NatsCredentials": {
      "description": "Array of permissions",
      "type": "object",
      "properties": {
        "allowedPublisher": {
          "type": "string"
        },
        "allowedSubcriber": {
          "type": "string"
        },
        "jwt": {
          "type": "string"
        },
        "seed": {
          "type": "string"
        }
      }
    },
    "v1alpha1.NatsRoute": {
      "type": "object",
      "properties": {
        "didSolicit": {
          "type": "boolean"
        },
        "inBytes": {
          "type": "integer"
        },
        "inMsgs": {
          "type": "integer"
        },
        "isConfigured": {
          "type": "boolean"
        },
        "outBytes": {
          "type": "integer"
        },
        "outMsgs": {
          "type": "integer"
        },
        "pendingSize": {
          "type": "integer"
        },
        "port": {
          "type": "integer"
        },
        "remoteId": {
          "type": "string"
        },
        "rid": {
          "type": "integer"
        },
        "rtt": {
          "type": "string"
        },
        "subscriptions": {
          "type": "integer"
        }
      }
    },
    "v1alpha1.Nic": {
      "type": "object",
      "properties": {
        "dns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gateway": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "macAddr": {
          "type": "string"
        },
        "subnet": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Notification": {
      "description": "Event notification and action definition",
      "type": "object",
      "properties": {
        "action": {
          "type": "object",
          "$ref": "#/definitions/v1alpha1.NotificationAction"
        },
        "metadata": {
          "type": "object",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "relatedObject": {
          "type": "object",
          "$ref": "#/definitions/v1.RelatedObject"
        },
        "source": {
          "type": "object",
          "$ref": "#/definitions/v1alpha1.NotificationSource"
        },
        "type": {
          "type": "string",
          "enum": [
            "NotificationPackUpdate",
            "NotificationPackRegistryUpdate",
            "NotificationNone"
          ]
        }
      }
    },
    "v1alpha1.NotificationAction": {
      "description": "Notification action definition",
      "type": "object",
      "properties": {
        "ack": {
          "description": "Is the notification read by the consumer",
          "type": "boolean",
          "x-omitempty": false
        },
        "actionMessage": {
          "type": "string"
        },
        "actionType": {
          "type": "string",
          "enum": [
            "NotifyActionPacksUpdate",
            "NotifyActionClusterProfileUpdate",
            "NotifyActionPackRegistryUpdate",
            "NotifyActionClusterUpdate",
            "NotifyActionNone"
          ]
        },
        "events": {
          "description": "Event messages with meta digest as the key",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "isDone": {
          "description": "Is the notification action completed",
          "type": "boolean",
          "x-omitempty": false
        },
        "isInfo": {
          "description": "Is info notification",
          "type": "boolean",
          "x-omitempty": false
        },
        "link": {
          "type": "string"
        }
      }
    },
    "v1alpha1.NotificationEvent": {
      "description": "Notification event",
      "type": "object",
      "properties": {
        "component": {
          "type": "string"
        },
        "digest": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "meta": {
          "description": "Event messages with meta digest as the key",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "NotificationPackSync",
            "NotificationClusterProfileSync"
          ]
        }
      }
    },
    "v1alpha1.NotificationSource": {
      "description": "Notification source info",
      "type": "object",
      "properties": {
        "component": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Notifications": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Notification"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.OS": {
      "type": "object",
      "properties": {
        "family": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.OverloadSpec": {
      "description": "Overload spec",
      "type": "object",
      "properties": {
        "cloudAccountUid": {
          "type": "string",
          "x-omitempty": false
        },
        "ipAddress": {
          "type": "string"
        },
        "ipPools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.IpPoolEntity"
          }
        },
        "isSystem": {
          "type": "boolean"
        },
        "registryUid": {
          "type": "string",
          "x-omitempty": false
        },
        "spectroClusterUid": {
          "type": "string",
          "x-omitempty": false
        },
        "tenantUid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.OverloadSpecEntity": {
      "description": "Overload spec",
      "type": "object",
      "properties": {
        "agentVersion": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        }
      }
    },
    "v1alpha1.OverloadStatus": {
      "description": "Overload status",
      "type": "object",
      "properties": {
        "isActive": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isReady": {
          "type": "boolean",
          "x-omitempty": false
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.OverloadVsphereOva": {
      "description": "Overload ova details",
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.Overlord": {
      "description": "Overlord defintiion",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.OverloadSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.OverloadStatus"
        }
      }
    },
    "v1alpha1.OverlordEntity": {
      "description": "Overlord spec",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.OverloadSpecEntity"
        }
      }
    },
    "v1alpha1.OverlordManifest": {
      "description": "overlord manifest",
      "type": "object",
      "properties": {
        "manifest": {
          "type": "string"
        }
      }
    },
    "v1alpha1.OverlordVsphereAccountCreate": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1alpha1.VsphereCloudAccount"
        },
        "name": {
          "type": "string"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.OverlordVsphereAccountEntity": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1alpha1.VsphereCloudAccount"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.OverlordVsphereCloudConfig": {
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1alpha1.VsphereOverlordClusterConfigEntity"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.Overlords": {
      "description": "Array of Overlords",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Overlord"
          }
        }
      }
    },
    "v1alpha1.PackEntity": {
      "description": "Pack entity with values to overwrite",
      "type": "object",
      "required": [
        "uid",
        "tag",
        "name"
      ],
      "properties": {
        "layer": {
          "description": "Pack layer",
          "type": "string"
        },
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "tag": {
          "description": "Pack tag",
          "type": "string"
        },
        "uid": {
          "description": "Pack uid",
          "type": "string"
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        }
      }
    },
    "v1alpha1.PackLayer": {
      "type": "string",
      "enum": [
        "kernel",
        "os",
        "k8s",
        "cni",
        "csi",
        "addon"
      ]
    },
    "v1alpha1.PackPreset": {
      "description": "PackPreset defines the preset pack values",
      "type": "object",
      "properties": {
        "add": {
          "type": "string",
          "x-omitempty": false
        },
        "displayName": {
          "type": "string",
          "x-omitempty": false
        },
        "group": {
          "type": "string",
          "x-omitempty": false
        },
        "name": {
          "type": "string",
          "x-omitempty": false
        },
        "remove": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.PackRef": {
      "description": "PackRef server/name:tag to point to a pack PackRef is used when construct a ClusterProfile PackSpec is used for UI to render the parameters form ClusterProfile will not know inner details of a pack ClusterProfile only contain pack name:tag, and the param values user entered for it",
      "type": "object",
      "required": [
        "layer",
        "name"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations is used to allow packref to add more arbitrary information one example is to add git reference for values.yaml",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "digest": {
          "description": "digest is used to specify the version should be installed by palette when pack upgrade available, change this digest to trigger upgrade",
          "type": "string"
        },
        "inValidReason": {
          "type": "string"
        },
        "isInvalid": {
          "description": "pack is invalid when the associated tag is deleted from the registry",
          "type": "boolean"
        },
        "layer": {
          "type": "string",
          "enum": [
            "kernel",
            "os",
            "k8s",
            "cni",
            "csi",
            "addon"
          ]
        },
        "name": {
          "description": "pack name",
          "type": "string"
        },
        "packUid": {
          "description": "PackUID is Hubble packUID, not palette Pack.UID It is used by Hubble only.",
          "type": "string"
        },
        "params": {
          "description": "params passed as env variables to be consumed at installation time",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "presets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PackPreset"
          }
        },
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PackSchema"
          }
        },
        "server": {
          "description": "pack registry server",
          "type": "string"
        },
        "tag": {
          "description": "pack tag",
          "type": "string"
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        },
        "version": {
          "description": "pack version",
          "type": "string"
        }
      }
    },
    "v1alpha1.PackRefSummary": {
      "description": "Pack ref summary",
      "properties": {
        "name": {
          "type": "string"
        },
        "packUid": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.PackRegistries": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.PackRegistry"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.PackRegistriesSummary": {
      "description": "Pack Registries Summary",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.PackRegistrySummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.PackRegistry": {
      "description": "Pack registry information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.PackRegistrySpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.PackRegistryStatus"
        }
      }
    },
    "v1alpha1.PackRegistrySpec": {
      "description": "Pack registry credentials spec",
      "type": "object",
      "required": [
        "endpoint",
        "auth"
      ],
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1alpha1.RegistryAuth"
        },
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "private": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.PackRegistryStatus": {
      "description": "Status of the pack registry",
      "type": "object",
      "properties": {
        "packSyncStatus": {
          "$ref": "#/definitions/v1alpha1.PackSyncStatus"
        }
      }
    },
    "v1alpha1.PackRegistrySummary": {
      "description": "Pack Registry summary",
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "name": {
          "type": "string"
        },
        "private": {
          "type": "boolean",
          "x-omitempty": false
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.PackSchema": {
      "description": "PackSchema defines the schema definition, hints for the pack values",
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "x-omitempty": false
        },
        "hints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "listOptions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "name": {
          "type": "string",
          "x-omitempty": false
        },
        "regex": {
          "type": "string",
          "x-omitempty": false
        },
        "required": {
          "type": "boolean",
          "x-omitempty": false
        },
        "type": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.PackSummaries": {
      "description": "List of pack summary information",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.PackSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.PackSummary": {
      "description": "Pack summary of a pack",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.PackSummarySpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.PackSummaryStatus"
        }
      }
    },
    "v1alpha1.PackSummarySpec": {
      "description": "Specs of a pack summary",
      "type": "object",
      "properties": {
        "addonType": {
          "description": "If Layer is Addon, then can specify additional addonType=logging/monitoring/security etc",
          "type": "string"
        },
        "annotations": {
          "description": "Annotations is used to allow pack to add more arbitrary configurations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "cloudTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.CloudType"
          }
        },
        "digest": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "eol": {
          "description": "end of life for this pack, date format: yyyy-MM-dd",
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1alpha1.PackLayer"
        },
        "logoUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "presets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PackPreset"
          }
        },
        "registryUid": {
          "type": "string"
        },
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PackSchema"
          }
        },
        "values": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.PackSummaryStatus": {
      "description": "Pack summary status",
      "type": "object"
    },
    "v1alpha1.PackSyncStatus": {
      "description": "Status of the pack sync",
      "type": "object",
      "properties": {
        "lastSyncedTime": {
          "$ref": "#/definitions/v1.Time"
        },
        "message": {
          "type": "string"
        },
        "succeeded": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.PackTagEntity": {
      "description": "Pack information organized by tags",
      "type": "object",
      "properties": {
        "addonType": {
          "description": "If Layer is Addon, then can specify additional addonType=logging/monitoring/security etc",
          "type": "string"
        },
        "cloudTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.CloudType"
          }
        },
        "displayName": {
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1alpha1.PackLayer"
        },
        "logoUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "packValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PackUidValues"
          }
        },
        "registryUid": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PackTags"
          }
        }
      }
    },
    "v1alpha1.PackTags": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "packUid": {
          "type": "string"
        },
        "parentTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tag": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.PackUidValues": {
      "type": "object",
      "properties": {
        "packUid": {
          "type": "string"
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters",
          "type": "string"
        }
      }
    },
    "v1alpha1.PackValues": {
      "description": "Pack values information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.PackValuesSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.PackValuesStatus"
        }
      }
    },
    "v1alpha1.PackValuesEntity": {
      "description": "Pack values entity to refer the existing pack for the values overrride",
      "type": "object",
      "required": [
        "tag",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "values": {
          "type": "string"
        }
      }
    },
    "v1alpha1.PackValuesSpec": {
      "type": "object",
      "properties": {
        "associatedObject": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "packUid": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "values": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.PackValuesStatus": {
      "description": "Pack values resolution status",
      "type": "object",
      "properties": {
        "isResolved": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.PairingCode": {
      "description": "Pairing code response",
      "type": "object",
      "properties": {
        "pairingCode": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Partition": {
      "type": "object",
      "properties": {
        "fileSystemType": {
          "type": "string"
        },
        "freeSpace": {
          "type": "integer",
          "format": "int32"
        },
        "mountPoint": {
          "type": "string"
        },
        "totalSpace": {
          "type": "integer",
          "format": "int32"
        },
        "usedSpace": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.PaymentMethod": {
      "description": "Payment Method",
      "properties": {
        "card": {
          "$ref": "#/definitions/v1alpha1.Card"
        },
        "customerId": {
          "type": "string"
        },
        "paymentMethodId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.PaymentPlan": {
      "description": "Stripe price detail",
      "properties": {
        "billingScheme": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "unitAmount": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "v1alpha1.PaymentPlans": {
      "description": "Array of Stripe plan details",
      "type": "object",
      "required": [
        "stripePlanDetails"
      ],
      "properties": {
        "stripePlanDetails": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.PaymentPlan"
          }
        }
      }
    },
    "v1alpha1.PaymentSubscription": {
      "description": "Subscription",
      "properties": {
        "customerId": {
          "type": "string"
        },
        "paymentMethodId": {
          "type": "string"
        },
        "priceId": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Permission": {
      "description": "Permission information",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "$ref": "#/definitions/v1alpha1.Scope"
        }
      }
    },
    "v1alpha1.Permissions": {
      "description": "Array of permissions",
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1alpha1.Permission"
      }
    },
    "v1alpha1.Plan": {
      "description": "Plan",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.PlanSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.PlanStatus"
        }
      }
    },
    "v1alpha1.PlanAddFreeCreditUpdate": {
      "description": "Plan add free credit update entity",
      "properties": {
        "credit": {
          "$ref": "#/definitions/v1alpha1.PlanCreditEntity"
        }
      }
    },
    "v1alpha1.PlanAddSlaCreditUpdate": {
      "description": "Plan add sla credit update entity",
      "properties": {
        "credit": {
          "$ref": "#/definitions/v1alpha1.PlanCreditEntity"
        }
      }
    },
    "v1alpha1.PlanChangeUpdate": {
      "description": "Plan change update entity",
      "required": [
        "type",
        "start",
        "expiry"
      ],
      "properties": {
        "expiry": {
          "description": "plan expiry time",
          "$ref": "#/definitions/v1.Time"
        },
        "planLimit": {
          "$ref": "#/definitions/v1alpha1.PlanLimit"
        },
        "start": {
          "description": "plan start time",
          "$ref": "#/definitions/v1.Time"
        },
        "type": {
          "type": "string",
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ]
        }
      }
    },
    "v1alpha1.PlanCost": {
      "description": "Plan Cost",
      "properties": {
        "discount": {
          "type": "number",
          "format": "float",
          "x-omitempty": false
        },
        "price": {
          "type": "number",
          "format": "float",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.PlanCredit": {
      "description": "Plan Credit",
      "properties": {
        "cpuCoreHours": {
          "type": "number",
          "format": "int64",
          "x-omitempty": false
        },
        "creditUid": {
          "type": "string"
        },
        "expiry": {
          "description": "credit expiry time",
          "$ref": "#/definitions/v1.Time"
        },
        "start": {
          "description": "credit start time",
          "$ref": "#/definitions/v1.Time"
        }
      }
    },
    "v1alpha1.PlanCreditEntity": {
      "description": "Plan Credit entity for create/update request",
      "properties": {
        "cpuCoreHours": {
          "type": "number",
          "format": "int64",
          "x-omitempty": false
        },
        "expiry": {
          "description": "credit expiry time",
          "$ref": "#/definitions/v1.Time"
        },
        "start": {
          "description": "credit start time",
          "$ref": "#/definitions/v1.Time"
        }
      }
    },
    "v1alpha1.PlanCreditUpdate": {
      "description": "Plan credit update entity",
      "properties": {
        "credit": {
          "$ref": "#/definitions/v1alpha1.PlanCreditEntity"
        }
      }
    },
    "v1alpha1.PlanLimit": {
      "description": "Monthly Plan Limit",
      "properties": {
        "cpuCoreHours": {
          "description": "cpu cores hours",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "isOnDemand": {
          "description": "is onDemand plan and has no limit",
          "type": "boolean",
          "x-omitempty": false
        },
        "overageLimitPercentage": {
          "description": "overage limit in percentage",
          "type": "integer",
          "format": "int8",
          "default": 25,
          "x-omitempty": false
        },
        "warnLimitPercentage": {
          "description": "warning limit in percentage",
          "type": "integer",
          "format": "int8",
          "default": 90,
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.PlanLimitUpdate": {
      "description": "Plan limit change update entity",
      "properties": {
        "expiry": {
          "description": "plan expiry time",
          "$ref": "#/definitions/v1.Time"
        },
        "planLimit": {
          "$ref": "#/definitions/v1alpha1.PlanLimit"
        }
      }
    },
    "v1alpha1.PlanRenewal": {
      "description": "Plan Renewal",
      "required": [
        "type",
        "start",
        "expiry"
      ],
      "properties": {
        "expiry": {
          "description": "credit expiry time",
          "$ref": "#/definitions/v1.Time"
        },
        "planLimit": {
          "$ref": "#/definitions/v1alpha1.PlanLimit"
        },
        "start": {
          "description": "credit start time",
          "$ref": "#/definitions/v1.Time"
        },
        "type": {
          "type": "string",
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ]
        }
      }
    },
    "v1alpha1.PlanRenewalUpdate": {
      "description": "Plan add renawal update entity",
      "properties": {
        "renewal": {
          "$ref": "#/definitions/v1alpha1.PlanRenewal"
        }
      }
    },
    "v1alpha1.PlanSpec": {
      "description": "Plan specifications",
      "required": [
        "type",
        "start",
        "expiry"
      ],
      "properties": {
        "cost": {
          "$ref": "#/definitions/v1alpha1.PlanCost"
        },
        "expiry": {
          "description": "plan expiry time",
          "$ref": "#/definitions/v1.Time"
        },
        "freeCredits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PlanCredit"
          }
        },
        "planLimit": {
          "$ref": "#/definitions/v1alpha1.PlanLimit"
        },
        "renewal": {
          "$ref": "#/definitions/v1alpha1.PlanRenewal"
        },
        "slaCredits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PlanCredit"
          }
        },
        "start": {
          "description": "plan start time",
          "$ref": "#/definitions/v1.Time"
        },
        "type": {
          "type": "string",
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ]
        }
      }
    },
    "v1alpha1.PlanStatus": {
      "type": "object",
      "properties": {
        "changeLogs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.Plans": {
      "description": "Array of Plans",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Plan"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.Pool": {
      "description": "Pool defines IP ranges or with CIDR for available IPs Gateway, Prefix and Nameserver if provided, will overwrite values in IPPool",
      "type": "object",
      "properties": {
        "end": {
          "description": "End is the last IP address that can be rendered. It is used as a validation that the rendered IP is in bound.",
          "type": "string"
        },
        "gateway": {
          "description": "Gateway is the gateway ip address",
          "type": "string"
        },
        "nameserver": {
          "description": "Nameserver provide information for dns resolvation",
          "$ref": "#/definitions/v1alpha1.Nameserver"
        },
        "prefix": {
          "description": "Prefix is the mask of the network as integer (max 128)",
          "type": "integer",
          "format": "int32"
        },
        "start": {
          "description": "Start is the first ip address that can be rendered",
          "type": "string"
        },
        "subnet": {
          "description": "Subnet is used to validate that the rendered IP is in bounds. eg: 192.168.0.0/24 If Start value is not given, start value is derived from the subnet ip incremented by 1 (start value is `192.168.0.1` for subnet `192.168.0.0/24`)",
          "type": "string"
        }
      }
    },
    "v1alpha1.Project": {
      "description": "Project information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.ProjectSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.ProjectStatus"
        }
      }
    },
    "v1alpha1.ProjectAlertComponent": {
      "description": "Project alert component",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "supportedChannels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.ProjectAlertComponents": {
      "description": "Supported project alerts component",
      "type": "object",
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ProjectAlertComponent"
          }
        }
      }
    },
    "v1alpha1.ProjectEntity": {
      "description": "Project information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.ProjectEntitySpec"
        }
      }
    },
    "v1alpha1.ProjectEntitySpec": {
      "description": "Project specifications",
      "properties": {
        "logoUid": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.TeamRoleMap"
          }
        },
        "users": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.UserRoleMap"
          }
        }
      }
    },
    "v1alpha1.ProjectMeta": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ProjectPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1.HttpPatch"
      }
    },
    "v1alpha1.ProjectRolesEntity": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidRoleSummary"
          }
        }
      }
    },
    "v1alpha1.ProjectRolesPatch": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "projectUid": {
                "type": "string"
              },
              "roles": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "v1alpha1.ProjectSpec": {
      "description": "Project specifications",
      "properties": {
        "alerts": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Alert"
          }
        },
        "logoUrl": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.TeamRoleMap"
          }
        },
        "users": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.UserRoleMap"
          }
        }
      }
    },
    "v1alpha1.ProjectSpecSummary": {
      "type": "object",
      "properties": {
        "logoUrl": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        }
      }
    },
    "v1alpha1.ProjectStatus": {
      "description": "Project status",
      "type": "object"
    },
    "v1alpha1.ProjectStatusSummary": {
      "description": "Project status summary",
      "type": "object",
      "properties": {
        "clustersHealth": {
          "$ref": "#/definitions/v1alpha1.SpectroClustersHealth"
        },
        "usage": {
          "$ref": "#/definitions/v1alpha1.ProjectUsageSummary"
        }
      }
    },
    "v1alpha1.ProjectSummary": {
      "description": "Project summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "specSummary": {
          "description": "Project spec summary",
          "$ref": "#/definitions/v1alpha1.ProjectSpecSummary"
        },
        "status": {
          "description": "Spectro cluster status summary",
          "$ref": "#/definitions/v1alpha1.ProjectStatusSummary"
        }
      }
    },
    "v1alpha1.ProjectTeamsEntity": {
      "properties": {
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.TeamRoleMap"
          }
        }
      }
    },
    "v1alpha1.ProjectUsageSummary": {
      "description": "Project usage summary",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterUsageSummary"
          }
        },
        "cpuCores": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.ProjectUsersEntity": {
      "properties": {
        "users": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.UserRoleMap"
          }
        }
      }
    },
    "v1alpha1.Projects": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Project"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.ProjectsSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.ProjectSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.RegistryAuth": {
      "description": "Auth credentials of the registry",
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "format": "password"
        },
        "token": {
          "type": "string",
          "format": "password"
        },
        "type": {
          "type": "string",
          "enum": [
            "basic",
            "token"
          ]
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1alpha1.RegistryStatus": {
      "description": "Status of the registry",
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "active",
            "inactive"
          ]
        }
      }
    },
    "v1alpha1.ResourceGroup": {
      "description": "Azure resource Group",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Role": {
      "description": "Role",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.RoleSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.RoleStatus"
        }
      }
    },
    "v1alpha1.RolePatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1.HttpPatch"
      }
    },
    "v1alpha1.RoleSpec": {
      "description": "Role specifications",
      "properties": {
        "permissions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "$ref": "#/definitions/v1alpha1.Scope"
        }
      }
    },
    "v1alpha1.RoleStatus": {
      "description": "Role status",
      "properties": {
        "isEnabled": {
          "description": "Specifies if role account is enabled/disabled",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.Roles": {
      "description": "Array of Roles",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Role"
          }
        }
      }
    },
    "v1alpha1.SchedulerJob": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object",
          "x-omitempty": false,
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "cycles": {
              "type": "integer",
              "x-omitempty": false
            },
            "interval": {
              "type": "integer",
              "x-omitempty": false
            }
          }
        },
        "status": {
          "type": "object",
          "properties": {
            "cycleNumber": {
              "type": "integer",
              "x-omitempty": false
            },
            "error": {
              "type": "string",
              "x-omitempty": false
            },
            "forceNextRun": {
              "type": "boolean",
              "x-omitempty": false
            },
            "isActive": {
              "type": "boolean",
              "x-omitempty": false
            },
            "isDisabled": {
              "type": "boolean",
              "x-omitempty": false
            },
            "isLocked": {
              "type": "boolean",
              "x-omitempty": false
            },
            "lastRunTime": {
              "x-omitempty": false,
              "$ref": "#/definitions/v1.Time"
            },
            "lastSuccessfulRunTime": {
              "x-omitempty": false,
              "$ref": "#/definitions/v1.Time"
            },
            "nextRunTime": {
              "x-omitempty": false,
              "$ref": "#/definitions/v1.Time"
            }
          }
        }
      }
    },
    "v1alpha1.SchedulerJobs": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1alpha1.SchedulerJob"
      }
    },
    "v1alpha1.SchedulerJobsHealth": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1alpha1.SchedulerJob"
      }
    },
    "v1alpha1.Scope": {
      "type": "string",
      "enum": [
        "system",
        "tenant",
        "project"
      ]
    },
    "v1alpha1.ServiceManifest": {
      "description": "Service manifest information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.ServiceManifestSpec"
        }
      }
    },
    "v1alpha1.ServiceManifestSpec": {
      "type": "object",
      "properties": {
        "manifests": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.GitRepoFileContent"
          }
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ServicePort": {
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "port": {
          "description": "The port that will be exposed by this service.",
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ServiceVersion": {
      "description": "Service version information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.ServiceVersionSpec"
        }
      }
    },
    "v1alpha1.ServiceVersionSpec": {
      "type": "object",
      "properties": {
        "latestVersion": {
          "$ref": "#/definitions/v1alpha1.GitRepoFileContent"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroAppMgmt": {
      "description": "Spectro application management data",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.SpectroAppMgmtSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.SpectroAppMgmtStatus"
        }
      }
    },
    "v1alpha1.SpectroAppMgmtSpec": {
      "description": "spectro application management specifications",
      "properties": {
        "appEnv": {
          "type": "string"
        },
        "installedVersion": {
          "type": "string"
        },
        "latestVersion": {
          "type": "string"
        },
        "spectroClusterUid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroAppMgmtStatus": {
      "description": "spectro application management status",
      "properties": {
        "message": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "updateLink": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroAwsClusterEntity": {
      "description": "Spectro AWS cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig",
            "profileUid"
          ],
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1alpha1.AwsClusterConfig"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1.AwsMachinePoolConfigEntity"
              }
            },
            "packValues": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/v1alpha1.PackValuesEntity"
              }
            },
            "profileUid": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1.SpectroAzureClusterEntity": {
      "description": "Spectro Azure cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig",
            "profileUid"
          ],
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1alpha1.AzureClusterConfig"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1.AzureMachinePoolConfigEntity"
              }
            },
            "packValues": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/v1alpha1.PackValuesEntity"
              }
            },
            "profileUid": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1.SpectroCluster": {
      "description": "SpectroCluster is the Schema for the spectroclusters API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.SpectroClusterSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.SpectroClusterStatus"
        }
      }
    },
    "v1alpha1.SpectroClusterAssetEntity": {
      "description": "Spectro cluster asset",
      "type": "object",
      "properties": {
        "spec": {
          "type": "object",
          "properties": {
            "kubeconfig": {
              "type": "string"
            },
            "manifest": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1.SpectroClusterAssetKubeConfig": {
      "description": "Spectro cluster asset Kube Config",
      "type": "object",
      "properties": {
        "kubeconfig": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroClusterAssetManifest": {
      "description": "Spectro cluster asset",
      "type": "object",
      "properties": {
        "manifest": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroClusterHealthCondition": {
      "description": "Spectro cluster health condition",
      "properties": {
        "message": {
          "type": "string"
        },
        "relatedObject": {
          "type": "object",
          "$ref": "#/definitions/v1.RelatedObject"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroClusterHealthStatus": {
      "description": "Spectro cluster health status",
      "properties": {
        "agentVersion": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.SpectroClusterHealthCondition"
          }
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroClusterMetrics": {
      "description": "Spectro cluster metrics",
      "properties": {
        "cpu": {
          "$ref": "#/definitions/v1alpha1.ComputeMetrics"
        },
        "memory": {
          "$ref": "#/definitions/v1alpha1.ComputeMetrics"
        }
      }
    },
    "v1alpha1.SpectroClusterMigration": {
      "description": "Spectro cluster migration status",
      "type": "object",
      "properties": {
        "database": {
          "$ref": "#/definitions/v1alpha1.MgmtMigrationStatuses"
        },
        "state": {
          "type": "string",
          "x-omitempty": false
        },
        "tenant": {
          "$ref": "#/definitions/v1alpha1.SpectroTenantMigration"
        }
      }
    },
    "v1alpha1.SpectroClusterNotifications": {
      "description": "Spectro cluster notifications",
      "properties": {
        "isAvailable": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.SpectroClusterPackValues": {
      "$ref": "#/definitions/v1alpha1.PackValues"
    },
    "v1alpha1.SpectroClusterPackValuesList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.PackValues"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.SpectroClusterPacksEntity": {
      "description": "Spectro cluster entity for pack refs validate",
      "type": "object",
      "required": [
        "packs",
        "profileUid"
      ],
      "properties": {
        "packs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.PackValuesEntity"
          }
        },
        "profileUid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroClusterSpec": {
      "description": "SpectroClusterSpec defines the desired state of SpectroCluster",
      "type": "object",
      "properties": {
        "cloudConfigRef": {
          "description": "CloudConfigRef point to the cloud configuration for the cluster, input by user Ref types are: AwsCloudConfig/VsphereCloudConfig/BaremetalConfig/ etc this user config will be used to generate cloud specific cluster/machine spec for cluster-api For VM, it will contain information needed to launch VMs, like cloud account, instance type For BM, it will contain actual baremetal machines",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "cloudType": {
          "type": "string",
          "enum": [
            "aws",
            "gcp",
            "azure",
            "vsphere",
            "openstack",
            "baremetal",
            "all"
          ]
        },
        "clusterProfileRef": {
          "description": "ClusterProfileRef point to the ClusterProfile which contains ClusterProfileTemplate",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "clusterProfileTemplate": {
          "description": "when a cluster created from a clusterprofile at t1, ClusterProfileTemplate is a copy of the draft version or latest published version of the clusterprofileSpec.clusterprofileTemplate then clusterprofile may evolve to v2 at t2, but before user decide to upgrade the cluster, it will stay as it is when user decide to upgrade, clusterProfileTemplate will be updated from the clusterprofile pointed by ClusterProfileRef",
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplate"
        }
      }
    },
    "v1alpha1.SpectroClusterStatus": {
      "description": "SpectroClusterStatus",
      "type": "object",
      "properties": {
        "apiEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.APIEndpoint"
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.LoadBalancerService"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "state": {
          "description": "current operational state",
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroClusterSummary": {
      "description": "Spectro cluster summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "specSummary": {
          "description": "Spectro cluster spec summary",
          "type": "object",
          "properties": {
            "cloudConfig": {
              "$ref": "#/definitions/v1alpha1.CloudConfigMeta"
            },
            "clusterProfileTemplate": {
              "$ref": "#/definitions/v1alpha1.ClusterProfileTemplateMeta"
            }
          }
        },
        "status": {
          "description": "Spectro cluster status summary",
          "properties": {
            "health": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterHealthStatus"
            },
            "metrics": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterMetrics"
            },
            "notifications": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterNotifications"
            },
            "state": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1.SpectroClusterUidStatusSummary": {
      "description": "Spectro cluster status summary",
      "properties": {
        "apiEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.APIEndpoint"
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterCondition"
          }
        },
        "health": {
          "$ref": "#/definitions/v1alpha1.SpectroClusterHealthStatus"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.LoadBalancerService"
          }
        },
        "state": {
          "description": "current operational state",
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroClusterUidSummary": {
      "description": "Spectro cluster summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "description": "Spectro cluster spec summary",
          "type": "object",
          "properties": {
            "cloudConfig": {
              "$ref": "#/definitions/v1alpha1.CloudConfigMeta"
            },
            "cloudaccount": {
              "$ref": "#/definitions/v1alpha1.CloudAccountMeta"
            },
            "clusterProfileTemplate": {
              "$ref": "#/definitions/v1alpha1.ClusterProfileTemplateMeta"
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.SpectroClusterUidStatusSummary"
        }
      }
    },
    "v1alpha1.SpectroClusterValidatorResponse": {
      "description": "Spectro cluster validator response",
      "type": "object",
      "properties": {
        "machinePools": {
          "$ref": "#/definitions/v1alpha1.ConstraintValidatorResponse"
        },
        "packs": {
          "$ref": "#/definitions/v1alpha1.ConstraintValidatorResponse"
        }
      }
    },
    "v1alpha1.SpectroClusters": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.SpectroCluster"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.SpectroClustersHealth": {
      "description": "Spectro Clusters health data",
      "type": "object",
      "properties": {
        "errored": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "healthy": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "running": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "unhealthy": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.SpectroClustersSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.SpectroClusterSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.SpectroGcpClusterEntity": {
      "description": "Spectro GCP cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig",
            "profileUid"
          ],
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1alpha1.GcpClusterConfig"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1.GcpMachinePoolConfigEntity"
              }
            },
            "packValues": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/v1alpha1.PackValuesEntity"
              }
            },
            "profileUid": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1.SpectroInstallerEntity": {
      "description": "Spectro installer entity for create",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "privateGatewayUid": {
              "type": "string"
            },
            "spectroClusterUid": {
              "type": "string"
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.InstallerStatus"
        }
      }
    },
    "v1alpha1.SpectroInstallerInputEntity": {
      "description": "Spectro installer entity for create",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMetaInputEntity"
        }
      }
    },
    "v1alpha1.SpectroInstallerStatus": {
      "description": "spectro installer status",
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1alpha1.InstallerStatus"
        }
      }
    },
    "v1alpha1.SpectroInstallers": {
      "description": "List Spectro installers",
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.SpectroInstallerEntity"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.SpectroMgmt": {
      "description": "Spectro management data",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.SpectroMgmtSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.SpectroMgmtStatus"
        }
      }
    },
    "v1alpha1.SpectroMgmtSpec": {
      "description": "spectro management specifications",
      "properties": {
        "installerMode": {
          "type": "string"
        },
        "spectroClusterUid": {
          "type": "string"
        },
        "targetVersion": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroMgmtStatus": {
      "description": "spectro management status information",
      "properties": {
        "lastUpdatedTime": {
          "$ref": "#/definitions/v1.Time"
        },
        "message": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "upgradeLogs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.SpectroMgmtUpgrade"
          }
        }
      }
    },
    "v1alpha1.SpectroMgmtUpgrade": {
      "description": "spectro management upgrade logs",
      "properties": {
        "upgradeTime": {
          "$ref": "#/definitions/v1.Time"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroTenantClusterMigration": {
      "description": "Spectro tenant cluster migration status",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroTenantMigration": {
      "description": "Spectro tenant migration status",
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.SpectroTenantClusterMigration"
          }
        },
        "state": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.SpectroVsphereClusterEntity": {
      "description": "Spectro vSphere cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudAccountUid",
            "cloudConfig",
            "profileUid"
          ],
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1alpha1.VsphereClusterConfigEntity"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1.VsphereMachinePoolConfigEntity"
              }
            },
            "packValues": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/v1alpha1.PackValuesEntity"
              }
            },
            "profileUid": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1.StorageAccountEntity": {
      "description": "Azure Storage Account Entity",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.StripeKey": {
      "description": "Key",
      "properties": {
        "publishKey": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Subscription": {
      "description": "Azure Subscription Type",
      "type": "object",
      "properties": {
        "authorizationSource": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SysLogin": {
      "description": "System admin login input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SysUserToken": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "Authorization": {
          "type": "string"
        },
        "IsPasswordReset": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.SystemAwsAccount": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.SystemAwsSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.SystemAwsStatus"
        }
      }
    },
    "v1alpha1.SystemAwsImage": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.SystemAwsImageSpec"
        }
      }
    },
    "v1alpha1.SystemAwsImageSpec": {
      "description": "system aws account specifications",
      "properties": {
        "goldenImageRegion": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemAwsSpec": {
      "description": "system aws account specifications",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemAwsStatus": {
      "description": "system aws account status",
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemAzureAccount": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.SystemAzureSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.SystemAzureStatus"
        }
      }
    },
    "v1alpha1.SystemAzureSpec": {
      "description": "system azure account specifications",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemAzureStatus": {
      "description": "system azure account status",
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemAzureStorage": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.SystemAzureStorageSpec"
        }
      }
    },
    "v1alpha1.SystemAzureStorageSpec": {
      "description": "system aws account specifications",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "container": {
          "type": "string"
        },
        "storageName": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemCertificateSpec": {
      "description": "system smtp config spec",
      "type": "object",
      "properties": {
        "crt": {
          "type": "string"
        },
        "crtFileName": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "keyFileName": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemConfigDomainSpec": {
      "description": "system domain config spec",
      "type": "object",
      "properties": {
        "apiServer": {
          "type": "string"
        },
        "derivedApiServer": {
          "type": "string"
        },
        "derivedRootDomain": {
          "type": "string"
        },
        "rootDomain": {
          "type": "string"
        },
        "urlProtocol": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemCryptoData": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "input": {
          "type": "string"
        },
        "result": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemCryptoInput": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "input": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemGcpAccount": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.SystemGcpSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.SystemGcpStatus"
        }
      }
    },
    "v1alpha1.SystemGcpImage": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.SystemGcpImageSpec"
        }
      }
    },
    "v1alpha1.SystemGcpImageSpec": {
      "description": "system gcp account specifications",
      "properties": {
        "imageProject": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemGcpSpec": {
      "description": "system gcp account specifications",
      "properties": {
        "json": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemGcpStatus": {
      "description": "system gcp account status",
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemGitAuthSpec": {
      "description": "system git auth account specifications",
      "properties": {
        "_type": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "username": {
          "$ref": "#/definitions/v1alpha1.SystemGitAuthSpec"
        }
      }
    },
    "v1alpha1.SystemLoggerSpec": {
      "description": "system logger config spec",
      "type": "object",
      "properties": {
        "format": {
          "type": "string"
        },
        "level": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemPasswordPolicySpec": {
      "description": "system password policy",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "$ref": "#/definitions/v1.Time"
        },
        "expiryDurationInDays": {
          "type": "integer"
        },
        "firstReminderInDays": {
          "type": "integer"
        },
        "isRegex": {
          "type": "boolean"
        },
        "minLength": {
          "type": "integer"
        },
        "minNumOfBlockLetters": {
          "type": "integer"
        },
        "minNumOfDigits": {
          "type": "integer"
        },
        "minNumOfSmallLetters": {
          "type": "integer"
        },
        "minNumOfSpecialCharacters": {
          "type": "integer"
        },
        "regex": {
          "type": "string"
        },
        "reminderFrequency": {
          "type": "integer"
        },
        "updateTimestamp": {
          "$ref": "#/definitions/v1.Time"
        }
      }
    },
    "v1alpha1.SystemProxySpec": {
      "description": "system proxy config spec",
      "type": "object",
      "properties": {
        "httpProxy": {
          "type": "string"
        },
        "httpsProxy": {
          "type": "string"
        },
        "noProxy": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemScarSpec": {
      "description": "system scar config spec",
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemServiceLogin": {
      "description": "System service login input",
      "type": "object",
      "properties": {
        "isSystem": {
          "type": "boolean"
        },
        "serviceName": {
          "type": "string",
          "enum": [
            "ally",
            "jet",
            "git",
            "ambit"
          ]
        },
        "spectroClusterUid": {
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemSmtpSpec": {
      "description": "system smtp config spec",
      "type": "object",
      "properties": {
        "fromEmailId": {
          "type": "string"
        },
        "insecureSkipVerifyTls": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        },
        "smtpPort": {
          "type": "integer"
        },
        "smtpServer": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemSsoSpec": {
      "description": "system sso config spec",
      "type": "object",
      "properties": {
        "acsUrlRoot": {
          "type": "string"
        },
        "acsUrlScheme": {
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        },
        "audienceUrl": {
          "type": "string"
        },
        "entityId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemTimeseriesSpec": {
      "description": "system smtp config spec",
      "type": "object",
      "properties": {
        "archivalInterval": {
          "type": "integer"
        },
        "batchInterval": {
          "type": "integer"
        },
        "retentionPeriod": {
          "type": "integer"
        }
      }
    },
    "v1alpha1.SystemVersionInfo": {
      "description": "system version info",
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SystemVsphereImage": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.SystemVsphereImageSpec"
        }
      }
    },
    "v1alpha1.SystemVsphereImageSpec": {
      "description": "system vsphere account specifications",
      "properties": {
        "imagesHostEndpoint": {
          "type": "string"
        },
        "imagesLoadBalancerEndpoint": {
          "type": "string"
        },
        "overlordOvaLocation": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Team": {
      "description": "Team information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.TeamSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.TeamStatus"
        }
      }
    },
    "v1alpha1.TeamPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1.HttpPatch"
      }
    },
    "v1alpha1.TeamRoleMap": {
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "teamId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.TeamSpec": {
      "description": "Team specifications",
      "properties": {
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "users": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.TeamSpecSummary": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        }
      }
    },
    "v1alpha1.TeamStatus": {
      "description": "Team status",
      "type": "object"
    },
    "v1alpha1.TeamSummary": {
      "description": "Team summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.TeamSpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.TeamStatus"
        }
      }
    },
    "v1alpha1.Teams": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Team"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.TeamsSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.TeamSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.Tenant": {
      "description": "Tenant",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.TenantSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.TenantStatus"
        }
      }
    },
    "v1alpha1.TenantBasicEntity": {
      "description": "Tenant Basic param",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        }
      }
    },
    "v1alpha1.TenantCleanUpStatus": {
      "description": "Tenant CleanUp Status",
      "type": "object",
      "properties": {
        "cleanUpError": {
          "type": "string"
        },
        "cleanUpStages": {
          "type": "string"
        },
        "cleanUpTimestamp": {
          "$ref": "#/definitions/v1.Time"
        },
        "cleanedResources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isCompleted": {
          "type": "boolean"
        },
        "isInProgress": {
          "type": "boolean"
        }
      }
    },
    "v1alpha1.TenantEntity": {
      "description": "Tenant Entity",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.TenantSpecEntity"
        }
      }
    },
    "v1alpha1.TenantPasswordPolicyEntity": {
      "description": "Tenant Password Policy Entity",
      "type": "object",
      "properties": {
        "creationTimestamp": {
          "$ref": "#/definitions/v1.Time"
        },
        "expiryDurationInDays": {
          "type": "integer"
        },
        "firstReminderInDays": {
          "type": "integer"
        },
        "isRegex": {
          "type": "boolean"
        },
        "minLength": {
          "type": "integer"
        },
        "minNumOfBlockLetters": {
          "type": "integer"
        },
        "minNumOfDigits": {
          "type": "integer"
        },
        "minNumOfSmallLetters": {
          "type": "integer"
        },
        "minNumOfSpecialCharacters": {
          "type": "integer"
        },
        "regex": {
          "type": "string"
        },
        "updateTimestamp": {
          "$ref": "#/definitions/v1.Time"
        }
      }
    },
    "v1alpha1.TenantPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1.HttpPatch"
      }
    },
    "v1alpha1.TenantSamlSpec": {
      "description": "Tenant",
      "type": "object",
      "properties": {
        "acsUrl": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.TenantSamlSpecAttribute"
          }
        },
        "audienceUrl": {
          "description": "same as entity id",
          "type": "string"
        },
        "defaultTeams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entityId": {
          "type": "string"
        },
        "federationMetadata": {
          "type": "string"
        },
        "identityProvider": {
          "type": "string"
        },
        "isSsoEnabled": {
          "type": "boolean"
        },
        "nameIdFormat": {
          "type": "string"
        },
        "serviceProviderMetadata": {
          "type": "string"
        }
      }
    },
    "v1alpha1.TenantSamlSpecAttribute": {
      "type": "object",
      "properties": {
        "attributeValue": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nameFormat": {
          "type": "string"
        }
      }
    },
    "v1alpha1.TenantSpec": {
      "description": "Tenant Spec",
      "type": "object",
      "properties": {
        "authType": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "planUid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.TenantSpecEntity": {
      "description": "Tenant Entity input",
      "type": "object",
      "properties": {
        "authType": {
          "type": "string"
        },
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.TenantStatus": {
      "description": "Tenant Status",
      "type": "object",
      "properties": {
        "cleanUpStatus": {
          "$ref": "#/definitions/v1alpha1.TenantCleanUpStatus"
        },
        "isActive": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.Tenants": {
      "description": "Tenants list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Tenant"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.TenantsAccountsNas": {
      "type": "object",
      "properties": {
        "failures": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "success": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.UidRoleSummary": {
      "type": "object",
      "properties": {
        "inheritedRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UidSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UpdateStrategy": {
      "description": "UpdatesStrategy will be used to translate to RollingUpdateStrategy of a MachineDeployment We'll start with default values for the translation, can expose more details later Following is details of parameters translated from the type ScaleOut =\u003e maxSurge=1, maxUnavailable=0 ScaleIn =\u003e maxSurge=0, maxUnavailable=1",
      "type": "object",
      "properties": {
        "type": {
          "description": "update strategy, either ScaleOut or ScaleIn if empty, will default to RollingUpdateScaleOut",
          "type": "string",
          "enum": [
            "RollingUpdateScaleOut",
            "RollingUpdateScaleIn"
          ]
        }
      }
    },
    "v1alpha1.User": {
      "description": "User",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.UserSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.UserStatus"
        }
      }
    },
    "v1alpha1.UserActivateInfo": {
      "type": "object",
      "properties": {
        "passwordToken": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UserActivateLink": {
      "type": "object",
      "properties": {
        "activationLink": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UserAssetCertificate": {
      "description": "User asset certificate",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.UserAssetCertificateSpec"
        }
      }
    },
    "v1alpha1.UserAssetCertificateSpec": {
      "description": "User asset certificate spec",
      "type": "object",
      "properties": {
        "componentType": {
          "type": "string"
        },
        "componentUid": {
          "type": "string"
        },
        "crt": {
          "type": "string"
        },
        "crtFileName": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "keyFileName": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UserAssetSsh": {
      "description": "User asset ssh",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.UserAssetSshSpec"
        }
      }
    },
    "v1alpha1.UserAssetSshEntity": {
      "description": "User asset input entity for create",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMetaInputEntity"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.UserAssetSshSpec"
        }
      }
    },
    "v1alpha1.UserAssetSshSpec": {
      "description": "User asset ssh spec",
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UserAssetsCertificate": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.UserAssetCertificate"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.UserAssetsSsh": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.UserAssetSsh"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.UserEntity": {
      "description": "User",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.UserSpecEntity"
        }
      }
    },
    "v1alpha1.UserMe": {
      "description": "User information wrt permissions",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.UserSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.UserMeStatus"
        }
      }
    },
    "v1alpha1.UserMeStatus": {
      "description": "User status with permissions",
      "properties": {
        "activationLink": {
          "description": "Contains activation link for the user",
          "type": "string"
        },
        "isActive": {
          "description": "Specifies if user account is active/disabled",
          "type": "boolean"
        },
        "isContractAccepted": {
          "description": "Specifies if user account has accepted the contract",
          "type": "boolean"
        },
        "projectPermissions": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "tenant": {
          "description": "users's tenant information",
          "$ref": "#/definitions/v1alpha1.UserMeTenant"
        },
        "tenantPermissions": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1.UserMeTenant": {
      "type": "object",
      "properties": {
        "orgName": {
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UserMeta": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "org": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UserPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1.HttpPatch"
      }
    },
    "v1alpha1.UserRoleMap": {
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UserRoleUIDs": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.UserRolesEntity": {
      "type": "object",
      "properties": {
        "inheritedRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        }
      }
    },
    "v1alpha1.UserSpec": {
      "description": "User specifications",
      "properties": {
        "emailId": {
          "description": "User's email id",
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.UserSpecEntity": {
      "description": "User Entity input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.UserSpecSummary": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        }
      }
    },
    "v1alpha1.UserStatus": {
      "description": "User status",
      "properties": {
        "isActive": {
          "description": "Specifies if user account is active/disabled",
          "type": "boolean"
        },
        "lastSignIn": {
          "description": "user's last sign in time",
          "$ref": "#/definitions/v1.Time"
        }
      }
    },
    "v1alpha1.UserSummary": {
      "description": "User summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.UserSpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.UserStatus"
        }
      }
    },
    "v1alpha1.UserToken": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "Authorization": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UserUpdateEntity": {
      "description": "User",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.UserUpdateSpecEntity"
        }
      }
    },
    "v1alpha1.UserUpdateSpecEntity": {
      "description": "User Entity input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.Users": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.User"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.UsersSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.UserSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.V1Alpha1SystemAdminEmail": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "v1alpha1.V1Alpha1SystemAdminPasswordResetEntity": {
      "description": "SystemAdmin",
      "type": "object",
      "properties": {
        "newPassword": {
          "type": "string"
        },
        "oldPassword": {
          "type": "string"
        }
      }
    },
    "v1alpha1.VirtualNetwork": {
      "description": "Azure virtual network",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureSubnet"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1alpha1.VsphereAccount": {
      "description": "VSphere account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.VsphereCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.CloudAccountStatus"
        }
      }
    },
    "v1alpha1.VsphereAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.VsphereCloudAccount": {
      "type": "object",
      "required": [
        "vcenterServer",
        "username",
        "password"
      ],
      "properties": {
        "insecure": {
          "description": "Insecure is a flag that controls whether or not to validate the vSphere server's certificate.",
          "type": "boolean",
          "x-omitempty": false
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "vcenterServer": {
          "description": "VcenterServer is the address of the vSphere endpoint",
          "type": "string"
        }
      }
    },
    "v1alpha1.VsphereCloudConfig": {
      "description": "VsphereCloudConfig is the Schema for the vspherecloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.VsphereCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.VsphereCloudConfigStatus"
        }
      }
    },
    "v1alpha1.VsphereCloudConfigSpec": {
      "description": "VsphereCloudConfigSpec defines the desired state of VsphereCloudConfig",
      "type": "object",
      "required": [
        "cloudAccountRef",
        "clusterConfig",
        "machinePoolConfig"
      ],
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains VsphereCloudAccount",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1alpha1.VsphereClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereMachinePoolConfig"
          }
        }
      }
    },
    "v1alpha1.VsphereCloudConfigStatus": {
      "description": "VsphereCloudConfigStatus defines the observed state of VsphereCloudConfig",
      "type": "object",
      "required": [
        "ansibleDigest"
      ],
      "properties": {
        "ansibleDigest": {
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereImage"
          }
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "useCapiImage": {
          "description": "If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      }
    },
    "v1alpha1.VsphereClusterConfig": {
      "type": "object",
      "required": [
        "placement"
      ],
      "properties": {
        "network": {
          "description": "Deprecated. Please use VspherePlacementConfig.Network will delete in a future release",
          "$ref": "#/definitions/v1alpha1.VsphereNetworkConfig"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "placement": {
          "description": "Placement configuration Placement config in ClusterConfig serve as default values for each MachinePool",
          "$ref": "#/definitions/v1alpha1.VspherePlacementConfig"
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys for the 'spectro' user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "staticIp": {
          "description": "whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name",
          "type": "boolean"
        }
      }
    },
    "v1alpha1.VsphereClusterConfigEntity": {
      "type": "object",
      "required": [
        "placement"
      ],
      "properties": {
        "network": {
          "description": "Deprecated. Please use VspherePlacementConfig.Network will delete in a future release",
          "$ref": "#/definitions/v1alpha1.VsphereNetworkConfigEntity"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "placement": {
          "description": "Placement configuration Placement config in ClusterConfig serve as default values for each MachinePool",
          "$ref": "#/definitions/v1alpha1.VspherePlacementConfigEntity"
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys for the 'spectro' user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "staticIp": {
          "description": "whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name",
          "type": "boolean"
        }
      }
    },
    "v1alpha1.VsphereComputeCluster": {
      "description": "Compute cluster resources",
      "type": "object",
      "properties": {
        "computecluster": {
          "description": "Deprecated. Use name",
          "type": "string"
        },
        "datastores": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "networks": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "resourcePools": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.VsphereComputeClusterResources": {
      "description": "Datacenter and its resources like datastore, resoucepool, folders",
      "type": "object",
      "properties": {
        "computecluster": {
          "$ref": "#/definitions/v1alpha1.VsphereComputeCluster"
        },
        "datacenter": {
          "type": "string"
        }
      }
    },
    "v1alpha1.VsphereDatacenter": {
      "description": "Array of Datacenter with computeclusters",
      "type": "object",
      "properties": {
        "computeclusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "datacenter": {
          "type": "string"
        },
        "folders": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.VsphereDatacenterResources": {
      "description": "Datacenter and its resources like datastore, resoucepool, folders",
      "type": "object",
      "properties": {
        "computeclusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereComputeCluster"
          }
        }
      }
    },
    "v1alpha1.VsphereDatacenters": {
      "description": "Array of Datacenters with computeclusters",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereDatacenter"
          }
        }
      }
    },
    "v1alpha1.VsphereImage": {
      "description": "A generated Image should always be a template which resides inside vsphere Will not generate a OVA file out of the image OVA can be used as a base input of the os pack, that's internal to the pack",
      "type": "object",
      "properties": {
        "fullPath": {
          "description": "full path of the image template location it contains datacenter/folder/templatename etc eg: /mydc/vm/template/spectro/workerpool-1-centos",
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.VsphereInstanceType": {
      "type": "object",
      "required": [
        "numCPUs",
        "memoryMiB",
        "diskGiB"
      ],
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a virtual machine's disk, in GiB. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int32"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int64"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of virtual processors in a virtual machine. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.VsphereMachine": {
      "description": "vSphere cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.VsphereMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.CloudMachineStatus"
        }
      }
    },
    "v1alpha1.VsphereMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "instanceType": {
          "$ref": "#/definitions/v1alpha1.VsphereInstanceType"
        },
        "placements": {
          "description": "Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.VspherePlacementConfigEntity"
          }
        }
      }
    },
    "v1alpha1.VsphereMachinePoolConfig": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplate"
        },
        "instanceType": {
          "description": "InstanceType defines the required CPU, Memory, Storage",
          "$ref": "#/definitions/v1alpha1.VsphereInstanceType"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "placements": {
          "description": "Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.VspherePlacementConfig"
          }
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "updateStrategy": {
          "description": "rolling update strategy for this machinepool if not specified, will use ScaleOut",
          "$ref": "#/definitions/v1alpha1.UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.VsphereMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1alpha1.VsphereMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1alpha1.MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1alpha1.MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1alpha1.VsphereMachineSpec": {
      "description": "vSphere cloud VM definition spec",
      "type": "object",
      "required": [
        "vcenterServer",
        "nics",
        "placement"
      ],
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereImage"
          }
        },
        "instanceType": {
          "$ref": "#/definitions/v1alpha1.VsphereInstanceType"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereNic"
          }
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "placement": {
          "description": "Placement configuration",
          "$ref": "#/definitions/v1alpha1.VspherePlacementConfig"
        },
        "vcenterServer": {
          "description": "VcenterServer is the address of the vSphere endpoint",
          "type": "string"
        }
      }
    },
    "v1alpha1.VsphereMachines": {
      "description": "vSphere machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.VsphereNetworkConfig": {
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "ipPool": {
          "description": "when staticIP=true, need to provide IPPool",
          "$ref": "#/definitions/v1alpha1.IPPool"
        },
        "networkName": {
          "description": "NetworkName is the name of the network in which VMs are created/located.",
          "type": "string"
        },
        "parentPoolRef": {
          "description": "ParentPoolRef reference to the ParentPool which allocates IPs for this IPPool",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "staticIp": {
          "description": "support dhcp or static IP, if false, use DHCP",
          "type": "boolean"
        }
      }
    },
    "v1alpha1.VsphereNetworkConfigEntity": {
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "networkName": {
          "description": "NetworkName is the name of the network in which VMs are created/located.",
          "type": "string"
        },
        "parentPoolUid": {
          "description": "ParentPoolRef Uid to the ParentPool which allocates IPs for this IPPool",
          "type": "string"
        },
        "staticIp": {
          "description": "support dhcp or static IP, if false, use DHCP",
          "type": "boolean"
        }
      }
    },
    "v1alpha1.VsphereNic": {
      "description": "vSphere network interface",
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "macAddress": {
          "type": "string"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.VsphereOverlordClusterConfigEntity": {
      "type": "object",
      "properties": {
        "network": {
          "description": "Deprecated. Please use VspherePlacementConfig.Network will delete in a future release",
          "$ref": "#/definitions/v1alpha1.VsphereNetworkConfigEntity"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "placement": {
          "description": "Deprecated. Use Placements array object. Placement configuration in ClusterConfig serve as default values for each MachinePool",
          "$ref": "#/definitions/v1alpha1.VspherePlacementConfigEntity"
        },
        "placements": {
          "description": "Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.VspherePlacementConfigEntity"
          }
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys for the 'spectro' user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "staticIp": {
          "description": "whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name",
          "type": "boolean"
        }
      }
    },
    "v1alpha1.VspherePlacementConfig": {
      "description": "Both ClusterConfig and MachinePoolConfig will have PlacementConfig MachinePoolconfig.Placements will overwrite values defined in ClusterConfig Currently the convention is: Datacenter / Folder / ImageTemplateFolder / Network should be defined at ClusterConfig Cluster / ResourcePool / Datastore / Network is defined at MachinePool ClusterConfig Network should only indicate use DHCP or not MachinePool Network should contain the actual network and IPPool",
      "type": "object",
      "properties": {
        "cluster": {
          "description": "Cluster is the computecluster in vsphere",
          "type": "string"
        },
        "datacenter": {
          "description": "Datacenter is the name or inventory path of the datacenter where this machine's VM is created/located.",
          "type": "string"
        },
        "datastore": {
          "description": "Datastore is the datastore in which VMs are created/located.",
          "type": "string"
        },
        "folder": {
          "description": "Folder is the folder in which VMs are created/located.",
          "type": "string"
        },
        "imageTemplateFolder": {
          "description": "ImageTemplateFolder is the folder in which VMs templates are created/located. if empty will use default value spectro-templates",
          "type": "string"
        },
        "network": {
          "description": "network info",
          "$ref": "#/definitions/v1alpha1.VsphereNetworkConfig"
        },
        "resourcePool": {
          "description": "ResourcePool is the resource pool within the above computecluster Cluster",
          "type": "string"
        },
        "uid": {
          "description": "UID for this placement",
          "type": "string"
        }
      }
    },
    "v1alpha1.VspherePlacementConfigEntity": {
      "description": "Both ClusterConfig and MachinePoolConfig will have PlacementConfig MachinePoolconfig.Placements will overwrite values defined in ClusterConfig Currently the convention is: Datacenter / Folder / ImageTemplateFolder / Network should be defined at ClusterConfig Cluster / ResourcePool / Datastore / Network is defined at MachinePool ClusterConfig Network should only indicate use DHCP or not MachinePool Network should contain the actual network and IPPool",
      "type": "object",
      "properties": {
        "cluster": {
          "description": "Cluster is the computecluster in vsphere",
          "type": "string"
        },
        "datacenter": {
          "description": "Datacenter is the name or inventory path of the datacenter where this machine's VM is created/located.",
          "type": "string"
        },
        "datastore": {
          "description": "Datastore is the datastore in which VMs are created/located.",
          "type": "string"
        },
        "folder": {
          "description": "Folder is the folder in which VMs are created/located.",
          "type": "string"
        },
        "imageTemplateFolder": {
          "description": "ImageTemplateFolder is the folder in which VMs templates are created/located. if empty will use default value spectro-templates",
          "type": "string"
        },
        "network": {
          "description": "network info",
          "$ref": "#/definitions/v1alpha1.VsphereNetworkConfigEntity"
        },
        "resourcePool": {
          "description": "ResourcePool is the resource pool within the above computecluster Cluster",
          "type": "string"
        },
        "uid": {
          "description": "UID for this placement",
          "type": "string"
        }
      }
    },
    "v1alpha1.ZoneEntity": {
      "description": "Azure zone entity",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "v1alpha1ActiveTenantResources": {
      "description": "Active resources of tenant",
      "type": "object",
      "properties": {
        "activeResources": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1AlertEntity": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Channel"
          }
        }
      }
    },
    "v1alpha1ApiEndpoint": {
      "description": "APIEndpoint represents a reachable Kubernetes API endpoint.",
      "type": "object",
      "required": [
        "host",
        "port"
      ],
      "properties": {
        "host": {
          "description": "The hostname on which the API server is serving.",
          "type": "string"
        },
        "port": {
          "description": "The port on which the API server is serving.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1AwsCloudAccount": {
      "type": "object",
      "required": [
        "accessKey",
        "secretKey"
      ],
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "v1alpha1AwsMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64",
          "maximum": 2000,
          "minimum": 1
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1AwsSubnetEntity"
          }
        }
      }
    },
    "v1alpha1AwsMachinePoolConfigEntities": {
      "description": "Update request for the AWS Spectro cluster",
      "type": "object",
      "properties": {
        "spec": {
          "type": "object",
          "required": [
            "machinePoolConfig"
          ],
          "properties": {
            "machinePoolConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1AwsMachinePoolConfigEntity"
              }
            }
          }
        }
      }
    },
    "v1alpha1AwsMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1alpha1AwsMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1alpha1MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1alpha1MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1alpha1AwsSubnetEntity": {
      "properties": {
        "az": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1alpha1AzureCloudAccount": {
      "type": "object",
      "required": [
        "tenantId",
        "clientId",
        "clientSecret"
      ],
      "properties": {
        "clientId": {
          "description": "Client ID(Directory ID) is a unique identifier generated by Azure AD that is tied to an application",
          "type": "string"
        },
        "clientSecret": {
          "description": "ClientSecret is the secret associated with Client",
          "type": "string"
        },
        "tenantId": {
          "description": "Tenant ID is the ID for the Azure AD tenant that the user belongs to.",
          "type": "string"
        }
      }
    },
    "v1alpha1AzureMachinePoolCloudConfigEntity": {
      "type": "object",
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "description": "Instance type stands for VMSize in Azure",
          "type": "string"
        },
        "osDisk": {
          "$ref": "#/definitions/v1alpha1AzureOSDisk"
        }
      }
    },
    "v1alpha1AzureMachinePoolConfigEntities": {
      "description": "Update request for the Azure Spectro cluster",
      "type": "object",
      "properties": {
        "spec": {
          "type": "object",
          "required": [
            "machinePoolConfig"
          ],
          "properties": {
            "machinePoolConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1AzureMachinePoolConfigEntity"
              }
            }
          }
        }
      }
    },
    "v1alpha1AzureMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1alpha1AzureMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1alpha1MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1alpha1MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1alpha1AzureOSDisk": {
      "type": "object",
      "properties": {
        "diskSizeGB": {
          "type": "integer",
          "format": "int32"
        },
        "managedDisk": {
          "$ref": "#/definitions/v1alpha1ManagedDisk"
        },
        "osType": {
          "type": "string",
          "enum": [
            "linux",
            "windows"
          ]
        }
      }
    },
    "v1alpha1Channel": {
      "type": "object",
      "properties": {
        "alertAllUsers": {
          "type": "boolean",
          "x-omitempty": false
        },
        "identifiers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "email",
            "app"
          ]
        }
      }
    },
    "v1alpha1CloudAccountStatus": {
      "description": "Status of the account",
      "type": "object",
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1ClusterCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1alpha1ClusterProfileTemplate": {
      "description": "ClusterProfileTemplate contains details of a clusterprofile definition",
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string",
          "enum": [
            "aws",
            "gcp",
            "azure",
            "vsphere",
            "openstack",
            "baremetal",
            "all"
          ]
        },
        "packServerRefs": {
          "description": "PackServerRefs is only used on Hubble side it is reference to pack registry servers which PackRef belongs to in hubble, pack server is a top level object, so use a reference to point to it packs within a clusterprofile can come from different pack servers, so this is an array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        },
        "packServerSecret": {
          "description": "This secret is used only on Palette side use case is similar  to k8s image pull secret this single secret internally should contains all the pack servers in PackServerRefs if empty, means no credential is needed to access the pack server For spectro saas, Ally will set this field before pass to palette",
          "type": "string"
        },
        "packs": {
          "description": "Packs definitions here are final definitions. If ClonedFrom and ParamsOverwrite is present, then Packs are the final merge result of ClonedFrom and ParamsOverwrite So orchestration engine will just take the Packs and do the work, no need to worry about parameters merge",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1PackRef"
          }
        },
        "type": {
          "type": "string"
        },
        "version": {
          "description": "version start from 0, matching the index of ClusterProfileSpec.Versions[] will be used by clusterSpec to identify which version is applied to the cluster",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1FileUploadResponse": {
      "description": "File upload response",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1LoadBalancerService": {
      "type": "object",
      "properties": {
        "host": {
          "description": "IP or Host from svc.Status.LoadBalancerStatus.Ingress",
          "type": "string"
        },
        "name": {
          "description": "name of the loadbalancer service",
          "type": "string"
        },
        "ports": {
          "description": "port this service exposed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ServicePort"
          }
        }
      }
    },
    "v1alpha1MachinePoolConfigEntity": {
      "description": "Machine pool configuration API entity",
      "type": "object",
      "required": [
        "name",
        "size",
        "labels"
      ],
      "properties": {
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "updateStrategy": {
          "$ref": "#/definitions/v1alpha1UpdateStrategy"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1MachinePoolProfileConfigEntity": {
      "type": "object",
      "required": [
        "infraProfileUid"
      ],
      "properties": {
        "infraProfileUid": {
          "description": "InfraClusterProfile uid for the machine pool",
          "type": "string"
        },
        "packValues": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1PackValuesEntity"
          }
        }
      }
    },
    "v1alpha1ManagedDisk": {
      "description": "Azure Machine Spec Managed Disk",
      "properties": {
        "storageAccountType": {
          "type": "string"
        }
      }
    },
    "v1alpha1MsgSubscriber": {
      "description": "Message subscriber request",
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1alpha1PackParamsEntity": {
      "description": "Pack input params",
      "properties": {
        "references": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1PackPreset": {
      "description": "PackPreset defines the preset pack values",
      "type": "object",
      "properties": {
        "add": {
          "type": "string",
          "x-omitempty": false
        },
        "displayName": {
          "type": "string",
          "x-omitempty": false
        },
        "group": {
          "type": "string",
          "x-omitempty": false
        },
        "name": {
          "type": "string",
          "x-omitempty": false
        },
        "remove": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        }
      }
    },
    "v1alpha1PackRef": {
      "description": "PackRef server/name:tag to point to a pack PackRef is used when construct a ClusterProfile PackSpec is used for UI to render the parameters form ClusterProfile will not know inner details of a pack ClusterProfile only contain pack name:tag, and the param values user entered for it",
      "type": "object",
      "required": [
        "layer",
        "name"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations is used to allow packref to add more arbitrary information one example is to add git reference for values.yaml",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "digest": {
          "description": "digest is used to specify the version should be installed by palette when pack upgrade available, change this digest to trigger upgrade",
          "type": "string"
        },
        "inValidReason": {
          "type": "string"
        },
        "isInvalid": {
          "description": "pack is invalid when the associated tag is deleted from the registry",
          "type": "boolean"
        },
        "layer": {
          "type": "string",
          "enum": [
            "kernel",
            "os",
            "k8s",
            "cni",
            "csi",
            "addon"
          ]
        },
        "name": {
          "description": "pack name",
          "type": "string"
        },
        "packUid": {
          "description": "PackUID is Hubble packUID, not palette Pack.UID It is used by Hubble only.",
          "type": "string"
        },
        "params": {
          "description": "params passed as env variables to be consumed at installation time",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "presets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1PackPreset"
          }
        },
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1PackSchema"
          }
        },
        "server": {
          "description": "pack registry server",
          "type": "string"
        },
        "tag": {
          "description": "pack tag",
          "type": "string"
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        },
        "version": {
          "description": "pack version",
          "type": "string"
        }
      }
    },
    "v1alpha1PackResolvedValues": {
      "description": "Resolved packs values",
      "properties": {
        "resolved": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1PackSchema": {
      "description": "PackSchema defines the schema definition, hints for the pack values",
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "x-omitempty": false
        },
        "hints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "listOptions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": false
        },
        "name": {
          "type": "string",
          "x-omitempty": false
        },
        "regex": {
          "type": "string",
          "x-omitempty": false
        },
        "required": {
          "type": "boolean",
          "x-omitempty": false
        },
        "type": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1PackValuesEntity": {
      "description": "Pack values entity to refer the existing pack for the values overrride",
      "type": "object",
      "required": [
        "tag",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "values": {
          "type": "string"
        }
      }
    },
    "v1alpha1Plan": {
      "description": "Plan",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1PlanSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1PlanStatus"
        }
      }
    },
    "v1alpha1PlanCost": {
      "description": "Plan Cost",
      "properties": {
        "discount": {
          "type": "number",
          "format": "float",
          "x-omitempty": false
        },
        "price": {
          "type": "number",
          "format": "float",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1PlanCpuCoreHoursUsages": {
      "type": "object",
      "properties": {
        "hourlyUsages": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1ResourceUsage"
          }
        }
      }
    },
    "v1alpha1PlanCredit": {
      "description": "Plan Credit",
      "properties": {
        "cpuCoreHours": {
          "type": "number",
          "format": "int64",
          "x-omitempty": false
        },
        "creditUid": {
          "type": "string"
        },
        "expiry": {
          "$ref": "#/definitions/v1Time"
        },
        "start": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1alpha1PlanLimit": {
      "description": "Monthly Plan Limit",
      "properties": {
        "cpuCoreHours": {
          "description": "cpu cores hours",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "isOnDemand": {
          "description": "is onDemand plan and has no limit",
          "type": "boolean",
          "x-omitempty": false
        },
        "overageLimitPercentage": {
          "description": "overage limit in percentage",
          "type": "integer",
          "format": "int8",
          "default": 25,
          "x-omitempty": false
        },
        "warnLimitPercentage": {
          "description": "warning limit in percentage",
          "type": "integer",
          "format": "int8",
          "default": 90,
          "x-omitempty": false
        }
      }
    },
    "v1alpha1PlanMonthlyUsage": {
      "description": "Plan monthly usage entity",
      "properties": {
        "dailyUsages": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1ResourceUsage"
          }
        },
        "month": {
          "$ref": "#/definitions/v1Time"
        },
        "planLimit": {
          "$ref": "#/definitions/v1alpha1PlanLimit"
        },
        "planType": {
          "type": "string",
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ]
        },
        "planUid": {
          "type": "string"
        },
        "totalMonthlyUsage": {
          "$ref": "#/definitions/v1alpha1TotalResourceUsage"
        }
      }
    },
    "v1alpha1PlanMonthlyUsages": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1PlanMonthlyUsage"
          }
        }
      }
    },
    "v1alpha1PlanRenewal": {
      "description": "Plan Renewal",
      "required": [
        "type",
        "start",
        "expiry"
      ],
      "properties": {
        "expiry": {
          "$ref": "#/definitions/v1Time"
        },
        "planLimit": {
          "$ref": "#/definitions/v1alpha1PlanLimit"
        },
        "start": {
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string",
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ]
        }
      }
    },
    "v1alpha1PlanSpec": {
      "description": "Plan specifications",
      "required": [
        "type",
        "start",
        "expiry"
      ],
      "properties": {
        "cost": {
          "$ref": "#/definitions/v1alpha1PlanCost"
        },
        "expiry": {
          "$ref": "#/definitions/v1Time"
        },
        "freeCredits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1PlanCredit"
          }
        },
        "planLimit": {
          "$ref": "#/definitions/v1alpha1PlanLimit"
        },
        "renewal": {
          "$ref": "#/definitions/v1alpha1PlanRenewal"
        },
        "slaCredits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1PlanCredit"
          }
        },
        "start": {
          "$ref": "#/definitions/v1Time"
        },
        "type": {
          "type": "string",
          "enum": [
            "Trial",
            "MonthlyOnDemand",
            "AnnualSubscription"
          ]
        }
      }
    },
    "v1alpha1PlanStatus": {
      "type": "object",
      "properties": {
        "changeLogs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1ProjectMeta": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1ProjectResourceUsage": {
      "description": "project resource usage",
      "properties": {
        "cpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        },
        "project": {
          "$ref": "#/definitions/v1alpha1ProjectMeta"
        }
      }
    },
    "v1alpha1ProjectRolesEntity": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1UidRoleSummary"
          }
        }
      }
    },
    "v1alpha1ProjectRolesPatch": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "projectUid": {
                "type": "string"
              },
              "roles": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "v1alpha1ResourceUsage": {
      "description": "ResourceUsage",
      "properties": {
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1ProjectResourceUsage"
          }
        },
        "timestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "totalCpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1ServicePort": {
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "port": {
          "description": "The port that will be exposed by this service.",
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "v1alpha1SpectroCluster": {
      "description": "SpectroCluster is the Schema for the spectroclusters API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1SpectroClusterSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1SpectroClusterStatus"
        }
      }
    },
    "v1alpha1SpectroClusterSpec": {
      "description": "SpectroClusterSpec defines the desired state of SpectroCluster",
      "type": "object",
      "properties": {
        "cloudConfigRef": {
          "$ref": "#/definitions/v1ObjectReference"
        },
        "cloudType": {
          "type": "string",
          "enum": [
            "aws",
            "gcp",
            "azure",
            "vsphere",
            "openstack",
            "baremetal",
            "all"
          ]
        },
        "clusterProfileRef": {
          "$ref": "#/definitions/v1ObjectReference"
        },
        "clusterProfileTemplate": {
          "$ref": "#/definitions/v1alpha1ClusterProfileTemplate"
        }
      }
    },
    "v1alpha1SpectroClusterStatus": {
      "description": "SpectroClusterStatus",
      "type": "object",
      "properties": {
        "apiEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ApiEndpoint"
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ClusterCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1LoadBalancerService"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "state": {
          "description": "current operational state",
          "type": "string"
        }
      }
    },
    "v1alpha1SpectroVsphereClusterEntity": {
      "description": "Spectro vSphere cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudAccountUid",
            "cloudConfig",
            "profileUid"
          ],
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1alpha1VsphereClusterConfigEntity"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1VsphereMachinePoolConfigEntity"
              }
            },
            "packValues": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/v1alpha1PackValuesEntity"
              }
            },
            "profileUid": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1TotalResourceUsage": {
      "description": "Total Resource Usage",
      "properties": {
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1ProjectResourceUsage"
          }
        },
        "totalCpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1UidRoleSummary": {
      "type": "object",
      "properties": {
        "inheritedRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1UidSummary"
          }
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1UidSummary"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1UidSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1UpdateStrategy": {
      "description": "UpdatesStrategy will be used to translate to RollingUpdateStrategy of a MachineDeployment We'll start with default values for the translation, can expose more details later Following is details of parameters translated from the type ScaleOut =\u003e maxSurge=1, maxUnavailable=0 ScaleIn =\u003e maxSurge=0, maxUnavailable=1",
      "type": "object",
      "properties": {
        "type": {
          "description": "update strategy, either ScaleOut or ScaleIn if empty, will default to RollingUpdateScaleOut",
          "type": "string",
          "enum": [
            "RollingUpdateScaleOut",
            "RollingUpdateScaleIn"
          ]
        }
      }
    },
    "v1alpha1UpdateTenantStatus": {
      "description": "Update tenant status",
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "stage": {
          "type": "string"
        }
      }
    },
    "v1alpha1User": {
      "description": "User",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1UserSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1UserStatus"
        }
      }
    },
    "v1alpha1UserEntity": {
      "description": "User",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1UserSpecEntity"
        }
      }
    },
    "v1alpha1UserSpec": {
      "description": "User specifications",
      "properties": {
        "emailId": {
          "description": "User's email id",
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1UserSpecEntity": {
      "description": "User Entity input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1UserStatus": {
      "description": "User status",
      "properties": {
        "isActive": {
          "description": "Specifies if user account is active/disabled",
          "type": "boolean"
        },
        "lastSignIn": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1alpha1VsphereAccount": {
      "description": "VSphere account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1VsphereCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1CloudAccountStatus"
        }
      }
    },
    "v1alpha1VsphereCloudAccount": {
      "type": "object",
      "required": [
        "vcenterServer",
        "username",
        "password"
      ],
      "properties": {
        "insecure": {
          "description": "Insecure is a flag that controls whether or not to validate the vSphere server's certificate.",
          "type": "boolean",
          "x-omitempty": false
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "vcenterServer": {
          "description": "VcenterServer is the address of the vSphere endpoint",
          "type": "string"
        }
      }
    },
    "v1alpha1VsphereClusterConfigEntity": {
      "type": "object",
      "required": [
        "placement"
      ],
      "properties": {
        "network": {
          "$ref": "#/definitions/v1alpha1VsphereNetworkConfigEntity"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "placement": {
          "$ref": "#/definitions/v1alpha1VspherePlacementConfigEntity"
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys for the 'spectro' user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "staticIp": {
          "description": "whether this cluster should use dhcp or static IP, if false, use DHCP if this is set, then all machinepools should have staticIP with provided IPPool adding this as an additional standalone flag without relating to placement.Nework main reason is to enable more validation for placement.Network.StaticIP which should come together with valid Network.IPPool and Network.Name",
          "type": "boolean"
        }
      }
    },
    "v1alpha1VsphereComputeCluster": {
      "description": "Compute cluster resources",
      "type": "object",
      "properties": {
        "computecluster": {
          "description": "Deprecated. Use name",
          "type": "string"
        },
        "datastores": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "networks": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "resourcePools": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1VsphereComputeClusterResources": {
      "description": "Datacenter and its resources like datastore, resoucepool, folders",
      "type": "object",
      "properties": {
        "computecluster": {
          "$ref": "#/definitions/v1alpha1VsphereComputeCluster"
        },
        "datacenter": {
          "type": "string"
        }
      }
    },
    "v1alpha1VsphereDatacenter": {
      "description": "Array of Datacenter with computeclusters",
      "type": "object",
      "properties": {
        "computeclusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "datacenter": {
          "type": "string"
        },
        "folders": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1VsphereDatacenterResources": {
      "description": "Datacenter and its resources like datastore, resoucepool, folders",
      "type": "object",
      "properties": {
        "computeclusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1VsphereComputeCluster"
          }
        }
      }
    },
    "v1alpha1VsphereDatacenters": {
      "description": "Array of Datacenters with computeclusters",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1VsphereDatacenter"
          }
        }
      }
    },
    "v1alpha1VsphereInstanceType": {
      "type": "object",
      "required": [
        "numCPUs",
        "memoryMiB",
        "diskGiB"
      ],
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a virtual machine's disk, in GiB. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int32"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int64"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of virtual processors in a virtual machine. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1VsphereMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "instanceType": {
          "$ref": "#/definitions/v1alpha1VsphereInstanceType"
        },
        "placements": {
          "description": "Placements configuration Placements If defined, will replace default values defined in VsphereClusterConfig Array means one MachinePool can span across multiple vsphere compute cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1VspherePlacementConfigEntity"
          }
        }
      }
    },
    "v1alpha1VsphereMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1alpha1VsphereMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1alpha1MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1alpha1MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1alpha1VsphereNetworkConfigEntity": {
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "networkName": {
          "description": "NetworkName is the name of the network in which VMs are created/located.",
          "type": "string"
        },
        "parentPoolUid": {
          "description": "ParentPoolRef Uid to the ParentPool which allocates IPs for this IPPool",
          "type": "string"
        },
        "staticIp": {
          "description": "support dhcp or static IP, if false, use DHCP",
          "type": "boolean"
        }
      }
    },
    "v1alpha1VspherePlacementConfigEntity": {
      "description": "Both ClusterConfig and MachinePoolConfig will have PlacementConfig MachinePoolconfig.Placements will overwrite values defined in ClusterConfig Currently the convention is: Datacenter / Folder / ImageTemplateFolder / Network should be defined at ClusterConfig Cluster / ResourcePool / Datastore / Network is defined at MachinePool ClusterConfig Network should only indicate use DHCP or not MachinePool Network should contain the actual network and IPPool",
      "type": "object",
      "properties": {
        "cluster": {
          "description": "Cluster is the computecluster in vsphere",
          "type": "string"
        },
        "datacenter": {
          "description": "Datacenter is the name or inventory path of the datacenter where this machine's VM is created/located.",
          "type": "string"
        },
        "datastore": {
          "description": "Datastore is the datastore in which VMs are created/located.",
          "type": "string"
        },
        "folder": {
          "description": "Folder is the folder in which VMs are created/located.",
          "type": "string"
        },
        "imageTemplateFolder": {
          "description": "ImageTemplateFolder is the folder in which VMs templates are created/located. if empty will use default value spectro-templates",
          "type": "string"
        },
        "network": {
          "$ref": "#/definitions/v1alpha1VsphereNetworkConfigEntity"
        },
        "resourcePool": {
          "description": "ResourcePool is the resource pool within the above computecluster Cluster",
          "type": "string"
        },
        "uid": {
          "description": "UID for this placement",
          "type": "string"
        }
      }
    }
  }
}